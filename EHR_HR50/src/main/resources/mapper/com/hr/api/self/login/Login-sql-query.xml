<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="api.self.login">

	<select parameterType="map" resultType="cMap" id="getLoginSelf">

		SELECT
		   A.SABUN									AS SSN_SABUN		--사번
			, A.ENTER_CD								AS SSN_ENTER_CD		--회사코드
			, E.ENTER_NM								AS SSN_ENTER_NM		--회사명
-- 			, E.ENTER_ENG_NM							AS SSN_ENTER_ENG_NM	--회사영문명
			, E.ALIAS									AS SSN_ALIAS		--회사 ALIAS
			, E.COPYRIGHT								AS SSN_COPYRIGHT	--회사 COPYRIGHT
			, F_COM_GET_NAMES( A.ENTER_CD, A.SABUN, #{ssnLocaleCd})									AS SSN_NAME			--성명
			, B.ORG_CD									AS SSN_ORG_CD		--조직코드
			, F_COM_GET_GRCODE_NAME(B.ENTER_CD, 'H20030' , B.JIKWEE_CD, #{ssnLocaleCd}) AS SSN_JIKWEE_NM
			, F_COM_GET_GRCODE_NAME(B.ENTER_CD, 'H20010' , B.JIKGUB_CD, #{ssnLocaleCd}) AS SSN_JIKGUB_NM
			, F_COM_GET_GRCODE_NAME(B.ENTER_CD, 'H20020' , B.JIKCHAK_CD, #{ssnLocaleCd}) AS SSN_JIKCHAK_NM
			, F_COM_GET_GRCODE_NAME(B.ENTER_CD, 'H10050' , B.JIKCHAK_CD, #{ssnLocaleCd}) AS SSN_WORK_TYPE_NM
			, F_COM_GET_ORG_NM(B.ENTER_CD, B.ORG_CD , TO_CHAR(SYSDATE,'YYYYMMDD'), #{ssnLocaleCd}) AS SSN_ORG_NM
			, TO_CHAR(SYSDATE, 'YYYYMMDD')				AS SSN_BASE_DATE
-- 			, CASE 	WHEN D.CHKDATE >= ADD_MONTHS(SYSDATE,-NVL(H.ATTRIBUTE_3,1)) THEN 'N'
-- 			WHEN D.CHKDATE <![CDATA[<]]>  ADD_MONTHS(SYSDATE,-NVL(H.ATTRIBUTE_3,1)) THEN 'Y'
-- 			END 										AS SSN_PW_EDIT_YN
			, NVL(D.SKIN_TYPE, 'blue') 					AS SSN_SKIN_TYPE
			, NVL(D.FONT_TYPE, 'nanum') 					AS SSN_FONT_TYPE
			, NVL(D.MAIN_TYPE, 'M') 					AS SSN_MAIN_TYPE
			, NVL(D.WIDGET_TYPE, 'A') 					AS SSN_WIDGET_TYPE
-- 			, NVL(F_COM_GET_LAST_LOGIN_DATE(D.ENTER_CD,A.SABUN), TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI')) AS SSN_LAST_LOGIN
-- 			, F_SYS_GET_PRIVACY_AGREEMENT_YN(A.ENTER_CD,TO_CHAR(SYSDATE,'YYYYMMDD'), A.SABUN, NULL) AS SSN_PRIVACY_AGREEMENT_YN
			, F_SEC_GET_ENCODED_KEY AS SSN_ENCODED_KEY
			, NVL(#{localeCd}, #{baseLang}) AS SSN_LOCALE_CD
			, NVL(E.LANG_USE_YN, '0') AS SSN_LANG_USE_YN
			, DECODE((SELECT SABUN FROM TPAP993 WHERE ENTER_CD = A.ENTER_CD AND SABUN = A.SABUN),'','N','Y') AS SSN_PAP_ADMIN_YN
			, F_COM_GET_ADMIN_GRP_YN(A.ENTER_CD, A.SABUN) AS SSN_ADMIN_GRP_YN  -- 관리자 그룹 보유 여부
			, NVL(F_COM_GET_STD_CD_VALUE(A.ENTER_CD , 'SYS_COMPANY_MGR_YN'),'N') AS SSN_COMPANY_MGR_YN
			, NVL(F_COM_GET_STD_CD_VALUE(A.ENTER_CD , 'SYS_FILE_DOWN_SET_PWD'),'N') AS SSN_FILE_DOWN_SET_PWD -- 다운로드 암호 설정 여부
			, NVL(CRYPTIT.DECRYPT(D.PASSWORD_DOWNLOAD, D.ENTER_CD), A.SABUN) AS SSN_FILE_DOWN_PWD
			, NVL(F_COM_GET_STD_CD_VALUE(A.ENTER_CD , 'SYS_FILE_DOWN_REG_REASON'),'N') AS SSN_FILE_DOWN_REG_REASON -- 다운로드 사유등록 여부
			, NVL(F_COM_GET_STD_CD_VALUE(A.ENTER_CD , 'SYS_FILE_DOWN_MOBILE_YN'),'N') AS SSN_FILE_DOWN_MOBILE_YN -- 모바일 파일 다운로드 허용 여부
			, NVL(F_COM_GET_STD_CD_VALUE(A.ENTER_CD , 'SYS_CHATBOT_YN'),'N') AS SSN_CHATBOT_YN -- 챗봇 사용 여부
			, 'N' AS SSN_ENTER_ALL_YN
			, 'N' AS SSN_PRE_SRCH_YN
			, 'Y' AS SSN_RET_SRCH_YN
			, 'N' AS SSN_RES_SRCH_YN
			, D.ID AS SSN_USER_ID
		FROM THRM100 A
		INNER JOIN THRM151 B
		ON A.ENTER_CD  = B.ENTER_CD
		AND A.SABUN 	= B.SABUN
		AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN B.SDATE AND NVL(B.EDATE, '99991231')
		INNER JOIN TSYS305 D
		ON A.ENTER_CD 	= D.ENTER_CD
		AND A.SABUN 	= D.SABUN
		INNER JOIN TORG900 E
		ON A.ENTER_CD  = E.ENTER_CD
		INNER JOIN THRM124 F
		ON A.ENTER_CD  = F.ENTER_CD
		AND A.SABUN = F.SABUN
		LEFT OUTER JOIN TORG999 H
		ON A.ENTER_CD 	= H.ENTER_CD
		WHERE 1=1
		<if test="birYmd != null and birYmd neq '' and name != null and name neq '' and phoneNo != null and phoneNo neq ''">
			AND A.BIR_YMD = #{birYmd}
			AND A.NAME = #{name}
			AND REPLACE(F.CONT_ADDRESS, '-', '') = REPLACE(#{phoneNo}, '-', '')
		</if>
		<if test="ssnSabun != null and ssnSabun neq '' and ssnEnterCd != null and ssnEnterCd neq ''">
			AND A.SABUN = #{ssnSabun}
			AND A.ENTER_CD = #{ssnEnterCd}
		</if>
		<if test="loginSabun != null and loginSabun neq ''">
			AND A.SABUN = #{loginSabun}
		</if>
		AND ROWNUM = 1
	</select>

</mapper>