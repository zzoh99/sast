<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="pap.config.appScheduleMgr">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getAppScheduleMgrList">

				<![CDATA[
					SELECT APPRAISAL_NM
					          , ENTER_CD
					          , APPRAISAL_CD
					          , APP_STEP_CD
					          , APP_AS_YMD
					          , APP_AE_YMD
					          , D_BASE_YMD
					          , NOTE
					          , '0' TEMP1
					  FROM (SELECT ROWNUM AS RNUM
			                      , APPRAISAL_NM
			                      , ENTER_CD
			                      , APPRAISAL_CD
			                      , APP_STEP_CD
			                      , APP_AS_YMD
			                      , APP_AE_YMD
			                      , D_BASE_YMD
			                      , NOTE
					          FROM (  SELECT A.APPRAISAL_NM
			                               	, B.ENTER_CD
			                                ,   B.APPRAISAL_CD
			                                ,   B .APP_STEP_CD
			                                ,   B.APP_AS_YMD
			                                ,   B.APP_AE_YMD
			                                ,   B.D_BASE_YMD
			                                ,   B.NOTE
						                FROM TPAP101 A, TPAP105 B
						               WHERE B.ENTER_CD = TRIM(#{ssnEnterCd})
						                 AND B.APPRAISAL_CD = TRIM(#{appraisalCd})
						                 AND A.ENTER_CD = B.ENTER_CD
						                 AND A.APPRAISAL_CD = B.APPRAISAL_CD
						            ORDER BY APPRAISAL_YY DESC
			           			           ,  APP_TIME_CD DESC
		                               	   ,  F_COM_GET_GRCODE_SEQ (ENTER_CD
		                                   , 'P10003'
		                                   ,  APP_TYPE_CD)
		                                   , APP_S_YMD DESC
		                                   , APP_E_YMD DESC
		                                   , APPRAISAL_CD))
				]]>


		</select>
		
		
		<select parameterType="map" resultType="cMap" id="getAppScheduleMgrPopList">

				<![CDATA[
					SELECT   A.APPRAISAL_CD
							,A.APP_STEP_CD
							,A.APPRAISAL_SEQ
							,A.APP_AS_YMD
							,A.APP_AE_YMD
					  FROM   TPAP104 A                 
					 WHERE   A.ENTER_CD = #{ssnEnterCd}
					   AND   A.APPRAISAL_CD = #{searchAppraisalCd}
					   AND   A.APP_STEP_CD  = #{searchAppStepCd}
				]]>


		</select>
		
		
		
<!-- 		저장 -->	
		<update parameterType="map" id="saveAppScheduleMgr">

				<![CDATA[ 
					MERGE INTO TPAP105 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.APPRAISAL_CD
									, A.APP_STEP_CD
									, A.APP_AS_YMD
									, A.APP_AE_YMD
									, A.D_BASE_YMD
									, A.NOTE
							FROM	(
									SELECT	  NULL	AS ENTER_CD
											, NULL	AS APPRAISAL_CD
											, NULL	AS APP_STEP_CD
											, NULL	AS APP_AS_YMD
											, NULL	AS APP_AE_YMD
											, NULL	AS D_BASE_YMD
											, NULL	AS NOTE
									FROM	DUAL
									]]>
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											  #{ssnEnterCd}				AS ENTER_CD
											, TRIM( #{rm.appraisalCd} )	AS APPRAISAL_CD
											, TRIM( #{rm.appStepCd} )	AS APP_STEP_CD
											, TRIM( #{rm.appAsYmd})	AS APP_AS_YMD
											, TRIM( #{rm.appAeYmd})	AS APP_AE_YMD
											, TRIM( #{rm.dBaseYmd})	AS D_BASE_YMD
											, TRIM( #{rm.note})	    AS NOTE
											FROM   DUAL
</foreach>
									) A WHERE ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD		= S.ENTER_CD
					AND  T.APPRAISAL_CD = S.APPRAISAL_CD
					AND  T.APP_STEP_CD  = S.APP_STEP_CD
					 )
					WHEN MATCHED THEN
						UPDATE SET	     
									  T.APP_AS_YMD    	= S.APP_AS_YMD  
			                    	, T.APP_AE_YMD    	= S.APP_AE_YMD  
			                      	, T.D_BASE_YMD    	= S.D_BASE_YMD  
			                     	, T.NOTE         	= S.NOTE        
									, T.CHKDATE			= SYSDATE
									, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT 
						(
							  T.ENTER_CD    
   							, T.APPRAISAL_CD
   							, T.APP_STEP_CD 
   							, T.APP_AS_YMD  
   							, T.APP_AE_YMD  
   							, T.D_BASE_YMD  
   							, T.NOTE        
							, T.CHKDATE
							, T.CHKID
						) 
						VALUES 
						(
 							  S.ENTER_CD    
 							, S.APPRAISAL_CD
 							, S.APP_STEP_CD 
 							, S.APP_AS_YMD  
 							, S.APP_AE_YMD  
 							, S.D_BASE_YMD  
 							, S.NOTE        
							, SYSDATE
							, #{ssnSabun}
						)
		</update>
<!-- 		삭제 -->
		<delete parameterType="map" id="deleteAppScheduleMgr">

					DELETE FROM TPAP105 
					WHERE 	(ENTER_CD,APPRAISAL_CD,APP_STEP_CD) IN 	(  (NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
											#{ssnEnterCd}
										<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
											,TRIM( #{rm.appraisalCd} )
										</if>
										<if test='rm.appStepCd != null and !rm.appStepCd.equals("")'>
											,TRIM( #{rm.appStepCd} )
										</if>
										)
</foreach>
										)
		</delete>
		
		
<!-- 		저장 -->	
		<update parameterType="map" id="saveAppScheduleMgrPop">

					MERGE INTO TPAP104 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.APPRAISAL_CD
									, A.APP_STEP_CD
									, A.APPRAISAL_SEQ
									, A.APP_AS_YMD
									, A.APP_AE_YMD
							FROM	(
									SELECT	  NULL	AS ENTER_CD     
											, NULL	AS APPRAISAL_CD 
											, NULL	AS APP_STEP_CD  
											, NULL	AS APPRAISAL_SEQ
											, NULL	AS APP_AS_YMD   
											, NULL	AS APP_AE_YMD   
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											  #{ssnEnterCd}				AS ENTER_CD
											, TRIM( #{rm.appraisalCd} )	AS APPRAISAL_CD
											, TRIM( #{rm.appStepCd} )	AS APP_STEP_CD
											, TRIM( #{rm.appraisalSeq})	AS APPRAISAL_SEQ
											, TRIM( #{rm.appAsYmd})		AS APP_AS_YMD
											, TRIM( #{rm.appAeYmd})		AS APP_AE_YMD
											FROM   DUAL
</foreach>
									) A WHERE ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD		  = S.ENTER_CD
					AND  T.APPRAISAL_CD   = S.APPRAISAL_CD
					AND  T.APP_STEP_CD    = S.APP_STEP_CD
					AND  T.APPRAISAL_SEQ  = S.APPRAISAL_SEQ
					 )
					WHEN MATCHED THEN
						UPDATE SET	     
									  T.APP_AS_YMD    	= S.APP_AS_YMD  
			                    	, T.APP_AE_YMD    	= S.APP_AE_YMD  
									, T.CHKDATE			= SYSDATE
									, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT 
						(
							  T.ENTER_CD     
   							, T.APPRAISAL_CD 
   							, T.APP_STEP_CD  
   							, T.APPRAISAL_SEQ
   							, T.APP_AS_YMD   
   							, T.APP_AE_YMD   
							, T.CHKDATE
							, T.CHKID
						) 
						VALUES 
						(
 							  S.ENTER_CD      
 							, S.APPRAISAL_CD  
 							, S.APP_STEP_CD   
 							, S.APPRAISAL_SEQ 
 							, S.APP_AS_YMD    
 							, S.APP_AE_YMD    
							, SYSDATE
							, #{ssnSabun}
						)
		</update>
		
<!-- 		삭제 -->
		<delete parameterType="map" id="deleteAppScheduleMgrPop">

					DELETE FROM TPAP104 
					WHERE 	(ENTER_CD,APPRAISAL_CD,APP_STEP_CD,APPRAISAL_SEQ) IN 	(  (NULL,NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
											#{ssnEnterCd}
										<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
											,TRIM( #{rm.appraisalCd} )
										</if>
										<if test='rm.appStepCd != null and !rm.appStepCd.equals("")'>
											,TRIM( #{rm.appStepCd} )
										</if>
										<if test='rm.appraisalSeq != null and !rm.appraisalSeq.equals("")'>
											,TRIM( #{rm.appraisalSeq})
										</if>
										)
</foreach>
										)
		</delete>
		
		
		
		
<!-- 		생성 -->	
		<insert parameterType="map" id="insertAppScheduleMgr">

				<![CDATA[
						INSERT INTO MainMnMgrTable
						(
							  PRG_CD       
							, PRG_NM       
							, PRG_ENG_NM   
							, PRG_PATH     
							, USE          
							, VERSION      
							, MEMO         
							, DATE_TRACK_YN
							, LOG_SAVE_YN  
							, CHKDATE
							, CHKID
						) 
						SELECT	  S.PRG_CD       
								, S.PRG_NM       
								, S.PRG_ENG_NM   
								, S.PRG_PATH     
								, S.USE          
								, S.VERSION      
								, S.MEMO         
								, S.DATE_TRACK_YN
								, S.LOG_SAVE_YN  
								, SYSDATE
								, #{ssnSabun}
						FROM (
								SELECT    NULL 	AS PRG_CD       
										, NULL 	AS PRG_NM       
										, NULL 	AS PRG_ENG_NM   
										, NULL 	AS PRG_PATH     
										, NULL 	AS USE          
										, NULL 	AS VERSION      
										, NULL 	AS MEMO         
										, NULL 	AS DATE_TRACK_YN
										, NULL 	AS LOG_SAVE_YN
								FROM   DUAL
								]]>
<bind name="icnt" value="1" />
<foreach item="rm" collection="insertRows" >
					UNION ALL
								SELECT	  TRIM( #{rm.prgCd})	AS PRG_CD
										, TRIM( #{rm.prgNm})	AS PRG_NM
										, TRIM( #{rm.prgEngNm})	AS PRG_ENG_NM
										, TRIM( #{rm.prgPath})	AS PRG_PATH
										, TRIM( #{rm.use})	AS USE
										, TRIM( #{rm.version})	AS VERSION
										, TRIM( #{rm.memo})	AS MEMO
										, TRIM( #{rm.dateTrackYn})	AS DATE_TRACK_Y
										, TRIM( #{rm.logSaveYn})	AS LOG_SAVE_YN
								FROM   DUAL
</foreach>
							) S
						WHERE S.PRG_CD IS NOT NULL
		</insert>
<!-- 		수정 -->
		<update parameterType="map" id="updateAppScheduleMgr">

					UPDATE ZTST002 T SET 
					( COL1, COL2, COL3, COL4, CHKDATE, CHKID ) 
					=
					(	SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, SYSDATE
								, #{ssnSabun}
						FROM (
							SELECT	  NULL 	AS COL1
									, NULL 	AS COL2
									, NULL 	AS COL3
									, NULL 	AS COL4
									FROM   DUAL
<foreach item="rm" collection="updateRows" >
					UNION ALL
								SELECT   
										  TRIM(#{rm.col1})	AS COL1
										, TRIM(#{rm.col2})	AS COL2
										, TRIM(#{rm.col3})	AS COL3
										, TRIM(#{rm.col4})	AS COL4
								FROM   DUAL
</foreach>
							) S
						WHERE S.COL1 IS NOT NULL
					) 
					WHERE EXISTS (	
									SELECT S.COL1
									FROM (
											SELECT	S.COL1 
											FROM ( 
												SELECT	NULL 				AS COL1	FROM	DUAL
			<foreach item="rm" collection="updateRows" > UNION ALL		SELECT	TRIM(#{rm.col1})	AS COL1	FROM	DUAL  </foreach>
												) S
											WHERE S.COL1 IS NOT NULL 
										)S
									WHERE T.COL1 = S.COL1
								)
		</update>


</mapper>