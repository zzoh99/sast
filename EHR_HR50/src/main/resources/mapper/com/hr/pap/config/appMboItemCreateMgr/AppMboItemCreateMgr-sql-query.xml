<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="pap.config.appMboItemCreateMgr">
<!-- 		조회 위-->
		<select parameterType="map" resultType="cMap" id="getAppMboItemCreateMgrList">

				<![CDATA[
					SELECT A.APPRAISAL_CD
						 , A.SEQ
						 , A.APP_INDEX_GUBUN_CD
						 , A.MBO_TARGET
						 , A.KPI_NM
						 , A.FORMULA
						 , A.BASELINE_DATA
						 , A.S_GRADE_BASE
						 , A.A_GRADE_BASE
						 , A.B_GRADE_BASE
						 , A.C_GRADE_BASE
						 , A.D_GRADE_BASE
						 , A.WEIGHT
						 , A.ORDER_SEQ
						 , A.NOTE
						 , '0' AS DETAIL
					FROM TPAP106 A
					WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
						AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
					ORDER BY A.SEQ DESC
				]]>


		</select>
<!-- 		조회 아래-->
		<select parameterType="map" resultType="cMap" id="getAppMboItemCreateMgrList1">

				<![CDATA[
					SELECT A.ENTER_CD, A.APPRAISAL_CD , A.SEQ , A.SABUN , A.APP_ORG_CD
						 , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'P00011' , A.APP_INDEX_GUBUN_CD) AS APP_INDEX_GUBUN_CD
						 , A.MBO_TARGET , A.WEIGHT , A.ORDER_SEQ , A.KPI_NM, A.FORMULA
						 , A.BASELINE_DATA, A.S_GRADE_BASE, A.A_GRADE_BASE, A.B_GRADE_BASE, A.C_GRADE_BASE, A.D_GRADE_BASE
						 , B.NAME, B.APP_ORG_NM , B.JIKWEE_NM , B.JIKGUB_NM  , B.JIKCHAK_NM
					FROM TPAP351 A, TPAP201 B
					WHERE A.ENTER_CD= B.ENTER_CD
						AND A.APPRAISAL_CD = B.APPRAISAL_CD
						AND A.SABUN = B.SABUN
						AND A.APP_ORG_CD = B.APP_ORG_CD
						AND B.APP_STEP_CD= TRIM(#{searchAppStepCd})
						AND B.APP_YN = 'Y'
						AND B.ENTER_CD = TRIM(#{ssnEnterCd})
						AND B.APPRAISAL_CD= TRIM(#{searchAppraisalCd})
						        ]]>
						<if test='searchNameSabun != null and !searchNameSabun.equals("")'>
							AND (UPPER(B.NAME) LIKE UPPER('%'|| TRIM(#{searchNameSabun}) ||'%') OR UPPER(B.SABUN) LIKE UPPER('%'|| TRIM(#{searchNameSabun}) ||'%'))
						</if>
						AND A.MK_GUBUN_CD='S'
					ORDER BY B.APP_ORG_NM, B.JIKCHAK_CD, B.JIKGUB_CD, B.NAME, A.ORDER_SEQ

		</select>
		<select parameterType="map" resultType="cMap" id="getAppMboItemCreateMgrList2">

				<![CDATA[
					SELECT A.ENTER_CD, A.APPRAISAL_CD , A.SEQ , A.SABUN , A.APP_ORG_CD
						 , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'P00011' , A.APP_INDEX_GUBUN_CD) AS APP_INDEX_GUBUN_CD
						 , A.MBO_TARGET , A.WEIGHT , A.ORDER_SEQ , A.KPI_NM, A.FORMULA
						 , A.BASELINE_DATA, A.S_GRADE_BASE, A.A_GRADE_BASE, A.B_GRADE_BASE, A.C_GRADE_BASE, A.D_GRADE_BASE
						 , B.NAME, B.APP_ORG_NM , B.JIKWEE_NM , B.JIKGUB_NM  , B.JIKCHAK_NM
					FROM TPAP352 A, TPAP201 B
					WHERE A.ENTER_CD= B.ENTER_CD
						AND A.APPRAISAL_CD = B.APPRAISAL_CD
						AND A.SABUN = B.SABUN
						AND A.APP_ORG_CD = B.APP_ORG_CD
						AND B.APP_STEP_CD= TRIM(#{searchAppStepCd})
						AND B.APP_YN = 'Y'
						AND B.ENTER_CD = TRIM(#{ssnEnterCd})
						AND B.APPRAISAL_CD= TRIM(#{searchAppraisalCd})
						        ]]>
						<if test='searchNameSabun != null and !searchNameSabun.equals("")'>
							AND (UPPER(B.NAME) LIKE UPPER('%'|| TRIM(#{searchNameSabun}) ||'%') OR UPPER(B.SABUN) LIKE UPPER('%'|| TRIM(#{searchNameSabun}) ||'%'))
						</if>
						AND A.MK_GUBUN_CD='S'
					ORDER BY B.APP_ORG_NM, B.JIKCHAK_CD, B.JIKGUB_CD, B.NAME, A.ORDER_SEQ


		</select>
<!-- 		저장 -->
		<update parameterType="map" id="saveAppMboItemCreateMgr">

					MERGE INTO TPAP106 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.APPRAISAL_CD
									, A.SEQ
									, A.APP_INDEX_GUBUN_CD
									, A.MBO_TARGET
									, A.KPI_NM
									, A.FORMULA
									, A.BASELINE_DATA
									, A.S_GRADE_BASE
									, A.A_GRADE_BASE
									, A.B_GRADE_BASE
									, A.C_GRADE_BASE
									, A.D_GRADE_BASE
									, A.WEIGHT
									, A.ORDER_SEQ
									, A.NOTE
							FROM	(
									SELECT	  NULL	AS ENTER_CD
											, NULL	AS APPRAISAL_CD
											, NULL	AS SEQ
											, NULL	AS APP_INDEX_GUBUN_CD
											, NULL AS MBO_TARGET
											, NULL AS KPI_NM
											, NULL AS FORMULA
											, NULL AS BASELINE_DATA
											, NULL AS S_GRADE_BASE
											, NULL AS A_GRADE_BASE
											, NULL AS B_GRADE_BASE
											, NULL AS C_GRADE_BASE
											, NULL AS D_GRADE_BASE
											, NULL AS WEIGHT
											, NULL AS ORDER_SEQ
											, NULL AS NOTE
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											  #{ssnEnterCd}					AS ENTER_CD
											, TRIM( #{rm.appraisalCd} )		AS APPRAISAL_CD

											<choose><when test='rm.seq != null and !rm.seq.equals("")'>
												--증가가 되는 키인경우 키가 공백이 아니면 들어온 값을 삽입
												, TRIM(#{rm.seq}) 			AS SEQ
											</when><otherwise>
												--증가가 되는 키인경우 키가 공백이면 증가된 값을 삽입
												, TO_CHAR( NVL((SELECT MAX(SEQ)
													FROM TPAP106
													WHERE ENTER_CD = #{ssnEnterCd} AND APPRAISAL_CD = #{rm.appraisalCd}
												), 0) + ${icnt} )	AS SEQ
												--icnt 증가
												<bind name="icnt" value="icnt + 1" />
											</otherwise>
											</choose>

											, TRIM(#{rm.appIndexGubunCd}) AS APP_INDEX_GUBUN_CD
											, TRIM(#{rm.mboTarget}) AS MBO_TARGET
											, TRIM(#{rm.kpiNm}) AS KPI_NM
											, TRIM(#{rm.formula}) AS FORMULA
											, TRIM(#{rm.baselineData}) AS BASELINE_DATA
											, TRIM(#{rm.sGradeBase}) AS S_GRADE_BASE
											, TRIM(#{rm.aGradeBase}) AS A_GRADE_BASE
											, TRIM(#{rm.bGradeBase}) AS B_GRADE_BASE
											, TRIM(#{rm.cGradeBase}) AS C_GRADE_BASE
											, TRIM(#{rm.dGradeBase}) AS D_GRADE_BASE
											, TRIM(#{rm.weight}) AS WEIGHT
											, TRIM(#{rm.orderSeq}) AS ORDER_SEQ
											, TRIM(#{rm.note}) AS NOTE

											FROM	DUAL
</foreach>
									) A WHERE ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD		= S.ENTER_CD
					AND  T.APPRAISAL_CD = S.APPRAISAL_CD
					AND  T.SEQ		  = S.SEQ
					)
					WHEN MATCHED THEN
						UPDATE SET
									  T.APP_INDEX_GUBUN_CD  = S.APP_INDEX_GUBUN_CD
									, T.MBO_TARGET = S.MBO_TARGET
									, T.KPI_NM = S.KPI_NM
									, T.FORMULA = S.FORMULA
									, T.BASELINE_DATA = S.BASELINE_DATA
									, T.S_GRADE_BASE = S.S_GRADE_BASE
									, T.A_GRADE_BASE = S.A_GRADE_BASE
									, T.B_GRADE_BASE = S.B_GRADE_BASE
									, T.C_GRADE_BASE = S.C_GRADE_BASE
									, T.D_GRADE_BASE = S.D_GRADE_BASE
									, T.WEIGHT = S.WEIGHT
									, T.ORDER_SEQ = S.ORDER_SEQ
									, T.NOTE = S.NOTE
									, T.CHKDATE				= SYSDATE
									, T.CHKID				= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.APPRAISAL_CD
							, T.SEQ
							, T.APP_INDEX_GUBUN_CD
							, T.MBO_TARGET
							, T.KPI_NM
							, T.FORMULA
							, T.BASELINE_DATA
							, T.S_GRADE_BASE
							, T.A_GRADE_BASE
							, T.B_GRADE_BASE
							, T.C_GRADE_BASE
							, T.D_GRADE_BASE
							, T.WEIGHT
							, T.ORDER_SEQ
							, T.NOTE
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.APPRAISAL_CD
							, S.SEQ
							, S.APP_INDEX_GUBUN_CD
							, S.MBO_TARGET
							, S.KPI_NM
							, S.FORMULA
							, S.BASELINE_DATA
							, S.S_GRADE_BASE
							, S.A_GRADE_BASE
							, S.B_GRADE_BASE
							, S.C_GRADE_BASE
							, S.D_GRADE_BASE
							, S.WEIGHT
							, S.ORDER_SEQ
							, S.NOTE
							, SYSDATE
							, #{ssnSabun}
						)
		</update>
<!-- 		삭제 -->
		<delete parameterType="map" id="deleteAppMboItemCreateMgr">

					DELETE FROM TPAP106
					WHERE 	(ENTER_CD,APPRAISAL_CD,SEQ) IN 	(  (NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
										#{ssnEnterCd}
										<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
										,	TRIM( #{rm.appraisalCd} )
										</if>
										<if test='rm.seq != null and !rm.seq.equals("")'>
										,	TRIM( #{rm.seq} )
										</if>
										)
</foreach>
										)
		</delete>
<!-- 		삭제 (아래)-->
		<delete parameterType="map" id="deleteAppMboItemCreateMgr1">

					DELETE FROM TPAP351
					WHERE 	(ENTER_CD,APPRAISAL_CD,SABUN,APP_ORG_CD,SEQ) IN 	(  (NULL,NULL,NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
										#{ssnEnterCd}
										<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
										,	TRIM( #{rm.appraisalCd} )
										</if>
										<if test='rm.sabun != null and !rm.sabun.equals("")'>
										,	TRIM( #{rm.sabun} )
										</if>
										<if test='rm.appOrgCd != null and !rm.appOrgCd.equals("")'>
										,	TRIM( #{rm.appOrgCd} )
										</if>
										<if test='rm.seq != null and !rm.seq.equals("")'>
										,	TRIM( #{rm.seq} )
										</if>
										)
</foreach>
										)
		</delete>
		<delete parameterType="map" id="deleteAppMboItemCreateMgr2">

					DELETE FROM TPAP352
					WHERE 	(ENTER_CD,APPRAISAL_CD,SABUN,APP_ORG_CD,SEQ) IN 	(  (NULL,NULL,NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
										#{ssnEnterCd}
										<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
										,	TRIM( #{rm.appraisalCd} )
										</if>
										<if test='rm.sabun != null and !rm.sabun.equals("")'>
										,	TRIM( #{rm.sabun} )
										</if>
										<if test='rm.appOrgCd != null and !rm.appOrgCd.equals("")'>
										,	TRIM( #{rm.appOrgCd} )
										</if>
										<if test='rm.seq != null and !rm.seq.equals("")'>
										,	TRIM( #{rm.seq} )
										</if>
										)
</foreach>
										)
		</delete>
<!-- 		생성 -->
		<insert parameterType="map" id="insertAppMboItemCreateMgr">

				<![CDATA[
						INSERT INTO MainMnMgrTable
						(
							  PRG_CD
							, PRG_NM
							, PRG_ENG_NM
							, PRG_PATH
							, USE
							, VERSION
							, MEMO
							, DATE_TRACK_YN
							, LOG_SAVE_YN
							, CHKDATE
							, CHKID
						)
						SELECT	  S.PRG_CD
								, S.PRG_NM
								, S.PRG_ENG_NM
								, S.PRG_PATH
								, S.USE
								, S.VERSION
								, S.MEMO
								, S.DATE_TRACK_YN
								, S.LOG_SAVE_YN
								, SYSDATE
								, #{ssnSabun}
						FROM (
								SELECT	NULL 	AS PRG_CD
										, NULL 	AS PRG_NM
										, NULL 	AS PRG_ENG_NM
										, NULL 	AS PRG_PATH
										, NULL 	AS USE
										, NULL 	AS VERSION
										, NULL 	AS MEMO
										, NULL 	AS DATE_TRACK_YN
										, NULL 	AS LOG_SAVE_YN
								FROM	DUAL
								]]>
<bind name="icnt" value="1" />
<foreach item="rm" collection="insertRows" >
					UNION ALL
								SELECT	  TRIM( #{rm.prgCd})	AS PRG_CD
										, TRIM( #{rm.prgNm})	AS PRG_NM
										, TRIM( #{rm.prgEngNm})	AS PRG_ENG_NM
										, TRIM( #{rm.prgPath})	AS PRG_PATH
										, TRIM( #{rm.use})	AS USE
										, TRIM( #{rm.version})	AS VERSION
										, TRIM( #{rm.memo})	AS MEMO
										, TRIM( #{rm.dateTrackYn})	AS DATE_TRACK_Y
										, TRIM( #{rm.logSaveYn})	AS LOG_SAVE_YN
								FROM	DUAL
</foreach>
							) S
						WHERE S.PRG_CD IS NOT NULL
		</insert>
<!-- 		수정 -->
		<update parameterType="map" id="updateAppMboItemCreateMgr">

				<![CDATA[
					UPDATE ZTST002 T SET
					( COL1, COL2, COL3, COL4, CHKDATE, CHKID )
					=
					(	SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, SYSDATE
								, #{ssnSabun}
						FROM (
							SELECT	  NULL 	AS COL1
									, NULL 	AS COL2
									, NULL 	AS COL3
									, NULL 	AS COL4
									FROM	DUAL
									]]>
<foreach item="rm" collection="updateRows" >
					UNION ALL
								SELECT
										  TRIM(#{rm.col1})	AS COL1
										, TRIM(#{rm.col2})	AS COL2
										, TRIM(#{rm.col3})	AS COL3
										, TRIM(#{rm.col4})	AS COL4
								FROM	DUAL
</foreach>
							) S
						WHERE S.COL1 IS NOT NULL
					)
					WHERE EXISTS (
									SELECT S.COL1
									FROM (
											SELECT	S.COL1
											FROM (
												SELECT	NULL 				AS COL1	FROM	DUAL
			<foreach item="rm" collection="updateRows" > UNION ALL		SELECT	TRIM(#{rm.col1})	AS COL1	FROM	DUAL  </foreach>
												) S
											WHERE S.COL1 IS NOT NULL
										)S
									WHERE T.COL1 = S.COL1
								)
		</update>


		<update parameterType="map" id="prcAppMboItemCreateMgr" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_MBO_APP_ITEM_INS(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppraisalCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppStepCd,mode=IN,jdbcType=VARCHAR},
				#{searchSabun,mode=IN,jdbcType=VARCHAR},
				'',
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

</mapper>