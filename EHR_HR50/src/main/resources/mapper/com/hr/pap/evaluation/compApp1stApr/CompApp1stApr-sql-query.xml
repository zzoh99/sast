<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="pap.evaluation.compApp1stApr">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getCompApp1stAprList">

				<![CDATA[
					SELECT ENTER_CD
					      ,APPRAISAL_CD
					      ,SABUN
					      ,F_COM_GET_NAMES(ENTER_CD, SABUN) AS NAME -- 피평가자성명
					      ,APP_ORG_CD  -- 평가부서코드
					      ,F_COM_GET_ORG_NM(ENTER_CD, APP_ORG_CD, APP_E_YMD) AS APP_ORG_NM -- 평가부서명
					      ,JIKGUB_NM
					      ,JIKCHAK_NM   -- 직책명
					      ,JIKWEE_NM   -- 직위명
					      ,ORG_CD
					      ,ORG_NM
					      ,EMP_YMD     -- 입사일
					      ,SELF_STATUS_CD -- 본인평가 진행상태코드
					      ,(CASE WHEN SELF_STATUS_CD = '1' THEN '미평가'
					      		 WHEN SELF_STATUS_CD = '3' THEN '평가중'
					             WHEN SELF_STATUS_CD = '5' THEN '평가완료'    END) AS SELF_STATUS_NM --본인평가
					      ,STATUS_CD -- 1차평가 진행상태코드
					      ,(CASE WHEN STATUS_CD = '1' THEN '미평가'
					      		 WHEN STATUS_CD = '3' THEN '평가중'
					             WHEN STATUS_CD = '5' THEN '평가완료'    END) AS STATUS_NM --1차평가
					      ,APP_SABUN -- 평가자사번
					      ,APPRAISAL_YY -- 평가년도
					      ,'0' AS POP
					      , APP_POINT
					      , APP_CLASS_CD_SELF
					      , APP_CLASS_CD
					      , U1_APP_POINT
					  FROM (
					         SELECT A.ENTER_CD
					               ,A.APPRAISAL_CD
					               ,A.SABUN
					               ,F.APP_POINT AS APP_POINT
					               ,F.APP_CLASS_CD AS APP_CLASS_CD_SELF
					               ,A.APP_ORG_CD  -- 평가부서코드
					               ,C.APP_E_YMD
					               ,B.JIKCHAK_CD
					               ,B.JIKCHAK_NM   -- 직책명
					               ,B.JIKGUB_CD
					               ,B.JIKGUB_NM
					               ,B.JIKWEE_CD
					               ,B.JIKWEE_NM   -- 직위명
					               ,B.ORG_CD
					               ,B.ORG_NM
					               ,D.EMP_YMD     -- 입사일
					               ,F_PAPN_STATUS_CD(A.ENTER_CD, A.APPRAISAL_CD, '5', 'B', A.SABUN, A.APP_ORG_CD, '1', A.APP_SABUN) AS STATUS_CD
					               ,F_PAPN_STATUS_CD(B.ENTER_CD, B.APPRAISAL_CD, '5', 'B', B.SABUN, '' , '0', '') AS SELF_STATUS_CD
					               ,A.APP_SABUN -- 평가자사번
					               ,C.APPRAISAL_YY -- 평가년도
					               ,E.D_BASE_YMD
					               ,A.APP_POINT AS U1_APP_POINT
					               ,A.APP_CLASS_CD
					           FROM TPAP202 A
					               ,TPAP201 B
					               ,TPAP101 C
					               ,THRM100 D
					               ,TPAP105 E
					               ,TPAP400 F
					          WHERE A.ENTER_CD      = B.ENTER_CD
					            AND A.APPRAISAL_CD  = B.APPRAISAL_CD
					            AND A.SABUN         = B.SABUN
					            AND A.ENTER_CD      = C.ENTER_CD
					            AND A.APPRAISAL_CD  = C.APPRAISAL_CD
					            AND A.ENTER_CD      = D.ENTER_CD
					            AND A.SABUN         = D.SABUN
					            AND C.ENTER_CD      = E.ENTER_CD
					            AND C.APPRAISAL_CD  = E.APPRAISAL_CD
					            AND E.APP_STEP_CD   = '5'
					            AND A.ENTER_CD		= F.ENTER_CD(+)
					            AND A.APPRAISAL_CD  = F.APPRAISAL_CD(+)
					            AND A.SABUN			= F.SABUN(+)
					            AND A.ENTER_CD      = #{ssnEnterCd}
					            AND A.APPRAISAL_CD  = #{searchAppraisalCd}
					            AND A.APP_SABUN     = #{searchAppSabun}
					            AND A.APP_SEQ_CD    = '1'
					            AND B.APP_YN        = 'Y' -- 평가포함여부
					       )
					ORDER BY F_ORG_ORG_CHART_SORT(ENTER_CD, ORG_CD, D_BASE_YMD),F_COM_GET_GRCODE_SEQ(ENTER_CD, 'H20030', JIKWEE_CD),
							F_COM_GET_GRCODE_SEQ(ENTER_CD, 'H20020', JIKCHAK_CD) ,SABUN

				]]>


		</select>


		<select parameterType="map" resultType="cMap" id="getCompApp1stAprList2">

				<![CDATA[
					SELECT   APPRAISAL_CD
							,SABUN
							,SUNBUN
							,COM_GUBUN_CD
							,COMPETENCY_CD
							,COMPETENCY_NM
							,COMPETENCY_MEMO
							,APP_BASIS_POINT
							,APP_POINT
							,APP_APP_MEMO
							,APP_CLASS_CD
							,APPRAISAL_YN
							,APPRAISAL_YN1
							,APP_POINT1
							,APP_CLASS_CD1
							,STATUS_CD
							,(CASE WHEN STATUS_CD = '1' THEN '미평가'
					      		   WHEN STATUS_CD = '3' THEN '평가중'
					               WHEN STATUS_CD = '5' THEN '평가완료'    END) AS STATUS_NM --1차평가
					        ,APP_APP_MEMO2
					    FROM (
						        SELECT X.APPRAISAL_CD
						             , X.SABUN
						             , X.COM_GUBUN_CD
						             , X.COMPETENCY_CD
						             , X.COMPETENCY_NM
						             , X.COMPETENCY_MEMO
						             , X.APP_BASIS_POINT
						             , X.APP_POINT
						             , X.APP_APP_MEMO
						             , X.APP_CLASS_CD
						             , X.APP_POINT1
						             , X.APP_CLASS_CD1
						             , Y.APPRAISAL_YN
						             , Y.APPRAISAL_YN1
						        	 , X.SUNBUN
						        	 , NVL(Y.STATUS_CD, '1') AS STATUS_CD
						        	 , X.APP_APP_MEMO2
					            FROM (
					                 SELECT A.APPRAISAL_CD
					                      , A.SABUN
					                      , A.COM_GUBUN_CD
					                      , A.COMPETENCY_CD
					                      , A.COMPETENCY_NM
					                      , A.COMPETENCY_MEMO
					                      , A.APP_BASIS_POINT
					                      , A.APP_POINT
					                      , B.APP_APP_MEMO
					                      , A.APP_CLASS_CD,A.SUNBUN
					                      , B.APP_POINT AS APP_POINT1 ,B.APP_CLASS_CD AS APP_CLASS_CD1
					                      , B.APP_APP_MEMO2
					                 FROM   TPAP401 A
					                      , TPAP402 B
					                 WHERE A.ENTER_CD      = #{ssnEnterCd}
					                 AND   A.APPRAISAL_CD  = #{searchAppraisalCd}
					                 AND   A.SABUN         = #{searchSabun}
					                 AND   A.ENTER_CD      = B.ENTER_CD(+)
					                 AND   A.SABUN         = B.SABUN(+)
					                 AND   A.APPRAISAL_CD  = B.APPRAISAL_CD(+)
					                 AND   A.COM_GUBUN_CD  = B.COM_GUBUN_CD(+)
					                 AND   A.COMPETENCY_CD = B.COMPETENCY_CD(+)
					                 AND   B.APP_SEQ_CD(+) = '1'
					            ) X,
					            (
					            	SELECT A.APPRAISAL_CD
					            	     , A.SABUN
					            	     , B.APPRAISAL_YN AS APPRAISAL_YN
					            	     , A.APPRAISAL_YN AS APPRAISAL_YN1
					            		 , F_PAPN_STATUS_CD(A.ENTER_CD, A.APPRAISAL_CD, '5', 'B', A.SABUN, A.APP_ORG_CD, '1', A.APP_SABUN) AS STATUS_CD
					                FROM   TPAP202 A,TPAP400 B
					                WHERE  A.ENTER_CD     = #{ssnEnterCd}
					                AND    A.APPRAISAL_CD = #{searchAppraisalCd}
					                AND    A.SABUN        = #{searchSabun}
					                AND    A.ENTER_CD     = B.ENTER_CD
					                AND    A.APPRAISAL_CD = B.APPRAISAL_CD
					                AND    A.SABUN        = B.SABUN
					                AND    A.APP_SEQ_CD   = '1'
					                AND    B.APPRAISAL_YN = 'Y'
					            )Y
					    WHERE X.APPRAISAL_CD = Y.APPRAISAL_CD
					    AND   X.SABUN = Y.SABUN
					    )
					ORDER BY COM_GUBUN_CD,SUNBUN
				]]>


		</select>


		<select parameterType="map" resultType="cMap" id="getCompApp1stAprMap">

				<![CDATA[
					SELECT COL1, COL2, COL3, COL4, COL5 FROM ZTST002
					WHERE 1 = 1
					AND ROWNUM = 1
				]]>


		</select>

<!-- 		저장 -->
		<update parameterType="map" id="saveCompApp1stApr2">

					MERGE INTO TPAP402 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.APPRAISAL_CD
									, A.SABUN
									, A.COM_GUBUN_CD
									, A.COMPETENCY_CD
									, A.APP_SEQ_CD
									, A.APP_CLASS_CD
									, A.APP_POINT
									, A.APP_APP_MEMO
									, A.APP_APP_MEMO2
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS APPRAISAL_CD
											, NULL		AS SABUN
											, NULL		AS COM_GUBUN_CD
											, NULL		AS COMPETENCY_CD
											, NULL		AS APP_SEQ_CD
											, NULL		AS APP_CLASS_CD
											, NULL		AS APP_POINT
											, NULL		AS APP_APP_MEMO
											, NULL		AS APP_APP_MEMO2
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											  #{ssnEnterCd}	        		AS ENTER_CD
											, TRIM( #{rm.appraisalCd} )		AS APPRAISAL_CD
											, TRIM( #{rm.sabun} )			AS SABUN
											, TRIM( #{rm.comGubunCd})	    AS COM_GUBUN_CD
											, TRIM( #{rm.competencyCd} )	AS COMPETENCY_CD
											, '1'		                    AS APP_SEQ_CD
											, TRIM( #{rm.appClassCd1})		AS APP_CLASS_CD
											, TRIM( #{rm.appPoint1})		AS APP_POINT
											, TRIM( #{rm.appAppMemo})		AS APP_APP_MEMO
											, TRIM( #{rm.appAppMemo2})		AS APP_APP_MEMO2
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD     		= S.ENTER_CD
					AND  T.APPRAISAL_CD 		= S.APPRAISAL_CD
					AND  T.SABUN        		= S.SABUN
					AND  T.COM_GUBUN_CD 		= S.COM_GUBUN_CD
					AND  T.COMPETENCY_CD		= S.COMPETENCY_CD
					AND  T.APP_SEQ_CD   		= S.APP_SEQ_CD
					 )
					WHEN MATCHED THEN
						UPDATE SET	  T.APP_CLASS_CD	= S.APP_CLASS_CD
									, T.APP_POINT	    = S.APP_POINT
									, T.APP_APP_MEMO	= S.APP_APP_MEMO
									, T.APP_APP_MEMO2	= S.APP_APP_MEMO2
									, T.CHKDATE	        = SYSDATE
									, T.CHKID	        = #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.APPRAISAL_CD
							, T.SABUN
							, T.COM_GUBUN_CD
							, T.COMPETENCY_CD
							, T.APP_SEQ_CD
							, T.APP_CLASS_CD
							, T.APP_POINT
							, T.APP_APP_MEMO
							, T.APP_APP_MEMO2
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.APPRAISAL_CD
							, S.SABUN
							, S.COM_GUBUN_CD
							, S.COMPETENCY_CD
							, S.APP_SEQ_CD
							, S.APP_CLASS_CD
							, S.APP_POINT
							, S.APP_APP_MEMO
							, S.APP_APP_MEMO2
							, SYSDATE
							, #{ssnSabun}
						)
		</update>
<!-- 		삭제 -->
		<delete parameterType="map" id="deleteCompApp1stApr">

					DELETE FROM ZTST002
					WHERE 	COL1 IN 	(  NULL
<foreach item="rm" collection="deleteRows" >
						,
										<if test='rm.col1 != null and !rm.col1.equals("")'>
											TRIM( #{rm.col1} )
										</if>
</foreach>
										)
		</delete>

		<!-- 		저장 -->
		<update parameterType="map" id="saveCompApp1stApr1">

				<![CDATA[
					UPDATE TPAP202 T SET
					(	  APPRAISAL_YN
						, APP_POINT
						, APP_CLASS_CD
						, CHKDATE
						, CHKID
						)
					=
					(	SELECT	  'Y'
								, S.APP_POINT
								, S.APP_CLASS_CD
								, SYSDATE
								, #{ssnSabun}
						FROM (
							SELECT	  NULL 	AS ENTER_CD
									, NULL 	AS APPRAISAL_CD
									, NULL 	AS SABUN
									, NULL 	AS APP_SEQ_CD
									, NULL 	AS APP_POINT
									, NULL 	AS APP_CLASS_CD
									FROM   DUAL
									]]>
<foreach item="rm" collection="updateRows" >
					UNION ALL
								SELECT    #{ssnEnterCd}             AS ENTER_CD
								        , TRIM(#{rm.appraisalCd}) AS APPRAISAL_CD
								        , TRIM(#{rm.sabun})       AS SABUN
								        , '1'                     AS APP_SEQ_CD
										, APP_POINT
										,(SELECT APP_CLASS_CD
										  FROM   TPAP011
										  WHERE  APP_TYPE_CD = 'B'
										  AND    APP_POINT BETWEEN TO_POINT AND FROM_POINT) AS APP_CLASS_CD
								FROM    (
								SELECT
									   SUM(APP_POINT) AS APP_POINT
								FROM   TPAP402
								WHERE  ENTER_CD     = #{ssnEnterCd}
								AND    APPRAISAL_CD = TRIM(#{rm.appraisalCd})
								AND    SABUN        = TRIM(#{rm.sabun})
								AND    APP_SEQ_CD   = '1'
								)
</foreach>
							) S
						WHERE S.ENTER_CD IS NOT NULL
						AND   T.ENTER_CD     = S.ENTER_CD
						AND   T.APPRAISAL_CD = S.APPRAISAL_CD
						AND   T.SABUN        = S.SABUN
						AND   T.APP_SEQ_CD   = S.APP_SEQ_CD
					)
					WHERE EXISTS (
									SELECT S.ENTER_CD
									FROM (
											SELECT	  S.ENTER_CD
													, S.APPRAISAL_CD
													, S.SABUN
													, S.APP_SEQ_CD
											FROM (
												SELECT	 NULL 				     AS ENTER_CD
														,NULL 				     AS APPRAISAL_CD
														,NULL 				     AS SABUN
														,NULL 				     AS APP_SEQ_CD
												FROM	DUAL
<foreach item="rm" collection="updateRows" > UNION ALL
												SELECT	 #{ssnEnterCd}      	     AS ENTER_CD
														,TRIM(#{rm.appraisalCd}) AS APPRAISAL_CD
														,TRIM(#{rm.sabun})       AS SABUN
														,'1'                     AS APP_SEQ_CD
												FROM	DUAL
</foreach>
												) S
											WHERE S.ENTER_CD IS NOT NULL
										)S
									WHERE       T.ENTER_CD     = S.ENTER_CD
									AND         T.APPRAISAL_CD = S.APPRAISAL_CD
									AND         T.SABUN        = S.SABUN
									AND         T.APP_SEQ_CD   = S.APP_SEQ_CD
								)
		</update>


		<!-- 		저장 -->
		<update parameterType="map" id="saveCompApp1stApr3">

				<![CDATA[
					UPDATE TPAP202 T SET
					(	  APPRAISAL_YN
						, APP_POINT
						, APP_CLASS_CD
						, CHKDATE
						, CHKID
						)
					=
					(	SELECT	  'N'
								, S.APP_POINT
								, S.APP_CLASS_CD
								, SYSDATE
								, #{ssnSabun}
						FROM (
							SELECT	  NULL 	AS ENTER_CD
									, NULL 	AS APPRAISAL_CD
									, NULL 	AS SABUN
									, NULL 	AS APP_SEQ_CD
									, NULL 	AS APP_POINT
									, NULL 	AS APP_CLASS_CD
									FROM   DUAL
									]]>
<foreach item="rm" collection="updateRows" >
					UNION ALL
								SELECT    #{ssnEnterCd}             AS ENTER_CD
								        , TRIM(#{rm.appraisalCd}) AS APPRAISAL_CD
								        , TRIM(#{rm.sabun})       AS SABUN
								        , '1'                     AS APP_SEQ_CD
										, APP_POINT
										,(SELECT APP_CLASS_CD
										  FROM   TPAP011
										  WHERE  APP_TYPE_CD = 'B'
										  AND    APP_POINT BETWEEN TO_POINT AND FROM_POINT) AS APP_CLASS_CD
								FROM    (
								SELECT
									   SUM(APP_POINT) AS APP_POINT
								FROM   TPAP402
								WHERE  ENTER_CD     = #{ssnEnterCd}
								AND    APPRAISAL_CD = TRIM(#{rm.appraisalCd})
								AND    SABUN        = TRIM(#{rm.sabun})
								AND    APP_SEQ_CD   = '1'
								)
</foreach>
							) S
						WHERE S.ENTER_CD IS NOT NULL
						AND   T.ENTER_CD     = S.ENTER_CD
						AND   T.APPRAISAL_CD = S.APPRAISAL_CD
						AND   T.SABUN        = S.SABUN
						AND   T.APP_SEQ_CD   = S.APP_SEQ_CD
					)
					WHERE EXISTS (
									SELECT S.ENTER_CD
									FROM (
											SELECT	  S.ENTER_CD
													, S.APPRAISAL_CD
													, S.SABUN
													, S.APP_SEQ_CD
											FROM (
												SELECT	 NULL 				     AS ENTER_CD
														,NULL 				     AS APPRAISAL_CD
														,NULL 				     AS SABUN
														,NULL 				     AS APP_SEQ_CD
												FROM	DUAL
<foreach item="rm" collection="updateRows" > UNION ALL
												SELECT	 #{ssnEnterCd}      	     AS ENTER_CD
														,TRIM(#{rm.appraisalCd}) AS APPRAISAL_CD
														,TRIM(#{rm.sabun})       AS SABUN
														,'1'                     AS APP_SEQ_CD
												FROM	DUAL
</foreach>
												) S
											WHERE S.ENTER_CD IS NOT NULL
										)S
									WHERE       T.ENTER_CD     = S.ENTER_CD
									AND         T.APPRAISAL_CD = S.APPRAISAL_CD
									AND         T.SABUN        = S.SABUN
									AND         T.APP_SEQ_CD   = S.APP_SEQ_CD
								)
		</update>







<!-- 		생성 -->
		<insert parameterType="map" id="insertCompApp1stApr">

				<![CDATA[
						INSERT INTO MainMnMgrTable
						(
							  COL1
							, COL2
							, COL3
							, COL4
							, COL5
							, COL6
							, CHKDATE
							, CHKID
						)
						SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, S.COL5
								, S.COL6
								, sysdate
								, #{ssnSabun}
						FROM (
								SELECT    NULL 	AS COL1
										, NULL 	AS COL2
										, NULL 	AS COL3
										, NULL 	AS COL4
										, NULL 	AS COL5
										, NULL 	AS COL6
								FROM   DUAL
								]]>
<bind name="icnt" value="1" />
<foreach item="rm" collection="insertRows" >
					UNION ALL
								SELECT	  TO_CHAR( (SELECT (NVL(MAX(TO_NUMBER( COL1 )),0) + ${icnt}) FROM ZTST002) )	AS COL1
										<bind name="icnt" value="icnt + 1" />
										, TRIM(#{rm.col2})	AS COL2
										, TRIM(#{rm.col3})	AS COL3
										, TRIM(#{rm.col4})	AS COL4
										, TRIM(#{rm.col5})	AS COL5
										, TRIM(#{rm.col6})	AS COL6
								FROM   DUAL
</foreach>
							) S
						WHERE S.COL1 IS NOT NULL
		</insert>
<!-- 		수정 -->
		<update parameterType="map" id="updateCompApp1stApr">

				<![CDATA[
					UPDATE ZTST002 T SET
					(	  COL1
						, COL2
						, COL3
						, COL4
						, CHKDATE
						, CHKID
						)
					=
					(	SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, S.COL5
								, S.COL6
								, SYSDATE
								, #{ssnSabun}
						FROM (
							SELECT	  NULL 	AS COL1
									, NULL 	AS COL2
									, NULL 	AS COL3
									, NULL 	AS COL4
									, NULL 	AS COL5
									, NULL 	AS COL6
									FROM   DUAL
									]]>
<foreach item="rm" collection="updateRows" >
					UNION ALL
								SELECT
										  TRIM(#{rm.col1})	AS COL1
										, TRIM(#{rm.col2})	AS COL2
										, TRIM(#{rm.col3})	AS COL3
										, TRIM(#{rm.col4})	AS COL4
										, TRIM(#{rm.col5})	AS COL5
										, TRIM(#{rm.col6})	AS COL6
								FROM   DUAL
</foreach>
							) S
						WHERE S.COL1 IS NOT NULL
					)
					WHERE EXISTS (
									SELECT S.COL1
									FROM (
											SELECT	S.COL1
											FROM (
												SELECT	NULL 				AS COL1	FROM	DUAL
			<foreach item="rm" collection="updateRows" > UNION ALL		SELECT	TRIM(#{rm.col1})	AS COL1	FROM	DUAL  </foreach>
												) S
											WHERE S.COL1 IS NOT NULL
										)S
									WHERE T.COL1 = S.COL1
								)
		</update>

</mapper>