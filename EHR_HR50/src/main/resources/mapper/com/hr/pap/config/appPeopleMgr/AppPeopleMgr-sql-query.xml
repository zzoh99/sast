<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="pap.config.appPeopleMgr">
<!--        조회 -->
		<select parameterType="map" resultType="cMap" id="getAppPeopleMgrList1">

				<![CDATA[
					SELECT X.*
					     , CASE WHEN X.MBO_ITEM_CNT > 0 THEN 'Y' ELSE 'N' END AS MBO_YN
					     , CASE WHEN X.COMP_ITEM_CNT > 0 THEN 'Y' ELSE 'N' END AS COMP_YN
					  FROM (
					      SELECT A.ENTER_CD,
					             A.APPRAISAL_CD,
					             A.APP_STEP_CD,
					             A.SABUN,
					             A.NAME,
					             '0' AS DETAIL,
					             F_COM_GET_ORG_NM2(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE,'YYYYMMDD')) AS ORG_NM,
					             A.APP_ORG_CD,
					             A.APP_ORG_NM,
					             A.JOB_CD,
					             A.JOB_NM,
					             A.WORK_TYPE,
					             A.WORK_TYPE_NM,
					             A.JIKWEE_CD,
					             A.JIKGUB_CD,
					             A.JIKCHAK_CD,
					             A.APP_YN,
					             A.APP_METHOD_CD,
					             A.APP_SHEET_TYPE,
					             A.APP_EX_CD,
					             A.MAIN_ORG_YN,
					             A.APP_GROUP_CD,
					             A.MBO_CLOSE_YN,
					             A.COMP_CLOSE_YN,
					             A.MBO_TARGET_YN,
					             A.WORK_TARGET_YN,
					             A.COMP_TARGET_YN,
					             A.NOTE,
					             B.APP_1ST_SABUN,
					             B.APP_2ND_SABUN,
					             B.APP_3RD_SABUN,
					             B.APP_BOSS_SABUN,
					             B.APP_COLLEAGUE_SABUN,
					             F_COM_GET_NAMES(A.ENTER_CD, B.APP_1ST_SABUN)  AS APP_1ST_SABUN_NM,
					             F_COM_GET_NAMES(A.ENTER_CD, B.APP_2ND_SABUN)  AS APP_2ND_SABUN_NM,
					             F_COM_GET_NAMES(A.ENTER_CD, B.APP_3RD_SABUN)  AS APP_3RD_SABUN_NM,
					             CASE WHEN B.APP_BOSS_CNT > 1 THEN B.APP_BOSS_CNT||'명'
					                  ELSE F_COM_GET_NAMES(A.ENTER_CD, B.APP_BOSS_SABUN)
					                  END  AS APP_BOSS_SABUN_NM ,
					             CASE WHEN B.APP_COLLEAGUE_CNT > 1 THEN B.APP_COLLEAGUE_CNT||'명'
					                  ELSE F_COM_GET_NAMES(A.ENTER_CD, B.APP_COLLEAGUE_SABUN)
					                  END  AS APP_COLLEAGUE_SABUN_NM ,
					             A.APP_CONFIRM_YN,
					             A.MANAGE_CD,
					             B.APP_1ST_GROUP_CD,
					             B.APP_1ST_GROUP_NM,
					             B.APP_2ND_GROUP_CD,
					             B.APP_2ND_GROUP_NM,
					             B.APP_3RD_GROUP_CD,
					             B.APP_3RD_GROUP_NM,
					             B.APP_BOSS_GROUP_CD,
					             B.APP_BOSS_GROUP_NM,
					             B.APP_COLLEAGUE_GROUP_CD,
					             B.APP_COLLEAGUE_GROUP_NM,
					             ]]>
					    /* 업적(KPI) 생성 갯수 */
					    <choose><when test='searchAppStepCd != null and searchAppStepCd.equals("1")'>
					             (SELECT COUNT(SEQ)
					                FROM TPAP351
					               WHERE ENTER_CD      = A.ENTER_CD
					                 AND APPRAISAL_CD  = A.APPRAISAL_CD
					                 AND APP_ORG_CD    = A.APP_ORG_CD
					                 AND SABUN = A.SABUN) AS MBO_ITEM_CNT,
						</when><otherwise>
					             (SELECT COUNT(SEQ)
					                FROM TPAP352
					               WHERE ENTER_CD      = A.ENTER_CD
					                 AND APPRAISAL_CD  = A.APPRAISAL_CD
					                 AND APP_ORG_CD    = A.APP_ORG_CD
					                 AND SABUN = A.SABUN) AS MBO_ITEM_CNT,
						</otherwise>
						</choose>
					    /* 역량 생성 갯수 */

						<choose>
							<when test='searchAppStepCd != null and searchAppStepCd.equals("1")'>
					             (SELECT COUNT(SABUN)
					                FROM TPAP401
					               WHERE ENTER_CD     = A.ENTER_CD
					                 AND APPRAISAL_CD = A.APPRAISAL_CD
					                 AND APP_ORG_CD   = A.APP_ORG_CD
					                 AND SABUN        = A.SABUN) AS COMP_ITEM_CNT,
						</when><otherwise>
					             CASE WHEN TRIM(#{appTypeCd}) = 'D' THEN	(SELECT COUNT(DISTINCT COMPETENCY_CD)
					                                                       FROM TPAP404
					                                                      WHERE ENTER_CD     = A.ENTER_CD
					                                                        AND APPRAISAL_CD = A.APPRAISAL_CD
					                                                        AND APP_ORG_CD   = A.APP_ORG_CD
					                                                        AND SABUN        = A.SABUN
					                                                      GROUP BY ENTER_CD, APPRAISAL_CD, APP_ORG_CD, SABUN )
					                  ELSE (SELECT COUNT(SABUN)
					                          FROM TPAP402
					                         WHERE ENTER_CD     = A.ENTER_CD
					                           AND APPRAISAL_CD = A.APPRAISAL_CD
					                           AND APP_ORG_CD   = A.APP_ORG_CD
					                           AND SABUN        = A.SABUN)
					             END AS COMP_ITEM_CNT,
						</otherwise>
						</choose>
					             F_PAPN_GET_CHG_ORG_CNT(A.ENTER_CD, #{searchAppraisalYy}, A.SABUN )  AS CHG_ORG_CNT, -- 조직변경 횟수
					             F_PAPN_GET_CHG_JIKWEE_CNT(A.ENTER_CD, #{searchAppraisalYy}, A.SABUN )  AS CHG_JIKWEE_CNT -- 직위변경 횟수
					    <if test='searchExtType != null and searchExtType.equals("spanTot4")'>
					      /* 2개이상부서평가대상 */
					          , ( SELECT COUNT(SABUN)
					                FROM TPAP201
					               WHERE ENTER_CD     = A.ENTER_CD
					                 AND APPRAISAL_CD = A.APPRAISAL_CD
					                 AND APP_STEP_CD  = A.APP_STEP_CD
					                 AND SABUN        = A.SABUN
					                 AND NVL(APP_YN,'N') = 'Y'
					      ) AS APP_2_ORG
						</if>
					      FROM TPAP201 A
					         , (SELECT T.ENTER_CD
					                 , T.APPRAISAL_CD
					                 , T.APP_STEP_CD
					                 , T.SABUN
					                 , T.APP_ORG_CD
					                 , T.APP_1ST_SABUN
					                 , T.APP_2ND_SABUN
					                 , T.APP_3RD_SABUN
					                 , T.APP_BOSS_SABUN
					                 , T.APP_COLLEAGUE_SABUN
					                 , T.APP_1ST_GROUP_CD
					                 , T.APP_1ST_GROUP_NM
					                 , T.APP_2ND_GROUP_CD
					                 , T.APP_2ND_GROUP_NM
					                 , T.APP_3RD_GROUP_CD
					                 , T.APP_3RD_GROUP_NM
					                 , T.APP_BOSS_GROUP_CD
					                 , T.APP_BOSS_GROUP_NM
					                 , T.APP_COLLEAGUE_GROUP_CD
					                 , T.APP_COLLEAGUE_GROUP_NM
					                 , T.APP_BOSS_CNT
					                 , T.APP_COLLEAGUE_CNT
					              FROM (
					                    SELECT T1.*
					                         , (SELECT COUNT(1)
					                              FROM TPAP202
					                             WHERE ENTER_CD     = T1.ENTER_CD
					                               AND APPRAISAL_CD = T1.APPRAISAL_CD
					                               AND APP_STEP_CD  = T1.APP_STEP_CD
					                               AND SABUN        = T1.SABUN
					                               AND APP_ORG_CD   = T1.APP_ORG_CD
					                               AND APP_SEQ_CD   = '3'
					                           ) AS APP_BOSS_CNT
					                         , (SELECT COUNT(1)
					                              FROM TPAP202
					                             WHERE ENTER_CD     = T1.ENTER_CD
					                               AND APPRAISAL_CD = T1.APPRAISAL_CD
					                               AND APP_STEP_CD  = T1.APP_STEP_CD
					                               AND SABUN        = T1.SABUN
					                               AND APP_ORG_CD   = T1.APP_ORG_CD
					                               AND APP_SEQ_CD   = '4'
					                           ) AS APP_COLLEAGUE_CNT
					                      FROM (
					                            SELECT ENTER_CD,
					                                   APPRAISAL_CD,
					                                   APP_STEP_CD,
					                                   SABUN,
					                                   APP_ORG_CD,
					                                   MAX(APP_1ST_SABUN)          AS APP_1ST_SABUN,
					                                   MAX(APP_2ND_SABUN)          AS APP_2ND_SABUN,
					                                   MAX(APP_3RD_SABUN)          AS APP_3RD_SABUN,
					                                   MAX(APP_BOSS_SABUN)         AS APP_BOSS_SABUN,
					                                   MAX(APP_COLLEAGUE_SABUN)    AS APP_COLLEAGUE_SABUN,
					                                   MAX(APP_1ST_GROUP_CD)       AS APP_1ST_GROUP_CD,
					                                   MAX(APP_1ST_GROUP_NM)       AS APP_1ST_GROUP_NM,
					                                   MAX(APP_2ND_GROUP_CD)       AS APP_2ND_GROUP_CD,
					                                   MAX(APP_2ND_GROUP_NM)       AS APP_2ND_GROUP_NM,
					                                   MAX(APP_3RD_GROUP_CD)       AS APP_3RD_GROUP_CD,
					                                   MAX(APP_3RD_GROUP_NM)       AS APP_3RD_GROUP_NM,
					                                   MAX(APP_BOSS_GROUP_CD)      AS APP_BOSS_GROUP_CD,
					                                   MAX(APP_BOSS_GROUP_NM)      AS APP_BOSS_GROUP_NM,
					                                   MAX(APP_COLLEAGUE_GROUP_CD) AS APP_COLLEAGUE_GROUP_CD,
					                                   MAX(APP_COLLEAGUE_GROUP_NM) AS APP_COLLEAGUE_GROUP_NM
					                              FROM (
					                                   SELECT A.ENTER_CD,
					                                          A.APPRAISAL_CD,
					                                          A.APP_STEP_CD,
					                                          A.SABUN,
					                                          A.APP_ORG_CD,
					                                          CASE WHEN A.APP_SEQ_CD='1' THEN NVL(A.APP_SABUN,    '') ELSE ' ' END AS APP_1ST_SABUN,
					                                          CASE WHEN A.APP_SEQ_CD='2' THEN NVL(A.APP_SABUN,    '') ELSE ' ' END AS APP_2ND_SABUN,
					                                          CASE WHEN A.APP_SEQ_CD='6' THEN NVL(A.APP_SABUN,    '') ELSE ' ' END AS APP_3RD_SABUN,
					                                          CASE WHEN A.APP_SEQ_CD='3' THEN NVL(A.APP_SABUN,    '') ELSE ' ' END AS APP_BOSS_SABUN,
					                                          CASE WHEN A.APP_SEQ_CD='4' THEN NVL(A.APP_SABUN,    '') ELSE ' ' END AS APP_COLLEAGUE_SABUN,
					                                          CASE WHEN A.APP_SEQ_CD='1' THEN NVL(A.APP_GROUP_CD, '') ELSE ' ' END AS APP_1ST_GROUP_CD,
					                                          CASE WHEN A.APP_SEQ_CD='2' THEN NVL(A.APP_GROUP_CD, '') ELSE ' ' END AS APP_2ND_GROUP_CD,
					                                          CASE WHEN A.APP_SEQ_CD='6' THEN NVL(A.APP_GROUP_CD, '') ELSE ' ' END AS APP_3RD_GROUP_CD,
					                                          CASE WHEN A.APP_SEQ_CD='3' THEN NVL(A.APP_GROUP_CD, '') ELSE ' ' END AS APP_BOSS_GROUP_CD,
					                                          CASE WHEN A.APP_SEQ_CD='4' THEN NVL(A.APP_GROUP_CD, '') ELSE ' ' END AS APP_COLLEAGUE_GROUP_CD,
					                                          CASE WHEN A.APP_SEQ_CD='1' THEN
					                                                   NVL((SELECT APP_GROUP_NM FROM TPAP133
					                                                         WHERE ENTER_CD = A.ENTER_CD
					                                                           AND APPRAISAL_CD=A.APPRAISAL_CD
					                                                           AND APP_GROUP_CD=A.APP_GROUP_CD), '')
					                                               ELSE ' '
					                                           END AS APP_1ST_GROUP_NM,
					                                          CASE WHEN A.APP_SEQ_CD='2' THEN
					                                                   NVL((SELECT APP_GROUP_NM FROM TPAP133
					                                                         WHERE ENTER_CD = A.ENTER_CD
					                                                           AND APPRAISAL_CD=A.APPRAISAL_CD
					                                                           AND APP_GROUP_CD=A.APP_GROUP_CD), '')
					                                               ELSE ' '
					                                           END AS APP_2ND_GROUP_NM,
					                                          CASE WHEN A.APP_SEQ_CD='6' THEN
					                                                   NVL((SELECT APP_GROUP_NM FROM TPAP133
					                                                         WHERE ENTER_CD = A.ENTER_CD
					                                                           AND APPRAISAL_CD=A.APPRAISAL_CD
					                                                           AND APP_GROUP_CD=A.APP_GROUP_CD), '')
					                                               ELSE ' '
					                                           END AS APP_3RD_GROUP_NM,
					                                          CASE WHEN A.APP_SEQ_CD='3' THEN
					                                                   NVL((SELECT APP_GROUP_NM FROM TPAP133
					                                                         WHERE ENTER_CD = A.ENTER_CD
					                                                           AND APPRAISAL_CD=A.APPRAISAL_CD
					                                                           AND APP_GROUP_CD=A.APP_GROUP_CD), '')
					                                               ELSE ' '
					                                           END AS APP_BOSS_GROUP_NM,
					                                          CASE WHEN A.APP_SEQ_CD='4' THEN
					                                                   NVL((SELECT APP_GROUP_NM FROM TPAP133
					                                                         WHERE ENTER_CD = A.ENTER_CD
					                                                           AND APPRAISAL_CD=A.APPRAISAL_CD
					                                                           AND APP_GROUP_CD=A.APP_GROUP_CD), '')
					                                               ELSE ' '
					                                           END AS APP_COLLEAGUE_GROUP_NM
					                                      FROM TPAP202 A
					                                      WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
					                                        AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
					                                   )
					                             GROUP BY ENTER_CD, APPRAISAL_CD, APP_STEP_CD, SABUN, APP_ORG_CD
					                            ) T1
					                   ) T
					           ) B
					       WHERE A.ENTER_CD      = B.ENTER_CD(+)
					         AND A.APPRAISAL_CD = B.APPRAISAL_CD(+)
					         AND A.APP_STEP_CD  = B.APP_STEP_CD(+)
					         AND A.SABUN        = B.SABUN(+)
					         AND A.APP_ORG_CD   = B.APP_ORG_CD(+)
					         AND A.ENTER_CD     = TRIM(#{ssnEnterCd})
					         AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
					         AND A.APP_STEP_CD  = TRIM(#{searchAppStepCd})
<if test='searchAppYn != null and !searchAppYn.equals("")'>
					         AND A.APP_YN   = TRIM(#{searchAppYn})
</if>
<if test='searchAppConfirmYn != null and !searchAppConfirmYn.equals("")'>
					         AND A.APP_CONFIRM_YN = TRIM(#{searchAppConfirmYn})
</if>
<if test='searchSabunName != null and !searchSabunName.equals("")'>
					         AND (A.NAME LIKE #{searchSabunName} ||'%' OR A.SABUN LIKE #{searchSabunName} ||'%')
</if>
<if test='searchOrgNm != null and !searchOrgNm.equals("")'>
					         AND A.APP_ORG_NM like '%' || TRIM(#{searchOrgNm}) || '%'
</if>
					       ) X
					 WHERE 1=1
<if test='searchAppSabunName != null and !searchAppSabunName.equals("")'>
	<if test='searchAppSeqCd != null and searchAppSeqCd.equals("1")'>
					   AND (APP_1ST_SABUN LIKE #{searchAppSabunName} ||'%' OR APP_1ST_SABUN_NM LIKE #{searchAppSabunName} ||'%')
	</if>
			<if test='searchAppSeqCd != null and searchAppSeqCd.equals("2")'>
					   AND (APP_2ND_SABUN LIKE #{searchAppSabunName} ||'%' OR APP_2ND_SABUN_NM LIKE #{searchAppSabunName} ||'%')
			</if>
			<if test='searchAppSeqCd != null and searchAppSeqCd.equals("6")'>
					   AND (APP_3RD_SABUN LIKE #{searchAppSabunName} ||'%' OR APP_3RD_SABUN_NM LIKE #{searchAppSabunName} ||'%')
			</if>
</if>
<if test='searchGroupCd != null and !searchGroupCd.equals("")'>
	<if test='searchAppSeqCd != null and searchAppSeqCd.equals("1")'>
					   AND APP_1ST_GROUP_CD = TRIM(#{searchGroupCd})
	</if><if test='searchAppSeqCd != null and searchAppSeqCd.equals("2")'>
					   AND APP_2ND_GROUP_CD = TRIM(#{searchGroupCd})
		</if><if test='searchAppSeqCd != null and searchAppSeqCd.equals("6")'>
					   AND APP_3RD_GROUP_CD = TRIM(#{searchGroupCd})
		</if><if test='searchAppSeqCd != null and searchAppSeqCd.equals("3")'>
					   AND APP_BOSS_GROUP_CD = TRIM(#{searchGroupCd})
		</if><if test='searchAppSeqCd != null and searchAppSeqCd.equals("4")'>
					   AND APP_COLLEAGUE_GROUP_CD = TRIM(#{searchGroupCd})
		</if>
</if>
					   -- 조직이동여부
<if test='searchChgOrgYn != null and !searchChgOrgYn.equals("")'>
	<if test='searchChgOrgYn.equals("Y")'>
					<![CDATA[   AND CHG_ORG_CNT > 0 ]]>
	</if><if test='searchChgOrgYn.equals("N")'>
					   AND CHG_ORG_CNT = 0
		</if>
</if>
					   --2개이상부서평가대상자
<if test='searchExtType != null and searchExtType.equals("spanTot4")'>
					<![CDATA[     AND APP_2_ORG > 1 ]]>
</if>
					 ORDER BY APP_ORG_CD, JIKGUB_CD, SABUN
		</select>
		<select parameterType="map" resultType="cMap" id="getAppPeopleMgrList2">

				<![CDATA[
					SELECT A.ENTER_CD,
							A.APPRAISAL_CD,
							A.SABUN,
							A.APP_ORG_CD,
							A.APP_STEP_CD,
							A.APP_SEQ_CD,
							A.APP_SABUN,
							F_COM_GET_NAMES(A.ENTER_CD, A.APP_SABUN) AS APP_NAME,
							--A.APP_TS_YMD,
							--A.APP_TE_YMD,
							A.ORG_CD,
							A.ORG_NM,
							A.APP_GROUP_CD,
							C.APP_GROUP_NM,
							A.JIKWEE_CD,
							A.JIKWEE_NM,
							A.JIKCHAK_CD,
							A.JIKCHAK_NM,
							A.JIKGUB_CD,
							A.JIKGUB_NM,
							B.APP_ORG_NM
					FROM  TPAP202 A
						, TPAP201 B
						, TPAP133 C
						, TPAP101 D
					WHERE A.ENTER_CD = B.ENTER_CD
						AND A.APPRAISAL_CD = B.APPRAISAL_CD
						AND A.APP_STEP_CD = B.APP_STEP_CD
						AND A.SABUN = B.SABUN
						AND A.APP_ORG_CD = B.APP_ORG_CD
						AND A.ENTER_CD = C.ENTER_CD(+)
						AND A.APPRAISAL_CD = C.APPRAISAL_CD(+)
						AND A.APP_GROUP_CD = C.APP_GROUP_CD(+)
						AND A.ENTER_CD = TRIM(#{ssnEnterCd})
						AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
						AND A.APP_STEP_CD = TRIM(#{searchAppStepCd})
						AND A.SABUN = TRIM(#{searchSabun})
						AND A.APP_ORG_CD = TRIM(#{searchAppOrgCd})
						AND D.ENTER_CD = A.ENTER_CD
						AND D.APPRAISAL_CD = A.APPRAISAL_CD
					ORDER BY A.APP_SEQ_CD ASC, F_COM_JIKJE_SORT(A.ENTER_CD, A.APP_SABUN, D.APP_E_YMD) ASC
				]]>


		</select>

		<select parameterType="map" resultType="cMap" id="getAppPeopleMgrPopList">

				<![CDATA[
					SELECT APP_GROUP_CD, APP_GROUP_NM
					  FROM TPAP133
					 WHERE ENTER_CD = TRIM(#{ssnEnterCd})
					   AND APPRAISAL_CD = TRIM(#{searchAppraisalCd})
						        ]]>
			<if test='searchAppSeqCd != null and !searchAppSeqCd.equals("")'>
					   AND APP_SEQ_CD = TRIM(#{searchAppSeqCd})
			</if>
			<if test='searchAppGroupNm != null and !searchAppGroupNm.equals("")'>
					   AND APP_GROUP_NM LIKE '%' || #{searchAppGroupNm} ||'%'
			</if>
					 ORDER BY APP_GROUP_CD ASC
		</select>

		<select parameterType="map" resultType="cMap" id="getAppPeopleMgrMap1">

				<![CDATA[
					SELECT TO_CHAR(TO_DATE(A.APP_AS_YMD,'YYYYMMDD'),'YYYY-MM-DD') AS APP_AS_YMD
						 , TO_CHAR(TO_DATE(A.APP_AE_YMD,'YYYYMMDD'),'YYYY-MM-DD') AS APP_AE_YMD
						 , TO_CHAR(TO_DATE(A.D_BASE_YMD,'YYYYMMDD'),'YYYY-MM-DD') AS D_BASE_YMD
						 , TO_CHAR(SYSDATE,'yyyyMMDD') AS CURRYMD
						 , B.APP_TYPE_CD
						 , B.APPRAISAL_YY
					  FROM TPAP105 A, TPAP101 B
					 WHERE A.ENTER_CD     = TRIM(#{ssnEnterCd})
					   AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
				 	   AND A.APP_STEP_CD  = TRIM(#{searchAppStepCd})
				 	   AND A.ENTER_CD     = B.ENTER_CD
				 	   AND A.APPRAISAL_CD = B.APPRAISAL_CD
					 ORDER BY A.APP_STEP_CD
				]]>


		</select>

		<select parameterType="map" resultType="cMap" id="getAppPeopleMgrMap2">

				<![CDATA[
					SELECT NVL(A1.TOT_CNT,0) AS TOT1 /* 전체 인원수 */
						,NVL(A2.APP_CNT,0) AS TOT2 /* 평가대상 인원수 */
						,NVL(A3.EX_APP_CNT,0) AS TOT3 /* 평가제외 인원수 */
						,NVL(A4.CHK_APP_CNT1,0) AS TOT4 /* 2개이상부서평가대상 인원수 */
						,NVL(A5.CHK_APP_CNT2,0) AS TOT5 /* 2개이상주관부서 인원수 */
					FROM ( SELECT ENTER_CD
							FROM TORG900
							WHERE ENTER_CD = TRIM(#{ssnEnterCd})
						) X
						/* 전체 인원수 */
						,( SELECT A.ENTER_CD, COUNT(DISTINCT A.SABUN) AS TOT_CNT
							FROM TPAP201 A
							WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
								AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
								AND A.APP_STEP_CD = TRIM(#{searchAppStepCd})
							GROUP BY A.ENTER_CD
						) A1
						/* 평가대상 인원수 */
						,( SELECT A.ENTER_CD, COUNT(DISTINCT A.SABUN) AS APP_CNT
							FROM TPAP201 A
							WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
								AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
								AND A.APP_STEP_CD = TRIM(#{searchAppStepCd})
								AND A.APP_YN = 'Y'
							GROUP BY A.ENTER_CD
						) A2
						/* 평가제외 인원수 */
						,( SELECT ENTER_CD, SUM(EX_APP_CNT) AS EX_APP_CNT
							FROM ( SELECT A.ENTER_CD, COUNT(DISTINCT A.SABUN) AS EX_APP_CNT
									FROM TPAP201 A
									WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
										AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
										AND A.APP_STEP_CD = TRIM(#{searchAppStepCd})
									GROUP BY A.ENTER_CD, A.SABUN
									HAVING COUNT(*) = SUM(CASE WHEN A.APP_YN = 'N' THEN 1 ELSE 0 END)
								)
							GROUP BY ENTER_CD
						) A3
						/* 2개이상부서평가대상 인원수 */
						,( SELECT ENTER_CD, SUM(CHK_APP_CNT1) AS CHK_APP_CNT1
							FROM ( SELECT A.ENTER_CD, COUNT(DISTINCT A.SABUN) AS CHK_APP_CNT1
									FROM TPAP201 A
									WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
										AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
										AND A.APP_STEP_CD = TRIM(#{searchAppStepCd})
									GROUP BY A.ENTER_CD, A.SABUN
									HAVING SUM(CASE WHEN A.APP_YN = 'Y' THEN 1 ELSE 0 END) >= 2
								)
							GROUP BY ENTER_CD
						) A4
						/* 2개이상주관부서 인원수 */
						,(SELECT ENTER_CD, SUM(CHK_APP_CNT2) AS CHK_APP_CNT2
							FROM ( SELECT A.ENTER_CD, COUNT(DISTINCT A.SABUN) AS CHK_APP_CNT2
									FROM TPAP201 A
									WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
										AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
										AND A.APP_STEP_CD = TRIM(#{searchAppStepCd})
									GROUP BY A.ENTER_CD, A.SABUN
									HAVING (SUM(CASE WHEN A.APP_YN = 'Y' AND NVL(MAIN_ORG_YN,'N') = 'Y' THEN 1 ELSE 0 END) >= 2 /* 2개이상주관부서 인원수 */
										OR (SUM(CASE WHEN A.APP_YN = 'Y' THEN 1 ELSE 0 END) >= 1 AND SUM(CASE WHEN NVL(MAIN_ORG_YN,'N') = 'Y' THEN 1 ELSE 0 END) = 0) /* 주관부서가 없는 인원수 */
										)
								)
							GROUP BY ENTER_CD
						) A5
					 WHERE X.ENTER_CD = A1.ENTER_CD(+)
						AND X.ENTER_CD = A2.ENTER_CD(+)
						AND X.ENTER_CD = A3.ENTER_CD(+)
						AND X.ENTER_CD = A4.ENTER_CD(+)
						AND X.ENTER_CD = A5.ENTER_CD(+)
				]]>


		</select>

<!-- 조직이동상세리스트-->
		<select parameterType="map" resultType="cMap" id="getAppPeopleMgrChgOrgList">

				<![CDATA[
					SELECT SDATE, EDATE, ORG_CD, F_COM_GET_ORG_NM(ENTER_CD, ORG_CD, SDATE) AS ORG_NM
					  FROM THRM151
					 WHERE ENTER_CD = TRIM(#{ssnEnterCd})
					   AND SABUN    = TRIM(#{searchSabun})
					   AND ( SDATE >= #{searchAppraisalYy} || '0101' OR #{searchAppraisalYy} || '0101' BETWEEN SDATE AND NVL(EDATE, '99991231') )
					 ORDER BY SDATE

				]]>


		</select>

<!-- 		저장 -->
		<update parameterType="map" id="saveAppPeopleMgr1">

				<![CDATA[
					MERGE INTO TPAP201 T
					USING	(
							SELECT TRIM(#{ssnEnterCd})	AS	ENTER_CD
								,	SYSDATE				AS	CHKDATE
								,	#{ssnSabun}			AS	CHKID
								,	A.APPRAISAL_CD
								, A.APP_STEP_CD
								, A.SABUN
								, A.APP_ORG_CD
								, A.APP_ORG_NM
								, A.NAME
								, A.JIKWEE_CD
								, F_COM_GET_GRCODE_NAME(#{ssnEnterCd}, 'H20030', A.JIKWEE_CD) AS JIKWEE_NM
								, A.JOB_CD
								, A.JOB_NM
								, A.WORK_TYPE
								, A.WORK_TYPE_NM
								, F_COM_GET_GRCODE_NAME(#{ssnEnterCd}, 'H20020', A.JIKCHAK_CD) AS JIKCHAK_NM
								, A.JIKCHAK_CD
								, A.JIKGUB_CD
								, F_COM_GET_GRCODE_NAME(#{ssnEnterCd}, 'H20010', A.JIKGUB_CD) AS JIKGUB_NM
								, A.APP_SHEET_TYPE
								, A.APP_METHOD_CD
								, A.APP_YN
								, A.MAIN_ORG_YN
								, A.APP_EX_CD
								, A.APP_CONFIRM_YN
								, A.MBO_CLOSE_YN
								, A.COMP_CLOSE_YN
								, A.NOTE
								, A.MBO_TARGET_YN
								, A.WORK_TARGET_YN
								, A.COMP_TARGET_YN
								, A.MANAGE_CD
								, F_COM_GET_GRCODE_NAME(#{ssnEnterCd}, 'H10030', A.MANAGE_CD) AS MANAGE_NM
							FROM	(
									SELECT NULL AS APPRAISAL_CD
										, NULL AS APP_STEP_CD
										, NULL AS SABUN
										, NULL AS APP_ORG_CD
										, NULL AS APP_ORG_NM
										, NULL AS NAME
										, NULL AS JIKWEE_CD
										, NULL AS JOB_CD
										, NULL AS JOB_NM
										, NULL AS WORK_TYPE
										, NULL AS WORK_TYPE_NM
										, NULL AS JIKCHAK_CD
										, NULL AS JIKGUB_CD
										, NULL AS APP_SHEET_TYPE
										, NULL AS APP_METHOD_CD
										, NULL AS APP_YN
										, NULL AS MAIN_ORG_YN
										, NULL AS APP_EX_CD
										, NULL AS APP_CONFIRM_YN
										, NULL AS MBO_CLOSE_YN
										, NULL AS COMP_CLOSE_YN
										, NULL AS NOTE
										, NULL AS MBO_TARGET_YN
										, NULL AS WORK_TARGET_YN
										, NULL AS COMP_TARGET_YN
										, NULL AS MANAGE_CD
									FROM	DUAL
									]]>
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											  TRIM(#{rm.appraisalCd})	AS APPRAISAL_CD
										, TRIM(#{rm.appStepCd})		AS APP_STEP_CD
										, TRIM(#{rm.sabun})			AS SABUN
										, TRIM(#{rm.appOrgCd})		AS APP_ORG_CD
										, TRIM(#{rm.appOrgNm})		AS APP_ORG_NM
										, TRIM(#{rm.name})			AS NAME
										, TRIM(#{rm.jikweeCd})		AS JIKWEE_CD
										, TRIM(#{rm.jobCd})			AS JOB_CD
										, TRIM(#{rm.jobNm})			AS JOB_NM
										, TRIM(#{rm.workType})		AS WORK_TYPE
										, TRIM(#{rm.workTypeNm})	AS WORK_TYPE_NM
										, TRIM(#{rm.jikchakCd})		AS JIKCHAK_CD
										, TRIM(#{rm.jikgubCd})		AS JIKGUB_CD
										, TRIM(#{rm.appSheetType})	AS APP_SHEET_TYPE
										, TRIM(#{rm.appMethodCd})   AS APP_METHOD_CD
										, TRIM(#{rm.appYn})			AS APP_YN
										, TRIM(#{rm.mainOrgYn})		AS MAIN_ORG_YN
										, TRIM(#{rm.appExCd})		AS APP_EX_CD
										, TRIM(#{rm.appConfirmYn})	AS APP_CONFIRM_YN
										, TRIM(#{rm.mboCloseYn})	AS MBO_CLOSE_YN
										, TRIM(#{rm.compCloseYn})	AS COMP_CLOSE_YN
										, TRIM(#{rm.note})			AS NOTE
										, TRIM(#{rm.mboTargetYn})	AS MBO_TARGET_YN
										, TRIM(#{rm.workTargetYn})	AS WORK_TARGET_YN
										, TRIM(#{rm.compTargetYn})	AS COMP_TARGET_YN
										, TRIM(#{rm.manageCd})		AS MANAGE_CD
									FROM   DUAL
</foreach>
								) A WHERE APPRAISAL_CD   IS NOT NULL
									AND  APP_STEP_CD    IS NOT NULL
									AND  SABUN          IS NOT NULL
									AND  APP_ORG_CD     IS NOT NULL
							) S
					ON ( T.ENTER_CD		  = S.ENTER_CD
					AND  T.APPRAISAL_CD   = S.APPRAISAL_CD
					AND  T.APP_STEP_CD    = S.APP_STEP_CD
					AND  T.SABUN          = S.SABUN
					AND  T.APP_ORG_CD     = S.APP_ORG_CD
					)
					WHEN MATCHED THEN
						UPDATE SET
									  T.APP_ORG_NM		= S.APP_ORG_NM
									, T.NAME			= S.NAME
									, T.JIKWEE_CD		= S.JIKWEE_CD
									, T.JIKWEE_NM		= S.JIKWEE_NM
									, T.JOB_CD			= S.JOB_CD
									, T.JOB_NM			= S.JOB_NM
									, T.WORK_TYPE		= S.WORK_TYPE
									, T.WORK_TYPE_NM	= S.WORK_TYPE_NM
									, T.JIKCHAK_NM		= S.JIKCHAK_NM
									, T.JIKCHAK_CD		= S.JIKCHAK_CD
									, T.JIKGUB_CD		= S.JIKGUB_CD
									, T.JIKGUB_NM		= S.JIKGUB_NM
									, T.APP_SHEET_TYPE	= S.APP_SHEET_TYPE
									, T.APP_METHOD_CD	= S.APP_METHOD_CD
									, T.APP_YN			= S.APP_YN
									, T.MAIN_ORG_YN		= S.MAIN_ORG_YN
									, T.APP_EX_CD		= S.APP_EX_CD
									, T.CHKDATE			= S.CHKDATE
									, T.CHKID			= S.CHKID
									, T.APP_CONFIRM_YN	= S.APP_CONFIRM_YN
									, T.MBO_CLOSE_YN 	= S.MBO_CLOSE_YN
									, T.COMP_CLOSE_YN	= S.COMP_CLOSE_YN
									, T.NOTE         	= S.NOTE
									, T.MBO_TARGET_YN  	= S.MBO_TARGET_YN
									, T.WORK_TARGET_YN 	= S.WORK_TARGET_YN
									, T.COMP_TARGET_YN 	= S.COMP_TARGET_YN
									, T.MANAGE_CD 		= S.MANAGE_CD
									, T.MANAGE_NM 		= S.MANAGE_NM
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.APPRAISAL_CD
							, T.APP_STEP_CD
							, T.SABUN
							, T.APP_ORG_CD
							, T.APP_ORG_NM
							, T.NAME
							, T.JIKWEE_CD
							, T.JIKWEE_NM
							, T.JOB_CD
							, T.JOB_NM
							, T.WORK_TYPE
							, T.WORK_TYPE_NM
							, T.JIKCHAK_NM
							, T.JIKCHAK_CD
							, T.JIKGUB_CD
							, T.JIKGUB_NM
							, T.APP_SHEET_TYPE
							, T.APP_METHOD_CD
							, T.APP_YN
							, T.MAIN_ORG_YN
							, T.APP_EX_CD
							, T.CHKDATE
							, T.CHKID
							, T.APP_CONFIRM_YN
							, T.MBO_CLOSE_YN
							, T.COMP_CLOSE_YN
							, T.NOTE
							, T.MBO_TARGET_YN
							, T.WORK_TARGET_YN
							, T.COMP_TARGET_YN
							, T.MANAGE_CD
							, T.MANAGE_NM
						)
						VALUES
						(
 							  S.ENTER_CD
							, S.APPRAISAL_CD
							, S.APP_STEP_CD
							, S.SABUN
							, S.APP_ORG_CD
							, S.APP_ORG_NM
							, S.NAME
							, S.JIKWEE_CD
							, S.JIKWEE_NM
							, S.JOB_CD
							, S.JOB_NM
							, S.WORK_TYPE
							, S.WORK_TYPE_NM
							, S.JIKCHAK_NM
							, S.JIKCHAK_CD
							, S.JIKGUB_CD
							, S.JIKGUB_NM
							, S.APP_SHEET_TYPE
							, S.APP_METHOD_CD
							, S.APP_YN
							, S.MAIN_ORG_YN
							, S.APP_EX_CD
							, S.CHKDATE
							, S.CHKID
							, S.APP_CONFIRM_YN
							, S.MBO_CLOSE_YN
							, S.COMP_CLOSE_YN
							, S.NOTE
							, S.MBO_TARGET_YN
							, S.WORK_TARGET_YN
							, S.COMP_TARGET_YN
							, S.MANAGE_CD
							, S.MANAGE_NM
						)
		</update>

		<!-- 		저장 -->
		<update parameterType="map" id="saveAppPeopleMgr2">

				<![CDATA[
					MERGE INTO TPAP202 T
					USING	(
							SELECT A.ENTER_CD
								, A.APPRAISAL_CD
								, A.APP_STEP_CD
								, A.SABUN
								, A.APP_ORG_CD
								, A.APP_SEQ_CD
								, A.APP_SABUN
								, A.ORG_CD
								, A.ORG_NM
								, A.JIKWEE_CD
								, A.JIKWEE_NM
								, A.JIKCHAK_CD
								, A.JIKCHAK_NM
								, A.JIKGUB_CD
								, A.JIKGUB_NM
								, A.APP_GROUP_CD
								, A.APPRAISAL_YN
								, A.APP_APP_MEMO
								, A.APP_RATE
							FROM	(
									SELECT NULL AS ENTER_CD
										, NULL AS APPRAISAL_CD
										, NULL AS APP_STEP_CD
										, NULL AS SABUN
										, NULL AS APP_ORG_CD
										, NULL AS APP_SEQ_CD
										, NULL AS APP_SABUN
										, NULL AS ORG_CD
										, NULL AS ORG_NM
										, NULL AS JIKWEE_CD
										, NULL AS JIKWEE_NM
										, NULL AS JIKCHAK_CD
										, NULL AS JIKCHAK_NM
										, NULL AS JIKGUB_CD
										, NULL AS JIKGUB_NM
										, NULL AS APP_GROUP_CD
										, NULL AS APPRAISAL_YN
										, NULL AS APP_APP_MEMO
										, NULL AS APP_RATE
									FROM	DUAL
									]]>
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
									UNION ALL
									SELECT   #{ssnEnterCd}       	    AS ENTER_CD
										, TRIM(#{rm.appraisalCd})	AS APPRAISAL_CD
										, TRIM(#{rm.appStepCd})		AS APP_STEP_CD
										, TRIM(#{rm.sabun})			AS SABUN
										, TRIM(#{rm.appOrgCd})		AS APP_ORG_CD
										, TRIM(#{rm.appSeqCd})		AS APP_SEQ_CD
										, TRIM(#{rm.appSabun})		AS APP_SABUN
										, TRIM(#{rm.orgCd})			AS ORG_CD
										, TRIM(#{rm.orgNm})			AS ORG_NM
										, TRIM(#{rm.jikweeCd})		AS JIKWEE_CD
										, TRIM(#{rm.jikweeNm})		AS JIKWEE_NM
										, TRIM(#{rm.jikchakCd})		AS JIKCHAK_CD
										, TRIM(#{rm.jikchakNm})		AS JIKCHAK_NM
										, TRIM(#{rm.jikgubCd})		AS JIKGUB_CD
										, TRIM(#{rm.jikgubNm})		AS JIKGUB_NM
										, TRIM(#{rm.appGroupCd})	AS APP_GROUP_CD
										, ''	AS APPRAISAL_YN
										, ''	AS APP_APP_MEMO
										, ''	AS APP_RATE
									FROM     DUAL
</foreach>
								) A WHERE ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD		  = S.ENTER_CD
					AND  T.APPRAISAL_CD   = S.APPRAISAL_CD
					AND  T.APP_STEP_CD    = S.APP_STEP_CD
					AND  T.SABUN          = S.SABUN
					AND  T.APP_ORG_CD     = S.APP_ORG_CD
					AND  T.APP_SEQ_CD     = S.APP_SEQ_CD
					AND  T.APP_SABUN      = S.APP_SABUN
					)
					WHEN MATCHED THEN
						UPDATE SET
							  T.APP_GROUP_CD	= S.APP_GROUP_CD
							, T.CHKDATE			= SYSDATE
							, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.APPRAISAL_CD
							, T.APP_STEP_CD
							, T.SABUN
							, T.APP_ORG_CD
							, T.APP_SEQ_CD
							, T.APP_SABUN
							, T.ORG_CD
							, T.ORG_NM
							, T.JIKWEE_CD
							, T.JIKWEE_NM
							, T.JIKCHAK_CD
							, T.JIKCHAK_NM
							, T.JIKGUB_CD
							, T.JIKGUB_NM
							, T.APP_GROUP_CD
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.APPRAISAL_CD
							, S.APP_STEP_CD
							, S.SABUN
							, S.APP_ORG_CD
							, S.APP_SEQ_CD
							, S.APP_SABUN
							, S.ORG_CD
							, S.ORG_NM
							, S.JIKWEE_CD
							, S.JIKWEE_NM
							, S.JIKCHAK_CD
							, S.JIKCHAK_NM
							, S.JIKGUB_CD
							, S.JIKGUB_NM
							, S.APP_GROUP_CD
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

<!-- 		삭제 -->
		<delete parameterType="map" id="deleteAppPeopleMgr1">

					DELETE FROM TPAP201
					WHERE 	(ENTER_CD,APPRAISAL_CD,APP_STEP_CD,SABUN,APP_ORG_CD) IN 	(  (NULL,NULL,NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
											#{ssnEnterCd}
										<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
											, TRIM( #{rm.appraisalCd} )
										</if>
										<if test='rm.appStepCd != null and !rm.appStepCd.equals("")'>
											, TRIM( #{rm.appStepCd} )
										</if>
										<if test='rm.sabun != null and !rm.sabun.equals("")'>
											, TRIM( #{rm.sabun} )
										</if>
										<if test='rm.appOrgCd != null and !rm.appOrgCd.equals("")'>
											, TRIM( #{rm.appOrgCd} )
										</if>
										)
</foreach>
										)
		</delete>

		<delete parameterType="map" id="deleteAppPeopleMgr1Sub">

					DELETE FROM TPAP202
					WHERE 	(ENTER_CD,APPRAISAL_CD,APP_STEP_CD,SABUN,APP_ORG_CD) IN 	(  (NULL,NULL,NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
											#{ssnEnterCd}
										<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
											, TRIM( #{rm.appraisalCd} )
										</if>
										<if test='rm.appStepCd != null and !rm.appStepCd.equals("")'>
											, TRIM( #{rm.appStepCd} )
										</if>
										<if test='rm.sabun != null and !rm.sabun.equals("")'>
											, TRIM( #{rm.sabun} )
										</if>
										<if test='rm.appOrgCd != null and !rm.appOrgCd.equals("")'>
											, TRIM( #{rm.appOrgCd} )
										</if>
										)
</foreach>
										)
		</delete>

		<delete parameterType="map" id="deleteAppPeopleMgr2">

					DELETE FROM TPAP202
					WHERE 	(ENTER_CD,APPRAISAL_CD,APP_STEP_CD,SABUN,APP_ORG_CD,APP_SEQ_CD, APP_SABUN) IN 	(  (NULL,NULL,NULL,NULL,NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
											#{ssnEnterCd}
										<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
											, TRIM( #{rm.appraisalCd} )
										</if>
										<if test='rm.appStepCd != null and !rm.appStepCd.equals("")'>
											, TRIM( #{rm.appStepCd} )
										</if>
										<if test='rm.sabun != null and !rm.sabun.equals("")'>
											, TRIM( #{rm.sabun} )
										</if>
										<if test='rm.appOrgCd != null and !rm.appOrgCd.equals("")'>
											, TRIM( #{rm.appOrgCd} )
										</if>
										<if test='rm.appSeqCd != null and !rm.appSeqCd.equals("")'>
											, TRIM( #{rm.appSeqCd} )
										</if>
										<if test='rm.appSabun != null and !rm.appSabun.equals("")'>
											, TRIM( #{rm.appSabun} )
										</if>
										)
</foreach>
									)
		</delete>

		<delete parameterType="map" id="deleteAppPeopleMgrAll">

				<![CDATA[
					DELETE FROM TPAP201
					WHERE ENTER_CD = TRIM(#{ssnEnterCd})
						AND APPRAISAL_CD = TRIM(#{searchAppraisalCd})
						AND APP_STEP_CD = TRIM(#{searchAppStepCd})
				]]>


		</delete>

		<delete parameterType="map" id="deleteAppPeopleMgrAllSub">

				<![CDATA[
					DELETE FROM TPAP202
					WHERE ENTER_CD = TRIM(#{ssnEnterCd})
						AND APPRAISAL_CD = TRIM(#{searchAppraisalCd})
						AND APP_STEP_CD = TRIM(#{searchAppStepCd})
				]]>


		</delete>






<!-- 평가대상자 생성 -->
		<update parameterType="map" id="prcAppPeopleMgr1" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_APP_EMP_INS(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppraisalCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppStepCd,mode=IN,jdbcType=VARCHAR},
				#{searchDBaseYmd,mode=IN,jdbcType=VARCHAR},
				#{updYn,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

<!-- 평가대상자 생성 -->
		<update parameterType="map" id="prcAppPeopleCreateMgr1" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_APP_EMP_INS(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{appraisalCd,mode=IN,jdbcType=VARCHAR},
				#{appStepCd,mode=IN,jdbcType=VARCHAR},
				#{appBaseYmd,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

<!-- 평가자 생성 -->
		<update parameterType="map" id="prcAppPeopleMgr2" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_APPRAISER_INS(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppraisalCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppStepCd,mode=IN,jdbcType=VARCHAR},
				#{searchDBaseYmd,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

<!-- 평가자 생성 -->
		<update parameterType="map" id="prcAppPeopleCreateMgr2" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_APPRAISER_INS(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{appraisalCd,mode=IN,jdbcType=VARCHAR},
				#{appStepCd,mode=IN,jdbcType=VARCHAR},
				#{appBaseYmd,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>
		
<!-- 평가그룹 생성 -->
		<update parameterType="map" id="prcAppPeopleCreateMgr3" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_APPGROUP_BASIC_INS(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{appraisalCd,mode=IN,jdbcType=VARCHAR},
				#{appSeqCd,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

<!-- 평가그룹업데이트 -->
		<update parameterType="map" id="prcAppPeopleCreateMgr4" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_APP_GROUP_UPDATE(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{appraisalCd,mode=IN,jdbcType=VARCHAR},
				#{appStepCd,mode=IN,jdbcType=VARCHAR},
				#{appBaseYmd,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

<!-- KPI 생성 -->
		<update parameterType="map" id="prcAppPeopleMgr3" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_MBO_APP_ITEM_INS(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{appraisalCd,mode=IN,jdbcType=VARCHAR},
				#{appStepCd,mode=IN,jdbcType=VARCHAR},
				#{sabun,mode=IN,jdbcType=VARCHAR},
				#{appOrgCd,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>
<!-- 업적 생성 -->
		<update parameterType="map" id="prcAppPeopleMgr4" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_COMP_DIC_INS(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{appraisalCd,mode=IN,jdbcType=VARCHAR},
				#{sabun,mode=IN,jdbcType=VARCHAR},
				#{appStepCd,mode=IN,jdbcType=VARCHAR},
				#{appOrgCd,mode=IN,jdbcType=VARCHAR},
				#{tmpYn,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

<!-- 대상자 update1 -->
		<update parameterType="map" id="updAppPeopleMgrTmpYn1">

				<![CDATA[
			     UPDATE TPAP201 A
					SET TMP_YN  = 'N'
				  WHERE ENTER_CD     = TRIM(#{ssnEnterCd})
				    AND APPRAISAL_CD = TRIM(#{searchAppraisalCd})
				    AND APP_STEP_CD  = TRIM(#{searchAppStepCd})
				]]>


		</update>
<!-- 대상자 update1 -->
		<update parameterType="map" id="updAppPeopleMgrTmpYn2">

			     UPDATE TPAP201 A
					SET TMP_YN  = 'Y'
				  WHERE ENTER_CD     = TRIM(#{ssnEnterCd})
				    AND APPRAISAL_CD = TRIM(#{searchAppraisalCd})
				    AND APP_STEP_CD  = TRIM(#{searchAppStepCd})
				    AND SABUN ||'_'|| APP_ORG_CD IN ( NULL
			<foreach collection="paramRows" item="rm" >
				       , TRIM( #{rm.sabun} )||'_'||TRIM( #{rm.appOrgCd} )

			</foreach>			       )
		</update>

</mapper>
