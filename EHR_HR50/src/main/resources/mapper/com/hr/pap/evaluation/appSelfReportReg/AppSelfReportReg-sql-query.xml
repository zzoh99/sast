<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="pap.evaluation.appSelfReportReg">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getAppSelfReportRegList">

				<![CDATA[
					  SELECT   A.APPRAISAL_CD
                              ,A.ITEM_CD
                              ,A.ITEM_NM
                              ,B.VALUE_CD
                              ,B.VALUE_NM
                              ,B.SUNBUN
                              ,DECODE(C.VALUE_CD,'','N','checked') AS CHECKED
                      FROM     TPAP106 A
                              ,TPAP107 B
                              ,TPAP322 C
                      WHERE    A.ENTER_CD = B.ENTER_CD
                      AND      A.APPRAISAL_CD = B.APPRAISAL_CD
                      AND      A.ITEM_CD = B.ITEM_CD
                      AND      A.ENTER_CD     =  #{ssnEnterCd}
                      AND      B.APPRAISAL_CD =  #{searchAppraisalCd}
                      AND      B.ENTER_CD     =  C.ENTER_CD (+)
                      AND      B.APPRAISAL_CD =  C.APPRAISAL_CD (+)
                      AND      B.ITEM_CD      =  C.ITEM_CD (+)
                      AND      B.VALUE_CD     =  C.VALUE_CD(+)
                      AND      C.SABUN(+)        =  #{searchSabun}
                      ORDER BY A.SUNBUN, B.SUNBUN
				]]>
		</select>


		<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getAppSelfReportRegList2">
				<![CDATA[
					  SELECT   A.ENTER_CD
                              ,A.APPRAISAL_CD
                              ,A.SABUN
                              ,A.ITEM8
                              ,A.ITEM9
                              ,F_COM_GET_ORG_NM(A.ENTER_CD,A.ITEM9,TO_CHAR(SYSDATE,'YYYYMMDD')) AS ITEM9_NM
                              ,A.ITEM10
                              ,A.ITEM11
                              ,A.ITEM12
                              ,F_COM_GET_ORG_NM(A.ENTER_CD,A.ITEM12,TO_CHAR(SYSDATE,'YYYYMMDD')) AS ITEM12_NM
                              ,A.ORG_CD
                              ,A.NOTE
                              ,A.APP_STATUS
                      FROM     TPAP321 A
                      WHERE    A.ENTER_CD     = #{ssnEnterCd}
                      AND      A.APPRAISAL_CD = #{searchAppraisalCd}
                      AND      A.SABUN        = #{searchSabun}
				]]>
		</select>


		<select parameterType="map" resultType="cMap" id="getAppSelfReportRegMap">
				<![CDATA[
					SELECT CASE WHEN CNT = 0 THEN '9'
				                ELSE
						             (SELECT  NVL (B.APP_STATUS, '0')
						              FROM    TPAP201 A
						                	 ,TPAP321 B
						              WHERE   A.ENTER_CD = B.ENTER_CD(+)
						              AND     A.APPRAISAL_CD = B.APPRAISAL_CD(+)
						              AND     A.SABUN = B.SABUN(+)
						              AND     A.ENTER_CD     = #{ssnEnterCd}
						              AND     A.APPRAISAL_CD = #{searchAppraisalCd}
						              AND     A.SABUN        = #{searchSabun})
				           END  AS APP_STATUS
				    FROM (SELECT COUNT (1) AS CNT
				          FROM   TPAP201 A
				          WHERE  A.ENTER_CD     = #{ssnEnterCd}
				          AND    A.APPRAISAL_CD = #{searchAppraisalCd}
				          AND    A.SABUN        = #{searchSabun} ) T1
				]]>
		</select>

<!-- 		저장 -->
		<update parameterType="map" id="saveAppSelfReportReg">

					MERGE INTO TPAP322 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.APPRAISAL_CD
									, A.SABUN
									, A.ITEM_CD
									, A.VALUE_CD
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS APPRAISAL_CD
											, NULL		AS SABUN
											, NULL		AS ITEM_CD
											, NULL		AS VALUE_CD
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											#{ssnEnterCd}             AS ENTER_CD
											, #{searchAppraisalCd}	AS APPRAISAL_CD
											, #{searchSabun}			AS SABUN
											, TRIM( #{rm.itemCd} )	AS ITEM_CD
											, TRIM( #{rm.valueCd} )	AS VALUE_CD
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD		    = S.ENTER_CD
					AND  T.APPRAISAL_CD		= S.APPRAISAL_CD
					AND  T.SABUN       		= S.SABUN
					AND  T.ITEM_CD     		= S.ITEM_CD
					 )
					WHEN MATCHED THEN
						UPDATE SET	  T.VALUE_CD	= S.VALUE_CD
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.APPRAISAL_CD
							, T.SABUN
							, T.ITEM_CD
							, T.VALUE_CD
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.APPRAISAL_CD
							, S.SABUN
							, S.ITEM_CD
							, S.VALUE_CD
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

		<!-- 		저장 -->
		<update parameterType="map" id="saveAppSelfReportReg2">

					MERGE INTO TPAP321 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.APPRAISAL_CD
									, A.SABUN
									, A.ITEM8
									, A.ITEM9
									, A.ITEM10
									, A.ITEM11
									, A.ITEM12
									, A.ORG_CD
									, A.NOTE
									, A.APP_STATUS
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS APPRAISAL_CD
											, NULL		AS SABUN
											, NULL		AS ITEM8
											, NULL		AS ITEM9
											, NULL		AS ITEM10
											, NULL		AS ITEM11
											, NULL		AS ITEM12
											, NULL		AS ORG_CD
											, NULL		AS NOTE
											, NULL		AS APP_STATUS
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											#{ssnEnterCd}                   AS ENTER_CD
											, TRIM( #{rm.appraisalCd} )   AS APPRAISAL_CD
											, TRIM( #{rm.sabun} )	      AS SABUN
											, TRIM( #{rm.item8})	      AS ITEM8
											, TRIM( #{rm.item9})	      AS ITEM9
											, TRIM( #{rm.item10})	      AS ITEM10
											, TRIM( #{rm.item11})	      AS ITEM11
											, TRIM( #{rm.item12})	      AS ITEM12
											, TRIM( #{rm.orgCd})	      AS ORG_CD
											, TRIM( #{rm.note})	      AS NOTE
											, TRIM( #{rm.appStatus} )	  AS APP_STATUS
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD		    = S.ENTER_CD
					AND  T.APPRAISAL_CD		= S.APPRAISAL_CD
					AND  T.SABUN       		= S.SABUN
					 )
					WHEN MATCHED THEN
						UPDATE SET	  T.ITEM8     	= S.ITEM8
						            , T.ITEM9       = S.ITEM9
						            , T.ITEM10      = S.ITEM10
						            , T.ITEM11      = S.ITEM11
						            , T.ITEM12      = S.ITEM12
						            , T.ORG_CD      = S.ORG_CD
						            , T.NOTE        = S.NOTE
						            , T.APP_STATUS  = S.APP_STATUS
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.APPRAISAL_CD
							, T.SABUN
							, T.ITEM8
							, T.ITEM9
							, T.ITEM10
							, T.ITEM11
							, T.ITEM12
							, T.ORG_CD
							, T.NOTE
							, T.APP_STATUS
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.APPRAISAL_CD
							, S.SABUN
							, S.ITEM8
							, S.ITEM9
							, S.ITEM10
							, S.ITEM11
							, S.ITEM12
							, S.ORG_CD
							, S.NOTE
							, S.APP_STATUS
							, SYSDATE
							, #{ssnSabun}
						)
		</update>




<!-- 		삭제 -->
		<delete parameterType="map" id="deleteAppSelfReportReg">

					DELETE FROM ZTST002
					WHERE 	COL1 IN 	(  NULL
<foreach item="rm" collection="deleteRows" >
						,
										<if test='rm.col1 != null and !rm.col1.equals("")'>
											TRIM( #{rm.col1} )
										</if>
</foreach>
										)
		</delete>
<!-- 		생성 -->
		<insert parameterType="map" id="insertAppSelfReportReg">

				<![CDATA[
						INSERT INTO MainMnMgrTable
						(
							  COL1
							, COL2
							, COL3
							, COL4
							, COL5
							, COL6
							, CHKDATE
							, CHKID
						)
						SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, S.COL5
								, S.COL6
								, sysdate
								, #{ssnSabun}
						FROM (
								SELECT    NULL 	AS COL1
										, NULL 	AS COL2
										, NULL 	AS COL3
										, NULL 	AS COL4
										, NULL 	AS COL5
										, NULL 	AS COL6
								FROM   DUAL
								]]>
<bind name="icnt" value="1" />
<foreach item="rm" collection="insertRows" >
					UNION ALL
								SELECT	  TO_CHAR( (SELECT (NVL(MAX(TO_NUMBER( COL1 )),0) + ${icnt}) FROM ZTST002) )	AS COL1
										<bind name="icnt" value="icnt + 1" />
										, TRIM(#{rm.col2})	AS COL2
										, TRIM(#{rm.col3})	AS COL3
										, TRIM(#{rm.col4})	AS COL4
										, TRIM(#{rm.col5})	AS COL5
										, TRIM(#{rm.col6})	AS COL6
								FROM   DUAL
</foreach>
							) S
						WHERE S.COL1 IS NOT NULL
		</insert>
<!-- 		수정 -->
		<update parameterType="map" id="updateAppSelfReportReg">

				<![CDATA[
					UPDATE ZTST002 T SET
					(	  COL1
						, COL2
						, COL3
						, COL4
						, CHKDATE
						, CHKID
						)
					=
					(	SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, S.COL5
								, S.COL6
								, SYSDATE
								, #{ssnSabun}
						FROM (
							SELECT	  NULL 	AS COL1
									, NULL 	AS COL2
									, NULL 	AS COL3
									, NULL 	AS COL4
									, NULL 	AS COL5
									, NULL 	AS COL6
									FROM   DUAL
									]]>
<foreach item="rm" collection="updateRows" >
					UNION ALL
								SELECT
										  TRIM(#{rm.col1})	AS COL1
										, TRIM(#{rm.col2})	AS COL2
										, TRIM(#{rm.col3})	AS COL3
										, TRIM(#{rm.col4})	AS COL4
										, TRIM(#{rm.col5})	AS COL5
										, TRIM(#{rm.col6})	AS COL6
								FROM   DUAL
</foreach>
							) S
						WHERE S.COL1 IS NOT NULL
					)
					WHERE EXISTS (
									SELECT S.COL1
									FROM (
											SELECT	S.COL1
											FROM (
												SELECT	NULL 				AS COL1	FROM	DUAL
			<foreach item="rm" collection="updateRows" > UNION ALL		SELECT	TRIM(#{rm.col1})	AS COL1	FROM	DUAL  </foreach>
												) S
											WHERE S.COL1 IS NOT NULL
										)S
									WHERE T.COL1 = S.COL1
								)
		</update>


</mapper>