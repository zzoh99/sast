<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="pap.evaluation.compAppSelfReg">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getCompAppSelfRegList">

				<![CDATA[
					SELECT    APPRAISAL_CD
							, SABUN
							, SUNBUN
							, COM_GUBUN_CD
							, COMPETENCY_CD
							, COMPETENCY_NM
							, COMPETENCY_MEMO
							, APP_BASIS_POINT
							, APP_POINT
							, APP_APP_MEMO
							, APP_CLASS_CD
							, APPRAISAL_YN
				    FROM (
				        	SELECT    APPRAISAL_CD
				        			, SABUN
				        			, SUNBUN
				        			, COM_GUBUN_CD
				        			, COMPETENCY_CD
				        			, COMPETENCY_NM
				        			, COMPETENCY_MEMO
				        			, APP_BASIS_POINT
				        			, APP_POINT
				        			, APP_APP_MEMO
				        			, APP_CLASS_CD
				        			, APPRAISAL_YN
				            FROM (
				                	SELECT A.APPRAISAL_CD
				                		 , A.SABUN
				                		 , A.SUNBUN
				                		 , A.COM_GUBUN_CD
				                		 , A.COMPETENCY_CD
				                		 , A.COMPETENCY_NM
				                		 , A.COMPETENCY_MEMO
				                		 , A.APP_BASIS_POINT
				                		 , A.APP_POINT
				                		 , A.APP_APP_MEMO
						                 , A.APP_CLASS_CD
						                 , B.APPRAISAL_YN AS APPRAISAL_YN
				                    FROM   TPAP401 A, TPAP400 B
				                    WHERE  A.ENTER_CD     = #{ssnEnterCd}
				                      AND  A.APPRAISAL_CD = #{searchAppraisalCd}
				                      AND  A.SABUN        = #{searchSabun}
				                      AND  A.ENTER_CD     = B.ENTER_CD(+)
				                      AND  A.APPRAISAL_CD = B.APPRAISAL_CD(+)
				                      AND  A.SABUN = B.SABUN(+)
				            )
				    )
				ORDER BY COM_GUBUN_CD,SUNBUN
				]]>


		</select>

<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getCompAppSelfRegPopList">

				<![CDATA[
					SELECT   APP_INDEX_GUBUN_CD
							,MBO_INDEX_KPI
							,APP_BASIS_POINT
							,MBO_TARGET
							,APP_INDEX_METHOD
							,APP_APP_MEMO
							,APP_CLASS_CD
							,APP_SELF_RESULT
							,MBO_INDEX_KPI
							,S_IDX
							,A_IDX
							,B_IDX
							,C_IDX
							,D_IDX
							,BIGO
							,SEQ
							,APPRAISAL_CD
							,SABUN
							,APP_POINT
							,APPRAISAL_YN
				    FROM (
					        SELECT   APP_INDEX_GUBUN_CD
					        		,MBO_INDEX_KPI
					        		,APP_BASIS_POINT
					        		,MBO_TARGET
					        		,APP_INDEX_METHOD
					        		,APP_APP_MEMO
					        		,APP_CLASS_CD
					        		,APP_SELF_RESULT
					        		,S_IDX
					        		,A_IDX
					        		,B_IDX
					        		,C_IDX
					        		,D_IDX
					        		,BIGO
					        		,SEQ
					        		,APPRAISAL_CD
					        		,SABUN
					        		,APP_POINT
					        		,APPRAISAL_YN
					        FROM (
					                SELECT   A.APP_INDEX_GUBUN_CD
					                		,A.MBO_INDEX_KPI
					                		,A.APP_BASIS_POINT
					                		,A.MBO_TARGET
					                		,A.APP_INDEX_METHOD
					                		,A.APP_APP_MEMO
					                		,A.APP_CLASS_CD
					                		,A.APP_SELF_RESULT
					                		,A.S_IDX
					                		,A.A_IDX
					                		,A.B_IDX
					                		,A.C_IDX
					                		,A.D_IDX
					                		,A.BIGO
					                		,A.SEQ
					                		,A.APPRAISAL_CD
					                		,A.SABUN
					                		,A.APP_POINT
					                		,B.APPRAISAL_YN AS APPRAISAL_YN
					                FROM    TPAP351 A, TPAP350 B
					                WHERE   A.ENTER_CD = #{ssnEnterCd}
					                AND     A.APPRAISAL_CD = ( SELECT APPRAISAL_CD FROM TPAP101 WHERE ENTER_CD = #{ssnEnterCd} AND APP_TYPE_CD = 'A' AND APPRAISAL_YY =  (SELECT APPRAISAL_YY  FROM TPAP101 WHERE ENTER_CD = #{ssnEnterCd} AND APPRAISAL_CD = #{searchAppraisalCd}) )
					                AND     A.SABUN = #{searchSabun}
					                AND     A.ENTER_CD = B.ENTER_CD(+)
					                AND     A.APPRAISAL_CD =B.APPRAISAL_CD(+)
					                AND     A.SABUN = B.SABUN(+)
					            )
				    )
					ORDER BY SEQ
				]]>


		</select>



		<select parameterType="map" resultType="cMap" id="getPapGradeInfoList">

				<![CDATA[
					SELECT   A.APP_CLASS_CD
							,A.PERFORMANCE_POINT
							,A.APP_CLASS_NM AS CODE_NM
							,A.FROM_POINT
							,A.TO_POINT
					FROM     TPAP011 A
					WHERE    A.ENTER_CD     = #{ssnEnterCd}
					AND      A.APP_TYPE_CD  = #{searchAppTypeCd}
					ORDER BY A.SEQ
				]]>


		</select>




		<select parameterType="map" resultType="cMap" id="getCompAppSelfRegStatusMap">

				<![CDATA[
					SELECT (CASE WHEN T1.STATUS_CD = '1' THEN '미평가'
					       		 WHEN T1.STATUS_CD = '3' THEN '작성중'
					             WHEN T1.STATUS_CD = '5' THEN '평가완료' END) AS STATUS
					       ,T1.STATUS_CD
					  FROM (SELECT F_PAPN_STATUS_CD(B.ENTER_CD, B.APPRAISAL_CD, '5', 'B', B.SABUN, '' , '0', '') AS STATUS_CD
					          FROM TPAP201 B
					         WHERE B.ENTER_CD     = #{ssnEnterCd}
					           AND B.APPRAISAL_CD = #{searchAppraisalCd}
					           AND B.SABUN        = #{searchSabun}
					           AND B.APP_YN       = 'Y' /* 평가포함여부 */ ) T1
				]]>


		</select>


		<select parameterType="map" resultType="cMap" id="getCompAppSelfRegSearchAppraisalCdMap">

				<![CDATA[
					SELECT APPRAISAL_CD AS SEARCH_APPRAISAL_CD
					FROM   TPAP101
					WHERE  ENTER_CD     = #{ssnEnterCd}
					AND    APP_TYPE_CD  = 'A'
					AND    APPRAISAL_YY =  (SELECT APPRAISAL_YY
											FROM   TPAP101
											WHERE  ENTER_CD = #{ssnEnterCd}
											AND APPRAISAL_CD = #{searchAppraisalCd}
											)
				]]>


		</select>



<!-- 		저장 -->
		<update parameterType="map" id="saveCompAppSelfReg">

					MERGE INTO TPAP401 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.APPRAISAL_CD
									, A.SABUN
									, A.COM_GUBUN_CD
									, A.COMPETENCY_CD
									, A.APP_CLASS_CD
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS APPRAISAL_CD
											, NULL		AS SABUN
											, NULL		AS COM_GUBUN_CD
											, NULL		AS COMPETENCY_CD
											, NULL		AS APP_CLASS_CD
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											#{ssnEnterCd}                  AS ENTER_CD
											, TRIM( #{rm.appraisalCd} )	 AS APPRAISAL_CD
											, TRIM( #{rm.sabun} )	     AS SABUN
											, TRIM( #{rm.comGubunCd})	 AS COM_GUBUN_CD
											, TRIM( #{rm.competencyCd} ) AS COMPETENCY_CD
											, TRIM( #{rm.appClassCd})	 AS APP_CLASS_CD
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD     		= S.ENTER_CD
					AND  T.APPRAISAL_CD         = S.APPRAISAL_CD
					AND  T.SABUN                = S.SABUN
					AND  T.COM_GUBUN_CD         = S.COM_GUBUN_CD
					AND  T.COMPETENCY_CD        = S.COMPETENCY_CD
					)
					WHEN MATCHED THEN
						UPDATE SET	  T.APP_CLASS_CD	= S.APP_CLASS_CD
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
		</update>
		<!-- 		저장 -->
		<update parameterType="map" id="saevCompAppSelfRegRequest">

				<![CDATA[
					MERGE INTO TPAP400 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.APPRAISAL_CD
									, A.SABUN
									, A.APP_POINT
									, A.APP_CLASS_CD
									, A.APPRAISAL_YN
							FROM	(
									SELECT
											#{ssnEnterCd}                  AS ENTER_CD
											, #{searchAppraisalCd}	     AS APPRAISAL_CD
											, #{searchSabun}	             AS SABUN
											, #{searchAppPoint}       	 AS APP_POINT
											, #{searchAppClassCd}          AS APP_CLASS_CD
											, 'Y'						 AS APPRAISAL_YN
											FROM   DUAL
									) A WHERE A.ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD     		= S.ENTER_CD
					AND  T.APPRAISAL_CD         = S.APPRAISAL_CD
					AND  T.SABUN                = S.SABUN
					)
					WHEN MATCHED THEN
						UPDATE SET	  T.APP_POINT	  = S.APP_POINT
									, T.APP_CLASS_CD  = S.APP_CLASS_CD
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.APPRAISAL_CD
							, T.SABUN
							, T.APP_POINT
							, T.APP_CLASS_CD
							, T.APPRAISAL_YN
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.APPRAISAL_CD
							, S.SABUN
							, S.APP_POINT
							, S.APP_CLASS_CD
							, S.APPRAISAL_YN
							, SYSDATE
							, #{ssnSabun}
						)
				]]>

		</update>





<!-- 		삭제 -->
		<delete parameterType="map" id="deleteCompAppSelfReg">

					DELETE FROM ZTST002
					WHERE 	COL1 IN 	(  NULL
<foreach item="rm" collection="deleteRows" >
						,
										<if test='rm.col1 != null and !rm.col1.equals("")'>
											TRIM( #{rm.col1} )
										</if>
</foreach>
										)
		</delete>
<!-- 		생성 -->
		<insert parameterType="map" id="insertCompAppSelfReg">

				<![CDATA[
						INSERT INTO MainMnMgrTable
						(
							  COL1
							, COL2
							, COL3
							, COL4
							, COL5
							, COL6
							, CHKDATE
							, CHKID
						)
						SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, S.COL5
								, S.COL6
								, sysdate
								, #{ssnSabun}
						FROM (
								SELECT    NULL 	AS COL1
										, NULL 	AS COL2
										, NULL 	AS COL3
										, NULL 	AS COL4
										, NULL 	AS COL5
										, NULL 	AS COL6
								FROM   DUAL
								]]>
<bind name="icnt" value="1" />
<foreach item="rm" collection="insertRows" >
					UNION ALL
								SELECT	  TO_CHAR( (SELECT (NVL(MAX(TO_NUMBER( COL1 )),0) + ${icnt}) FROM ZTST002) )	AS COL1
										<bind name="icnt" value="icnt + 1" />
										, TRIM(#{rm.col2})	AS COL2
										, TRIM(#{rm.col3})	AS COL3
										, TRIM(#{rm.col4})	AS COL4
										, TRIM(#{rm.col5})	AS COL5
										, TRIM(#{rm.col6})	AS COL6
								FROM   DUAL
</foreach>
							) S
						WHERE S.COL1 IS NOT NULL
		</insert>
<!-- 		수정 -->
		<update parameterType="map" id="updateCompAppSelfReg">

				<![CDATA[
					UPDATE ZTST002 T SET
					(	  COL1
						, COL2
						, COL3
						, COL4
						, CHKDATE
						, CHKID
						)
					=
					(	SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, S.COL5
								, S.COL6
								, SYSDATE
								, #{ssnSabun}
						FROM (
							SELECT	  NULL 	AS COL1
									, NULL 	AS COL2
									, NULL 	AS COL3
									, NULL 	AS COL4
									, NULL 	AS COL5
									, NULL 	AS COL6
									FROM   DUAL
									]]>
<foreach item="rm" collection="updateRows" >
					UNION ALL
								SELECT
										  TRIM(#{rm.col1})	AS COL1
										, TRIM(#{rm.col2})	AS COL2
										, TRIM(#{rm.col3})	AS COL3
										, TRIM(#{rm.col4})	AS COL4
										, TRIM(#{rm.col5})	AS COL5
										, TRIM(#{rm.col6})	AS COL6
								FROM   DUAL
</foreach>
							) S
						WHERE S.COL1 IS NOT NULL
					)
					WHERE EXISTS (
									SELECT S.COL1
									FROM (
											SELECT	S.COL1
											FROM (
												SELECT	NULL 				AS COL1	FROM	DUAL
			<foreach item="rm" collection="updateRows" > UNION ALL		SELECT	TRIM(#{rm.col1})	AS COL1	FROM	DUAL  </foreach>
												) S
											WHERE S.COL1 IS NOT NULL
										)S
									WHERE T.COL1 = S.COL1
								)
		</update>

</mapper>