<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="pap.evaluation.app1st2nd">

<!-- 1차2차 평가 조회 -->
		<select parameterType="map" resultType="cMap" id="getApp1st2ndList1">

				<![CDATA[
					SELECT '0' AS DETAIL
					     , A.ENTER_CD
					     , A.ALIAS
					     , A.SABUN      --사번
					     , A.NAME       -- 성명
					     , A.APP_ORG_NM -- 소속부서
					     , A.JIKGUB_NM  --직급
					     , A.JIKWEE_NM  --직위
					     , A.JIKCHAK_NM --직책
					     , A.APPRAISAL_CD
					     , A.APP_ORG_CD
					     , A.APP_SABUN
					     , A.APP_SEQ_CD
					     , A.APP_GROUP_CD
					     , A.MBO_T_APP_SELF_POINT     -- 성과평가점수_본인
					     , A.MBO_T_APP_1ST_POINT      -- 성과평가점수_1차평가자
					     , A.MBO_T_APP_2ND_POINT      -- 성과평가점수_2차평가자
					     , A.MBO_T_APP_3RD_POINT      -- 성과평가점수_3차평가자
					     , A.MBO_T_APP_SELF_CLASS_CD  -- 성과평가등급_본인
					     , A.MBO_T_APP_1ST_CLASS_CD   -- 성과평가등급_1차
					     , A.MBO_T_APP_2ND_CLASS_CD   -- 성과평가등급_2차
					     , A.MBO_T_APP_3RD_CLASS_CD   -- 성과평가등급_3차
					     , A.MBO_T_APP_SELF_RANK      -- 성과평가순위_본인
					     , A.MBO_T_APP_1ST_RANK       -- 성과평가순위_1차
					     , A.MBO_T_APP_2ND_RANK       -- 성과평가순위_2차
					     , A.MBO_T_APP_3RD_RANK       -- 성과평가순위_3차
					     , A.COMP_T_APP_SELF_POINT    -- 역량평가점수_본인
					     , A.COMP_T_APP_1ST_POINT     -- 역량평가점수_1차평가자
					     , A.COMP_T_APP_2ND_POINT     -- 역량평가점수_2차평가자
					     , A.COMP_T_APP_3RD_POINT     -- 역량평가점수_3차평가자
					     , A.COMP_T_APP_SELF_CLASS_CD -- 역량평가등급_본인
					     , A.COMP_T_APP_1ST_CLASS_CD  -- 역량평가등급_1차
					     , A.COMP_T_APP_2ND_CLASS_CD  -- 역량평가등급_2차
					     , A.COMP_T_APP_3RD_CLASS_CD  -- 역량평가등급_3차
					     , A.COMP_T_APP_SELF_RANK     -- 역량평가순위_본인
					     , A.COMP_T_APP_1ST_RANK      -- 역량평가순위_1차
					     , A.COMP_T_APP_2ND_RANK      -- 역량평가순위_2차
					     , A.COMP_T_APP_3RD_RANK      -- 역량평가순위_3차
					     , A.APP_SELF_CLASS_CD        -- 본인평가등급
					     , A.APP_1ST_CLASS_CD         -- 1차평가등급
					     , A.APP_2ND_CLASS_CD         -- 2차평가등급
					     , A.APP_3RD_CLASS_CD         -- 3차평가등급
					     , A.APP_SELF_POINT           -- 본인평가점수(업적+역량)
					     , A.APP_1ST_POINT            -- 1차평가점수(업적+역량)
					     , A.APP_2ND_POINT            -- 2차평가점수(업적+역량)
					     , A.APP_3RD_POINT            -- 3차평가점수(업적+역량)
					     , A.MBO_APP_SELF_MEMO        -- MBO본인평가의견
					     , A.MBO_APP_1ST_MEMO         -- MBO1차평가자의견
					     , A.MBO_APP_2ND_MEMO         -- MBO2차평가자의견
					     , A.MBO_APP_3RD_MEMO         -- MBO3차평가자의견
					     , A.COMP_APP_SELF_MEMO       -- 역량본인평가의견
					     , A.COMP_APP_1ST_MEMO        -- 역량1차평가자의견
					     , A.COMP_APP_2ND_MEMO        -- 역량2차평가자의견
					     , A.COMP_APP_3RD_MEMO        -- 역량3차평가자의견
					     , NVL(A.MBO_TARGET_YN , 'N') AS MBO_TARGET_YN -- MBO업적평가여부
					     , NVL(A.COMP_TARGET_YN, 'N') AS COMP_TARGET_YN -- 역량평가여부
					     , NVL(A.MBO_SELF_APPRAISAL_YN, 'N') AS MBO_SELF_APPRAISAL_YN -- 본인평가완료여부
					     , NVL(A.MBO_1ST_APPRAISAL_YN , 'N') AS MBO_1ST_APPRAISAL_YN  -- 1차평가완료여부
					     , NVL(A.MBO_2ND_APPRAISAL_YN , 'N') AS MBO_2ND_APPRAISAL_YN  -- 2차평가완료여부
					     , NVL(A.MBO_3RD_APPRAISAL_YN , 'N') AS MBO_3RD_APPRAISAL_YN  -- 3차평가완료여부
					     , '/EmpPhotoOut.do'||chr(63)||'enterCd=' || A.ENTER_CD || chr(38) || 'searchKeyword=' || A.SABUN ||  chr(38) || 'type=1' AS PHOTO
					     , A.LAST_STATUS_CD
					     , F_COM_GET_GRCODE_NAME(#{ssnEnterCd}, 'P10018' , A.LAST_STATUS_CD) AS LAST_STATUS_NM
					     , X.APP_GROUP_NM
					     , '1' AS MBO_APP_1ST_MEMO_POP
					     , '1' AS MBO_APP_2ND_MEMO_POP
					     , '1' AS MBO_APP_3RD_MEMO_POP
					     , '1' AS COMP_APP_1ST_MEMO_POP
					     , '1' AS COMP_APP_2ND_MEMO_POP
					     , '1' AS COMP_APP_3RD_MEMO_POP
					     , A.MBO_T_APP_1ST_RANK || '/' || COUNT(A.SABUN) OVER(PARTITION BY A.MBO_1ST_APP_GROUP_CD) AS MBO_T_APP_1ST_RANK_TXT
					     , COUNT(A.SABUN) OVER(PARTITION BY A.MBO_1ST_APP_GROUP_CD) AS MBO_T_APP_1ST_RANK_TOT_CNT
					     , A.APPRAISAL_YN
					     , A.APP_1ST_RANK, A.APP_2ND_RANK, A.APP_3RD_RANK
					  FROM (
					        SELECT A.ENTER_CD
					             , F_COM_GET_NAMES (A.ENTER_CD, A.SABUN, 'ALIAS') AS ALIAS
					             , A.SABUN
					             , A.NAME
					             , A.APP_ORG_NM
					             , A.JIKGUB_NM
					             , A.JIKWEE_NM
					             , A.JIKCHAK_NM
					             , A.APPRAISAL_CD
					             , A.APP_ORG_CD
					             , B.APP_SABUN
					             , B.APP_SEQ_CD
					             , B.APP_GROUP_CD
					             , NVL(B.APPRAISAL_YN,'N') AS APPRAISAL_YN
					             , A.MBO_TARGET_YN
					             , A.COMP_TARGET_YN
					             , C.MBO_T_APP_SELF_POINT
					             , C.MBO_T_APP_1ST_POINT
					             , C.MBO_T_APP_2ND_POINT
					             , C.MBO_T_APP_3RD_POINT
					             , C.MBO_T_APP_SELF_CLASS_CD
					             , C.MBO_T_APP_1ST_CLASS_CD
					             , C.MBO_T_APP_2ND_CLASS_CD
					             , C.MBO_T_APP_3RD_CLASS_CD
					             , C.MBO_T_APP_SELF_RANK
					             , C.MBO_T_APP_1ST_RANK
					             , C.MBO_T_APP_2ND_RANK
					             , C.MBO_T_APP_3RD_RANK
					             , C.COMP_T_APP_SELF_POINT
					             , C.COMP_T_APP_1ST_POINT
					             , C.COMP_T_APP_2ND_POINT
					             , C.COMP_T_APP_3RD_POINT
					             , C.COMP_T_APP_SELF_CLASS_CD
					             , C.COMP_T_APP_1ST_CLASS_CD
					             , C.COMP_T_APP_2ND_CLASS_CD
					             , C.COMP_T_APP_3RD_CLASS_CD
					             , C.COMP_T_APP_SELF_RANK
					             , C.COMP_T_APP_1ST_RANK
					             , C.COMP_T_APP_2ND_RANK
					             , C.COMP_T_APP_3RD_RANK
					             , C.APP_SELF_CLASS_CD
					             , C.APP_1ST_CLASS_CD
					             , C.APP_2ND_CLASS_CD
					             , C.APP_3RD_CLASS_CD
					             , C.APP_SELF_POINT
					             , C.APP_1ST_POINT
					             , C.APP_2ND_POINT
					             , C.APP_3RD_POINT
					             , C.MBO_APP_SELF_MEMO
					             , C.MBO_APP_1ST_MEMO
					             , C.MBO_APP_2ND_MEMO
					             , C.MBO_APP_3RD_MEMO
					             , C.COMP_APP_SELF_MEMO
					             , C.COMP_APP_1ST_MEMO
					             , C.COMP_APP_2ND_MEMO
					             , C.COMP_APP_3RD_MEMO
					             , C.LAST_STATUS_CD
					             , (SELECT MIN(DECODE(NVL(APPRAISAL_YN, 'N'), 'Y', 'Y', 'N')) FROM TPAP202 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_CD = A.APPRAISAL_CD AND APP_STEP_CD = '5' AND SABUN = A.SABUN AND APP_ORG_CD = A.APP_ORG_CD AND APP_SEQ_CD = '0') AS MBO_SELF_APPRAISAL_YN
					             , (SELECT MIN(DECODE(NVL(APPRAISAL_YN, 'N'), 'Y', 'Y', 'N')) FROM TPAP202 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_CD = A.APPRAISAL_CD AND APP_STEP_CD = '5' AND SABUN = A.SABUN AND APP_ORG_CD = A.APP_ORG_CD AND APP_SEQ_CD = '1') AS MBO_1ST_APPRAISAL_YN
					             , (SELECT MIN(DECODE(NVL(APPRAISAL_YN, 'N'), 'Y', 'Y', 'N')) FROM TPAP202 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_CD = A.APPRAISAL_CD AND APP_STEP_CD = '5' AND SABUN = A.SABUN AND APP_ORG_CD = A.APP_ORG_CD AND APP_SEQ_CD = '2') AS MBO_2ND_APPRAISAL_YN
					             , (SELECT MIN(DECODE(NVL(APPRAISAL_YN, 'N'), 'Y', 'Y', 'N')) FROM TPAP202 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_CD = A.APPRAISAL_CD AND APP_STEP_CD = '5' AND SABUN = A.SABUN AND APP_ORG_CD = A.APP_ORG_CD AND APP_SEQ_CD = '6') AS MBO_3RD_APPRAISAL_YN
					             --, F_COM_GET_GRCODE_NAME(C.ENTER_CD, 'P00001', C.APP_2ND_CLASS_CD ) AS APP_2ND_CLASS_CD
					             , (SELECT APP_GROUP_CD FROM TPAP202 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_CD = A.APPRAISAL_CD AND APP_STEP_CD = '5' AND SABUN = A.SABUN AND APP_ORG_CD = A.APP_ORG_CD AND APP_SEQ_CD = '1' AND ROWNUM = 1) AS MBO_1ST_APP_GROUP_CD
					             , RANK() OVER(PARTITION BY C.ENTER_CD, C.APPRAISAL_CD ORDER BY C.APP_1ST_POINT) AS APP_1ST_RANK
					             , RANK() OVER(PARTITION BY C.ENTER_CD, C.APPRAISAL_CD ORDER BY C.APP_2ND_POINT) AS APP_2ND_RANK
					             , RANK() OVER(PARTITION BY C.ENTER_CD, C.APPRAISAL_CD ORDER BY C.APP_3RD_POINT) AS APP_3RD_RANK
					          FROM TPAP201 A,
					               TPAP202 B,
					               TPAP350 C
					         WHERE A.ENTER_CD     = B.ENTER_CD
					           AND A.APPRAISAL_CD = B.APPRAISAL_CD
					           AND A.APP_STEP_CD  = B.APP_STEP_CD
					           AND A.SABUN        = B.SABUN
					           AND A.APP_ORG_CD   = B.APP_ORG_CD
					           AND A.ENTER_CD     = C.ENTER_CD
					           AND A.APPRAISAL_CD = C.APPRAISAL_CD
					           AND A.SABUN        = C.SABUN
					           AND A.APP_ORG_CD   = C.APP_ORG_CD
					           AND B.ENTER_CD     = TRIM(#{ssnEnterCd})
					           AND B.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
					           AND B.APP_STEP_CD  = TRIM(#{searchAppStepCd})
					           AND B.APP_SEQ_CD   = TRIM(#{searchAppSeqCd})
					                   ]]>
<if test='searchAppSabun != null and !searchAppSabun.equals("")'>
					           AND B.APP_SABUN    = TRIM(#{searchAppSabun})
</if>
<if test='searchAppGroupCd != null and !searchAppGroupCd.equals("")'>
					           AND B.APP_GROUP_CD = TRIM(#{searchAppGroupCd})
</if>
					           AND A.APP_YN = 'Y'
					       ) A
					     , TPAP133 X
					 WHERE 1 = 1
					   AND A.ENTER_CD     = X.ENTER_CD
					   AND A.APPRAISAL_CD = X.APPRAISAL_CD
					   AND A.APP_GROUP_CD = X.APP_GROUP_CD
<choose><when test='searchAppSeqCd != null and !searchAppSeqCd.equals("") != null and searchAppSeqCd.equals("1")'>
					 ORDER BY A.MBO_T_APP_1ST_RANK ASC, F_COM_JIKJE_SORT(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD'))
		</when><otherwise>
					 ORDER BY A.MBO_1ST_APP_GROUP_CD ASC, A.MBO_T_APP_1ST_RANK ASC, F_COM_JIKJE_SORT(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD'))
</otherwise>
</choose>

		</select>
        
        <select parameterType="map" resultType="cMap" id="getApp1st2ndPointInfoMap">

                <![CDATA[
                    SELECT F_PAP_DISTRI_POINT_CD( #{ssnEnterCd} , #{searchAppraisalCd} , #{searchAppSeqCd} , #{searchAppGroupCd}, TRIM(#{searchAppSabun}) , 'APP_GROUP_CD' )  AS AVG_POINT
                         , F_PAP_DISTRI_POINT_CD( #{ssnEnterCd} , #{searchAppraisalCd} , #{searchAppSeqCd} , #{searchAppGroupCd}, TRIM(#{searchAppSabun}) , 'ALL' )  AS AVG_POINT_ALL
                    FROM   DUAL 
                ]]>
        </select>

		<select parameterType="map" resultType="cMap" id="getApp1st2ndPopKpiList">

				<![CDATA[
					SELECT A.ENTER_CD
						, A.SEQ
						, A.CATEGORY
						, A.MBO_TARGET
						, A.TARGET
						, A.WEIGHT
						, A.MBO_APP_RESULT
						, A.MBO_APP_SELP_POINT
]]>
						<if test='searchAppSeqCd != null and (searchAppSeqCd.equals("1") or searchAppSeqCd.equals("2"))'>
							, A.MBO_APP_1ST_POINT
						</if>

						<if test='searchAppSeqCd != null and searchAppSeqCd.equals("2")'>
							, A.MBO_APP_2ND_POINT
						</if>

						, A.REMARK
						, A.APPRAISAL_CD
						, A.APP_ORG_CD
						, A.SABUN
						, A.MK_GUBUN_CD
						, A.APP_INDEX_GUBUN_CD
						, F_COM_GET_GRCODE_NAME(A.ENTER_CD,'P00011', A.APP_INDEX_GUBUN_CD) AS APP_INDEX_GUBUN_NM
						, '0' AS DETAIL
					FROM TPAP352 A
					WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
						AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
						AND A.SABUN = TRIM(#{searchSabun})
						AND A.APP_ORG_CD = TRIM(#{searchAppOrgCd})
					ORDER BY A.APP_INDEX_GUBUN_CD, A.SEQ


		</select>

		<select parameterType="map" resultType="cMap" id="getApp1st2ndPopKpiMap">

				<![CDATA[
					SELECT
						MBO_APP_SELF_MEMO
						, MBO_T_APP_SELF_CLASS_CD
						, F_PAP_GET_APP_CLASS_NM(ENTER_CD, APPRAISAL_CD, MBO_T_APP_SELF_CLASS_CD ) AS MBO_T_APP_SELF_CLASS_NM
]]>
						<if test='searchAppSeqCd != null and (searchAppSeqCd.equals("1") or searchAppSeqCd.equals("2"))'>
							, MBO_APP_1ST_MEMO
							, MBO_T_APP_1ST_CLASS_CD
							, F_PAP_GET_APP_CLASS_NM(ENTER_CD, APPRAISAL_CD, MBO_T_APP_1ST_CLASS_CD ) AS MBO_T_APP_1ST_CLASS_NM
						</if>

						<if test='searchAppSeqCd != null and searchAppSeqCd.equals("2")'>
							, MBO_APP_2ND_MEMO
							, MBO_T_APP_2ND_CLASS_CD
							, F_PAP_GET_APP_CLASS_NM(ENTER_CD, APPRAISAL_CD, MBO_T_APP_2ND_CLASS_CD ) AS MBO_T_APP_2ND_CLASS_NM
						</if>

					FROM TPAP350 A
					WHERE ENTER_CD = TRIM(#{ssnEnterCd})
						AND APPRAISAL_CD = TRIM(#{searchAppraisalCd})
						AND SABUN = TRIM(#{searchSabun})
						AND APP_ORG_CD = TRIM(#{searchAppOrgCd})


		</select>

		<select parameterType="map" resultType="cMap" id="getApp1st2ndPopCompetencyList">

				<![CDATA[
					SELECT A.ENTER_CD
						, A.APPRAISAL_CD
						, A.SABUN
						, A.APP_ORG_CD
						, A.COMPETENCY_CD
						, A.COMPETENCY_NM
						, A.COMP_DEV_PLAN
]]>
						<if test='searchAppSeqCd != null and (searchAppSeqCd.equals("1") or searchAppSeqCd.equals("2"))'>
							, A.COMP_1ST_OPINION
						</if>

						<if test='searchAppSeqCd != null and searchAppSeqCd.equals("2")'>
							, A.COMP_2ND_OPINION
						</if>

						, B.MAIN_APP_TYPE
						, F_COM_GET_GRCODE_NAME(B.ENTER_CD, 'P00007', B.MAIN_APP_TYPE) AS MAIN_APP_TYPE_NM
					FROM TPAP402 A
						 , TORG051 B
					WHERE A.ENTER_CD = B.ENTER_CD
						AND A.COMPETENCY_CD = B.COMPETENCY_CD
						AND A.ENTER_CD = TRIM(#{ssnEnterCd})
						AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
						AND A.SABUN = TRIM(#{searchSabun})
						AND A.APP_ORG_CD = TRIM(#{searchAppOrgCd})
					ORDER BY A.SABUN


		</select>

		<select parameterType="map" resultType="cMap" id="getApp1st2ndPopCompetencyMap">

				<![CDATA[
					SELECT
						COMP_APP_SELF_MEMO, COMP_T_APP_SELF_CLASS_CD
]]>
						<if test='searchAppSeqCd != null and (searchAppSeqCd.equals("1") or searchAppSeqCd.equals("2"))'>
							, COMP_APP_1ST_MEMO, COMP_T_APP_1ST_CLASS_CD
						</if>

						<if test='searchAppSeqCd != null and searchAppSeqCd.equals("2")'>
							, COMP_APP_2ND_MEMO, COMP_T_APP_2ND_CLASS_CD
						</if>

					FROM TPAP350
					WHERE ENTER_CD = TRIM(#{ssnEnterCd})
						AND APPRAISAL_CD = TRIM(#{searchAppraisalCd})
						AND SABUN = TRIM(#{searchSabun})
						AND APP_ORG_CD = TRIM(#{searchAppOrgCd})

		</select>

<!-- 		저장 -->
		<update parameterType="map" id="saveApp1st2ndPopKpi">

				<![CDATA[
					MERGE INTO TPAP352 T
					USING	(
							SELECT	 A.ENTER_CD
								, A.APPRAISAL_CD
								, A.APP_ORG_CD
								, A.SABUN
								, A.SEQ
								, A.MK_GUBUN_CD
								, A.REMARK
								, A.MBO_APP_SELP_POINT
								, A.MBO_APP_1ST_POINT
								, A.MBO_APP_2ND_POINT
							FROM	(
									SELECT	NULL AS ENTER_CD
										, NULL AS APPRAISAL_CD
										, NULL AS APP_ORG_CD
										, NULL AS SABUN
										, NULL AS SEQ
										, NULL AS MK_GUBUN_CD
										, NULL AS REMARK
										, NULL AS MBO_APP_SELP_POINT
										, NULL AS MBO_APP_1ST_POINT
										, NULL AS MBO_APP_2ND_POINT
									FROM	DUAL
									]]>
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT  #{ssnEnterCd}                     AS ENTER_CD
											, TRIM( #{rm.appraisalCd} )		AS APPRAISAL_CD
											, TRIM( #{rm.appOrgCd} )		AS APP_ORG_CD
											, TRIM( #{rm.sabun} )			AS SABUN
											, TRIM( #{rm.seq} )				AS SEQ
											, TRIM( #{rm.mkGubunCd})		AS MK_GUBUN_CD
											, TRIM( #{rm.remark})			AS REMARK
											, TRIM( #{rm.mboAppSelpPoint})	AS MBO_APP_SELP_POINT
											, TRIM( #{rm.mboApp1stPoint})	AS MBO_APP_1ST_POINT
											, TRIM( #{rm.mboApp2ndPoint})	AS MBO_APP_2ND_POINT
										FROM   DUAL
</foreach>
								) A WHERE A.ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD		 = S.ENTER_CD
						AND  T.APPRAISAL_CD  = S.APPRAISAL_CD
						AND  T.APP_ORG_CD  = S.APP_ORG_CD
						AND  T.SABUN         = S.SABUN
						AND  T.SEQ           = S.SEQ
						AND  T.MK_GUBUN_CD           = S.MK_GUBUN_CD
					)
					WHEN MATCHED THEN
						UPDATE SET	  T.REMARK              = S.REMARK
								<if test='searchAppSeqCd != null and searchAppSeqCd.equals("0")'>
									, T.MBO_APP_SELP_POINT  = S.MBO_APP_SELP_POINT

								</if><if test='searchAppSeqCd != null and searchAppSeqCd.equals("1")'>
									, T.MBO_APP_1ST_POINT   = S.MBO_APP_1ST_POINT

								</if><if test='searchAppSeqCd != null and searchAppSeqCd.equals("2")'>
									, T.MBO_APP_2ND_POINT   = S.MBO_APP_2ND_POINT
		</if>

									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
		</update>

		<update parameterType="map" id="saveApp1st2ndPopKpi350">

					UPDATE TPAP350 SET
						<if test='searchAppSeqCd != null and searchAppSeqCd.equals("0")'>
							MBO_APP_SELF_MEMO = TRIM(#{mboAppSelfMemo})

						</if><if test='searchAppSeqCd != null and searchAppSeqCd.equals("1")'>
							MBO_APP_1ST_MEMO = TRIM(#{mboApp1stMemo})

						</if><if test='searchAppSeqCd != null and searchAppSeqCd.equals("2")'>
							MBO_APP_2ND_MEMO = TRIM(#{mboApp2ndMemo})
						</if>

						, CHKDATE	= SYSDATE
						, CHKID	= #{ssnSabun}
					WHERE ENTER_CD			= TRIM(#{ssnEnterCd})
						AND APPRAISAL_CD	= TRIM(#{searchAppraisalCd})
						AND SABUN			= TRIM(#{searchSabun})
						AND APP_ORG_CD		= TRIM(#{searchAppOrgCd})
		</update>

		<update parameterType="map" id="saveApp1st2ndPopCompetency">

				<![CDATA[
					MERGE INTO TPAP402 T
					USING	(
							SELECT	 A.ENTER_CD
								, A.APPRAISAL_CD
								, A.SABUN
								, A.APP_ORG_CD
								, A.COMPETENCY_CD
								, A.COMP_DEV_PLAN
								, A.COMP_1ST_OPINION
								, A.COMP_2ND_OPINION
							FROM	(
									SELECT	NULL AS ENTER_CD
										, NULL AS APPRAISAL_CD
										, NULL AS SABUN
										, NULL AS APP_ORG_CD
										, NULL AS COMPETENCY_CD
										, NULL AS COMP_DEV_PLAN
										, NULL AS COMP_1ST_OPINION
										, NULL AS COMP_2ND_OPINION
									FROM	DUAL
									]]>
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT  #{ssnEnterCd}                     AS ENTER_CD
											, TRIM( #{rm.appraisalCd} )		AS APPRAISAL_CD
											, TRIM( #{rm.sabun} )			AS SABUN
											, TRIM( #{rm.appOrgCd} )		AS APP_ORG_CD
											, TRIM( #{rm.competencyCd} )	AS COMPETENCY_CD
											, TRIM( #{rm.compDevPlan})		AS COMP_DEV_PLAN
											, TRIM( #{rm.comp1stOpinion})	AS COMP_1ST_OPINION
											, TRIM( #{rm.comp2ndOpinion})	AS COMP_2ND_OPINION
										FROM   DUAL
</foreach>
								) A WHERE A.ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD				= S.ENTER_CD
						AND  T.APPRAISAL_CD		= S.APPRAISAL_CD
						AND  T.SABUN			= S.SABUN
						AND  T.APP_ORG_CD		= S.APP_ORG_CD
						AND  T.COMPETENCY_CD	= S.COMPETENCY_CD
					)
					WHEN MATCHED THEN
						UPDATE SET
								<if test='searchAppSeqCd != null and searchAppSeqCd.equals("0")'>
									T.COMP_DEV_PLAN    	= S.COMP_DEV_PLAN

								</if><if test='searchAppSeqCd != null and searchAppSeqCd.equals("1")'>
									T.COMP_1ST_OPINION	= S.COMP_1ST_OPINION

								</if><if test='searchAppSeqCd != null and searchAppSeqCd.equals("2")'>
									T.COMP_2ND_OPINION	= S.COMP_2ND_OPINION
		</if>
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
		</update>

		<update parameterType="map" id="saveApp1st2ndPopCompetency350">

					UPDATE TPAP350 SET

						<if test='searchAppSeqCd != null and searchAppSeqCd.equals("0")'>
							COMP_APP_SELF_MEMO = TRIM(#{compAppSelfMemo})
							, COMP_T_APP_SELF_CLASS_CD = TRIM(#{compTAppSelfClassCd})

						</if><if test='searchAppSeqCd != null and searchAppSeqCd.equals("1")'>
							COMP_APP_1ST_MEMO = TRIM(#{compApp1stMemo})
							, COMP_T_APP_1ST_CLASS_CD = TRIM(#{compTApp1stClassCd})

						</if><if test='searchAppSeqCd != null and searchAppSeqCd.equals("2")'>
							COMP_APP_2ND_MEMO = TRIM(#{compApp2ndMemo})
							, COMP_T_APP_2ND_CLASS_CD = TRIM(#{compTApp2ndClassCd})
						</if>

						, CHKDATE	= SYSDATE
						, CHKID	= #{ssnSabun}
					WHERE ENTER_CD			= TRIM(#{ssnEnterCd})
						AND APPRAISAL_CD	= TRIM(#{searchAppraisalCd})
						AND SABUN			= TRIM(#{searchSabun})
						AND APP_ORG_CD		= TRIM(#{searchAppOrgCd})
		</update>

		<update parameterType="map" id="saveApp1st2ndClassCd350">

						MERGE INTO TPAP350	T
						USING
						(
									SELECT	ENTER_CD
										,	APPRAISAL_CD
										,	SABUN
										,	APP_ORG_CD
										,	CHKDATE
										,	CHKID
					<if test='searchAppSeqCd != null and searchAppSeqCd.equals("1")'>
										,	MBO_T_APP_1ST_POINT
										,	MBO_T_APP_1ST_CLASS_CD
										,	MBO_T_APP_1ST_RANK
										,	MBO_APP_1ST_MEMO
										,	COMP_T_APP_1ST_POINT
										,	COMP_T_APP_1ST_CLASS_CD
										,	COMP_T_APP_1ST_RANK
										,	COMP_APP_1ST_MEMO
					</if>
					<if test='searchAppSeqCd != null and searchAppSeqCd.equals("2")'>
										,	MBO_T_APP_2ND_POINT
										,	MBO_T_APP_2ND_CLASS_CD
										,	MBO_T_APP_2ND_RANK
										,	MBO_APP_2ND_MEMO
										,	COMP_T_APP_2ND_POINT
										,	COMP_T_APP_2ND_CLASS_CD
										,	COMP_T_APP_2ND_RANK
										,	COMP_APP_2ND_MEMO
					</if>
					<if test='searchAppSeqCd != null and searchAppSeqCd.equals("6")'>
										,	MBO_T_APP_3RD_POINT
										,	MBO_T_APP_3RD_CLASS_CD
										,	MBO_T_APP_3RD_RANK
										,	MBO_APP_3RD_MEMO
										,	COMP_T_APP_3RD_POINT
										,	COMP_T_APP_3RD_CLASS_CD
										,	COMP_T_APP_3RD_RANK
										,	COMP_APP_3RD_MEMO
					</if>
							FROM	(
									SELECT	NULL		AS	ENTER_CD
										,	NULL		AS	APPRAISAL_CD
										,	NULL		AS	SABUN
										,	NULL		AS	APP_ORG_CD
										,	NULL		AS	CHKDATE
										,	NULL		AS	CHKID
					<if test='searchAppSeqCd != null and searchAppSeqCd.equals("1")'>
										,	NULL		AS	MBO_T_APP_1ST_POINT
										,	NULL		AS	MBO_T_APP_1ST_CLASS_CD
										,	NULL		AS	MBO_T_APP_1ST_RANK
										,	NULL		AS	MBO_APP_1ST_MEMO
										,	NULL		AS	COMP_T_APP_1ST_POINT
										,	NULL		AS	COMP_T_APP_1ST_CLASS_CD
										,	NULL		AS	COMP_T_APP_1ST_RANK
										,	NULL		AS	COMP_APP_1ST_MEMO
					</if>
					<if test='searchAppSeqCd != null and searchAppSeqCd.equals("2")'>
										,	NULL		AS	MBO_T_APP_2ND_POINT
										,	NULL		AS	MBO_T_APP_2ND_CLASS_CD
										,	NULL		AS	MBO_T_APP_2ND_RANK
										,	NULL		AS	MBO_APP_2ND_MEMO
										,	NULL		AS	COMP_T_APP_2ND_POINT
										,	NULL		AS	COMP_T_APP_2ND_CLASS_CD
										,	NULL		AS	COMP_T_APP_2ND_RANK
										,	NULL		AS	COMP_APP_2ND_MEMO
					</if>
					<if test='searchAppSeqCd != null and searchAppSeqCd.equals("6")'>
										,	NULL		AS	MBO_T_APP_3RD_POINT
										,	NULL		AS	MBO_T_APP_3RD_CLASS_CD
										,	NULL		AS	MBO_T_APP_3RD_RANK
										,	NULL		AS	MBO_APP_3RD_MEMO
										,	NULL		AS	COMP_T_APP_3RD_POINT
										,	NULL		AS	COMP_T_APP_3RD_CLASS_CD
										,	NULL		AS	COMP_T_APP_3RD_RANK
										,	NULL		AS	COMP_APP_3RD_MEMO
					</if>
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
								UNION ALL
									SELECT	TRIM(#{ssnEnterCd})				AS	ENTER_CD
										,	TRIM(#{rm.appraisalCd})			AS	APPRAISAL_CD
										,	TRIM(#{rm.sabun})				AS	SABUN
										,	TRIM(#{rm.appOrgCd})			AS	APP_ORG_CD
										,	SYSDATE							AS	CHKDATE
										,	#{ssnSabun}						AS	CHKID
					<if test='searchAppSeqCd != null and searchAppSeqCd.equals("1")'>
										,	DECODE(#{appGradingMethod}, 'P', TRIM(#{rm.mboTApp1stPoint}), F_PAP_GET_APP_POINT(#{ssnEnterCd}, TRIM(#{rm.mboTApp1stClassCd}), 'A'))		AS	MBO_T_APP_1ST_POINT
										,	DECODE(#{appGradingMethod}, 'P', F_PAP_GET_APP_CLASS_CD(#{ssnEnterCd}, TRIM(#{rm.mboTApp1stPoint}), 'A'), TRIM(#{rm.mboTApp1stClassCd}))	AS	MBO_T_APP_1ST_CLASS_CD
										,	TRIM(#{rm.mboTApp1stRank})		AS	MBO_T_APP_1ST_RANK
										,	TRIM(#{rm.mboApp1stMemo})		AS	MBO_APP_1ST_MEMO
										,	DECODE(#{appGradingMethod}, 'P', TRIM(#{rm.compTApp1stPoint}), F_PAP_GET_APP_POINT(#{ssnEnterCd}, TRIM(#{rm.compTApp1stClassCd}), 'B'))		AS	COMP_T_APP_1ST_POINT
										,	DECODE(#{appGradingMethod}, 'P', F_PAP_GET_APP_CLASS_CD(#{ssnEnterCd}, TRIM(#{rm.compTApp1stPoint}), 'B'), TRIM(#{rm.compTApp1stClassCd}))	AS	COMP_T_APP_1ST_CLASS_CD
										,	TRIM(#{rm.compTApp1stRank})		AS	COMP_T_APP_1ST_RANK
										,	TRIM(#{rm.compApp1stMemo})		AS	COMP_APP_1ST_MEMO
					</if>
					<if test='searchAppSeqCd != null and searchAppSeqCd.equals("2")'>
										,	DECODE(#{appGradingMethod}, 'P', TRIM(#{rm.mboTApp2ndPoint}), F_PAP_GET_APP_POINT(#{ssnEnterCd}, TRIM(#{rm.mboTApp2ndClassCd}), 'A'))		AS	MBO_T_APP_2ND_POINT
										,	DECODE(#{appGradingMethod}, 'P', F_PAP_GET_APP_CLASS_CD(#{ssnEnterCd}, TRIM(#{rm.mboTApp2ndPoint}), 'A'), TRIM(#{rm.mboTApp2ndClassCd}))	AS	MBO_T_APP_2ND_CLASS_CD
										,	TRIM(#{rm.mboTApp2ndRank})		AS	MBO_T_APP_2ND_RANK
										,	TRIM(#{rm.mboApp2ndMemo})		AS	MBO_APP_2ND_MEMO
										,	DECODE(#{appGradingMethod}, 'P', TRIM(#{rm.compTApp2ndPoint}), F_PAP_GET_APP_POINT(#{ssnEnterCd}, TRIM(#{rm.compTApp2ndClassCd}), 'B'))		AS	COMP_T_APP_2ND_POINT
										,	DECODE(#{appGradingMethod}, 'P', F_PAP_GET_APP_CLASS_CD(#{ssnEnterCd}, TRIM(#{rm.compTApp2ndPoint}), 'B'), TRIM(#{rm.compTApp2ndClassCd}))	AS	COMP_T_APP_2ND_CLASS_CD
										,	TRIM(#{rm.compTApp2ndRank})		AS	COMP_T_APP_2ND_RANK
										,	TRIM(#{rm.compApp2ndMemo})		AS	COMP_APP_2ND_MEMO
					</if>
					<if test='searchAppSeqCd != null and searchAppSeqCd.equals("6")'>
										,	DECODE(#{appGradingMethod}, 'P', TRIM(#{rm.mboTApp3rdPoint}), F_PAP_GET_APP_POINT(#{ssnEnterCd}, TRIM(#{rm.mboTApp3rdClassCd}), 'A'))		AS	MBO_T_APP_3RD_POINT
										,	DECODE(#{appGradingMethod}, 'P', F_PAP_GET_APP_CLASS_CD(#{ssnEnterCd}, TRIM(#{rm.mboTApp3rdPoint}), 'A'), TRIM(#{rm.mboTApp3rdClassCd}))	AS	MBO_T_APP_3RD_CLASS_CD
										,	TRIM(#{rm.mboTApp3rdRank})		AS	MBO_T_APP_3RD_RANK
										,	TRIM(#{rm.mboApp3rdMemo})		AS	MBO_APP_3RD_MEMO
										,	DECODE(#{appGradingMethod}, 'P', TRIM(#{rm.compTApp3rdPoint}), F_PAP_GET_APP_POINT(#{ssnEnterCd}, TRIM(#{rm.compTApp3rdClassCd}), 'B'))		AS	COMP_T_APP_3RD_POINT
										,	DECODE(#{appGradingMethod}, 'P', F_PAP_GET_APP_CLASS_CD(#{ssnEnterCd}, TRIM(#{rm.compTApp3rdPoint}), 'B'), TRIM(#{rm.compTApp3rdClassCd}))	AS	COMP_T_APP_3RD_CLASS_CD
										,	TRIM(#{rm.compTApp3rdRank})		AS	COMP_T_APP_3RD_RANK
										,	TRIM(#{rm.compApp3rdMemo})		AS	COMP_APP_3RD_MEMO
					</if>
									FROM	DUAL
</foreach>
									)	WHERE	ENTER_CD IS NOT NULL
										AND		APPRAISAL_CD IS NOT NULL
										AND		SABUN IS NOT NULL
										AND		APP_ORG_CD IS NOT NULL
						) S
					ON	(
								T.ENTER_CD				=	S.ENTER_CD
							AND	T.APPRAISAL_CD			=	S.APPRAISAL_CD
							AND	T.SABUN					=	S.SABUN
							AND	T.APP_ORG_CD			=	S.APP_ORG_CD
						)
					WHEN MATCHED THEN
					UPDATE SET
							T.CHKDATE					=	S.CHKDATE
						,	T.CHKID						=	S.CHKID
					<if test='searchAppSeqCd != null and searchAppSeqCd.equals("1")'>
						,	T.MBO_T_APP_1ST_POINT		= 	S.MBO_T_APP_1ST_POINT
						,	T.MBO_T_APP_1ST_CLASS_CD	= 	S.MBO_T_APP_1ST_CLASS_CD
						,	T.MBO_T_APP_1ST_RANK		= 	S.MBO_T_APP_1ST_RANK
						,	T.MBO_APP_1ST_MEMO			= 	S.MBO_APP_1ST_MEMO
						,	T.COMP_T_APP_1ST_POINT		= 	S.COMP_T_APP_1ST_POINT
						,	T.COMP_T_APP_1ST_CLASS_CD	= 	S.COMP_T_APP_1ST_CLASS_CD
						,	T.COMP_T_APP_1ST_RANK		= 	S.COMP_T_APP_1ST_RANK
						,	T.COMP_APP_1ST_MEMO			= 	S.COMP_APP_1ST_MEMO
					</if>
					<if test='searchAppSeqCd != null and searchAppSeqCd.equals("2")'>
						,	T.MBO_T_APP_2ND_POINT		=	S.MBO_T_APP_2ND_POINT
						,	T.MBO_T_APP_2ND_CLASS_CD	=	S.MBO_T_APP_2ND_CLASS_CD
						,	T.MBO_T_APP_2ND_RANK		=	S.MBO_T_APP_2ND_RANK
						,	T.MBO_APP_2ND_MEMO			=	S.MBO_APP_2ND_MEMO
						,	T.COMP_T_APP_2ND_POINT		=	S.COMP_T_APP_2ND_POINT
						,	T.COMP_T_APP_2ND_CLASS_CD	=	S.COMP_T_APP_2ND_CLASS_CD
						,	T.COMP_T_APP_2ND_RANK		=	S.COMP_T_APP_2ND_RANK
						,	T.COMP_APP_2ND_MEMO			=	S.COMP_APP_2ND_MEMO
					</if>
					<if test='searchAppSeqCd != null and searchAppSeqCd.equals("6")'>
						,	T.MBO_T_APP_3RD_POINT		=	S.MBO_T_APP_3RD_POINT
						,	T.MBO_T_APP_3RD_CLASS_CD	=	S.MBO_T_APP_3RD_CLASS_CD
						,	T.MBO_T_APP_3RD_RANK		=	S.MBO_T_APP_3RD_RANK
						,	T.MBO_APP_3RD_MEMO			=	S.MBO_APP_3RD_MEMO
						,	T.COMP_T_APP_3RD_POINT		=	S.COMP_T_APP_3RD_POINT
						,	T.COMP_T_APP_3RD_CLASS_CD	=	S.COMP_T_APP_3RD_CLASS_CD
						,	T.COMP_T_APP_3RD_RANK		=	S.COMP_T_APP_3RD_RANK
						,	T.COMP_APP_3RD_MEMO			=	S.COMP_APP_3RD_MEMO
					</if>
		</update>

<!-- 프로시저 -->
		<update parameterType="map" id="prcApp1st2ndPopKpi" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_TPAP350_UPDATE(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppraisalCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppOrgCd,mode=IN,jdbcType=VARCHAR},
				#{searchSabun,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

<!-- 일괄승인 프로시저 -->
		<update parameterType="map" id="prcApp1stAppAll" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_1ST_APP_ALL(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppraisalCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppSeqCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppSabun,mode=IN,jdbcType=VARCHAR},
				#{searchAppGroupCd,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

</mapper>