<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="pap.config.appGradeRateMgr">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getAppGradeRateMgrList1">

				<![CDATA[
					SELECT APP_S_RATE, APP_A_RATE, APP_B_RATE, APP_C_RATE, APP_D_RATE, NOTE, APPRAISAL_CD
					  FROM TPAP114
					WHERE ENTER_CD = TRIM(#{ssnEnterCd})
					  AND APPRAISAL_CD = TRIM(#{searchAppraisalCd})
				]]>


		</select>

<!--  2019.06.27 평가등급항목관리 추가로 인하여 대상 테이블을 TPAP222로 변경함.
		<select parameterType="map" resultType="cMap" id="getAppGradeRateMgrList2">

				<![CDATA[
					SELECT A.APPRAISAL_CD,
						A.APP_GROUP_CD,
						B.APP_SEQ_CD,
						F_COM_GET_GRCODE_NAME(B.ENTER_CD, 'P00003', B.APP_SEQ_CD) AS APP_SEQ_NM,
						B.APP_GROUP_NM,
						(SELECT COUNT(*)
	            	       FROM TPAP201 X, TPAP202 Y
	            	      WHERE X.ENTER_CD = Y.ENTER_CD
	            	        AND X.APPRAISAL_CD = Y.APPRAISAL_CD
	            	        AND X.APP_STEP_CD = Y.APP_STEP_CD
	            	        AND X.APP_ORG_CD = Y.APP_ORG_CD
	            	        AND X.SABUN = Y.SABUN
	            	        AND X.APP_YN ='Y'
	            	        AND X.MAIN_ORG_YN = 'Y'
	            	        AND X.APP_METHOD_CD = '02'
	            	        AND Y.ENTER_CD = A.ENTER_CD
	            	        AND Y.APPRAISAL_CD =A.APPRAISAL_CD
	            	        AND Y.APP_SEQ_CD = A.APP_SEQ_CD
	            	        AND Y.APP_GROUP_CD = A. APP_GROUP_CD
	            	        AND Y.APP_STEP_CD = '5') AS TOT_CNT,
						A.APP_GROUP_S_CNT,
						A.APP_GROUP_A_CNT,
						A.APP_GROUP_B_CNT,
						A.APP_GROUP_C_CNT,
						A.APP_GROUP_D_CNT,
						A.NOTE
					FROM TPAP221 A, TPAP133 B
					WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
						AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
 						AND B.APP_SEQ_CD = '2'
						AND A.ENTER_CD = B.ENTER_CD
						AND A.APPRAISAL_CD = B.APPRAISAL_CD
						AND A.APP_GROUP_CD = B.APP_GROUP_CD
						AND B.APP_SEQ_CD <> '0'
						AND A.APP_TYPE_CD = #{searchAppTypeCd}
					ORDER BY B.SEQ
				]]>


		</select>
-->

<!-- 인원배분기준표 목록 조회 -->
		<select parameterType="map" resultType="cMap" id="getAppGradeRateMgrList2">

				<![CDATA[
					SELECT T.*
					     , F_COM_GET_GRCODE_NAME(T.ENTER_CD, 'P00003', T.APP_SEQ_CD) AS APP_SEQ_NM
					     , (
					            SELECT COUNT(*)
					              FROM TPAP201 X, TPAP202 Y
					             WHERE X.ENTER_CD = Y.ENTER_CD
					               AND X.APPRAISAL_CD = Y.APPRAISAL_CD
					               AND X.APP_STEP_CD = Y.APP_STEP_CD
					               AND X.APP_ORG_CD = Y.APP_ORG_CD
					               AND X.SABUN = Y.SABUN
					               AND X.APP_YN ='Y'
					               AND X.MAIN_ORG_YN = 'Y'
					               --AND X.APP_METHOD_CD = '02'
					               AND Y.ENTER_CD = T.ENTER_CD
					               AND Y.APPRAISAL_CD =T.APPRAISAL_CD
					               AND Y.APP_SEQ_CD = T.APP_SEQ_CD
					               AND Y.APP_GROUP_CD = T. APP_GROUP_CD
					               AND Y.APP_STEP_CD = '5'
					       ) AS TOT_CNT
					     , C.CHECK_IGNORE_YN
					     , C.NOTE
					  FROM (
					            SELECT A.ENTER_CD
					                 , A.APPRAISAL_CD
					                 , A.APP_GROUP_CD
					                 , A.APP_TYPE_CD
					                 , B.APP_SEQ_CD
					                 , B.SEQ
					                 , B.APP_GROUP_NM
					                 , A.CNT_ARR
					                 , A.MIN_CNT_ARR
					                 , A.MAX_CNT_ARR
					              FROM (
					                        SELECT A.ENTER_CD
					                             , A.APPRAISAL_CD
					                             , A.APP_GROUP_CD
					                             , A.APP_TYPE_CD
					                             , APP_SEQ_CD
					                             , LISTAGG(A.CNT, '@')     WITHIN GROUP (ORDER BY A.ENTER_CD, A.APPRAISAL_CD, A.APP_GROUP_CD, A.APP_TYPE_CD, APP_SEQ_CD, B.SEQ) CNT_ARR
					                             , LISTAGG(A.MIN_CNT, '@') WITHIN GROUP (ORDER BY A.ENTER_CD, A.APPRAISAL_CD, A.APP_GROUP_CD, A.APP_TYPE_CD, APP_SEQ_CD, B.SEQ) MIN_CNT_ARR
					                             , LISTAGG(A.MAX_CNT, '@') WITHIN GROUP (ORDER BY A.ENTER_CD, A.APPRAISAL_CD, A.APP_GROUP_CD, A.APP_TYPE_CD, APP_SEQ_CD, B.SEQ) MAX_CNT_ARR
					                          FROM TPAP222 A
					                             , TPAP217 B
					                         WHERE A.ENTER_CD = B.ENTER_CD
					                           AND A.APPRAISAL_CD = B.APPRAISAL_CD
					                           AND A.APP_CLASS_CD = B.APP_CLASS_CD
					                           AND A.ENTER_CD = TRIM(#{ssnEnterCd})
					                           AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
					                         GROUP BY A.ENTER_CD, A.APPRAISAL_CD, A.APP_GROUP_CD, A.APP_TYPE_CD, APP_SEQ_CD
					                   ) A
					                 , TPAP133 B
					             WHERE A.ENTER_CD     =  B.ENTER_CD
					               AND A.APPRAISAL_CD =  B.APPRAISAL_CD
					               AND A.APP_GROUP_CD =  B.APP_GROUP_CD
					               AND A.ENTER_CD     =  TRIM(#{ssnEnterCd})
					               AND A.APPRAISAL_CD =  TRIM(#{searchAppraisalCd})
					               AND B.APP_SEQ_CD   IN  ('2', '6')
					               AND B.APP_SEQ_CD   <> '0'
					               AND A.APP_TYPE_CD  =  #{searchAppTypeCd}
					       ) T
					     , TPAP221 C
					 WHERE T.ENTER_CD     = C.ENTER_CD(+)
					   AND T.APPRAISAL_CD = C.APPRAISAL_CD(+)
					   AND T.APP_GROUP_CD = C.APP_GROUP_CD(+)
					   AND T.APP_TYPE_CD  = C.APP_TYPE_CD(+)
					   AND T.APP_SEQ_CD   = C.APP_SEQ_CD(+)
					           ]]>
<if test='searchAppSeqCd != null and !searchAppSeqCd.equals("")'>
					   AND T.APP_SEQ_CD = TRIM( #{searchAppSeqCd} )
</if>
					 ORDER BY T.SEQ


		</select>
		
		<select parameterType="map" resultType="cMap" id="getAppGradeRateMgrPopList1">

				<![CDATA[
					SELECT X.SABUN
						, X.NAME AS NAME_1
						, X.APP_ORG_NM
						, X.JIKGUB_NM AS JIKGUB_NM_1
						, X.JIKWEE_NM AS JIKWEE_NM_1
						, X.JIKCHAK_NM AS JIKCHAK_NM_1
						, Y.APP_SABUN
						, Z.NAME AS NAME_2
						, Y.ORG_NM
						, Y.JIKGUB_NM AS JIKGUB_NM_2
						, Y.JIKWEE_NM AS JIKWEE_NM_2
						, Y.JIKCHAK_NM AS JIKCHAK_NM_2
					FROM TPAP201 X, TPAP202 Y, THRM100 Z
					WHERE X.ENTER_CD = Y.ENTER_CD
						AND X.APPRAISAL_CD = Y.APPRAISAL_CD
						AND X.APP_STEP_CD = Y.APP_STEP_CD
						AND X.APP_ORG_CD = Y.APP_ORG_CD
						AND X.SABUN = Y.SABUN
						AND X.ENTER_CD = TRIM(#{ssnEnterCd})
						AND X.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
						AND Y.APP_SEQ_CD = TRIM(#{searchAppSeqCd})
						AND Y.APP_GROUP_CD = TRIM(#{searchAppGroupCd})
						AND X.APP_YN ='Y'
						AND X.MAIN_ORG_YN = 'Y'
						AND X.APP_METHOD_CD = '02'
						AND Y.APP_STEP_CD = '5'
						AND Y.ENTER_CD = Z.ENTER_CD
						AND Y.APP_SABUN = Z.SABUN
				]]>


		</select>

<!-- 		저장 -->
		<update parameterType="map" id="saveAppGradeRateMgr1">

					MERGE INTO TPAP114 T
					USING	(
							SELECT	A.ENTER_CD
									, A.APPRAISAL_CD
									, A.APP_S_RATE
									, A.APP_A_RATE
									, A.APP_B_RATE
									, A.APP_C_RATE
									, A.APP_D_RATE
									, A.NOTE
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS APPRAISAL_CD
											, NULL		AS APP_S_RATE
											, NULL		AS APP_A_RATE
											, NULL		AS APP_B_RATE
											, NULL		AS APP_C_RATE
											, NULL		AS APP_D_RATE
											, NULL		AS NOTE
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											#{ssnEnterCd}						AS ENTER_CD
											, TRIM( #{rm.appraisalCd} )		AS APPRAISAL_CD
											, TRIM( #{rm.appSRate})		AS APP_S_RATE
											, TRIM( #{rm.appARate})		AS APP_A_RATE
											, TRIM( #{rm.appBRate})		AS APP_B_RATE
											, TRIM( #{rm.appCRate})		AS APP_C_RATE
											, TRIM( #{rm.appDRate})		AS APP_D_RATE
											, TRIM( #{rm.note})			AS NOTE
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD			= S.ENTER_CD
					AND  T.APPRAISAL_CD		= S.APPRAISAL_CD
					 )
					WHEN MATCHED THEN
						UPDATE SET	  T.APP_S_RATE	= S.APP_S_RATE
									, T.APP_A_RATE	= S.APP_A_RATE
									, T.APP_B_RATE	= S.APP_B_RATE
									, T.APP_C_RATE	= S.APP_C_RATE
									, T.APP_D_RATE	= S.APP_D_RATE
									, T.NOTE		= S.NOTE
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.APPRAISAL_CD
							, T.APP_S_RATE
							, T.APP_A_RATE
							, T.APP_B_RATE
							, T.APP_C_RATE
							, T.APP_D_RATE
							, T.NOTE
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.APPRAISAL_CD
							, S.APP_S_RATE
							, S.APP_A_RATE
							, S.APP_B_RATE
							, S.APP_C_RATE
							, S.APP_D_RATE
							, S.NOTE
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

		<update parameterType="map" id="saveAppGradeRateMgr2">

					MERGE INTO TPAP221 T
					USING (
					       SELECT A.ENTER_CD
					            , A.APPRAISAL_CD
					            , A.APP_TYPE_CD
					            , A.APP_SEQ_CD
					            , A.APP_GROUP_CD
					            , A.CHECK_IGNORE_YN
					            , A.NOTE
					         FROM (
					               SELECT NULL AS ENTER_CD
					                    , NULL AS APPRAISAL_CD
					                    , NULL AS APP_TYPE_CD
					                    , NULL AS APP_SEQ_CD
					                    , NULL AS APP_GROUP_CD
					                    , NULL AS CHECK_IGNORE_YN
					                    , NULL AS NOTE
					                 FROM DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
					                UNION ALL
					               SELECT #{ssnEnterCd} AS ENTER_CD
					                    , TRIM( #{rm.appraisalCd} ) AS APPRAISAL_CD
					                    , #{searchAppTypeCd} AS APP_TYPE_CD
					                    , TRIM( #{rm.appSeqCd}) AS APP_SEQ_CD
					                    , TRIM( #{rm.appGroupCd} ) AS APP_GROUP_CD
					                    , TRIM(#{rm.checkIgnoreYn}) AS CHECK_IGNORE_YN
					                    , TRIM( #{rm.note}) AS NOTE
					                 FROM DUAL
</foreach>
					              ) A WHERE A.ENTER_CD IS NOT NULL
					      ) S
					   ON (
					              T.ENTER_CD      = S.ENTER_CD
					          AND T.APPRAISAL_CD  = S.APPRAISAL_CD
					          AND T.APP_TYPE_CD   = S.APP_TYPE_CD
					          AND T.APP_SEQ_CD    = S.APP_SEQ_CD
					          AND T.APP_GROUP_CD  = S.APP_GROUP_CD
					      )
					WHEN MATCHED THEN
					     UPDATE SET
					              T.NOTE	= S.NOTE
					            , T.CHECK_IGNORE_YN = S.CHECK_IGNORE_YN
					            , T.CHKDATE	= SYSDATE
					            , T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
					     INSERT (
					              T.ENTER_CD
					            , T.APPRAISAL_CD
					            , T.APP_TYPE_CD
					            , T.APP_GROUP_CD
					            , T.APP_SEQ_CD
					            , T.CHECK_IGNORE_YN
					            , T.NOTE
					            , T.CHKDATE
					            , T.CHKID
					     ) VALUES (
					              S.ENTER_CD
					            , S.APPRAISAL_CD
					            , S.APP_TYPE_CD
					            , S.APP_GROUP_CD
					            , S.APP_SEQ_CD
					            , S.CHECK_IGNORE_YN
					            , S.NOTE
					            , SYSDATE
					            , #{ssnSabun}
					     )
		</update>

<!-- 		삭제 -->
		<delete parameterType="map" id="deleteAppGradeRateMgr1">

					DELETE FROM TPAP114
					WHERE 	(ENTER_CD,APPRAISAL_CD) IN 	(  (NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
										#{ssnEnterCd}
										<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
											, TRIM( #{rm.appraisalCd} )
										</if>
										)
</foreach>
										)
		</delete>

		<delete parameterType="map" id="deleteAppGradeRateMgr2">

					DELETE FROM TPAP221
					WHERE 	(ENTER_CD,APPRAISAL_CD,APP_GROUP_CD,APP_TYPE_CD) IN 	(  (NULL,NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
	<if test='ssnEnterCd != null and !ssnEnterCd.equals("") != null and rm.appraisalCd != null and !rm.appraisalCd.equals("") != null and rm.appGroupCd != null and !rm.appGroupCd.equals("") != null and rm.appTypeCd != null and !rm.appTypeCd.equals("")'>
								, ( TRIM( #{ssnEnterCd} ) , TRIM( #{rm.appraisalCd} ) , TRIM( #{rm.appGroupCd} ) , TRIM( #{rm.appTypeCd}) )
	</if>
</foreach>
										)
		</delete>

		<update parameterType="map" id="prcAppGradeRateMgr" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_CLASS_INWON_GRP_INS(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppraisalCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppTypeCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppSeqCd,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

<!-- 평가등급배분인원관리(TPAP217연계) 저장 -->
		<update parameterType="map" id="saveAppGradeRateMgr2ForTPAP222">

					MERGE INTO TPAP222	T
					USING (
							SELECT	TRIM(#{ssnEnterCd})	AS	ENTER_CD
								,	SYSDATE				AS	CHKDATE
								,	#{ssnSabun}			AS	CHKID
								,	APPRAISAL_CD
								,	APP_GROUP_CD
								,	APP_TYPE_CD
								,	APP_SEQ_CD
								,	APP_CLASS_CD
								,	CNT
							FROM	(
										SELECT	NULL		AS	APPRAISAL_CD
											,	NULL		AS	APP_GROUP_CD
											,	NULL		AS	APP_TYPE_CD
											,	NULL		AS	APP_SEQ_CD
											,	NULL		AS	APP_CLASS_CD
											,	NULL		AS	CNT
										FROM	DUAL
<foreach item="rm" collection="mergeRows" >
	<bind name="icnt" value="1" />
	<foreach item="appClassCd" collection="saveClassList" >
		<bind name="appCnt" value='rm.get("appClassCd_" + icnt)' />
										UNION ALL
										SELECT	TRIM(#{rm.appraisalCd})			AS	APPRAISAL_CD
											,	TRIM(#{rm.appGroupCd})			AS	APP_GROUP_CD
											,	TRIM(#{rm.appTypeCd})			AS	APP_TYPE_CD
											,	TRIM(#{rm.appSeqCd})			AS	APP_SEQ_CD
											,	TRIM(#{appClassCd})				AS	APP_CLASS_CD
											,	TRIM(#{appCnt})	AS	CNT
										FROM	DUAL
		<bind name="icnt" value="icnt + 1" />
	</foreach>
</foreach>
									)
							WHERE	APPRAISAL_CD IS NOT NULL
							AND		APP_GROUP_CD IS NOT NULL
							AND		APP_TYPE_CD IS NOT NULL
							AND		APP_SEQ_CD IS NOT NULL
							AND		APP_CLASS_CD IS NOT NULL
						) S
					ON	(
								T.ENTER_CD			=		S.ENTER_CD
							AND	T.APPRAISAL_CD		=		S.APPRAISAL_CD
							AND	T.APP_GROUP_CD		=		S.APP_GROUP_CD
							AND	T.APP_TYPE_CD		=		S.APP_TYPE_CD
							AND	T.APP_SEQ_CD		=		S.APP_SEQ_CD
							AND T.APP_CLASS_CD		=		S.APP_CLASS_CD
						)
					WHEN MATCHED THEN
					UPDATE SET
							T.CHKDATE	=	S.CHKDATE
						,	T.CHKID		=	S.CHKID
						,	T.CNT		=	S.CNT
					WHEN NOT MATCHED THEN
					INSERT
					(
							T.ENTER_CD
						,	T.APPRAISAL_CD
						,	T.APP_GROUP_CD
						,	T.APP_TYPE_CD
						,	T.APP_SEQ_CD
						,	T.APP_CLASS_CD
						,	T.CNT
						,	T.CHKDATE
						,	T.CHKID
					)
					VALUES
					(
							S.ENTER_CD
						,	S.APPRAISAL_CD
						,	S.APP_GROUP_CD
						,	S.APP_TYPE_CD
						,	S.APP_SEQ_CD
						,	S.APP_CLASS_CD
						,	S.CNT
						,	S.CHKDATE
						,	S.CHKID
					)
		</update>

<!-- 평가등급배분인원관리(TPAP217연계) 삭제 -->
		<delete parameterType="map" id="deleteAppGradeRateMgr2ForTPAP222">

					DELETE	FROM TPAP222
					WHERE	(ENTER_CD, APPRAISAL_CD, APP_GROUP_CD, APP_TYPE_CD) IN ((NULL, NULL, NULL, NULL)
<foreach item="rm" collection="deleteRows" >
	<if test='ssnEnterCd != null and !ssnEnterCd.equals("") != null and rm.appraisalCd != null and !rm.appraisalCd.equals("") != null and rm.appGroupCd != null and !rm.appGroupCd.equals("") != null and rm.appTypeCd != null and !rm.appTypeCd.equals("")'>
								, ( TRIM( #{ssnEnterCd} ) , TRIM( #{rm.appraisalCd} ) , TRIM( #{rm.appGroupCd} ) , TRIM( #{rm.appTypeCd}) )
	</if>
</foreach>
							)
		</delete>

</mapper>