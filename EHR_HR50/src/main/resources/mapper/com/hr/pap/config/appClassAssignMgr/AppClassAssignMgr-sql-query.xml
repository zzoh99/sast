<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="pap.config.appClassAssignMgr">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getAppClassAssignMgrList">

				<![CDATA[
					SELECT    A.INWON
							, A.CLASS_CD_FROM
							, A.CLASS_CD_TO
							, A.INWON_LIMIT
							, A.SCOPE_GUBUN
							, A.SCOPE_VALUE
					FROM      TPAP231 A                 
				 	WHERE     A.ENTER_CD = #{ssnEnterCd}
				 	ORDER BY  A.INWON, A.CLASS_CD_FROM
				]]>


		</select>

		<select parameterType="map" resultType="cMap" id="getAppClassAssignMgrMap">

				<![CDATA[
					SELECT COL1, COL2, COL3, COL4, COL5 FROM ZTST002
					WHERE 1 = 1
					AND ROWNUM = 1
				]]>


		</select>

<!-- 		저장 -->
		<update parameterType="map" id="saveAppClassAssignMgr">

					MERGE INTO TPAP231 T
					USING	(
							SELECT	  A.ENTER_CD
							        , A.INWON        
									, A.CLASS_CD_FROM
									, A.CLASS_CD_TO  
									, A.INWON_LIMIT  
									, A.SCOPE_GUBUN  
									, A.SCOPE_VALUE  
							FROM	(
									SELECT	  NULL		AS ENTER_CD
									        , NULL		AS INWON        
											, NULL		AS CLASS_CD_FROM
											, NULL		AS CLASS_CD_TO  
											, NULL		AS INWON_LIMIT  
											, NULL		AS SCOPE_GUBUN  
											, NULL		AS SCOPE_VALUE  
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											#{ssnEnterCd}                 AS ENTER_CD
											, TRIM( #{rm.inwon})	    AS INWON
											, TRIM( #{rm.classCdFrom})	AS CLASS_CD_FROM
											, TRIM( #{rm.classCdTo})	AS CLASS_CD_TO
											, TRIM( #{rm.inwonLimit})	AS INWON_LIMIT
											, TRIM( #{rm.scopeGubun})	AS SCOPE_GUBUN
											, TRIM( #{rm.scopeValue})	AS SCOPE_VALUE
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD		   = S.ENTER_CD 
					AND  T.INWON           = S.INWON        
					AND  T.CLASS_CD_FROM   = S.CLASS_CD_FROM
					)
					WHEN MATCHED THEN
						UPDATE SET	  T.CLASS_CD_TO	= S.CLASS_CD_TO
									, T.INWON_LIMIT	= S.INWON_LIMIT
									, T.SCOPE_GUBUN	= S.SCOPE_GUBUN
									, T.SCOPE_VALUE	= S.SCOPE_VALUE
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD     
							, T.INWON        
							, T.CLASS_CD_FROM
							, T.CLASS_CD_TO  
							, T.INWON_LIMIT  
							, T.SCOPE_GUBUN  
							, T.SCOPE_VALUE  
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD     
							, S.INWON        
							, S.CLASS_CD_FROM
							, S.CLASS_CD_TO  
							, S.INWON_LIMIT  
							, S.SCOPE_GUBUN  
							, S.SCOPE_VALUE  
							, SYSDATE
							, #{ssnSabun}
						)
		</update>
<!-- 		삭제 -->
		<delete parameterType="map" id="deleteAppClassAssignMgr">

					DELETE FROM TPAP231
					WHERE 	(ENTER_CD,INWON,CLASS_CD_FROM) IN 	(  (NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
										#{ssnEnterCd}
										<if test='rm.inwon != null and !rm.inwon.equals("")'>
										, TRIM( #{rm.inwon})
										</if>
										<if test='rm.classCdFrom != null and !rm.classCdFrom.equals("")'>
										, TRIM( #{rm.classCdFrom})
										</if>
										)
</foreach>
										)
		</delete>
<!-- 		생성 -->
		<insert parameterType="map" id="insertAppClassAssignMgr">

				<![CDATA[
						INSERT INTO MainMnMgrTable
						(
							  COL1
							, COL2
							, COL3
							, COL4
							, COL5
							, COL6
							, CHKDATE
							, CHKID
						)
						SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, S.COL5
								, S.COL6
								, sysdate
								, #{ssnSabun}
						FROM (
								SELECT    NULL 	AS COL1
										, NULL 	AS COL2
										, NULL 	AS COL3
										, NULL 	AS COL4
										, NULL 	AS COL5
										, NULL 	AS COL6
								FROM   DUAL
								]]>
<bind name="icnt" value="1" />
<foreach item="rm" collection="insertRows" >
					UNION ALL
								SELECT	  TO_CHAR( (SELECT (NVL(MAX(TO_NUMBER( COL1 )),0) + ${icnt}) FROM ZTST002) )	AS COL1
										<bind name="icnt" value="icnt + 1" />
										, TRIM(#{rm.col2})	AS COL2
										, TRIM(#{rm.col3})	AS COL3
										, TRIM(#{rm.col4})	AS COL4
										, TRIM(#{rm.col5})	AS COL5
										, TRIM(#{rm.col6})	AS COL6
								FROM   DUAL
</foreach>
							) S
						WHERE S.COL1 IS NOT NULL
		</insert>
<!-- 		수정 -->
		<update parameterType="map" id="updateAppClassAssignMgr">

				<![CDATA[
					UPDATE ZTST002 T SET
					(	  COL1
						, COL2
						, COL3
						, COL4
						, CHKDATE
						, CHKID
						)
					=
					(	SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, S.COL5
								, S.COL6
								, SYSDATE
								, #{ssnSabun}
						FROM (
							SELECT	  NULL 	AS COL1
									, NULL 	AS COL2
									, NULL 	AS COL3
									, NULL 	AS COL4
									, NULL 	AS COL5
									, NULL 	AS COL6
									FROM   DUAL
									    ]]>
<foreach item="rm" collection="updateRows" >
					UNION ALL
								SELECT
										  TRIM(#{rm.col1})	AS COL1
										, TRIM(#{rm.col2})	AS COL2
										, TRIM(#{rm.col3})	AS COL3
										, TRIM(#{rm.col4})	AS COL4
										, TRIM(#{rm.col5})	AS COL5
										, TRIM(#{rm.col6})	AS COL6
								FROM   DUAL
</foreach>
							) S
						WHERE S.COL1 IS NOT NULL
					)
					WHERE EXISTS (
									SELECT S.COL1
									FROM (
											SELECT	S.COL1
											FROM (
												SELECT	NULL 				AS COL1	FROM	DUAL
			<foreach item="rm" collection="updateRows" > UNION ALL		SELECT	TRIM(#{rm.col1})	AS COL1	FROM	DUAL </foreach>
												) S
											WHERE S.COL1 IS NOT NULL
										)S
									WHERE T.COL1 = S.COL1
								)
		</update>

</mapper>