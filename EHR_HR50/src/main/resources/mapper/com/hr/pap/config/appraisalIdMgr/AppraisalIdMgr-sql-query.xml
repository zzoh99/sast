<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pap.config.appraisalIdMgr">

	<select parameterType="map" resultType="cMap" id="getAppraisalIdMgrList">

		<![CDATA[
				SELECT ENTER_CD
				     , APPRAISAL_CD
				     , APPRAISAL_NM
				     , APP_S_YMD
				     , APP_E_YMD
				     , APPRAISAL_YY
				     , APP_TIME_CD
				     , APP_TYPE_CD
				     , D_APP_TYPE_CD
				     , CLOSE_YN
				     , NOTE
				     , LANGUAGE_CD
					 , F_COM_GET_LANGUAGE_MAPPING (#{ssnEnterCd}, 'tpap101', LANGUAGE_CD, #{ssnLocaleCd}) AS LANGUAGE_NM
					 , APP_FEEDBACK_YN
					 , COWORK_APPRAISAL_CD
					 , EXCEPTION_YN
					 , APP_GRADING_METHOD
					 , TO_CHAR(TO_DATE(APP_S_YMD, 'YYYYMMDD'), 'YYYY.MM.DD') ||' ~ '||
					   TO_CHAR(TO_DATE(APP_E_YMD, 'YYYYMMDD'), 'YYYY.MM.DD') AS DURATION

				  FROM TPAP101
				 WHERE ENTER_CD = TRIM(#{ssnEnterCd})
				           ]]>
		<if test='appraisalNm != null and !appraisalNm.equals("")'>
			AND APPRAISAL_NM LIKE '%'||TRIM(#{appraisalNm})||'%'
		</if>
		<if test='appraisalYy != null and !appraisalYy.equals("")'>
			AND APPRAISAL_YY =	#{appraisalYy}
		</if>
		<![CDATA[ --AND APP_TYPE_CD <> 'Z' 	--승진급 제외
				 ]]>
		ORDER BY APPRAISAL_YY DESC, APP_TIME_CD DESC, APPRAISAL_CD DESC, F_COM_GET_GRCODE_SEQ(ENTER_CD, 'P10003', APP_TYPE_CD), APP_S_YMD DESC, APP_E_YMD DESC
	</select>



	<select parameterType="map" resultType="cMap" id="getAppraisalIdMgrCodeSeq">

				<![CDATA[
		SELECT  APPRAISAL_CD, substr(APPRAISAL_CD,length(APPRAISAL_CD)-1,2) AS APPRAISAL_SEQ
		FROM (
				 SELECT MAX(APPRAISAL_CD) AS APPRAISAL_CD
				 FROM TPAP101 A
				 WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
				   AND A.APPRAISAL_YY = TRIM(#{appraisalYy})
			 )
		]]>


		</select>

	<select parameterType="map" resultType="cMap" id="getAppraisalIdMgrDelCheck">

				<![CDATA[
		SELECT DECODE(COUNT(APPRAISAL_CD),0,'Y','N') AS APPRAISAL_YN
		FROM TPAP105 A
		WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
		  AND A.APPRAISAL_CD = TRIM(#{appraisalCd})
		]]>


		</select>

	<!-- 		저장 -->
	<update parameterType="map" id="saveAppraisalIdMgr">

		<![CDATA[
					MERGE INTO TPAP101 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.APPRAISAL_CD
									, A.APPRAISAL_NM
									, A.APP_S_YMD
									, A.APP_E_YMD
									, A.APPRAISAL_YY
									, A.APP_TYPE_CD
									, A.APP_TIME_CD
									, A.LANGUAGE_CD
									, A.CLOSE_YN
									, A.APP_FEEDBACK_YN
									, A.D_APP_TYPE_CD
									, A.COWORK_APPRAISAL_CD
									, A.EXCEPTION_YN
									, A.APP_GRADING_METHOD
							FROM	(
									SELECT	  NULL	AS ENTER_CD
											, NULL	AS APPRAISAL_CD
											, NULL	AS APPRAISAL_NM
											, NULL	AS APP_S_YMD
											, NULL	AS APP_E_YMD
											, NULL	AS APPRAISAL_YY
											, NULL	AS APP_TYPE_CD
											, NULL	AS APP_TIME_CD
											, NULL  AS LANGUAGE_CD
											, NULL  AS CLOSE_YN
											, NULL  AS APP_FEEDBACK_YN
											, NULL  AS D_APP_TYPE_CD
											, NULL	AS COWORK_APPRAISAL_CD
											, NULL 	AS EXCEPTION_YN
											, NULL 	AS APP_GRADING_METHOD
									FROM	DUAL
									]]>
		<bind name="icnt" value="1" />
		<foreach item="rm" collection="mergeRows" >
			UNION ALL
			SELECT
			#{ssnEnterCd}           		AS ENTER_CD
			--증가가 되는 키인경우 키가 공백이면 들어온 값을 삽입
			<choose><when test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
				, TRIM(#{rm.appraisalCd}) AS APPRAISAL_CD
				--증가가 되는 키인경우 키가 공백이 아니면 증가된 값을 삽입
			</when><otherwise>
				, SUBSTR(#{rm.appraisalYy} ,3,2)|| #{rm.appTypeCd} || TO_CHAR( (SELECT LPAD((NVL(MAX(TO_NUMBER(SUBSTR(APPRAISAL_CD,4,2))),0) + ${icnt}),2,'0') FROM TPAP101 WHERE ENTER_CD = #{ssnEnterCd} AND APPRAISAL_YY = #{rm.appraisalYy} AND APP_TYPE_CD = #{rm.appTypeCd}  ) )	AS APPRAISAL_CD
				--icnt 증가
				<bind name="icnt" value="icnt + 1" />
			</otherwise>
			</choose>
			, TRIM( #{rm.appraisalNm})		AS APPRAISAL_NM
			, TRIM( #{rm.appSYmd})	    	AS APP_S_YMD
			, TRIM( #{rm.appEYmd})	    	AS APP_E_YMD
			, TRIM( #{rm.appraisalYy})		AS APPRAISAL_YY
			, TRIM( #{rm.appTypeCd})		AS APP_TYPE_CD
			, TRIM( #{rm.appTimeCd})		AS APP_TIME_CD
			, TRIM( #{rm.languageCd})		AS LANGUAGE_CD
			, TRIM( #{rm.closeYn})			AS CLOSE_YN
			, TRIM( #{rm.appFeedbackYn})	AS APP_FEEDBACK_YN
			, TRIM( #{rm.dAppTypeCd})		AS D_APP_TYPE_CD
			, TRIM(	#{rm.coworkAppraisalCd}) AS COWORK_APPRAISAL_CD
			, TRIM( #{rm.exceptionYn})		AS EXCEPTION_YN
			, TRIM( #{rm.appGradingMethod})  AS APP_GRADING_METHOD
			FROM   DUAL
		</foreach>
		) A WHERE ENTER_CD IS NOT NULL
		) S
		ON ( T.ENTER_CD		= S.ENTER_CD
		AND  T.APPRAISAL_CD = S.APPRAISAL_CD
		)
		WHEN MATCHED THEN
		UPDATE SET
		T.APPRAISAL_NM  	= S.APPRAISAL_NM
		, T.APP_S_YMD     	= S.APP_S_YMD
		, T.APP_E_YMD     	= S.APP_E_YMD
		, T.APPRAISAL_YY  	= S.APPRAISAL_YY
		, T.APP_TYPE_CD   	= S.APP_TYPE_CD
		, T.APP_TIME_CD   	= S.APP_TIME_CD
		, T.CHKDATE			= SYSDATE
		, T.CHKID			= #{ssnSabun}
		, T.LANGUAGE_CD		= S.LANGUAGE_CD
		, T.CLOSE_YN	= S.CLOSE_YN
		, T.APP_FEEDBACK_YN	= S.APP_FEEDBACK_YN
		, T.D_APP_TYPE_CD	= S.D_APP_TYPE_CD
		, T.COWORK_APPRAISAL_CD = S.COWORK_APPRAISAL_CD
		, T.EXCEPTION_YN 	= S.EXCEPTION_YN
		, T.APP_GRADING_METHOD 	= S.APP_GRADING_METHOD
		WHEN NOT MATCHED THEN
		INSERT
		(
		T.ENTER_CD
		, T.APPRAISAL_CD
		, T.APPRAISAL_NM
		, T.APP_S_YMD
		, T.APP_E_YMD
		, T.APPRAISAL_YY
		, T.APP_TYPE_CD
		, T.APP_TIME_CD
		, T.CHKDATE
		, T.CHKID
		, T.LANGUAGE_CD
		, T.CLOSE_YN
		, T.APP_FEEDBACK_YN
		, T.D_APP_TYPE_CD
		, T.COWORK_APPRAISAL_CD
		, T.EXCEPTION_YN
		, T.APP_GRADING_METHOD
		)
		VALUES
		(
		S.ENTER_CD
		, S.APPRAISAL_CD
		, S.APPRAISAL_NM
		, S.APP_S_YMD
		, S.APP_E_YMD
		, S.APPRAISAL_YY
		, S.APP_TYPE_CD
		, S.APP_TIME_CD
		, SYSDATE
		, #{ssnSabun}
		, S.LANGUAGE_CD
		, S.CLOSE_YN
		, S.APP_FEEDBACK_YN
		, S.D_APP_TYPE_CD
		, S.COWORK_APPRAISAL_CD
		, S.EXCEPTION_YN
		, S.APP_GRADING_METHOD
		)
	</update>

	<!-- 		삭제 -->
	<delete parameterType="map" id="deleteAppraisalIdMgr">

		DELETE FROM TPAP101
		WHERE 	(ENTER_CD,APPRAISAL_CD)   IN 	(  (NULL,NULL)
		<foreach item="rm" collection="deleteRows" >
			,				(
			#{ssnEnterCd}
			<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
				,TRIM( #{rm.appraisalCd} )
			</if>
			)
		</foreach>
		)
	</delete>

	<!-- ################################## 평가일정 텝 Start ################################### -->
	<!-- 		조회 -->
	<select parameterType="map" resultType="cMap" id="getAppraisalIdMgrTab1">

				<![CDATA[
		SELECT ROWNUM AS RNUM,APPRAISAL_NM, ENTER_CD,   APPRAISAL_CD, APP_STEP_CD
			 ,   APP_AS_YMD , APP_AE_YMD ,   D_BASE_YMD, NOTE
		FROM (
				 SELECT A.APPRAISAL_NM, B.ENTER_CD,   B.APPRAISAL_CD, B.APP_STEP_CD
					  ,   B.APP_AS_YMD, B.APP_AE_YMD,   B.D_BASE_YMD, B.NOTE
				 FROM TPAP101 A, TPAP105 B, TSYS005 C
				 WHERE B.ENTER_CD     = TRIM(#{ssnEnterCd})
				   AND A.APPRAISAL_CD = TRIM(#{appraisalCd})
				   AND A.ENTER_CD = B.ENTER_CD
				   AND A.APPRAISAL_CD = B.APPRAISAL_CD
				   AND B.ENTER_CD = C.ENTER_CD
				   AND C.GRCODE_CD='P00005'
				   AND C.CODE = B.APP_STEP_CD
				 ORDER BY A.APPRAISAL_YY DESC, C.SEQ, A.APP_S_YMD DESC, A.APP_E_YMD DESC, A.APP_TARGET_CD, A.APPRAISAL_CD
			 )
		]]>


		</select>
	<!-- 		저장 -->
	<update parameterType="map" id="saveAppraisalIdMgrTab1">

		MERGE INTO TPAP105 T
		USING	(
		SELECT	  A.ENTER_CD
		, A.APPRAISAL_CD
		, A.APP_STEP_CD
		, A.APP_AS_YMD
		, A.APP_AE_YMD
		, A.D_BASE_YMD
		FROM	(
		SELECT	  NULL	AS ENTER_CD
		, NULL	AS APPRAISAL_CD
		, NULL	AS APP_STEP_CD
		, NULL	AS APP_AS_YMD
		, NULL	AS APP_AE_YMD
		, NULL	AS D_BASE_YMD
		FROM	DUAL
		<bind name="icnt" value="1" />
		<foreach item="rm" collection="mergeRows" >
			UNION ALL
			SELECT
			#{ssnEnterCd}           		AS ENTER_CD
			, TRIM( #{rm.appraisalCd} )	AS APPRAISAL_CD
			, TRIM( #{rm.appStepCd} )	AS APP_STEP_CD
			, TRIM( #{rm.appAsYmd})	AS APP_AS_YMD
			, TRIM( #{rm.appAeYmd})	AS APP_AE_YMD
			, TRIM( #{rm.dBaseYmd})	AS D_BASE_YMD
			FROM   DUAL
		</foreach>
		) A WHERE ENTER_CD IS NOT NULL
		) S
		ON ( T.ENTER_CD		= S.ENTER_CD
		AND  T.APPRAISAL_CD = S.APPRAISAL_CD
		AND  T.APP_STEP_CD	= S.APP_STEP_CD
		)
		WHEN MATCHED THEN
		UPDATE SET
		T.APP_AS_YMD  	= S.APP_AS_YMD
		, T.APP_AE_YMD     	= S.APP_AE_YMD
		, T.D_BASE_YMD     	= S.D_BASE_YMD
		, T.CHKDATE			= SYSDATE
		, T.CHKID			= #{ssnSabun}
		WHEN NOT MATCHED THEN
		INSERT
		(
		T.ENTER_CD
		, T.APPRAISAL_CD
		, T.APP_STEP_CD
		, T.APP_AS_YMD
		, T.APP_AE_YMD
		, T.D_BASE_YMD
		, T.CHKDATE
		, T.CHKID
		)
		VALUES
		(
		S.ENTER_CD
		, S.APPRAISAL_CD
		, S.APP_STEP_CD
		, S.APP_AS_YMD
		, S.APP_AE_YMD
		, S.D_BASE_YMD
		, SYSDATE
		, #{ssnSabun}
		)
	</update>

	<!-- 		삭제 -->
	<delete parameterType="map" id="deleteAppraisalIdMgrTab1">

		DELETE FROM TPAP105
		WHERE 	(ENTER_CD,APPRAISAL_CD,APP_STEP_CD)   IN 	(  (NULL,NULL,NULL)
		<foreach item="rm" collection="deleteRows" >
			,				(
			#{ssnEnterCd}
			<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
				,TRIM( #{rm.appraisalCd} )
			</if>
			<if test='rm.appStepCd != null and !rm.appStepCd.equals("")'>
				,TRIM( #{rm.appStepCd} )
			</if>
			)
		</foreach>
		)
	</delete>
	<!-- ################################## 평가일정 텝 End ################################### -->

	<!-- ################################## 최종평가일정 텝 Start ################################### -->
	<!-- 		조회 -->
	<select parameterType="map" resultType="cMap" id="getAppraisalIdMgrTab2CdList">

		<![CDATA[
					SELECT CODE, CODE_NM, NOTE3
					FROM TSYS005
					WHERE ENTER_CD = #{ssnEnterCd}
					AND GRCODE_CD = 'P00003'
					AND NVL(NOTE3, 'N')	=	(
												SELECT DECODE( APP_TYPE_CD, 'D', 'N', 'Y')
												FROM TPAP101
												WHERE ENTER_CD = #{ssnEnterCd}
												AND   APPRAISAL_CD = #{searchAppraisalCd}
											)
					        ]]>
		<if test='useYn != null and !useYn.equals("")'>
			AND USE_YN = TRIM(#{useYn})
		</if>


	</select>


	<select parameterType="map" resultType="cMap" id="getAppraisalIdMgrTab2">

				<![CDATA[
		SELECT  APPRAISAL_CD, APP_STEP_CD, APPRAISAL_SEQ, APP_AS_YMD, APP_AE_YMD
		FROM TPAP104
		WHERE ENTER_CD = TRIM(#{ssnEnterCd})
		  AND APPRAISAL_CD = TRIM(#{appraisalCd})
		ORDER BY  APPRAISAL_CD, APP_STEP_CD, APPRAISAL_SEQ
		]]>


	</select>



	<!-- 		저장 -->
	<update parameterType="map" id="saveAppraisalIdMgrTab2">

		<![CDATA[
					MERGE INTO TPAP104 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.APPRAISAL_CD
									, A.APP_STEP_CD
									, A.APP_AS_YMD
									, A.APP_AE_YMD
									, A.APPRAISAL_SEQ
							FROM	(
									SELECT	  NULL	AS ENTER_CD
											, NULL	AS APPRAISAL_CD
											, NULL	AS APP_STEP_CD
											, NULL	AS APP_AS_YMD
											, NULL	AS APP_AE_YMD
											, NULL	AS APPRAISAL_SEQ
									FROM	DUAL
									]]>
		<bind name="icnt" value="1" />
		<foreach item="rm" collection="mergeRows" >
			UNION ALL
			SELECT
			#{ssnEnterCd}           		AS ENTER_CD
			, TRIM( #{rm.appraisalCd} )	AS APPRAISAL_CD
			, TRIM( #{rm.appStepCd} )	AS APP_STEP_CD
			, TRIM( #{rm.appAsYmd})	AS APP_AS_YMD
			, TRIM( #{rm.appAeYmd})	AS APP_AE_YMD
			, TRIM( #{rm.appraisalSeq})	AS APPRAISAL_SEQ
			FROM   DUAL
		</foreach>
		) A WHERE ENTER_CD IS NOT NULL
		) S
		ON ( T.ENTER_CD		= S.ENTER_CD
		AND  T.APPRAISAL_CD = S.APPRAISAL_CD
		AND  T.APP_STEP_CD	= S.APP_STEP_CD
		AND  T.APPRAISAL_SEQ = S.APPRAISAL_SEQ
		)
		WHEN MATCHED THEN
		UPDATE SET
		T.APP_AS_YMD  	= S.APP_AS_YMD
		, T.APP_AE_YMD     	= S.APP_AE_YMD
		, T.CHKDATE			= SYSDATE
		, T.CHKID			= #{ssnSabun}
		WHEN NOT MATCHED THEN
		INSERT
		(
		T.ENTER_CD
		, T.APPRAISAL_CD
		, T.APP_STEP_CD
		, T.APP_AS_YMD
		, T.APP_AE_YMD
		, T.APPRAISAL_SEQ
		, T.CHKDATE
		, T.CHKID
		)
		VALUES
		(
		S.ENTER_CD
		, S.APPRAISAL_CD
		, S.APP_STEP_CD
		, S.APP_AS_YMD
		, S.APP_AE_YMD
		, S.APPRAISAL_SEQ
		, SYSDATE
		, #{ssnSabun}
		)
	</update>


	<!-- 		삭제 -->
	<delete parameterType="map" id="deleteAppraisalIdMgrTab2">
		DELETE FROM TPAP104
		WHERE 	(ENTER_CD,APPRAISAL_CD,APP_STEP_CD,APPRAISAL_SEQ)   IN 	(  (NULL,NULL,NULL,NULL)
		<foreach item="rm" collection="deleteRows" >
			,				(
			#{ssnEnterCd}
			<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
				,TRIM( #{rm.appraisalCd} )
			</if>
			<if test='rm.appStepCd != null and !rm.appStepCd.equals("")'>
				,TRIM( #{rm.appStepCd} )
			</if>
			<if test='rm.appraisalSeq != null and !rm.appraisalSeq.equals("")'>
				,TRIM( #{rm.appraisalSeq})
			</if>
			)
		</foreach>
		)
	</delete>
	<!-- ################################## 평가일정 텝 End ################################### -->


	<!-- 		생성 -->
	<insert parameterType="map" id="insertAppraisalIdMgr">

		<![CDATA[
						INSERT INTO MainMnMgrTable
						(
							  PRG_CD
							, PRG_NM
							, PRG_ENG_NM
							, PRG_PATH
							, USE
							, VERSION
							, MEMO
							, DATE_TRACK_YN
							, LOG_SAVE_YN
							, CHKDATE
							, CHKID
						)
						SELECT	  S.PRG_CD
								, S.PRG_NM
								, S.PRG_ENG_NM
								, S.PRG_PATH
								, S.USE
								, S.VERSION
								, S.MEMO
								, S.DATE_TRACK_YN
								, S.LOG_SAVE_YN
								, SYSDATE
								, #{ssnSabun}
						FROM (
								SELECT    NULL 	AS PRG_CD
										, NULL 	AS PRG_NM
										, NULL 	AS PRG_ENG_NM
										, NULL 	AS PRG_PATH
										, NULL 	AS USE
										, NULL 	AS VERSION
										, NULL 	AS MEMO
										, NULL 	AS DATE_TRACK_YN
										, NULL 	AS LOG_SAVE_YN
								FROM   DUAL
								]]>
		<bind name="icnt" value="1" />
		<foreach item="rm" collection="insertRows" >
			UNION ALL
			SELECT	  TRIM( #{rm.prgCd})	AS PRG_CD
			, TRIM( #{rm.prgNm})	AS PRG_NM
			, TRIM( #{rm.prgEngNm})	AS PRG_ENG_NM
			, TRIM( #{rm.prgPath})	AS PRG_PATH
			, TRIM( #{rm.use})	AS USE
			, TRIM( #{rm.version})	AS VERSION
			, TRIM( #{rm.memo})	AS MEMO
			, TRIM( #{rm.dateTrackYn})	AS DATE_TRACK_Y
			, TRIM( #{rm.logSaveYn})	AS LOG_SAVE_YN
			FROM   DUAL
		</foreach>
		) S
		WHERE S.PRG_CD IS NOT NULL
	</insert>



	<!-- 		수정 -->
	<update parameterType="map" id="updateAppraisalIdMgr">

		<![CDATA[
					UPDATE ZTST002 T SET
					( COL1, COL2, COL3, COL4, CHKDATE, CHKID )
					=
					(	SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, SYSDATE
								, #{ssnSabun}
						FROM (
							SELECT	  NULL 	AS COL1
									, NULL 	AS COL2
									, NULL 	AS COL3
									, NULL 	AS COL4
									FROM   DUAL
									]]>
		<foreach item="rm" collection="updateRows" >
			UNION ALL
			SELECT
			TRIM(#{rm.col1})	AS COL1
			, TRIM(#{rm.col2})	AS COL2
			, TRIM(#{rm.col3})	AS COL3
			, TRIM(#{rm.col4})	AS COL4
			FROM   DUAL
		</foreach>
		) S
		WHERE S.COL1 IS NOT NULL
		)
		WHERE EXISTS (
		SELECT S.COL1
		FROM (
		SELECT	S.COL1
		FROM (
		SELECT	NULL 				AS COL1	FROM	DUAL
		<foreach item="rm" collection="updateRows" > UNION ALL		SELECT	TRIM(#{rm.col1})	AS COL1	FROM	DUAL  </foreach>
		) S
		WHERE S.COL1 IS NOT NULL
		)S
		WHERE T.COL1 = S.COL1
		)
	</update>

	<!-- ################################## 최종평가일정 텝 Start ################################### -->
	<!-- 		조회 -->
	<select parameterType="map" resultType="cMap" id="getAppraisalIdMgrTab3CdList">
		 
					SELECT CODE, CODE_NM, NOTE3
					FROM TSYS005
					WHERE ENTER_CD = #{ssnEnterCd}
					AND GRCODE_CD = 'P00003'
					AND NVL(NOTE3, 'N')	=	(
												SELECT DECODE( APP_TYPE_CD, 'D', 'N', 'Y')
												FROM TPAP101
												WHERE ENTER_CD = #{ssnEnterCd}
												AND   APPRAISAL_CD = #{searchAppraisalCd}
											)
					<if test='useYn != null and !useYn.equals("")' >
					AND USE_YN = TRIM(#{useYn})
					</if>
		
		
	</select>
	

	<select parameterType="map" resultType="cMap" id="getAppraisalIdMgrTab3">

				<![CDATA[
		SELECT  APPRAISAL_CD, APP_STEP_CD, APP_AS_YMD, APP_AE_YMD
		FROM TPAP103
		WHERE ENTER_CD = TRIM(#{ssnEnterCd})
		  AND APPRAISAL_CD = TRIM(#{appraisalCd})
		ORDER BY  APPRAISAL_CD, APP_STEP_CD
		]]>


		</select>

	<update parameterType="map" id="saveAppraisalIdMgrTab3">

		<![CDATA[
					MERGE INTO TPAP103 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.APPRAISAL_CD
									, A.APP_STEP_CD
									, A.APP_AS_YMD
									, A.APP_AE_YMD
							FROM	(
									SELECT	  NULL	AS ENTER_CD
											, NULL	AS APPRAISAL_CD
											, NULL	AS APP_STEP_CD
											, NULL	AS APP_AS_YMD
											, NULL	AS APP_AE_YMD
									FROM	DUAL
									]]>
		<bind name="icnt" value="1" />
		<foreach item="rm" collection="mergeRows" >
			UNION ALL
			SELECT
			#{ssnEnterCd}           		AS ENTER_CD
			, TRIM( #{rm.appraisalCd} )	AS APPRAISAL_CD
			, TRIM( #{rm.appStepCd} )	AS APP_STEP_CD
			, TRIM( #{rm.appAsYmd})	AS APP_AS_YMD
			, TRIM( #{rm.appAeYmd})	AS APP_AE_YMD
			FROM   DUAL
		</foreach>
		) A WHERE ENTER_CD IS NOT NULL
		) S
		ON ( T.ENTER_CD		= S.ENTER_CD
		AND  T.APPRAISAL_CD = S.APPRAISAL_CD
		AND  T.APP_STEP_CD	= S.APP_STEP_CD
		)
		WHEN MATCHED THEN
		UPDATE SET
		T.APP_AS_YMD  	= S.APP_AS_YMD
		, T.APP_AE_YMD     	= S.APP_AE_YMD
		, T.CHKDATE			= SYSDATE
		, T.CHKID			= #{ssnSabun}
		WHEN NOT MATCHED THEN
		INSERT
		(
		T.ENTER_CD
		, T.APPRAISAL_CD
		, T.APP_STEP_CD
		, T.APP_AS_YMD
		, T.APP_AE_YMD
		, T.CHKDATE
		, T.CHKID
		)
		VALUES
		(
		S.ENTER_CD
		, S.APPRAISAL_CD
		, S.APP_STEP_CD
		, S.APP_AS_YMD
		, S.APP_AE_YMD
		, SYSDATE
		, #{ssnSabun}
		)
	</update>

	<delete parameterType="map" id="deleteAppraisalIdMgrTab3">

		DELETE FROM TPAP103
		WHERE 	(ENTER_CD,APPRAISAL_CD,APP_STEP_CD)   IN 	(  (NULL,NULL,NULL)
		<foreach item="rm" collection="deleteRows" >
			,				(
			#{ssnEnterCd}
			<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
				,TRIM( #{rm.appraisalCd} )
			</if>
			<if test='rm.appStepCd != null and !rm.appStepCd.equals("")'>
				,TRIM( #{rm.appStepCd} )
			</if>
			)
		</foreach>
		)
	</delete>



	<select parameterType="map" resultType="cMap" id="getAppraisalIdMgrTab4CdList">
		 
					SELECT CODE, CODE_NM, NOTE3
					FROM TSYS005
					WHERE ENTER_CD = #{ssnEnterCd}
					AND GRCODE_CD = 'P00003'
					AND NVL(NOTE3, 'N')	=	(
												SELECT DECODE( APP_TYPE_CD, 'D', 'N', 'Y')
												FROM TPAP101
												WHERE ENTER_CD = #{ssnEnterCd}
												AND   APPRAISAL_CD = #{searchAppraisalCd}
											)
					<if test='useYn != null and !useYn.equals("")' >
					AND USE_YN = TRIM(#{useYn})
					</if>
		
		
	</select>

	<select parameterType="map" resultType="cMap" id="getAppraisalIdMgrTab4">
		
			<![CDATA[
				SELECT  APPRAISAL_CD, APP_STEP_CD, APP_AS_YMD, APP_AE_YMD, APP_WORK_AS_YMD, APP_WORK_AE_YMD
				FROM TPAP103
				WHERE ENTER_CD = TRIM(#{ssnEnterCd})
				AND APPRAISAL_CD = TRIM(#{appraisalCd})
				ORDER BY  APPRAISAL_CD, APP_STEP_CD
				]]>
		
		
	</select>
	<update parameterType="map" id="saveAppraisalIdMgrTab4">
		 
					MERGE INTO TPAP103 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.APPRAISAL_CD
									, A.APP_STEP_CD
									, A.APP_AS_YMD
									, A.APP_AE_YMD
									, A.APP_WORK_AS_YMD
									, A.APP_WORK_AE_YMD
							FROM	(
									SELECT	  NULL	AS ENTER_CD
											, NULL	AS APPRAISAL_CD
											, NULL	AS APP_STEP_CD
											, NULL	AS APP_AS_YMD
											, NULL	AS APP_AE_YMD
											, NULL	AS APP_WORK_AS_YMD
											, NULL	AS APP_WORK_AE_YMD
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											#{ssnEnterCd}           			AS ENTER_CD
											, TRIM( #{rm.appraisalCd} )		AS APPRAISAL_CD
											, TRIM( #{rm.appStepCd} )		AS APP_STEP_CD
										    , TRIM( #{rm.appAsYmd} )		AS APP_AS_YMD
										    , TRIM( #{rm.appAeYmd} )		AS APP_AE_YMD
										    , TRIM( #{rm.appWorkAsYmd} )	AS APP_WORK_AS_YMD
										    , TRIM( #{rm.appWorkAeYmd} )	AS APP_WORK_AE_YMD
											FROM   DUAL
</foreach>
									) A WHERE ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD		= S.ENTER_CD
					AND  T.APPRAISAL_CD = S.APPRAISAL_CD
					AND  T.APP_STEP_CD	= S.APP_STEP_CD
					 )
					WHEN MATCHED THEN
						UPDATE SET
									  T.APP_AS_YMD  		= S.APP_AS_YMD
									, T.APP_AE_YMD     		= S.APP_AE_YMD
									, T.APP_WORK_AS_YMD  	= S.APP_WORK_AS_YMD
									, T.APP_WORK_AE_YMD 	= S.APP_WORK_AE_YMD
			                   		, T.CHKDATE			= SYSDATE
									, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
   							, T.APPRAISAL_CD
   							, T.APP_STEP_CD
   							, T.APP_AS_YMD
   							, T.APP_AE_YMD
   							, T.APP_WORK_AS_YMD
   							, T.APP_WORK_AE_YMD
   							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
 							  S.ENTER_CD
 							, S.APPRAISAL_CD
 							, S.APP_STEP_CD
 							, S.APP_AS_YMD
 							, S.APP_AE_YMD
 							, S.APP_WORK_AS_YMD
 							, S.APP_WORK_AE_YMD
 							, SYSDATE
							, #{ssnSabun}
						) 
	</update>
	
	<delete parameterType="map" id="deleteAppraisalIdMgrTab4">
		 
					DELETE FROM TPAP103
					WHERE 	(ENTER_CD,APPRAISAL_CD,APP_STEP_CD)   IN 	(  (NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
										#{ssnEnterCd}
										<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")' >
											,TRIM( #{rm.appraisalCd} )
										</if>
										<if test='rm.appStepCd != null and !rm.appStepCd.equals("")' >
											,TRIM( #{rm.appStepCd} )
										</if>
										)
</foreach>
										)
	</delete>





</mapper>