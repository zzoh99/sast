<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="pap.progress.appSelfWorkTarget">

		<select parameterType="map" resultType="cMap" id="getAppSelfWorkTargetList">

				<![CDATA[
				SELECT A.ENTER_CD, A.APPRAISAL_CD, A.APP_STEP_CD, A.SABUN, A.APP_ORG_CD, A.APP_ORG_NM, A.NAME, A.JIKWEE_NM, A.JIKCHAK_NM, A.JIKGUB_NM
					, ( SELECT COUNT(*)
					    FROM TPAP384
					    WHERE ENTER_CD = A.ENTER_CD
					    AND   APPRAISAL_CD = A.APPRAISAL_CD
					    AND   SABUN = A.SABUN
					    AND   APP_ORG_CD = A.APP_ORG_CD
					  ) AS CNT
				FROM  TPAP201 A
				   ,  TPAP202 B
				   ,  TPAP101 C
				WHERE A.ENTER_CD       = B.ENTER_CD
				AND   A.APPRAISAL_CD   = B.APPRAISAL_CD
				AND   A.APP_STEP_CD    = B.APP_STEP_CD
				AND   A.SABUN          = B.SABUN
				AND   A.APP_ORG_CD     = B.APP_ORG_CD
				AND   B.APP_SEQ_CD     = '0'
				AND   A.ENTER_CD       = C.ENTER_CD
				AND   A.APPRAISAL_CD   = C.APPRAISAL_CD
				AND   A.APP_STEP_CD    = '5'
				AND   A.WORK_TARGET_YN = 'Y'
				AND   A.ENTER_CD       = #{ssnEnterCd}
				AND   A.APPRAISAL_CD   = #{searchAppraisalCd}
				          ]]>
				<if test='searchNm != null and !searchNm.equals("")'>
				AND	(
							A.NAME		LIKE	'%'|| #{searchNm} || '%'
						OR	A.SABUN		=		#{searchNm}
					)
				</if>
				<if test='searchAppOrgNm != null and !searchAppOrgNm.equals("")'>
				AND	 A.APP_ORG_NM	LIKE	'%'|| #{searchAppOrgNm} || '%'
				</if>
				ORDER BY ( SELECT F_COM_JIKJE_SORT( A.ENTER_CD, A.SABUN, C.APP_S_YMD) FROM DUAL )



		</select>

		<update parameterType="map" id="saveAppSelfWorkTarget">

						MERGE INTO TPAP201	T
						USING
						(
									SELECT	ENTER_CD
										,	APPRAISAL_CD
										,	APP_STEP_CD
										,	SABUN
										,	APP_ORG_CD
										,	APP_ORG_NM
										,	NAME
										,	JIKWEE_CD
										,	JIKWEE_NM
										,	JOB_CD
										,	JOB_NM
										,	WORK_TYPE
										,	WORK_TYPE_NM
										,	JIKCHAK_NM
										,	JIKCHAK_CD
										,	JIKGUB_CD
										,	JIKGUB_NM
										,	APP_SHEET_TYPE
										,	APP_METHOD_CD
										,	APP_YN
										,	MAIN_ORG_YN
										,	APP_EX_CD
										,	NOTE
										,	CHKDATE
										,	CHKID
										,	APP_CONFIRM_YN
										,	APP_GROUP_CD
										,	APP_1ST_YN
										,	APP_M_RATE
										,	TMP_YN
										,	MBO_CLOSE_YN
										,	COMP_CLOSE_YN
										,	MBO_TARGET_YN
										,	WORK_TARGET_YN
							FROM	(
									SELECT	NULL		AS	ENTER_CD
										,	NULL		AS	APPRAISAL_CD
										,	NULL		AS	APP_STEP_CD
										,	NULL		AS	SABUN
										,	NULL		AS	APP_ORG_CD
										,	NULL		AS	APP_ORG_NM
										,	NULL		AS	NAME
										,	NULL		AS	JIKWEE_CD
										,	NULL		AS	JIKWEE_NM
										,	NULL		AS	JOB_CD
										,	NULL		AS	JOB_NM
										,	NULL		AS	WORK_TYPE
										,	NULL		AS	WORK_TYPE_NM
										,	NULL		AS	JIKCHAK_NM
										,	NULL		AS	JIKCHAK_CD
										,	NULL		AS	JIKGUB_CD
										,	NULL		AS	JIKGUB_NM
										,	NULL		AS	APP_SHEET_TYPE
										,	NULL		AS	APP_METHOD_CD
										,	NULL		AS	APP_YN
										,	NULL		AS	MAIN_ORG_YN
										,	NULL		AS	APP_EX_CD
										,	NULL		AS	NOTE
										,	NULL		AS	CHKDATE
										,	NULL		AS	CHKID
										,	NULL		AS	APP_CONFIRM_YN
										,	NULL		AS	APP_GROUP_CD
										,	NULL		AS	APP_1ST_YN
										,	NULL		AS	APP_M_RATE
										,	NULL		AS	TMP_YN
										,	NULL		AS	MBO_CLOSE_YN
										,	NULL		AS	COMP_CLOSE_YN
										,	NULL		AS	MBO_TARGET_YN
										,	NULL		AS	WORK_TARGET_YN
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
								UNION ALL
									SELECT	TRIM(#{ssnEnterCd})				AS	ENTER_CD
										,	TRIM(#{rm.appraisalCd})				AS	APPRAISAL_CD
										,	TRIM(#{rm.appStepCd})				AS	APP_STEP_CD
										,	TRIM(#{rm.sabun})				AS	SABUN
										,	TRIM(#{rm.appOrgCd})				AS	APP_ORG_CD
										,	TRIM(#{rm.appOrgNm})				AS	APP_ORG_NM
										,	TRIM(#{rm.name})				AS	NAME
										,	TRIM(#{rm.jikweeCd})				AS	JIKWEE_CD
										,	TRIM(#{rm.jikweeNm})				AS	JIKWEE_NM
										,	TRIM(#{rm.jobCd})				AS	JOB_CD
										,	TRIM(#{rm.jobNm})				AS	JOB_NM
										,	TRIM(#{rm.workType})				AS	WORK_TYPE
										,	TRIM(#{rm.workTypeNm})				AS	WORK_TYPE_NM
										,	TRIM(#{rm.jikchakNm})				AS	JIKCHAK_NM
										,	TRIM(#{rm.jikchakCd})				AS	JIKCHAK_CD
										,	TRIM(#{rm.jikgubCd})				AS	JIKGUB_CD
										,	TRIM(#{rm.jikgubNm})				AS	JIKGUB_NM
										,	TRIM(#{rm.appSheetType})				AS	APP_SHEET_TYPE
										,	TRIM(#{rm.appMethodCd})				AS	APP_METHOD_CD
										,	TRIM(#{rm.appYn})				AS	APP_YN
										,	TRIM(#{rm.mainOrgYn})				AS	MAIN_ORG_YN
										,	TRIM(#{rm.appExCd})				AS	APP_EX_CD
										,	TRIM(#{rm.note})				AS	NOTE
										,	SYSDATE						AS	CHKDATE
										,	#{ssnSabun}						AS	CHKID
										,	TRIM(#{rm.appConfirmYn})				AS	APP_CONFIRM_YN
										,	TRIM(#{rm.appGroupCd})				AS	APP_GROUP_CD
										,	TRIM(#{rm.app1stYn})				AS	APP_1ST_YN
										,	TRIM(#{rm.appMRate})				AS	APP_M_RATE
										,	TRIM(#{rm.tmpYn})				AS	TMP_YN
										,	TRIM(#{rm.mboCloseYn})				AS	MBO_CLOSE_YN
										,	TRIM(#{rm.compCloseYn})				AS	COMP_CLOSE_YN
										,	TRIM(#{rm.mboTargetYn})				AS	MBO_TARGET_YN
										,	TRIM(#{rm.workTargetYn})				AS	WORK_TARGET_YN
									FROM	DUAL
</foreach>
									)	WHERE	ENTER_CD IS NOT NULL
										AND	APPRAISAL_CD IS NOT NULL
										AND	APP_STEP_CD IS NOT NULL
										AND	SABUN IS NOT NULL
										AND	APP_ORG_CD IS NOT NULL
						) S
					ON	(
								T.ENTER_CD				=		S.ENTER_CD
							AND	T.APPRAISAL_CD				=		S.APPRAISAL_CD
							AND	T.APP_STEP_CD				=		S.APP_STEP_CD
							AND	T.SABUN				=		S.SABUN
							AND	T.APP_ORG_CD				=		S.APP_ORG_CD
						)
					WHEN MATCHED THEN
					UPDATE SET
							T.APP_ORG_NM			=	S.APP_ORG_NM
						,	T.NAME			=	S.NAME
						,	T.JIKWEE_CD			=	S.JIKWEE_CD
						,	T.JIKWEE_NM			=	S.JIKWEE_NM
						,	T.JOB_CD			=	S.JOB_CD
						,	T.JOB_NM			=	S.JOB_NM
						,	T.WORK_TYPE			=	S.WORK_TYPE
						,	T.WORK_TYPE_NM			=	S.WORK_TYPE_NM
						,	T.JIKCHAK_NM			=	S.JIKCHAK_NM
						,	T.JIKCHAK_CD			=	S.JIKCHAK_CD
						,	T.JIKGUB_CD			=	S.JIKGUB_CD
						,	T.JIKGUB_NM			=	S.JIKGUB_NM
						,	T.APP_SHEET_TYPE			=	S.APP_SHEET_TYPE
						,	T.APP_METHOD_CD			=	S.APP_METHOD_CD
						,	T.APP_YN			=	S.APP_YN
						,	T.MAIN_ORG_YN			=	S.MAIN_ORG_YN
						,	T.APP_EX_CD			=	S.APP_EX_CD
						,	T.NOTE			=	S.NOTE
						,	T.CHKDATE			=	S.CHKDATE
						,	T.CHKID			=	S.CHKID
						,	T.APP_CONFIRM_YN			=	S.APP_CONFIRM_YN
						,	T.APP_GROUP_CD			=	S.APP_GROUP_CD
						,	T.APP_1ST_YN			=	S.APP_1ST_YN
						,	T.APP_M_RATE			=	S.APP_M_RATE
						,	T.TMP_YN			=	S.TMP_YN
						,	T.MBO_CLOSE_YN			=	S.MBO_CLOSE_YN
						,	T.COMP_CLOSE_YN			=	S.COMP_CLOSE_YN
						,	T.MBO_TARGET_YN			=	S.MBO_TARGET_YN
						,	T.WORK_TARGET_YN			=	S.WORK_TARGET_YN
					WHEN NOT MATCHED THEN
					INSERT
					(
							T.ENTER_CD
						,	T.APPRAISAL_CD
						,	T.APP_STEP_CD
						,	T.SABUN
						,	T.APP_ORG_CD
						,	T.APP_ORG_NM
						,	T.NAME
						,	T.JIKWEE_CD
						,	T.JIKWEE_NM
						,	T.JOB_CD
						,	T.JOB_NM
						,	T.WORK_TYPE
						,	T.WORK_TYPE_NM
						,	T.JIKCHAK_NM
						,	T.JIKCHAK_CD
						,	T.JIKGUB_CD
						,	T.JIKGUB_NM
						,	T.APP_SHEET_TYPE
						,	T.APP_METHOD_CD
						,	T.APP_YN
						,	T.MAIN_ORG_YN
						,	T.APP_EX_CD
						,	T.NOTE
						,	T.CHKDATE
						,	T.CHKID
						,	T.APP_CONFIRM_YN
						,	T.APP_GROUP_CD
						,	T.APP_1ST_YN
						,	T.APP_M_RATE
						,	T.TMP_YN
						,	T.MBO_CLOSE_YN
						,	T.COMP_CLOSE_YN
						,	T.MBO_TARGET_YN
						,	T.WORK_TARGET_YN
					)
					VALUES
					(
							S.ENTER_CD
						,	S.APPRAISAL_CD
						,	S.APP_STEP_CD
						,	S.SABUN
						,	S.APP_ORG_CD
						,	S.APP_ORG_NM
						,	S.NAME
						,	S.JIKWEE_CD
						,	S.JIKWEE_NM
						,	S.JOB_CD
						,	S.JOB_NM
						,	S.WORK_TYPE
						,	S.WORK_TYPE_NM
						,	S.JIKCHAK_NM
						,	S.JIKCHAK_CD
						,	S.JIKGUB_CD
						,	S.JIKGUB_NM
						,	S.APP_SHEET_TYPE
						,	S.APP_METHOD_CD
						,	S.APP_YN
						,	S.MAIN_ORG_YN
						,	S.APP_EX_CD
						,	S.NOTE
						,	S.CHKDATE
						,	S.CHKID
						,	S.APP_CONFIRM_YN
						,	S.APP_GROUP_CD
						,	S.APP_1ST_YN
						,	S.APP_M_RATE
						,	S.TMP_YN
						,	S.MBO_CLOSE_YN
						,	S.COMP_CLOSE_YN
						,	S.MBO_TARGET_YN
						,	S.WORK_TARGET_YN
					)
		</update>

		<delete parameterType="map" id="deleteAppSelfWorkTarget">

					DELETE	FROM TPAP201
					WHERE	(ENTER_CD, APPRAISAL_CD, APP_STEP_CD, SABUN, APP_ORG_CD) IN ((NULL, NULL, NULL, NULL, NULL)
<foreach item="rm" collection="deleteRows" >
						,
										<if test='ssnEnterCd != null and !ssnEnterCd.equals("")'>
										<if test='rm.appraisalCd != null and !rm.appraisalCd.equals("")'>
										<if test='rm.appStepCd != null and !rm.appStepCd.equals("")'>
										<if test='rm.sabun != null and !rm.sabun.equals("")'>
										<if test='rm.appOrgCd != null and !rm.appOrgCd.equals("")'>
												( TRIM( #{ssnEnterCd} ) , TRIM( #{rm.appraisalCd} ) , TRIM( #{rm.appStepCd} ) , TRIM( #{rm.sabun} ) , TRIM( #{rm.appOrgCd} ) )
										</if>
										</if>
										</if>
										</if>
										</if>
</foreach>
										)
		</delete>

</mapper>