<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="pap.evaluation.mboTargetReg">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getMboTargetRegMapAppEmployee">

					SELECT A.APP_SABUN
						  ,B.NAME AS APP_NAME
						  ,NVL(APPRAISAL_YN, 'N') AS APPRAISAL_YN

						<choose><when test='searchAppStepCd != null and searchAppStepCd.equals("1")'>
						  ,NVL(TARGET_STATUS_CD, '11') AS STATUS_CD
						  ,F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'P10018' ,NVL(TARGET_STATUS_CD, '11')) AS STATUS_NM
						</when><otherwise>
						  ,NVL(MIDDLE_STATUS_CD, '11') AS STATUS_CD
						  ,F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'P10018' ,NVL(MIDDLE_STATUS_CD, '11')) AS STATUS_NM
						</otherwise>
						</choose>

						  ,( SELECT DECODE(COUNT(*),0,'N','Y')
						       FROM TPAP357
						      WHERE ENTER_CD     = A.ENTER_CD
							    AND APPRAISAL_CD = A.APPRAISAL_CD
							    AND SABUN        = A.SABUN
							    AND APP_ORG_CD   = A.APP_ORG_CD
							    AND APP_STEP_CD  = A.APP_STEP_CD) AS COMMENT_IMG
						  ,D.APP_METHOD_CD
						  ,D.APP_SHEET_TYPE
						  ,D.APP_YN
						  ,D.NAME
					      ,D.APP_ORG_NM
						  ,D.JIKWEE_NM
						  ,D.JIKGUB_NM
						  ,D.MBO_TARGET_YN
						  ,NVL(D.COMP_TARGET_YN,'N') AS COMP_TARGET_YN
						  ,A.APP_SEQ_CD
						  ,(
						      SELECT NVL(MAX(T.APP_SEQ_CD), '-1')
						        FROM TPAP202 T
						       WHERE T.ENTER_CD = A.ENTER_CD
						         AND T.APPRAISAL_CD = A.APPRAISAL_CD
						         AND T.APP_STEP_CD = A.APP_STEP_CD
						         AND T.SABUN = A.SABUN
						         AND T.APP_ORG_CD = A.APP_ORG_CD
						   ) AS LAST_APP_SEQ_CD
						  , ( SELECT SUM(WEIGHT)
						        FROM
			<choose><when test='searchAppStepCd != null and searchAppStepCd.equals("1")'>
						             TPAP351
			</when><otherwise>
						             TPAP352
			</otherwise>
			</choose>
						       WHERE ENTER_CD = A.ENTER_CD
						         AND APPRAISAL_CD = A.APPRAISAL_CD
						         AND SABUN = A.SABUN
						         AND APP_ORG_CD = A.APP_ORG_CD ) AS MBO_TOT_RATE
						, ( SELECT SUM(APP_RATE)
							  FROM
			<choose><when test='searchAppStepCd != null and searchAppStepCd.equals("1")'>
								TPAP401
			</when><otherwise>
								TPAP402
			</otherwise>
			</choose>
							WHERE ENTER_CD = A.ENTER_CD
							AND APPRAISAL_CD = A.APPRAISAL_CD
							AND SABUN = A.SABUN
							AND APP_ORG_CD = A.APP_ORG_CD ) AS COMP_TOT_RATE
					  FROM TPAP202 A, THRM100 B, TPAP350 C, TPAP201 D
					 WHERE A.ENTER_CD     = B.ENTER_CD
					   AND A.APP_SABUN    = B.SABUN
					   AND A.ENTER_CD     = C.ENTER_CD
					   AND A.APPRAISAL_CD = C.APPRAISAL_CD
					   AND A.SABUN        = C.SABUN
					   AND A.APP_ORG_CD   = C.APP_ORG_CD
					   AND A.ENTER_CD     = D.ENTER_CD
					   AND A.APPRAISAL_CD = D.APPRAISAL_CD
					   AND A.APP_ORG_CD   = D.APP_ORG_CD
					   AND A.APP_STEP_CD  = D.APP_STEP_CD
					   AND A.SABUN        = D.SABUN

					   AND A.ENTER_CD     = TRIM(#{ssnEnterCd})
					   AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
					   AND A.SABUN        = TRIM(#{searchSabun})
					   AND A.APP_ORG_CD   = TRIM(#{searchAppOrgCd})
					   AND A.APP_STEP_CD  = TRIM(#{searchAppStepCd})
					   AND D.APP_YN       = 'Y'

					<choose><when test='searchAppSeqCd != null and !searchAppSeqCd.equals("")'>
 				       AND A.APP_SEQ_CD   = TRIM(#{searchAppSeqCd})
					</when><otherwise>
 					   AND A.APP_SEQ_CD   = '1'
					</otherwise>
					</choose>

		</select>

		<select parameterType="map" resultType="cMap" id="getMboTargetRegList1">

				<![CDATA[
					SELECT A.ENTER_CD
						, A.APPRAISAL_CD
						, A.APP_ORG_CD
						, A.SABUN
						, A.SEQ
						, A.MK_GUBUN_CD
						, A.APP_INDEX_GUBUN_CD
						, A.APP_INDEX_GUBUN_NM
						, A.MBO_TARGET
						, A.KPI_NM
						, A.FORMULA
						, A.BASELINE_DATA
						, A.S_GRADE_BASE
						, A.A_GRADE_BASE
						, A.B_GRADE_BASE
						, A.C_GRADE_BASE
						, A.D_GRADE_BASE
						, A.WEIGHT
						, A.ORDER_SEQ
						, '0' AS DETAIL
						, A.REMARK
						, A.MBO_TYPE
					    , F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'P10009', A.MBO_TYPE) AS MBO_TYPE_NM
						, A.DEADLINE_TYPE
						, A.DEADLINE_TYPE_TO
						, A.DESIGNATE_APP_SABUN
						      ]]>
						<if test='searchAppStepCd != null and searchAppStepCd.equals("3")'>
 						, A.MBO_MID_APP_RESULT --중간점검 실적
 						, A.MBO_MID_APP_SELF_CLASS_CD -- 중간점검본인평가등급
 						, A.MBO_MID_APP_1ST_CLASS_CD -- 중간점검1차평가등급
 						, A.MBO_MID_APP_1ST_MEMO -- 중간점검 1차평가의견
						</if>
				  	FROM
				  		<choose><when test='searchAppStepCd != null and searchAppStepCd.equals("1")'>
 							TPAP351
						</when><otherwise>
 							TPAP352
						</otherwise>
						</choose>
						 A
				  	WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
						AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
						AND A.SABUN = TRIM(#{searchEvaSabun})
						AND A.APP_ORG_CD = TRIM(#{searchAppOrgCd})
				  	<if test="searchMboType != null and !''.equals(searchMboType)">
						AND A.MBO_TYPE = TRIM(#{searchMboType})
					</if>
					ORDER BY A.MK_GUBUN_CD, A.APP_INDEX_GUBUN_NM, A.ORDER_SEQ


		</select>

		<select parameterType="map" resultType="cMap" id="getMboTargetRegList2">

				<![CDATA[
					SELECT A.ENTER_CD
						, A.APPRAISAL_CD
						, A.SABUN
						, A.APP_ORG_CD
						, A.COMPETENCY_CD
						, A.COMPETENCY_NM
						, A.APP_RATE
						, A.COMP_DEV_PLAN
						, NVL(A.MK_GUBUN_CD,'S') AS MK_GUBUN_CD
					    , DECODE(NVL(A.MK_GUBUN_CD,'S'), 'U', '개인설정', '자동설정') AS MK_GUBUN_NM
						, B.MAIN_APP_TYPE
						, F_COM_GET_GRCODE_NAME(B.ENTER_CD, 'P00007', B.MAIN_APP_TYPE) AS MAIN_APP_TYPE_NM
						, A.REQ_SUPPORT_MEMO
						, A.FILE_SEQ
						, '1' AS FILE_POP
						, B.GMEASURE_MEMO
						, B.MEMO
				  	FROM
				  	     ]]>
				  		<choose><when test='searchAppStepCd != null and searchAppStepCd.equals("1")'>
 							TPAP401
						</when><otherwise>
 							TPAP402
						</otherwise>
						</choose>
						 A
						 , TORG051 B
				  	WHERE A.ENTER_CD = B.ENTER_CD
				  		AND A.COMPETENCY_CD = B.COMPETENCY_CD
				  		AND A.ENTER_CD = TRIM(#{ssnEnterCd})
						AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
						AND A.SABUN = TRIM(#{searchEvaSabun})
						AND A.APP_ORG_CD = TRIM(#{searchAppOrgCd})
					ORDER BY B.MAIN_APP_TYPE, A.COMPETENCY_CD


		</select>

<!-- 성과기술 조회 -->
		<select parameterType="map" resultType="cMap" id="getMboTargetRegList3">

				<![CDATA[
		            SELECT ENTER_CD
		            	 , APPRAISAL_CD
		            	 , APP_ORG_CD
		            	 , SABUN
		            	 , APP_CONTENT
		            	 , ETC_SELF_POINT
		            	 , ETC_1ST_POINT
		            	 , ETC_2ND_POINT
	                  FROM TPAP353 A
					 WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
					   AND A.APPRAISAL_CD = TRIM(#{searchAppraisalCd})
					   AND A.SABUN = TRIM(#{searchSabun})
					   AND A.APP_ORG_CD = TRIM(#{searchAppOrgCd})
				]]>


		</select>

		<select parameterType="map" resultType="cMap" id="getMboTargetRegPopCompetencyList">
				<![CDATA[
					SELECT A.ENTER_CD
					     , A.MAIN_APP_TYPE
					     , F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'P00007', A.MAIN_APP_TYPE) AS MAIN_APP_TYPE_NM
					     , A.COMPETENCY_CD
					     , A.COMPETENCY_NM
					     , A.MEMO
                         , A.GMEASURE_MEMO
					  FROM TORG051 A, TSYS005 B
					 WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
					 	AND A.ENTER_CD = B.ENTER_CD
					 	AND A.MAIN_APP_TYPE = B.CODE
					 	AND B.GRCODE_CD = 'P00007'
					 	        ]]>
					<if test='ssnPapAdminYn != null and !ssnPapAdminYn.equals("Y")'>
						AND NVL(B.NOTE1,'Y') = 'Y'
					</if>
					<if test='searchGubun != null and searchGubun.equals("3")'>
						AND NVL(B.NOTE1,'Y') = 'Y'
					</if>
					   <![CDATA[
					 	AND A.COMPETENCY_TYPE <> 'A'
					 ORDER BY A.COMPETENCY_CD
				]]>
		</select>

		<select parameterType="map" resultType="cMap" id="getMboTargetRegPopOrgLeader">

				<![CDATA[
					SELECT C.APPRAISAL_CD
					     , C.APP_ORG_CD
					     , C.SABUN
					     , F_COM_GET_NAMES(C.ENTER_CD, C.SABUN, #{ssnLocaleCd}) AS NAME
					     , A.JIKCHAK_NM
					     , X.APP_SEQ_CD
					     , C.SEQ
					     , C.MK_GUBUN_CD
					     , C.APP_INDEX_GUBUN_CD
					     , C.APP_INDEX_GUBUN_NM
					     , C.MBO_TARGET
					     , C.KPI_NM
					     , C.FORMULA
					     , C.BASELINE_DATA
					     , C.S_GRADE_BASE
					     , C.A_GRADE_BASE
					     , C.B_GRADE_BASE
					     , C.C_GRADE_BASE
					     , C.D_GRADE_BASE
					     , C.WEIGHT
					     , C.ORDER_SEQ
					     , C.REMARK
					     , C.MBO_TYPE
					     , F_COM_GET_GRCODE_NAME(C.ENTER_CD, 'P10009', C.MBO_TYPE) AS MBO_TYPE_NM
					     , C.DEADLINE_TYPE
					     , C.DEADLINE_TYPE_TO
					     , 1 AS TSEQ
					  FROM TPAP201 A
					     , TPAP350 B
					     ]]>
<choose><when test='searchAppStepCd != null and searchAppStepCd.equals("1")'>
					     , TPAP351 C
		</when><otherwise>
					     , TPAP352 C
</otherwise>
</choose>
<![CDATA[
					       -- 해당 피평가자의 평가자정보
					     , (SELECT *
					          FROM TPAP202
					         WHERE ENTER_CD   = #{ssnEnterCd}
					           AND APPRAISAL_CD =#{searchAppraisalCd}
					           AND APP_STEP_CD = #{searchAppStepCd}
					           AND SABUN      = #{searchEvaSabun}
					           AND APP_ORG_CD = #{searchAppOrgCd}
					           AND APP_SEQ_CD <> '0'
					       ) X
					 WHERE A.ENTER_CD     = B.ENTER_CD
					   AND A.APPRAISAL_CD = B.APPRAISAL_CD
					   AND A.SABUN        = B.SABUN
					   AND A.APP_ORG_CD   = B.APP_ORG_CD
					   AND A.ENTER_CD     = C.ENTER_CD
					   AND A.APPRAISAL_CD = C.APPRAISAL_CD
					   AND A.SABUN        = C.SABUN
					   AND A.APP_ORG_CD   = C.APP_ORG_CD
					   AND A.ENTER_CD     = X.ENTER_CD
					   AND A.APPRAISAL_CD = X.APPRAISAL_CD
					   AND A.APP_STEP_CD  = X.APP_STEP_CD
					   AND A.SABUN        = X.APP_SABUN
					   AND A.APP_YN       = 'Y' -- 평가포함여부
					 ORDER BY F_COM_JIKJE_SORT(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')), C.ORDER_SEQ
				]]>
		</select>

<!-- 		저장 -->
		<update parameterType="map" id="saveMboTargetReg1">

				<![CDATA[
					MERGE INTO
					    ]]>
						<choose>
				  		<when test='searchAppStepCd != null and searchAppStepCd.equals("1")'>
 							TPAP351
						</when><otherwise>
 							TPAP352
						</otherwise></choose>
					    <![CDATA[
					 T
					USING	(
						  SELECT  TRIM(#{ssnEnterCd})	AS	ENTER_CD
								,	SYSDATE				AS	CHKDATE
								,	#{ssnSabun}			AS	CHKID
								,   TRIM( #{searchAppraisalCd} )	AS APPRAISAL_CD
								, TRIM( #{searchAppOrgCd} )		AS APP_ORG_CD
								, TRIM( #{searchEvaSabun} )			AS SABUN
								, A.SEQ
								, A.MK_GUBUN_CD
								, A.APP_INDEX_GUBUN_CD
								, A.APP_INDEX_GUBUN_NM
								, A.MBO_TARGET
								, A.KPI_NM
								, A.FORMULA
								, A.BASELINE_DATA
								, A.S_GRADE_BASE
								, A.A_GRADE_BASE
								, A.B_GRADE_BASE
								, A.C_GRADE_BASE
								, A.D_GRADE_BASE
								, A.WEIGHT
								, A.ORDER_SEQ
								, A.REMARK
								, A.MBO_TYPE
								, A.DEADLINE_TYPE
								, A.DEADLINE_TYPE_TO ]]>
							<if test='searchAppStepCd != null and searchAppStepCd.equals("3")'>
		 						, A.MBO_MID_APP_RESULT
								, A.MBO_MID_APP_SELF_CLASS_CD
								, A.MBO_MID_APP_1ST_CLASS_CD
		 						, A.MBO_MID_APP_1ST_MEMO
							</if> <![CDATA[
							FROM	(
								  SELECT NULL AS SEQ
										, NULL AS MK_GUBUN_CD
										, NULL AS APP_INDEX_GUBUN_CD
										, NULL AS APP_INDEX_GUBUN_NM
										, NULL AS MBO_TARGET
										, NULL AS KPI_NM
										, NULL AS FORMULA
										, NULL AS BASELINE_DATA
										, NULL AS S_GRADE_BASE
										, NULL AS A_GRADE_BASE
										, NULL AS B_GRADE_BASE
										, NULL AS C_GRADE_BASE
										, NULL AS D_GRADE_BASE
										, NULL AS WEIGHT
										, NULL AS ORDER_SEQ
										, NULL AS REMARK
										, NULL AS MBO_TYPE
										, NULL AS DEADLINE_TYPE
										, NULL AS DEADLINE_TYPE_TO
					    ]]>
									<if test='searchAppStepCd != null and searchAppStepCd.equals("3")'>
										, NULL AS MBO_MID_APP_RESULT
										, NULL AS MBO_MID_APP_SELF_CLASS_CD
										, NULL AS MBO_MID_APP_1ST_CLASS_CD
										, NULL AS MBO_MID_APP_1ST_MEMO
									</if>
								FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT    TRIM(#{rm.seq}) 					AS SEQ
											, TRIM(#{rm.mkGubunCd})				AS MK_GUBUN_CD
											, TRIM(#{rm.appIndexGubunCd})		AS APP_INDEX_GUBUN_CD
											, TRIM(#{rm.appIndexGubunNm})		AS APP_INDEX_GUBUN_NM
											, TRIM(#{rm.mboTarget}) 			AS MBO_TARGET
											, TRIM(#{rm.kpiNm})					AS KPI_NM
											, TRIM(#{rm.formula})				AS FORMULA
											, TRIM(#{rm.baselineData})			AS BASELINE_DATA
											, TRIM(#{rm.sGradeBase}) 			AS S_GRADE_BASE
											, TRIM(#{rm.aGradeBase}) 			AS A_GRADE_BASE
											, TRIM(#{rm.bGradeBase}) 			AS B_GRADE_BASE
											, TRIM(#{rm.cGradeBase}) 			AS C_GRADE_BASE
											, TRIM(#{rm.dGradeBase}) 			AS D_GRADE_BASE
											, TRIM(#{rm.weight})	 			AS WEIGHT
											, TRIM(#{rm.orderSeq}) 				AS ORDER_SEQ
											, TRIM(#{rm.remark}) 				AS REMARK
											, TRIM(#{rm.mboType}) 				AS MBO_TYPE
											, TRIM(#{rm.deadlineType})			AS DEADLINE_TYPE
											, TRIM(#{rm.deadlineTypeTo})		AS DEADLINE_TYPE_TO
										<if test='searchAppStepCd != null and searchAppStepCd.equals("3")'>
											, TRIM(#{rm.mboMidAppResult}) 		AS MBO_MID_APP_RESULT
											, TRIM(#{rm.mboMidAppSelfClassCd}) 	AS MBO_MID_APP_SELF_CLASS_CD
											, TRIM(#{rm.mboMidApp1stClassCd}) 	AS MBO_MID_APP_1ST_CLASS_CD
											, TRIM(#{rm.mboMidApp1stMemo}) 		AS MBO_MID_APP_1ST_MEMO
										</if>
										FROM   DUAL
</foreach>
								) A WHERE A.MK_GUBUN_CD IS NOT NULL
							) S
					ON (     T.ENTER_CD			 = S.ENTER_CD
						AND  T.APPRAISAL_CD  = S.APPRAISAL_CD
						AND  T.APP_ORG_CD    = S.APP_ORG_CD
						AND  T.SABUN         = S.SABUN
						AND  T.SEQ           = S.SEQ
						AND  T.MK_GUBUN_CD   = S.MK_GUBUN_CD
					)
					WHEN MATCHED THEN
						UPDATE SET	  T.APP_INDEX_GUBUN_CD			= S.APP_INDEX_GUBUN_CD
									, T.APP_INDEX_GUBUN_NM			= S.APP_INDEX_GUBUN_NM
									, T.MBO_TARGET					= S.MBO_TARGET
									, T.KPI_NM						= S.KPI_NM
									, T.FORMULA						= S.FORMULA
									, T.BASELINE_DATA				= S.BASELINE_DATA
									, T.S_GRADE_BASE 				= S.S_GRADE_BASE
									, T.A_GRADE_BASE 				= S.A_GRADE_BASE
									, T.B_GRADE_BASE 				= S.B_GRADE_BASE
									, T.C_GRADE_BASE 				= S.C_GRADE_BASE
									, T.D_GRADE_BASE 				= S.D_GRADE_BASE
									, T.WEIGHT 						= S.WEIGHT
									, T.ORDER_SEQ 					= S.ORDER_SEQ
									, T.REMARK						= S.REMARK
									, T.MBO_TYPE					= S.MBO_TYPE
									, T.DEADLINE_TYPE				= S.DEADLINE_TYPE
									, T.DEADLINE_TYPE_TO			= S.DEADLINE_TYPE_TO
								<if test='searchAppStepCd != null and searchAppStepCd.equals("3")'>
									, T.MBO_MID_APP_RESULT			= S.MBO_MID_APP_RESULT
									, T.MBO_MID_APP_SELF_CLASS_CD 	= S.MBO_MID_APP_SELF_CLASS_CD
									, T.MBO_MID_APP_1ST_CLASS_CD 	= S.MBO_MID_APP_1ST_CLASS_CD
									, T.MBO_MID_APP_1ST_MEMO 		= S.MBO_MID_APP_1ST_MEMO
								</if>
									, T.CHKDATE						= S.CHKDATE
									, T.CHKID						= S.CHKID
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.APPRAISAL_CD
							, T.APP_ORG_CD
							, T.SABUN
							, T.SEQ
							, T.MK_GUBUN_CD
							, T.APP_INDEX_GUBUN_CD
							, T.APP_INDEX_GUBUN_NM
							, T.MBO_TARGET
							, T.KPI_NM
							, T.FORMULA
							, T.BASELINE_DATA
							, T.S_GRADE_BASE
							, T.A_GRADE_BASE
							, T.B_GRADE_BASE
							, T.C_GRADE_BASE
							, T.D_GRADE_BASE
							, T.WEIGHT
							, T.ORDER_SEQ
							, T.REMARK
							, T.MBO_TYPE
							, T.DEADLINE_TYPE
							, T.DEADLINE_TYPE_TO
						<if test='searchAppStepCd != null and searchAppStepCd.equals("3")'>
							, T.MBO_MID_APP_RESULT
							, T.MBO_MID_APP_SELF_CLASS_CD
							, T.MBO_MID_APP_1ST_CLASS_CD
							, T.MBO_MID_APP_1ST_MEMO
						</if>
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.APPRAISAL_CD
							, S.APP_ORG_CD
							, S.SABUN
 							, NVL(S.SEQ, MBO_SEQ.NEXTVAL) -- 조직장KPI를 저장할 경우 조직장KPI의 SEQ 그대로 저장 해야함.
							, S.MK_GUBUN_CD
							, S.APP_INDEX_GUBUN_CD
							, S.APP_INDEX_GUBUN_NM
							, S.MBO_TARGET
							, S.KPI_NM
							, S.FORMULA
							, S.BASELINE_DATA
							, S.S_GRADE_BASE
							, S.A_GRADE_BASE
							, S.B_GRADE_BASE
							, S.C_GRADE_BASE
							, S.D_GRADE_BASE
							, S.WEIGHT
							, S.ORDER_SEQ
							, S.REMARK
							, S.MBO_TYPE
							, S.DEADLINE_TYPE
							, S.DEADLINE_TYPE_TO
						<if test='searchAppStepCd != null and searchAppStepCd.equals("3")'>
							, S.MBO_MID_APP_RESULT
							, S.MBO_MID_APP_SELF_CLASS_CD
							, S.MBO_MID_APP_1ST_CLASS_CD
							, S.MBO_MID_APP_1ST_MEMO
						</if>
							, S.CHKDATE
							, S.CHKID
						)
		</update>

		<update parameterType="map" id="saveMboTargetReg2">

					MERGE INTO
				  		<choose><when test='searchAppStepCd != null and searchAppStepCd.equals("1")'>
 							TPAP401
						</when><otherwise>
 							TPAP402
						</otherwise>
						</choose>
					 T
					USING	(
							SELECT	 A.ENTER_CD
								, A.APPRAISAL_CD
								, A.SABUN
								, A.APP_ORG_CD
								, A.COMPETENCY_CD
								, A.COMPETENCY_NM
								, A.COMP_DEV_PLAN
								, A.APP_RATE
								, A.MK_GUBUN_CD
								, A.REQ_SUPPORT_MEMO
								, A.FILE_SEQ
							FROM	(
									SELECT	NULL AS ENTER_CD
										, NULL AS APPRAISAL_CD
										, NULL AS SABUN
										, NULL AS APP_ORG_CD
										, NULL AS COMPETENCY_CD
										, NULL AS COMPETENCY_NM
										, NULL AS COMP_DEV_PLAN
										, NULL AS APP_RATE
										, NULL AS MK_GUBUN_CD
										, NULL AS REQ_SUPPORT_MEMO
										, NULL AS FILE_SEQ
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT  #{ssnEnterCd}                     AS ENTER_CD
											, TRIM( #{rm.appraisalCd} )		AS APPRAISAL_CD
											, TRIM( #{rm.sabun} )			AS SABUN
											, TRIM( #{rm.appOrgCd} )		AS APP_ORG_CD
											, TRIM( #{rm.competencyCd} )	AS COMPETENCY_CD
											, TRIM( #{rm.competencyNm})	AS COMPETENCY_NM
											, TRIM( #{rm.compDevPlan})		AS COMP_DEV_PLAN
											, TRIM( #{rm.appRate} )			AS APP_RATE
											, TRIM( #{rm.mkGubunCd})		AS MK_GUBUN_CD
											, TRIM( #{rm.reqSupportMemo})  AS REQ_SUPPORT_MEMO
											, TRIM( #{rm.fileSeq})         AS FILE_SEQ
										FROM   DUAL
</foreach>
								) A WHERE A.ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD				= S.ENTER_CD
						AND  T.APPRAISAL_CD		= S.APPRAISAL_CD
						AND  T.SABUN			= S.SABUN
						AND  T.APP_ORG_CD		= S.APP_ORG_CD
						AND  T.COMPETENCY_CD	= S.COMPETENCY_CD
					)
					WHEN MATCHED THEN
						UPDATE SET	  T.COMP_DEV_PLAN    = S.COMP_DEV_PLAN
									, T.APP_RATE		 = S.APP_RATE
									, T.REQ_SUPPORT_MEMO = S.REQ_SUPPORT_MEMO
									, T.FILE_SEQ         = S.FILE_SEQ
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.APPRAISAL_CD
							, T.APP_ORG_CD
							, T.SABUN
							, T.COMPETENCY_CD
							, T.COMPETENCY_NM
							, T.COMP_DEV_PLAN
							, T.APP_RATE
							, T.MK_GUBUN_CD
							, T.REQ_SUPPORT_MEMO
							, T.FILE_SEQ
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.APPRAISAL_CD
							, S.APP_ORG_CD
							, S.SABUN
							, S.COMPETENCY_CD
							, S.COMPETENCY_NM
							, S.COMP_DEV_PLAN
							, S.APP_RATE
							, S.MK_GUBUN_CD
							, S.REQ_SUPPORT_MEMO
							, S.FILE_SEQ
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

<!-- 성과기술 저장 -->
		<update parameterType="map" id="saveMboTargetReg3">

					MERGE INTO TPAP353 T
					USING	(
							SELECT A.ENTER_CD
								, A.APPRAISAL_CD
								, A.SABUN
								, A.APP_ORG_CD
								, A.APP_CONTENT
							FROM	(
									SELECT	NULL AS ENTER_CD
										, NULL AS APPRAISAL_CD
										, NULL AS SABUN
										, NULL AS APP_ORG_CD
										, NULL AS APP_CONTENT
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT  #{ssnEnterCd}                     AS ENTER_CD
											, TRIM( #{rm.appraisalCd} )		AS APPRAISAL_CD
											, TRIM( #{rm.sabun} )			AS SABUN
											, TRIM( #{rm.appOrgCd} )		AS APP_ORG_CD
											, TRIM( #{rm.appContent})		AS APP_CONTENT
										FROM   DUAL
</foreach>
								) A WHERE A.ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD				= S.ENTER_CD
						AND  T.APPRAISAL_CD		= S.APPRAISAL_CD
						AND  T.SABUN			= S.SABUN
						AND  T.APP_ORG_CD		= S.APP_ORG_CD
					)
					WHEN MATCHED THEN
						UPDATE SET	  T.APP_CONTENT    = S.APP_CONTENT
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun'
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.APPRAISAL_CD
							, T.SABUN
							, T.APP_ORG_CD
							, T.APP_CONTENT
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.APPRAISAL_CD
							, S.SABUN
							, S.APP_ORG_CD
							, S.APP_CONTENT
							, SYSDATE
							, #{ssnSabun'
						)
		</update>

		<!-- 		삭제 -->
		<delete parameterType="map" id="deleteMboTargetReg1">

					DELETE FROM
						  		<choose><when test='searchAppStepCd != null and searchAppStepCd.equals("1")'>
		 							TPAP351
								</when><otherwise>
		 							TPAP352
								</otherwise>
								</choose>
					WHERE 	(ENTER_CD, APPRAISAL_CD, APP_ORG_CD, SABUN, SEQ, MK_GUBUN_CD) IN 	(  (NULL,NULL,NULL,NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
										#{ssnEnterCd}
										, TRIM( #{rm.appraisalCd} )
										, TRIM( #{rm.appOrgCd} )
										, TRIM( #{rm.sabun} )
										, TRIM( #{rm.seq} )
										, TRIM( #{rm.mkGubunCd})
										)
</foreach>
							)
		</delete>

		<delete parameterType="map" id="deleteMboTargetReg2">

					DELETE FROM
						  		<choose><when test='searchAppStepCd != null and searchAppStepCd.equals("1")'>
		 							TPAP401
								</when><otherwise>
		 							TPAP402
								</otherwise>
								</choose>
					WHERE 	(ENTER_CD, APPRAISAL_CD, SABUN, APP_ORG_CD, COMPETENCY_CD) IN 	(  (NULL,NULL,NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
										#{ssnEnterCd}
										, TRIM( #{rm.appraisalCd} )
										, TRIM( #{rm.sabun} )
										, TRIM( #{rm.appOrgCd} )
										, TRIM( #{rm.competencyCd} )
										)
</foreach>
							)
		</delete>

<!-- 프로시저 -->
		<update parameterType="map" id="prcMboTargetReg1" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_MBOTARGET_REQ(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppraisalCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppStepCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppOrgCd,mode=IN,jdbcType=VARCHAR},
				#{searchEvaSabun,mode=IN,jdbcType=VARCHAR},
				#{searchAppStatusCd,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

		<update parameterType="map" id="prcMboTargetReg2" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_MBOTARGET_APP(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppraisalCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppStepCd,mode=IN,jdbcType=VARCHAR},
				#{searchEvaSabun,mode=IN,jdbcType=VARCHAR},
				#{searchAppOrgCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppSeqCd,mode=IN,jdbcType=VARCHAR},
				#{searchAppYn,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

<!-- 중간점검평가등급 및 중간점검평가의견 저장 -->
		<update parameterType="map" id="updateMboTargetRegMiddleAppInfo">

				<![CDATA[
					UPDATE TPAP350
					   SET MIDDLE_APP_CLASS_CD = TRIM(#{middleAppClassCd})
					     , MIDDLE_APP_MEMO     = TRIM(#{middleAppMemo})
					 WHERE ENTER_CD     = TRIM(#{ssnEnterCd})
					   AND APPRAISAL_CD = TRIM(#{searchAppraisalCd})
					   AND SABUN        = TRIM(#{searchSabun})
					   AND APP_ORG_CD   = TRIM(#{searchAppOrgCd})
				]]>
		</update>

	<update parameterType="map" id="saveMboTargetRegPopCommentReg">
		<![CDATA[
		INSERT INTO TPAP357(
							 ENTER_CD
						   , APPRAISAL_CD
						   , SABUN
						   , APP_ORG_CD
						   , APP_STEP_CD
						   , SEQ
						   , APP_STATUS_CD
						   , REG_SABUN
						   , APP_COMMENT
						   , CHKDATE
						   , CHKID
		)
		VALUES
			(
			  TRIM(#{ssnEnterCd})
			, TRIM(#{searchAppraisalCd})
			, TRIM(#{searchEvaSabun})
			, TRIM(#{searchAppOrgCd})
			, TRIM(#{searchAppStepCd})
			, NVL((SELECT MAX(SEQ) FROM TPAP357
				   WHERE ENTER_CD = TRIM(#{ssnEnterCd})
					 AND  APPRAISAL_CD  = TRIM(#{searchAppraisalCd})
					 AND  SABUN         = TRIM(#{searchEvaSabun})
					 AND  APP_ORG_CD    = TRIM(#{searchAppOrgCd})
					 AND  APP_STEP_CD   = TRIM(#{searchAppStepCd})
				  ),0) + 1
			, TRIM(#{searchAppStatusCd})
			, TRIM(#{searchRegSabun})
			, TRIM(#{searchAppComment})
			, SYSDATE
			, #{ssnSabun}
			)
		]]>
	</update>

</mapper>