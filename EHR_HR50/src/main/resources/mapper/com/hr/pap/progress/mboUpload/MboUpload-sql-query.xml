<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="pap.progress.mboUpload">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getMboUploadElmList">

				<![CDATA[
					SELECT ENTER_CD
				         , APPRAISAL_CD
				         , ELE_CD
				         , ELE_NM
				         , SEQ
				         , BIGO
				      FROM TPAP198
				    WHERE ENTER_CD = #{ssnEnterCd}
				    AND APPRAISAL_CD = #{searchAppraisalCd}
				    ORDER BY SEQ, ELE_CD DESC
				]]>


		</select>
		
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getMboUploadList">

				<![CDATA[
				SELECT A.ENTER_CD
				     , A.APPRAISAL_CD
				     , B.SABUN
				     , F_COM_GET_NAMES(B.ENTER_CD, B.SABUN) AS NAME
				     , F_COM_GET_ORG_NM21(B.ENTER_CD, B.SABUN, NVL(F_PAP_GET_BASE_YMD(B.ENTER_CD, B.APPRAISAL_CD, '5'), '99991231')) AS ORG_NM
				     , F_COM_GET_JIKWEE_NM(B.ENTER_CD, B.SABUN, NVL(F_PAP_GET_BASE_YMD(B.ENTER_CD, B.APPRAISAL_CD, '5'), '99991231')) AS JIKWEE_NM
				     , F_COM_GET_JIKCHAK_NM(B.ENTER_CD, B.SABUN, NVL(F_PAP_GET_BASE_YMD(B.ENTER_CD, B.APPRAISAL_CD, '5'), '99991231')) AS JIKCHAK_NM
				     , B.ELE_1
				     , B.ELE_2
				     , B.ELE_3
				     , B.ELE_4
				     , B.ELE_5
				     , B.ELE_6
				     , B.ELE_7
				     , B.ELE_8
				     , B.ELE_9
				     , B.ELE_10
				     , B.ELE_11
				     , B.ELE_12
				     , B.ELE_13
				     , B.ELE_14
				     , B.ELE_15
				     , B.ELE_16
				     , B.ELE_17
				     , B.ELE_18
				     , B.ELE_19
				     , B.ELE_20
				     , B.BIGO
				     , A.ELE_CNT
				     , B.CHKDATE
				     , B.CHKID
				  FROM (SELECT ENTER_CD
				             , APPRAISAL_CD
				             , COUNT(1) AS ELE_CNT
				          FROM TPAP198 
				         GROUP BY ENTER_CD, APPRAISAL_CD
				        ) A, TPAP199 B
				WHERE A.ENTER_CD = #{ssnEnterCd}
				AND A.APPRAISAL_CD = #{searchAppraisalCd}
				AND A.ENTER_CD = B.ENTER_CD
				AND A.APPRAISAL_CD = B.APPRAISAL_CD
				        ]]>
				<if test='searchSabunName != null and !searchSabunName.equals("")'>
				AND (
					B.SABUN LIKE '%' || #{searchSabunName} || '%' OR
					F_COM_GET_NAMES(B.ENTER_CD, B.SABUN) LIKE '%' || #{searchSabunName} || '%'
					)
				</if>
				ORDER BY F_COM_JIKJE_SORT(B.ENTER_CD, B.SABUN, NVL(F_PAP_GET_BASE_YMD(B.ENTER_CD, B.APPRAISAL_CD, '5'), '99991231'))



		</select>
		
<!-- 		조회 -->
		<update parameterType="map" id="saveMboUpload">

					MERGE INTO TPAP199 T
					USING (
					    SELECT #{ssnEnterCd}			AS ENTER_CD
					    	 , #{searchAppraisalCd}	AS APPRAISAL_CD
					    	 , A.SABUN
					    	 , A.ELE_1
					    	 , A.ELE_2
					    	 , A.ELE_3
					    	 , A.ELE_4
					    	 , A.ELE_5
					    	 , A.ELE_6
					    	 , A.ELE_7
					    	 , A.ELE_8
					    	 , A.ELE_9
					    	 , A.ELE_10
					    	 , A.ELE_11
					    	 , A.ELE_12
					    	 , A.ELE_13
					    	 , A.ELE_14
					    	 , A.ELE_15
					    	 , A.ELE_16
					    	 , A.ELE_17
					    	 , A.ELE_18
					    	 , A.ELE_19
					    	 , A.ELE_20
					    	 , A.BIGO
					    	 , #{ssnSabun}			AS CHKID
					    FROM (
					    		SELECT NULL AS SABUN
					    			 , NULL AS ELE_1
					    			 , NULL AS ELE_2
					    			 , NULL AS ELE_3
					    			 , NULL AS ELE_4
					    			 , NULL AS ELE_5
					    			 , NULL AS ELE_6
					    			 , NULL AS ELE_7
					    			 , NULL AS ELE_8
					    			 , NULL AS ELE_9
					    			 , NULL AS ELE_10
					    			 , NULL AS ELE_11
					    			 , NULL AS ELE_12
					    			 , NULL AS ELE_13
					    			 , NULL AS ELE_14
					    			 , NULL AS ELE_15
					    			 , NULL AS ELE_16
					    			 , NULL AS ELE_17
					    			 , NULL AS ELE_18
					    			 , NULL AS ELE_19
					    			 , NULL AS ELE_20
					    			 , NULL AS BIGO
					    		FROM DUAL
				    		<foreach item="rm" collection="mergeRows" >
					    		UNION ALL
					    		SELECT TRIM( #{rm.sabun} )	AS SABUN
					    			<choose><when test='rm.ele1 != null and !rm.ele1.equals("")'>
					    				, TRIM( #{rm.ele1} ) AS ELE_1
									</when><otherwise>
					    				, NULL AS ELE_1
									</otherwise>
									</choose>
									<choose><when test='rm.ele2 != null and !rm.ele2.equals("")'>
					    				, TRIM( #{rm.ele2} ) AS ELE_2
									</when><otherwise>
					    				, NULL AS ELE_2
									</otherwise>
									</choose>
					    			<choose><when test='rm.ele3 != null and !rm.ele3.equals("")'>
					    				, TRIM( #{rm.ele3} ) AS ELE_3
									</when><otherwise>
					    				, NULL AS ELE_3
									</otherwise>
									</choose>
									<choose><when  test='rm.ele4 != null and !rm.ele4.equals("")'>
					    				, TRIM( #{rm.ele4}) AS ELE_4
					    			</when><otherwise>
					    				, NULL AS ELE_4
					    			</otherwise>
									</choose>
									<choose><when  test='rm.ele5 != null and !rm.ele5.equals("")'>
					    				, TRIM( #{rm.ele5}) AS ELE_5
					    			</when><otherwise>
					    				, NULL AS ELE_5
					    			</otherwise>
									</choose>
					    			
					    			
					    			<choose><when test='rm.ele6 != null and !rm.ele6.equals("")'>
					    				, TRIM( #{rm.ele6}) AS ELE_6
					    			</when><otherwise>
					    				, NULL AS ELE_6
					    			</otherwise>
									</choose>
					    			<choose><when test='rm.ele7 != null and !rm.ele7.equals("")'>
					    				, TRIM( #{rm.ele7}) AS ELE_7
					    			</when><otherwise>
					    				, NULL AS ELE_7
					    			</otherwise>
									</choose>
					    			<choose><when test='rm.ele8 != null and !rm.ele8.equals("")'>
					    				, TRIM( #{rm.ele8}) AS ELE_8
					    			</when><otherwise>
					    				, NULL AS ELE_8
					    			</otherwise>
									</choose>
					    			<choose><when test='rm.ele9 != null and !rm.ele9.equals("")'>
					    				, TRIM( #{rm.ele9}) AS ELE_9
					    			</when><otherwise>
					    				, NULL AS ELE_9
					    			</otherwise>
									</choose>
					    			<choose><when test='rm.ele10 != null and !rm.ele10.equals("")'>
					    				, TRIM( #{rm.ele10}) AS ELE_10
					    			</when><otherwise>
					    				, NULL AS ELE_10
					    			</otherwise>
									</choose>
					    			
					    			
					    			<choose><when test='rm.ele11 != null and !rm.ele11.equals("")'>
					    				, TRIM( #{rm.ele11}) AS ELE_11
					    			</when><otherwise>
					    				, NULL AS ELE_11
					    			</otherwise>
									</choose>
					    			<choose><when test='rm.ele12 != null and !rm.ele12.equals("")'>
					    				, TRIM( #{rm.ele12}) AS ELE_12
					    			</when><otherwise>
					    				, NULL AS ELE_12
					    			</otherwise>
									</choose>
					    			<choose><when test='rm.ele13 != null and !rm.ele13.equals("")'>
					    				, TRIM( #{rm.ele13}) AS ELE_13
					    			</when><otherwise>
					    				, NULL AS ELE_13
					    			</otherwise>
									</choose>
					    			<choose><when test='rm.ele14 != null and !rm.ele14.equals("")'>
					    				, TRIM( #{rm.ele14}) AS ELE_14
					    			</when><otherwise>
					    				, NULL AS ELE_14
					    			</otherwise>
									</choose>
					    			<choose><when test='rm.ele15 != null and !rm.ele15.equals("")'>
					    				, TRIM( #{rm.ele15}) AS ELE_15
					    			</when><otherwise>
					    				, NULL AS ELE_15
					    			</otherwise>
									</choose>
					    			
					    			
					    			<choose><when test='rm.ele16 != null and !rm.ele16.equals("")'>
					    				, TRIM( #{rm.ele16}) AS ELE_16
					    			</when><otherwise>
					    				, NULL AS ELE_16
					    			</otherwise>
									</choose>
					    			<choose><when test='rm.ele17 != null and !rm.ele17.equals("")'>
					    				, TRIM( #{rm.ele17}) AS ELE_17
					    			</when><otherwise>
					    				, NULL AS ELE_17
					    			</otherwise>
									</choose>
					    			<choose><when test='rm.ele18 != null and !rm.ele18.equals("")'>
					    				, TRIM( #{rm.ele18}) AS ELE_18
					    			</when><otherwise>
					    				, NULL AS ELE_18
					    			</otherwise>
									</choose>
					    			<choose><when test='rm.ele19 != null and !rm.ele19.equals("")'>
					    				, TRIM( #{rm.ele19}) AS ELE_19
					    			</when><otherwise>
					    				, NULL AS ELE_19
					    			</otherwise>
									</choose>
					    			<choose><when test='rm.ele20 != null and !rm.ele20.equals("")'>
					    				, TRIM( #{rm.ele20}) AS ELE_20
					    			</when><otherwise>
					    				, NULL AS ELE_20
					    			</otherwise>
									</choose>
					    			 , TRIM( #{rm.bigo})	AS BIGO
					    		FROM DUAL
							</foreach>
					    	) A
					    WHERE SABUN IS NOT NULL
					    ) S
					ON ( 
					        T.ENTER_CD		= S.ENTER_CD
					    AND T.APPRAISAL_CD	= S.APPRAISAL_CD
					    AND T.SABUN			= S.SABUN
					   )
					WHEN MATCHED THEN
				    UPDATE SET T.ELE_1		= S.ELE_1
				             , T.ELE_2		= S.ELE_2
				             , T.ELE_3		= S.ELE_3
				             , T.ELE_4		= S.ELE_4
				             , T.ELE_5		= S.ELE_5
				             , T.ELE_6		= S.ELE_6
				             , T.ELE_7		= S.ELE_7
				             , T.ELE_8		= S.ELE_8
				             , T.ELE_9		= S.ELE_9
				             , T.ELE_10		= S.ELE_10
				             , T.ELE_11		= S.ELE_11
				             , T.ELE_12		= S.ELE_12
				             , T.ELE_13		= S.ELE_13
				             , T.ELE_14		= S.ELE_14
				             , T.ELE_15		= S.ELE_15
				             , T.ELE_16		= S.ELE_16
				             , T.ELE_17		= S.ELE_17
				             , T.ELE_18		= S.ELE_18
				             , T.ELE_19		= S.ELE_19
				             , T.ELE_20		= S.ELE_20
				             , T.BIGO		= S.BIGO
				             , T.CHKDATE	= SYSDATE
				             , T.CHKID		= S.CHKID
					WHEN NOT MATCHED THEN
				    INSERT ( 
				          T.ENTER_CD
						, T.APPRAISAL_CD
						, T.SABUN
						, T.ELE_1
						, T.ELE_2
						, T.ELE_3
						, T.ELE_4
						, T.ELE_5
						, T.ELE_6
						, T.ELE_7
						, T.ELE_8
						, T.ELE_9
						, T.ELE_10
						, T.ELE_11
						, T.ELE_12
						, T.ELE_13
						, T.ELE_14
						, T.ELE_15
						, T.ELE_16
						, T.ELE_17
						, T.ELE_18
						, T.ELE_19
						, T.ELE_20
						, T.BIGO
						, T.CHKDATE
						, T.CHKID
				    )
				    VALUES (
				          S.ENTER_CD
						, S.APPRAISAL_CD
						, S.SABUN
						, S.ELE_1
						, S.ELE_2
						, S.ELE_3
						, S.ELE_4
						, S.ELE_5
						, S.ELE_6
						, S.ELE_7
						, S.ELE_8
						, S.ELE_9
						, S.ELE_10
						, S.ELE_11
						, S.ELE_12
						, S.ELE_13
						, S.ELE_14
						, S.ELE_15
						, S.ELE_16
						, S.ELE_17
						, S.ELE_18
						, S.ELE_19
						, S.ELE_20
						, S.BIGO
				        , SYSDATE
				        , S.CHKID
				    )
		</update>
		
<!-- 		삭제 -->
		<delete parameterType="map" id="deleteMboUpload">

					DELETE TPAP199 
					WHERE (ENTER_CD, APPRAISAL_CD, SABUN) IN ( (NULL, NULL, NULL)
					<foreach item="rm" collection="deleteRows" >
						, (#{ssnEnterCd}, #{searchAppraisalCd}, #{rm.sabun})
					</foreach>
					)
		</delete>

</mapper>