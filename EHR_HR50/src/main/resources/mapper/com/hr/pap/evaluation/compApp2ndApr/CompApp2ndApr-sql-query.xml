<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="pap.evaluation.compApp2ndApr">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getCompApp2ndAprList">

				<![CDATA[
					SELECT Y.ENTER_CD
					      ,Y.APPRAISAL_CD
					      ,Y.SABUN
					      ,F_COM_GET_NAMES(Y.ENTER_CD, Y.SABUN) AS NAME -- 피평가자성명
					      ,Y.APP_ORG_CD  -- 평가부서코드
					      ,F_COM_GET_ORG_NM(Y.ENTER_CD, Y.APP_ORG_CD, Y.APP_E_YMD) AS APP_ORG_NM -- 평가부서명
					      ,Y.JIKCHAK_NM   -- 직책명
					      ,Y.JIKGUB_NM   -- 직급명
					      ,Y.JIKWEE_NM   -- 직위명
					      ,Y.ORG_CD
					      ,Y.ORG_NM
					      ,Y.EMP_YMD     -- 입사일
					      ,Y.SELF_STATUS_CD -- 본인평가 진행상태코드
					      ,(CASE WHEN Y.SELF_STATUS_CD = '1' THEN '미평가'
					      		 WHEN Y.SELF_STATUS_CD = '3' THEN '평가중'
					             WHEN Y.SELF_STATUS_CD = '5' THEN '평가완료'    END) AS SELF_STATUS_NM --본인평가상태명
					      ,X.STATUS_CD AS STATUS_CD1-- 1차평가 진행상태코드
					      ,(CASE WHEN X.STATUS_CD = '1' THEN '미평가'
					      		 WHEN X.STATUS_CD = '3' THEN '평가중'
					             WHEN X.STATUS_CD = '5' THEN '평가완료'    END) AS STATUS_NM1 --1차평가상태명
					      ,Y.STATUS_CD AS STATUS_CD2 -- 2차평가 진행상태코드
					      ,(CASE WHEN Y.STATUS_CD = '1' THEN '미평가'
					      		 WHEN Y.STATUS_CD = '3' THEN '평가중'
					             WHEN Y.STATUS_CD = '5' THEN '평가완료'    END) AS STATUS_NM2 --2차평가상태명
					      ,Y.APP_SABUN -- 평가자사번
					      ,Y.APPRAISAL_YY -- 평가년도
					      ,'0' AS POP
					      , X.APP_CLASS_CD_SELF
					      , X.APP_CLASS_CD1
					      , Y.APP_CLASS_CD2
					      , X.APP_POINT
					      , X.APP_POINT1 AS U1_APP_POINT
					      , Y.APP_POINT2 AS U2_APP_POINT
				  FROM (
				         SELECT  A.ENTER_CD
				         		,A.APPRAISAL_CD
				         		,A.SABUN
				         		,F_PAPN_STATUS_CD(A.ENTER_CD, A.APPRAISAL_CD, '5', 'B', A.SABUN, A.APP_ORG_CD, '1', A.APP_SABUN) AS STATUS_CD
				         		,A.APP_CLASS_CD AS APP_CLASS_CD1
				         		,A.APP_POINT AS APP_POINT1
				         		,C.APP_CLASS_CD AS APP_CLASS_CD_SELF
				         		,C.APP_POINT AS APP_POINT
				           FROM  TPAP202 A
				           		,TPAP201 B
				           		,TPAP400 C
				          WHERE  A.ENTER_CD     = B.ENTER_CD
				            AND  A.APPRAISAL_CD = B.APPRAISAL_CD
				            AND  A.SABUN        = B.SABUN
				            AND  A.ENTER_CD    = C.ENTER_CD(+)
				            AND  A.APPRAISAL_CD = C.APPRAISAL_CD(+)
				            AND  A.SABUN        = C.SABUN(+)
				            AND  B.APP_YN       = 'Y' -- 평가포함여부
				            AND  A.APP_SEQ_CD   = '1' -- 1차 평가
				    		AND  A.ENTER_CD     = #{ssnEnterCd} -- 회사코드
				            AND  A.APPRAISAL_CD = #{searchAppraisalCd} -- 평가ID
				            AND  A.APP_SABUN  = (SELECT X.APP_SABUN FROM TPAP202 X WHERE X.ENTER_CD = A.ENTER_CD
				            					AND X.APPRAISAL_CD = A.APPRAISAL_CD AND X.SABUN = A.SABUN AND X.APP_SEQ_CD = '1') --1차 평가자사번
				       ) X ,
				       (
				         SELECT A.ENTER_CD
				               ,A.APPRAISAL_CD
				               ,A.SABUN
				               ,A.APP_ORG_CD  -- 평가부서코드
				               ,C.APP_E_YMD
				               ,B.JIKCHAK_CD
				               ,B.JIKCHAK_NM   -- 직책명
				               ,B.JIKGUB_CD
				               ,B.JIKGUB_NM
				               ,B.JIKWEE_CD
				               ,B.JIKWEE_NM   -- 직위명
				               ,B.ORG_CD
				               ,B.ORG_NM
				               ,D.EMP_YMD     -- 입사일
				               ,F_PAPN_STATUS_CD(A.ENTER_CD, A.APPRAISAL_CD, '5', 'B', A.SABUN, A.APP_ORG_CD, '2', A.APP_SABUN) AS STATUS_CD
				               ,F_PAPN_STATUS_CD(B.ENTER_CD, B.APPRAISAL_CD, '5', 'B', B.SABUN, '' , '0', '') AS SELF_STATUS_CD
				               ,A.APP_SABUN -- 평가자사번
				               ,C.APPRAISAL_YY -- 평가년도
				               ,E.D_BASE_YMD
				               ,A.APP_CLASS_CD AS APP_CLASS_CD2
				               ,A.APP_POINT AS APP_POINT2
				           FROM TPAP202 A
				               ,TPAP201 B
				               ,TPAP101 C
				               ,THRM100 D
				               ,TPAP105 E
				          WHERE A.ENTER_CD     = B.ENTER_CD
				            AND A.APPRAISAL_CD = B.APPRAISAL_CD
				            AND A.SABUN        = B.SABUN
				            AND A.ENTER_CD     = C.ENTER_CD
				            AND A.APPRAISAL_CD = C.APPRAISAL_CD
				            AND A.ENTER_CD     = D.ENTER_CD
				            AND A.SABUN        = D.SABUN
				            AND C.ENTER_CD     = E.ENTER_CD
				            AND E.APP_STEP_CD        = '5'
				            AND C.APPRAISAL_CD       = E.APPRAISAL_CD
				            AND B.APP_YN             = 'Y' -- 평가포함여부
				            AND B.APP_1ST_END_YN     = 'N' -- 1차평가종료여부
				            AND A.APP_SEQ_CD         = '2' -- 2차 평가
				            AND A.ENTER_CD           = #{ssnEnterCd} -- 회사코드
				            AND A.APPRAISAL_CD       = #{searchAppraisalCd} -- 평가ID
				            AND A.APP_SABUN          = #{searchAppSabun} -- 평가자사번
				       ) Y
				WHERE X.ENTER_CD   = Y.ENTER_CD
				AND X.APPRAISAL_CD = Y.APPRAISAL_CD
				AND X.SABUN        = Y.SABUN
				ORDER BY F_ORG_ORG_CHART_SORT(ENTER_CD, ORG_CD, D_BASE_YMD),F_COM_GET_GRCODE_SEQ(ENTER_CD, 'H20030', JIKWEE_CD),
						 F_COM_GET_GRCODE_SEQ(ENTER_CD, 'H20020', JIKCHAK_CD) ,SABUN
				]]>


		</select>

		<select parameterType="map" resultType="cMap" id="getCompApp2ndAprMap">

				<![CDATA[
					SELECT COL1, COL2, COL3, COL4, COL5 FROM ZTST002
					WHERE 1 = 1
					AND ROWNUM = 1
				]]>


		</select>

<!-- 		저장 -->
		<update parameterType="map" id="saveCompApp2ndApr">

				<![CDATA[
					UPDATE TPAP202 T SET
					(	  APPRAISAL_YN
						, APP_POINT
						, APP_CLASS_CD
						, CHKDATE
						, CHKID
						)
					=
					(	SELECT	  'Y'
								, S.APP_POINT
								, S.APP_CLASS_CD
								, SYSDATE
								, #{ssnSabun}
						FROM (
							SELECT	  NULL 	AS ENTER_CD
									, NULL 	AS APPRAISAL_CD
									, NULL 	AS SABUN
									, NULL 	AS APP_SEQ_CD
									, NULL 	AS APP_POINT
									, NULL 	AS APP_CLASS_CD
									FROM   DUAL
									]]>
<foreach item="rm" collection="updateRows" >
					UNION ALL
								SELECT    #{ssnEnterCd}             AS ENTER_CD
								        , TRIM(#{rm.appraisalCd}) AS APPRAISAL_CD
								        , TRIM(#{rm.sabun})       AS SABUN
								        , '2'                     AS APP_SEQ_CD
										, APP_POINT
										,(SELECT APP_CLASS_CD
										  FROM   TPAP011
										  WHERE  APP_TYPE_CD = 'B'
										  AND    APP_POINT BETWEEN TO_POINT AND FROM_POINT) AS APP_CLASS_CD
								FROM    (
								SELECT
									   SUM(APP_POINT) AS APP_POINT
								FROM   TPAP402
								WHERE  ENTER_CD     = #{ssnEnterCd}
								AND    APPRAISAL_CD = TRIM(#{rm.appraisalCd})
								AND    SABUN        = TRIM(#{rm.sabun})
								AND    APP_SEQ_CD   = '1'
								)
</foreach>
							) S
						WHERE S.ENTER_CD IS NOT NULL
						AND   T.ENTER_CD     = S.ENTER_CD
						AND   T.APPRAISAL_CD = S.APPRAISAL_CD
						AND   T.SABUN        = S.SABUN
						AND   T.APP_SEQ_CD   = S.APP_SEQ_CD
					)
					WHERE EXISTS (
									SELECT S.ENTER_CD
									FROM (
											SELECT	  S.ENTER_CD
													, S.APPRAISAL_CD
													, S.SABUN
													, S.APP_SEQ_CD
											FROM (
												SELECT	 NULL 				     AS ENTER_CD
														,NULL 				     AS APPRAISAL_CD
														,NULL 				     AS SABUN
														,NULL 				     AS APP_SEQ_CD
												FROM	DUAL
<foreach item="rm" collection="updateRows" > UNION ALL
												SELECT	 #{ssnEnterCd}      	     AS ENTER_CD
														,TRIM(#{rm.appraisalCd}) AS APPRAISAL_CD
														,TRIM(#{rm.sabun})       AS SABUN
														,'2'                     AS APP_SEQ_CD
												FROM	DUAL
</foreach>
												) S
											WHERE S.ENTER_CD IS NOT NULL
										)S
									WHERE       T.ENTER_CD     = S.ENTER_CD
									AND         T.APPRAISAL_CD = S.APPRAISAL_CD
									AND         T.SABUN        = S.SABUN
									AND         T.APP_SEQ_CD   = S.APP_SEQ_CD
								)
		</update>
<!-- 		삭제 -->
		<delete parameterType="map" id="deleteCompApp2ndApr">

					DELETE FROM ZTST002
					WHERE 	COL1 IN 	(  NULL
<foreach item="rm" collection="deleteRows" >
						,
										<if test='rm.col1 != null and !rm.col1.equals("")'>
											TRIM( #{rm.col1} )
										</if>
</foreach>
										)
		</delete>


		<!-- 		저장 -->
		<update parameterType="map" id="saveCompApp2ndAprReturn1">

					UPDATE TPAP202 T SET
					(	  APPRAISAL_YN
						, CHKDATE
						, CHKID
						)
					=
					(	SELECT	  'N'
								, SYSDATE
								, #{ssnSabun}
						FROM (
							SELECT	  NULL 	AS ENTER_CD
									, NULL 	AS APPRAISAL_CD
									, NULL 	AS SABUN
									, NULL 	AS APP_SEQ_CD
									FROM   DUAL
<foreach item="rm" collection="updateRows" >
					UNION ALL
								SELECT    #{ssnEnterCd}             AS ENTER_CD
								        , TRIM(#{rm.appraisalCd}) AS APPRAISAL_CD
								        , TRIM(#{rm.sabun})       AS SABUN
								        , '1'                     AS APP_SEQ_CD
								FROM    DUAL
</foreach>
							) S
						WHERE S.ENTER_CD IS NOT NULL
						AND   T.ENTER_CD     = S.ENTER_CD
						AND   T.APPRAISAL_CD = S.APPRAISAL_CD
						AND   T.SABUN        = S.SABUN
						AND   T.APP_SEQ_CD   = S.APP_SEQ_CD
					)
					WHERE EXISTS (
									SELECT S.ENTER_CD
									FROM (
											SELECT	  S.ENTER_CD
													, S.APPRAISAL_CD
													, S.SABUN
													, S.APP_SEQ_CD
											FROM (
												SELECT	 NULL 				     AS ENTER_CD
														,NULL 				     AS APPRAISAL_CD
														,NULL 				     AS SABUN
														,NULL 				     AS APP_SEQ_CD
												FROM	DUAL
<foreach item="rm" collection="updateRows" > UNION ALL
												SELECT	 #{ssnEnterCd}      	     AS ENTER_CD
														,TRIM(#{rm.appraisalCd}) AS APPRAISAL_CD
														,TRIM(#{rm.sabun})       AS SABUN
														,'1'                     AS APP_SEQ_CD
												FROM	DUAL
</foreach>
												) S
											WHERE S.ENTER_CD IS NOT NULL
										)S
									WHERE       T.ENTER_CD     = S.ENTER_CD
									AND         T.APPRAISAL_CD = S.APPRAISAL_CD
									AND         T.SABUN        = S.SABUN
									AND         T.APP_SEQ_CD   = S.APP_SEQ_CD
								)
		</update>

		<!-- 		저장 -->
		<update parameterType="map" id="saveCompApp2ndAprReturn2">

					UPDATE TPAP202 T SET
					(	  APPRAISAL_YN
						, CHKDATE
						, CHKID
						)
					=
					(	SELECT	  'N'
								, SYSDATE
								, #{ssnSabun}
						FROM (
							SELECT	  NULL 	AS ENTER_CD
									, NULL 	AS APPRAISAL_CD
									, NULL 	AS SABUN
									, NULL 	AS APP_SEQ_CD
									FROM   DUAL
<foreach item="rm" collection="updateRows" >
					UNION ALL
								SELECT    #{ssnEnterCd}             AS ENTER_CD
								        , TRIM(#{rm.appraisalCd}) AS APPRAISAL_CD
								        , TRIM(#{rm.sabun})       AS SABUN
								        , '2'                     AS APP_SEQ_CD
								FROM    DUAL
</foreach>
							) S
						WHERE S.ENTER_CD IS NOT NULL
						AND   T.ENTER_CD     = S.ENTER_CD
						AND   T.APPRAISAL_CD = S.APPRAISAL_CD
						AND   T.SABUN        = S.SABUN
						AND   T.APP_SEQ_CD   = S.APP_SEQ_CD
					)
					WHERE EXISTS (
									SELECT S.ENTER_CD
									FROM (
											SELECT	  S.ENTER_CD
													, S.APPRAISAL_CD
													, S.SABUN
													, S.APP_SEQ_CD
											FROM (
												SELECT	 NULL 				     AS ENTER_CD
														,NULL 				     AS APPRAISAL_CD
														,NULL 				     AS SABUN
														,NULL 				     AS APP_SEQ_CD
												FROM	DUAL
<foreach item="rm" collection="updateRows" > UNION ALL
												SELECT	 #{ssnEnterCd}      	     AS ENTER_CD
														,TRIM(#{rm.appraisalCd}) AS APPRAISAL_CD
														,TRIM(#{rm.sabun})       AS SABUN
														,'2'                     AS APP_SEQ_CD
												FROM	DUAL
</foreach>
												) S
											WHERE S.ENTER_CD IS NOT NULL
										)S
									WHERE       T.ENTER_CD     = S.ENTER_CD
									AND         T.APPRAISAL_CD = S.APPRAISAL_CD
									AND         T.SABUN        = S.SABUN
									AND         T.APP_SEQ_CD   = S.APP_SEQ_CD
								)
		</update>



<!-- 		생성 -->
		<insert parameterType="map" id="insertCompApp2ndApr">

						INSERT INTO MainMnMgrTable
						(
							  COL1
							, COL2
							, COL3
							, COL4
							, COL5
							, COL6
							, CHKDATE
							, CHKID
						)
						SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, S.COL5
								, S.COL6
								, sysdate
								, #{ssnSabun}
						FROM (
								SELECT    NULL 	AS COL1
										, NULL 	AS COL2
										, NULL 	AS COL3
										, NULL 	AS COL4
										, NULL 	AS COL5
										, NULL 	AS COL6
								FROM   DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="insertRows" >
					UNION ALL
								SELECT	  TO_CHAR( (SELECT (NVL(MAX(TO_NUMBER( COL1 )),0) + ${icnt}) FROM ZTST002) )	AS COL1
										<bind name="icnt" value="icnt + 1" />
										, TRIM(#{rm.col2})	AS COL2
										, TRIM(#{rm.col3})	AS COL3
										, TRIM(#{rm.col4})	AS COL4
										, TRIM(#{rm.col5})	AS COL5
										, TRIM(#{rm.col6})	AS COL6
								FROM   DUAL
</foreach>
							) S
						WHERE S.COL1 IS NOT NULL
		</insert>
<!-- 		수정 -->
		<update parameterType="map" id="updateCompApp2ndApr">

				<![CDATA[
					UPDATE ZTST002 T SET
					(	  COL1
						, COL2
						, COL3
						, COL4
						, CHKDATE
						, CHKID
						)
					=
					(	SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, S.COL5
								, S.COL6
								, SYSDATE
								, #{ssnSabun}
						FROM (
							SELECT	  NULL 	AS COL1
									, NULL 	AS COL2
									, NULL 	AS COL3
									, NULL 	AS COL4
									, NULL 	AS COL5
									, NULL 	AS COL6
									FROM   DUAL
									]]>
<foreach item="rm" collection="updateRows" >
					UNION ALL
								SELECT
										  TRIM(#{rm.col1})	AS COL1
										, TRIM(#{rm.col2})	AS COL2
										, TRIM(#{rm.col3})	AS COL3
										, TRIM(#{rm.col4})	AS COL4
										, TRIM(#{rm.col5})	AS COL5
										, TRIM(#{rm.col6})	AS COL6
								FROM   DUAL
</foreach>
							) S
						WHERE S.COL1 IS NOT NULL
					)
					WHERE EXISTS (
									SELECT S.COL1
									FROM (
											SELECT	S.COL1
											FROM (
												SELECT	NULL 				AS COL1	FROM	DUAL
			<foreach item="rm" collection="updateRows" > UNION ALL		SELECT	TRIM(#{rm.col1})	AS COL1	FROM	DUAL  </foreach>
												) S
											WHERE S.COL1 IS NOT NULL
										)S
									WHERE T.COL1 = S.COL1
								)
		</update>

</mapper>