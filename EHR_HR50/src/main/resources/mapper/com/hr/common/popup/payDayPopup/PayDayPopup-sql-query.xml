<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="common.popup.payDayPopup">
	<!-- 조회 -->
	<select id="getPayDayPopupList" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT ROWNUM AS RNUM
		     , ENTER_CD
		     , PAY_ACTION_CD
		     , PAY_ACTION_NM
		     , PAY_YM
		     , PAY_CD
		     , RUN_TYPE
		     , PAYMENT_YMD
		     , TO_CHAR(TO_DATE(PAYMENT_YMD,'YYYYMMDD'),'YYYY-MM-DD') AS PAYMENT_YMD_HYPHEN
		     , ORD_SYMD
		     , ORD_EYMD
		     , TIME_YM
		     , CAL_TAX_METHOD
		     , CAL_TAX_SYM
		     , CAL_TAX_EYM
		     , ADD_TAX_RATE
		     , BON_SYMD
		     , BON_EYMD
		     , GNT_SYMD
		     , GNT_EYMD
		     , BON_CAL_TYPE
		     , BON_STD_CNT
		     , BON_APPLY_TYPE
		     , BON_MON_RATE
		     , PAYMENT_METHOD
		     , MAN_CNT
		     , DECODE(CLOSE_YN,'Y','1','0') AS CLOSE_YN
		     , PAY_NM
		     , BIGO
		FROM (                
				SELECT DISTINCT A.ENTER_CD
                      , A.PAY_ACTION_CD
                      , A.PAY_ACTION_NM
                      , A.PAY_YM
                      , A.PAY_CD
                      , B.RUN_TYPE
                      , A.PAYMENT_YMD
                      , A.ORD_SYMD
                      , A.ORD_EYMD
                      , A.TIME_YM
                      , A.CAL_TAX_METHOD
                      , A.CAL_TAX_SYM
                      , A.CAL_TAX_EYM
                      , A.ADD_TAX_RATE
                      , A.BON_SYMD
                      , A.BON_EYMD
                      , A.GNT_SYMD
                      , A.GNT_EYMD
                      , A.BON_CAL_TYPE
                      , A.BON_STD_CNT
                      , A.BON_APPLY_TYPE
                      , A.BON_MON_RATE
                      , A.PAYMENT_METHOD
                            , (SELECT COUNT(*) 
                              FROM TCPN203 
                              WHERE ENTER_CD = A.ENTER_CD 
                              AND PAY_ACTION_CD = A.PAY_ACTION_CD) AS MAN_CNT
                            , C.CLOSE_YN
                            , B.PAY_NM
                            , A.BIGO
				  FROM TCPN201 A
		      		 , TCPN051 B
		             , TCPN981 C
		             , TCPN203 D
				 WHERE A.ENTER_CD		= B.ENTER_CD
				   AND A.PAY_CD			= B.PAY_CD
				   AND A.ENTER_CD		= D.ENTER_CD(+)
				   AND A.PAY_ACTION_CD	= D.PAY_ACTION_CD(+)
				   AND A.ENTER_CD		= C.ENTER_CD(+)
				   AND A.PAY_ACTION_CD	= C.PAY_ACTION_CD(+)
				   AND A.ENTER_CD		= #{ssnEnterCd} ]]>
		<if test="searchPayCd != null and searchPayCd neq ''">
				   AND A.PAY_CD	LIKE '%'|| #{searchPayCd} ||'%'
		</if>
		<if test="searchMonthFrom != null and searchMonthFrom neq '' and searchMonthTo != null and searchMonthTo neq ''">
				   AND A.PAY_YM	BETWEEN REPLACE(#{searchMonthFrom}, '-', '') AND REPLACE(#{searchMonthTo}, '-', '')
		</if>
		<if test="multiRunType neq ''">
				   AND B.RUN_TYPE	IN
		<foreach collection="multiRunType" item="item" index="index" open="(" close=")" separator=",">
				#{item}
		</foreach>
		</if>
		<if test="searchSabun != null and searchSabun neq ''">
				   AND D.SABUN		= #{searchSabun}
		</if>
		<if test='ssnSearchType eq "O"'>
		<![CDATA[
				   AND (B.BUSINESS_PLACE_CD IN (SELECT DISTINCT REGEXP_SUBSTR(A.PARAM, '[^,]+', 1, LEVEL)
		                                          FROM (SELECT F_COM_GET_AUTH_PARSE(TRIM(#{ssnEnterCd}),'C10',F_COM_GET_AUTH_VALUE(TRIM(#{ssnEnterCd}),TRIM(#{ssnSabun}),TRIM(#{ssnGrpCd}))) AS PARAM FROM DUAL) A
		                                        CONNECT BY LEVEL <= length(REGEXP_REPLACE(A.PARAM, '[^,]+',''))+1) 
					  OR B.BUSINESS_PLACE_CD IS NULL)
		]]>
		</if>
	<![CDATA[
		         ORDER BY A.PAY_ACTION_CD DESC, A.PAY_YM DESC, A.PAYMENT_YMD DESC
		    )  
	]]>
	</select>
		
	<select id="getPayDayAdminPopupList" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT ROWNUM AS RNUM
			 , ENTER_CD
			 , PAY_ACTION_CD
			 , PAY_ACTION_NM
			 , PAY_YM
			 , PAY_CD
			 , RUN_TYPE
			 , PAYMENT_YMD
			 , TO_CHAR(TO_DATE(PAYMENT_YMD,'YYYYMMDD'),'YYYY-MM-DD') AS PAYMENT_YMD_HYPHEN
			 , ORD_SYMD
			 , ORD_EYMD
			 , TIME_YM
			 , CAL_TAX_METHOD
			 , CAL_TAX_SYM
			 , CAL_TAX_EYM
			 , ADD_TAX_RATE
			 , BON_SYMD
			 , BON_EYMD
			 , GNT_SYMD
			 , GNT_EYMD
			 , BON_CAL_TYPE
			 , BON_STD_CNT
			 , BON_APPLY_TYPE
			 , BON_MON_RATE
			 , PAYMENT_METHOD
			 , MAN_CNT
			 , DECODE(CLOSE_YN,'Y','1','0') AS CLOSE_YN
			 , PAY_NM
			 , BIGO
		FROM (	SELECT DISTINCT
					   A.ENTER_CD
					 , A.PAY_ACTION_CD
					 , A.PAY_ACTION_NM
					 , A.PAY_YM
					 , A.PAY_CD
					 , B.RUN_TYPE
					 , A.PAYMENT_YMD
					 , A.ORD_SYMD
					 , A.ORD_EYMD
					 , A.TIME_YM
					 , A.CAL_TAX_METHOD
					 , A.CAL_TAX_SYM
					 , A.CAL_TAX_EYM
					 , A.ADD_TAX_RATE
					 , A.BON_SYMD
					 , A.BON_EYMD
					 , A.GNT_SYMD
					 , A.GNT_EYMD
					 , A.BON_CAL_TYPE
					 , A.BON_STD_CNT
					 , A.BON_APPLY_TYPE
					 , A.BON_MON_RATE
					 , A.PAYMENT_METHOD
					 , (SELECT COUNT(*) FROM TCPN203 
						WHERE ENTER_CD = A.ENTER_CD AND PAY_ACTION_CD = A.PAY_ACTION_CD) AS MAN_CNT
					 , C.CLOSE_YN
					 , B.PAY_NM
					 , A.BIGO
				  FROM TCPN201 A
					 , TCPN051 B
					 , TCPN981 C
					 , TCPN203 D
				 WHERE A.ENTER_CD		= B.ENTER_CD
				   AND A.PAY_CD			= B.PAY_CD
				   AND A.ENTER_CD		= D.ENTER_CD
				   AND A.PAY_ACTION_CD	= D.PAY_ACTION_CD
				   AND A.ENTER_CD		= C.ENTER_CD(+)
				   AND A.PAY_ACTION_CD	= C.PAY_ACTION_CD(+)
				   AND A.ENTER_CD		= #{ssnEnterCd} ]]>
		<if test="searchPayCd != null and searchPayCd neq ''">
				   AND A.PAY_CD LIKE '%'|| #{searchPayCd} ||'%'
		</if>
		<if test="searchMonthFrom != null and searchMonthFrom neq '' and searchMonthTo != null and searchMonthTo neq ''">
				   AND A.PAY_YM BETWEEN REPLACE(#{searchMonthFrom}, '-', '') AND REPLACE(#{searchMonthTo}, '-', '')
		</if>
				   AND B.RUN_TYPE NOT IN ('00004','Y0001','TEMP')
		<if test="searchSabun != null and searchSabun neq ''">
				   AND D.SABUN = #{searchSabun}
		</if>
	<![CDATA[
				ORDER BY A.PAY_ACTION_CD DESC, A.PAY_YM DESC, A.PAYMENT_YMD DESC
			)
	]]>
	</select>
	
	<select id="getPayDayUserPopupList" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT ROWNUM AS RNUM
			 , ENTER_CD
			 , PAY_ACTION_CD
			 , PAY_ACTION_NM
			 , PAY_YM
			 , PAY_CD
			 , RUN_TYPE
			 , PAYMENT_YMD
			 , TO_CHAR(TO_DATE(PAYMENT_YMD,'YYYYMMDD'),'YYYY-MM-DD') AS PAYMENT_YMD_HYPHEN
			 , ORD_SYMD
			 , ORD_EYMD
			 , TIME_YM
			 , CAL_TAX_METHOD
			 , CAL_TAX_SYM
			 , CAL_TAX_EYM
			 , ADD_TAX_RATE
			 , BON_SYMD
			 , BON_EYMD
			 , GNT_SYMD
			 , GNT_EYMD
			 , BON_CAL_TYPE
			 , BON_STD_CNT
			 , BON_APPLY_TYPE
			 , BON_MON_RATE
			 , PAYMENT_METHOD
			 , MAN_CNT
			 , DECODE(CLOSE_YN,'Y','1','0') AS CLOSE_YN
			 , PAY_NM
			 , BIGO
		FROM (	SELECT DISTINCT
					   A.ENTER_CD
					 , A.PAY_ACTION_CD
					 , A.PAY_ACTION_NM
					 , A.PAY_YM
					 , A.PAY_CD
					 , B.RUN_TYPE
					 , A.PAYMENT_YMD
					 , A.ORD_SYMD
					 , A.ORD_EYMD
					 , A.TIME_YM
					 , A.CAL_TAX_METHOD
					 , A.CAL_TAX_SYM
					 , A.CAL_TAX_EYM
					 , A.ADD_TAX_RATE
					 , A.BON_SYMD
					 , A.BON_EYMD
					 , A.GNT_SYMD
					 , A.GNT_EYMD
					 , A.BON_CAL_TYPE
					 , A.BON_STD_CNT
					 , A.BON_APPLY_TYPE
					 , A.BON_MON_RATE
					 , A.PAYMENT_METHOD
					 , (SELECT COUNT(*) FROM TCPN203 
						WHERE ENTER_CD = A.ENTER_CD AND PAY_ACTION_CD = A.PAY_ACTION_CD) AS MAN_CNT
					 , C.CLOSE_YN
					 , B.PAY_NM
					 , A.BIGO
				  FROM TCPN201 A
					 , TCPN051 B
					 , TCPN981 C
					 , TCPN203 D
					 , TCPN991 E
				 WHERE A.ENTER_CD		= B.ENTER_CD
				   AND A.PAY_CD			= B.PAY_CD
				   AND A.ENTER_CD		= C.ENTER_CD
				   AND A.PAY_ACTION_CD	= C.PAY_ACTION_CD
				   AND A.ENTER_CD		= D.ENTER_CD
				   AND A.PAY_ACTION_CD	= D.PAY_ACTION_CD
				   AND A.PAY_CD			= E.PAY_CD(+)
				   AND A.ENTER_CD		= E.ENTER_CD(+)
				   AND A.ENTER_CD		= #{ssnEnterCd} ]]>
		<if test="searchPayCd != null and searchPayCd neq ''">
				   AND A.PAY_CD LIKE '%'|| #{searchPayCd} ||'%'
		</if>
		<if test="searchMonthFrom != null and searchMonthFrom neq '' and searchMonthTo != null and searchMonthTo neq ''">
				   AND A.PAY_YM BETWEEN REPLACE(#{searchMonthFrom}, '-', '') AND REPLACE(#{searchMonthTo}, '-', '')
		</if>
				   AND NVL(C.CLOSE_YN,'N') = 'Y'
		<if test="searchSabun != null and searchSabun neq ''">
				   AND D.SABUN			= #{searchSabun}
		</if>
	<![CDATA[
				   AND B.RUN_TYPE NOT IN ('00004','Y0001','TEMP')
				   AND (CASE WHEN B.RUN_TYPE IN ('R0001','R0002','R0003') THEN -1
							 ELSE
								CASE WHEN  TO_CHAR(SYSDATE,'YYYYMMDD') > TO_CHAR((TO_DATE(A.PAYMENT_YMD,'YYYYMMDD') + TO_NUMBER(NVL(E.OPEN_DD,0))),'YYYYMMDD') THEN -1
								     WHEN  TO_CHAR(SYSDATE,'YYYYMMDD') = TO_CHAR((TO_DATE(A.PAYMENT_YMD,'YYYYMMDD') + TO_NUMBER(NVL(E.OPEN_DD,0))),'YYYYMMDD') THEN
								         CASE WHEN E.OPEN_HM <= TO_CHAR(SYSDATE,'HH24MI') THEN -1 ELSE 0 END
								     ELSE 0
								END
						END
			           ) < 0
				ORDER BY A.PAY_ACTION_CD DESC, A.PAY_YM DESC, A.PAYMENT_YMD DESC
			)
	]]>
	</select>
	
	<select id="getPayDayPopupMap" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT RUN_TYPE, PAYMENT_DD
		FROM TCPN051
		WHERE ENTER_CD = #{ssnEnterCd}       
		AND PAY_CD = #{selectPayCd}
	]]>
	</select>
		
	<!-- 저장 -->	
	<update id="savePayDayPopup" parameterType="map">
	<![CDATA[
		MERGE INTO TCPN201 T
		USING	(
				SELECT	  PAY_ACTION_CD
						, PAY_ACTION_NM
						, PAY_YM
						, PAY_CD
						, PAYMENT_YMD
						, ORD_SYMD
						, ORD_EYMD
						, TIME_YM
						, CAL_TAX_METHOD
						, CAL_TAX_SYM
						, CAL_TAX_EYM
						, ADD_TAX_RATE
						, BON_SYMD
						, BON_EYMD
						, GNT_SYMD
						, GNT_EYMD
						, BON_CAL_TYPE
						, BON_APPLY_TYPE
						, BON_MON_RATE
						, PAYMENT_METHOD
				FROM	(
						SELECT	  NULL		AS PAY_ACTION_CD      
								, NULL		AS PAY_ACTION_NM      
								, NULL		AS PAY_YM             
								, NULL		AS PAY_CD             
								, NULL		AS PAYMENT_YMD        
								, NULL		AS ORD_SYMD           
								, NULL		AS ORD_EYMD           
								, NULL		AS TIME_YM            
								, NULL		AS CAL_TAX_METHOD     
								, NULL		AS CAL_TAX_SYM        
								, NULL		AS CAL_TAX_EYM        
								, NULL		AS ADD_TAX_RATE       
								, NULL		AS BON_SYMD           
								, NULL		AS BON_EYMD           
								, NULL		AS GNT_SYMD           
								, NULL		AS GNT_EYMD           
								, NULL		AS BON_CAL_TYPE       
								, NULL		AS BON_APPLY_TYPE     
								, NULL		AS BON_MON_RATE       
								, NULL		AS PAYMENT_METHOD     
						FROM	DUAL ]]>
					<bind name="idx" value="1" />
					<foreach item="rm" collection="mergeRows">
						UNION ALL
						SELECT
						<choose>
							<when test="rm.payActionCd != null and rm.payActionCd neq ''">
								TRIM(#{rm.payActionCd}) 			AS PAY_ACTION_CD
							</when>
							<otherwise>
								TO_CHAR( (SELECT LPAD((NVL(MAX(TO_NUMBER(PAY_ACTION_CD)),0) + #{idx}), 3, '0') 
								            FROM TCPN201
								           WHERE SUBSTR (PAY_ACTION_CD, 1, 6) = REPLACE(#{rm.payYm}, '-', '') 
								          AND ENTER_CD = #{ssnEnterCd}
								          ) )	AS PAY_ACTION_CD
								<bind name="idx" value="idx + 1" />
							</otherwise>
						</choose> 
								, TRIM(#{rm.payActionNm}) AS PAY_ACTION_NM            
								, TRIM(#{rm.payYm}) AS PAY_YM                   
								, TRIM(#{rm.payCd}) AS PAY_CD                   
								, TRIM(#{rm.paymentYmd}) AS PAYMENT_YMD              
								, TRIM(#{rm.ordSymd}) AS ORD_SYMD                 
								, TRIM(#{rm.ordEymd}) AS ORD_EYMD                 
								, TRIM(#{rm.timeYm}) AS TIME_YM                  
								, TRIM(#{rm.calTaxMethod}) AS CAL_TAX_METHOD           
								, TRIM(#{rm.calTaxSym}) AS CAL_TAX_SYM              
								, TRIM(#{rm.calTaxEym}) AS CAL_TAX_EYM              
								, TRIM(#{rm.addTaxRate}) AS ADD_TAX_RATE             
								, TRIM(#{rm.bonSymd}) AS BON_SYMD                 
								, TRIM(#{rm.bonEymd}) AS BON_EYMD                 
								, TRIM(#{rm.gntSymd}) AS GNT_SYMD                 
								, TRIM(#{rm.gntEymd}) AS GNT_EYMD                 
								, TRIM(#{rm.bonCalType}) AS BON_CAL_TYPE             
								, TRIM(#{rm.bonApplyType}) AS BON_APPLY_TYPE           
								, TRIM(#{rm.bonMonRate}) AS BON_MON_RATE             
								, TRIM(#{rm.paymentMethod}) AS PAYMENT_METHOD           
								FROM   DUAL
					</foreach>
		<![CDATA[
						)  WHERE PAY_ACTION_CD IS NOT NULL
				) S
		ON ( T.ENTER_CD = #{ssnEnterCd}
		AND  T.PAY_ACTION_CD = S.PAY_ACTION_CD
		)
		WHEN MATCHED THEN
			UPDATE SET	  T.PAY_ACTION_NM  	= S.PAY_ACTION_NM  
						, T.PAY_YM         	= S.PAY_YM         
						, T.PAY_CD         	= S.PAY_CD         
						, T.PAYMENT_YMD    	= S.PAYMENT_YMD    
						, T.ORD_SYMD       	= S.ORD_SYMD       
						, T.ORD_EYMD       	= S.ORD_EYMD       
						, T.TIME_YM        	= S.TIME_YM        
						, T.CAL_TAX_METHOD 	= S.CAL_TAX_METHOD 
						, T.CAL_TAX_SYM    	= S.CAL_TAX_SYM    
						, T.CAL_TAX_EYM    	= S.CAL_TAX_EYM    
						, T.ADD_TAX_RATE   	= S.ADD_TAX_RATE   
						, T.BON_SYMD       	= S.BON_SYMD       
						, T.BON_EYMD       	= S.BON_EYMD       
						, T.GNT_SYMD       	= S.GNT_SYMD       
						, T.GNT_EYMD       	= S.GNT_EYMD       
						, T.BON_CAL_TYPE   	= S.BON_CAL_TYPE   
						, T.BON_APPLY_TYPE 	= S.BON_APPLY_TYPE 
						, T.BON_MON_RATE   	= S.BON_MON_RATE   
						, T.PAYMENT_METHOD 	= S.PAYMENT_METHOD 
						, T.CHKDATE	= SYSDATE
						, T.CHKID	= #{ssnSabun}
		WHEN NOT MATCHED THEN
			INSERT 
			(
				  T.ENTER_CD
				, T.PAY_ACTION_CD
				, T.PAY_ACTION_NM
				, T.PAY_YM
				, T.PAY_CD
				, T.PAYMENT_YMD
				, T.ORD_SYMD
				, T.ORD_EYMD
				, T.TIME_YM
				, T.CAL_TAX_METHOD
				, T.CAL_TAX_SYM
				, T.CAL_TAX_EYM
				, T.ADD_TAX_RATE
				, T.BON_SYMD
				, T.BON_EYMD
				, T.GNT_SYMD
				, T.GNT_EYMD
				, T.BON_CAL_TYPE
				, T.BON_APPLY_TYPE
				, T.BON_MON_RATE
				, T.PAYMENT_METHOD
				, T.CHKDATE
				, T.CHKID
			) 
			VALUES 
			(
				  #{ssnEnterCd}
				, S.PAY_YM || S.PAY_ACTION_CD
				, S.PAY_ACTION_NM
				, S.PAY_YM
				, S.PAY_CD
				, S.PAYMENT_YMD
				, S.ORD_SYMD
				, S.ORD_EYMD
				, S.TIME_YM
				, S.CAL_TAX_METHOD
				, S.CAL_TAX_SYM
				, S.CAL_TAX_EYM
				, S.ADD_TAX_RATE
				, S.BON_SYMD
				, S.BON_EYMD
				, S.GNT_SYMD
				, S.GNT_EYMD
				, S.BON_CAL_TYPE
				, S.BON_APPLY_TYPE
				, S.BON_MON_RATE
				, S.PAYMENT_METHOD
				, SYSDATE
				, #{ssnSabun}
			)
	]]>
	</update>
			
	<!-- 삭제 -->
	<delete id="deletePayDayPopup" parameterType="map" >
	<![CDATA[
		DELETE FROM TCPN201 
		WHERE 	(ENTER_CD, PAY_ACTION_CD) IN 	(  (NULL, NULL) ]]>
	<foreach item="rm" collection="deleteRows">
		<if test="ssnEnterCd != null and ssnEnterCd neq '' and rm.payActionCd != null and rm.payActionCd neq ''">
			(#{ssnEnterCd}, TRIM( #{rm.payActionCd} ) )
		</if>
	</foreach>
		)
	</delete>
		
</mapper>