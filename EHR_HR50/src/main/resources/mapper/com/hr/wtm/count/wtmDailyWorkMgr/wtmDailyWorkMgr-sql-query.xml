<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="wtm.count.wtmDailyWorkMgr">

	<!-- 일근무집계 조회 -->
	<select parameterType="map" resultType="cMap" id="getWtmDailyWorkMgrList">
		SELECT A.ENTER_CD
			 , A.SABUN
			 , A.NAME
			 , E.SUN_DATE AS YMD
			 , E.DAY_NM
			 , B.ORG_CD
			 , C.ORG_NM
			 , B.JIKWEE_NM
			 , B.JIKGUB_NM
			 , B.JIKCHAK_NM
			 , B.MANAGE_NM
			 , B.WORK_TYPE_NM
			 , F.DAY_TYPE
			 , F.IN_YMD
			 , F.IN_HM
			 , F.OUT_YMD
			 , F.OUT_HM
			 , NVL2(F.BASIC_MM + F.OT_MM, F_WTM_GET_MNTS_TO_HHMM(F.BASIC_MM + F.OT_MM), '') AS REAL_WORK_TIME
			 , DECODE(F.DAY_TYPE, 'W', F_WTM_GET_MNTS_TO_HHMM(F.BASIC_MM), '') AS BASIC_MM_W
			 , DECODE(F.DAY_TYPE, 'W', F_WTM_GET_MNTS_TO_HHMM(F.OT_MM), '') AS OT_MM_W
			 , DECODE(F.DAY_TYPE, 'W', F_WTM_GET_MNTS_TO_HHMM(F.LTN_MM), '') AS LTN_MM_W
			 , DECODE(F.DAY_TYPE, 'H', F_WTM_GET_MNTS_TO_HHMM(F.BASIC_MM), '') AS BASIC_MM_H
			 , DECODE(F.DAY_TYPE, 'H', F_WTM_GET_MNTS_TO_HHMM(F.OT_MM), '') AS OT_MM_H
			 , DECODE(F.DAY_TYPE, 'H', F_WTM_GET_MNTS_TO_HHMM(F.LTN_MM), '') AS LTN_MM_H
			 , DECODE(F.DAY_TYPE, 'NH', F_WTM_GET_MNTS_TO_HHMM(F.BASIC_MM), '') AS BASIC_MM_NH
			 , DECODE(F.DAY_TYPE, 'NH', F_WTM_GET_MNTS_TO_HHMM(F.OT_MM), '') AS OT_MM_NH
			 , DECODE(F.DAY_TYPE, 'NH', F_WTM_GET_MNTS_TO_HHMM(F.LTN_MM), '') AS LTN_MM_NH
			 , F.LATE_YN
			 , F.LEAVE_EARLY_YN
			 , F.ABSENCE_YN
			 , F.CLOSE_YN
			 , F.NOTE
			 , D.BUSINESS_PLACE_CD
			 , G.HOLIDAY_NM
		     , CASE WHEN H.TC_IN_HM IS NULL OR H.TC_OUT_HM IS NULL THEN 'Y' ELSE 'N' END AS TIME_CARD_FLAG
			 , H.TC_IN_HM
			 , H.TC_OUT_HM
		     , NVL(F.WORK_CLASS_CD, F_WTM_GET_WORK_CLASS(A.ENTER_CD, A.SABUN, E.SUN_DATE)) AS WORK_CLASS_CD
		  FROM THRM100 A
		  JOIN THRM151 B
			ON A.ENTER_CD = B.ENTER_CD
		   AND A.SABUN = B.SABUN
		  JOIN TORG101 C
			ON B.ENTER_CD = C.ENTER_CD
		   AND B.ORG_CD = C.ORG_CD
		  JOIN BP_V D
			ON A.ENTER_CD = D.ENTER_CD
		   AND A.SABUN = D.SABUN
		   AND B.SDATE = D.SDATE
		 RIGHT JOIN TSYS007 E
			ON E.SUN_DATE BETWEEN B.SDATE AND B.EDATE
		   AND E.SUN_DATE BETWEEN C.SDATE AND C.EDATE
		  LEFT JOIN TWTM101 F
			ON A.ENTER_CD = F.ENTER_CD
		   AND A.SABUN = F.SABUN
		   AND E.SUN_DATE = F.YMD
		  LEFT JOIN TWTM001 G
			ON A.ENTER_CD = G.ENTER_CD
		   AND D.BUSINESS_PLACE_CD = G.BUSINESS_PLACE_CD
		   AND (E.SUN_DATE = G.YY||G.MM||G.DD OR E.SUN_DATE = G.RP_YY||G.RP_MM||G.RP_DD)
		  LEFT JOIN (
				SELECT ENTER_CD, SABUN, YMD
					 , TO_CHAR(MIN(TO_DATE(IN_YMD || IN_HM, 'YYYYMMDDHH24MI')), 'HH24MI') AS TC_IN_HM
					 , TO_CHAR(MAX(TO_DATE(OUT_YMD || OUT_HM, 'YYYYMMDDHH24MI')), 'HH24MI') AS TC_OUT_HM
				  FROM TWTM110
				 WHERE ENTER_CD = TRIM( #{ssnEnterCd} )
				 GROUP BY ENTER_CD, SABUN, YMD
			   ) H
			ON A.ENTER_CD = H.ENTER_CD
		   AND A.SABUN = H.SABUN
		   AND E.SUN_DATE = H.YMD
		 WHERE A.ENTER_CD = TRIM( #{ssnEnterCd} )
		   AND E.SUN_DATE BETWEEN REPLACE(#{searchSymd},'-','') AND REPLACE(#{searchEymd},'-','')
		   AND (A.RET_YMD IS NULL OR A.RET_YMD >= E.SUN_DATE)
	   <if test='searchSabunName != null and !searchSabunName.equals("")'>
		   AND (A.SABUN = TRIM( #{searchSabunName} ) OR A.NAME LIKE '%'||TRIM( #{searchSabunName} )||'%')
		</if>
		<if test='searchJikweeCd != null and !searchJikweeCd.equals("")'>
		   AND B.JIKWEE_CD = #{searchJikweeCd}
		</if>
		<if test='searchJikgubCd != null and !searchJikgubCd.equals("")'>
		   AND B.JIKGUB_CD = #{searchJikgubCd}
		</if>
		<if test='searchManageCd != null and !searchManageCd.equals("")'>
		   AND B.MANAGE_CD = #{searchManageCd}
		</if>
		<if test='searchWorkType != null and !searchWorkType.equals("")'>
		   AND B.WORK_TYPE = #{searchWorkType}
		</if>
		<if test=' searchLocationCd != null and !searchLocationCd.equals("")'>
		   AND B.LOCATION_CD = #{searchLocationCd}
		</if>
		<if test='searchBizPlaceCd != null and !searchBizPlaceCd.equals("")'>
		   AND D.BUSINESS_PLACE_CD = #{searchBizPlaceCd}
		</if>
		<if test='searchWorkClassCd != null and !searchWorkClassCd.equals("")'>
		   AND NVL(F.WORK_CLASS_CD, F_WTM_GET_WORK_CLASS(A.ENTER_CD, A.SABUN, E.SUN_DATE)) = #{searchWorkClassCd}
		</if>
		<if test='searchTimeCheck and searchTimeCheck.equals("Y")'>
		   AND (H.TC_IN_HM IS NULL OR TC_OUT_HM IS NULL)
		</if>
		<if test='searchLateCheck and searchLateCheck.equals("Y")'>
		   AND NVL(F.LATE_YN, 'N') = 'Y'
		</if>

		<if test='searchOrgCd != null and !searchOrgCd.equals("")'>
		   AND B.ORG_CD IN (SELECT #{searchOrgCd}
									  FROM DUAL
			<if test='searchOrgType and searchOrgType.equals("Y")'>
					  /*하위조직포함일때 Y , 아닐때 N */
								<![CDATA[
									UNION
									SELECT ORG_CD
									  FROM (
									      	SELECT *
									      	  FROM TORG105
											 WHERE ENTER_CD = TRIM( #{ssnEnterCd} )
											   AND SDATE    = (SELECT MAX(SDATE) FROM TORG103 WHERE ENTER_CD = TRIM( #{ssnEnterCd} ) AND SDATE <= REPLACE( #{searchSymd},'-','') )
									       )
									 START WITH PRIOR_ORG_CD   =  #{searchOrgCd}
									 CONNECT BY PRIOR ENTER_CD = ENTER_CD
											AND PRIOR SDATE    = SDATE
											AND PRIOR ORG_CD   = PRIOR_ORG_CD
								]]>
			</if>
							)
		</if>
		<if test='ssnSearchType.equals("O") and searchOrgCd.equals("")'>

		   AND B.ORG_CD IN (SELECT SCOPE_VALUE
							  FROM TSYS319
							 WHERE ENTER_CD = TRIM( #{ssnEnterCd} )
							 AND GRP_CD  = #{ssnGrpCd}
							 AND AUTH_SCOPE_CD = 'W10'
							 AND SABUN = #{ssnSabun}
				 <if test='searchOrgType and searchOrgType.equals("Y")'>
                              /*하위조직포함일때 Y , 아닐때 N */
				  <![CDATA[
							UNION
							SELECT ORG_CD
							  FROM TORG105
							 WHERE ENTER_CD = TRIM( #{ssnEnterCd} )
							   AND SDATE    = (SELECT MAX(SDATE) FROM TORG103 WHERE ENTER_CD = TRIM( #{ssnEnterCd} ) AND SDATE <= REPLACE( #{searchSymd},'-','') )
							 START WITH PRIOR_ORG_CD   in (SELECT SCOPE_VALUE FROM TSYS319 WHERE ENTER_CD = TRIM( #{ssnEnterCd} )
															 AND GRP_CD  = #{ssnGrpCd}
															 AND AUTH_SCOPE_CD = 'W10'
															 AND SABUN = #{ssnSabun})
							 CONNECT BY PRIOR ENTER_CD = ENTER_CD
									AND PRIOR SDATE    = SDATE
									AND PRIOR ORG_CD   = PRIOR_ORG_CD
				  ]]>
			</if>
											)
		</if>

		 ORDER BY SABUN, SUN_DATE
	</select>

	<!-- 일근무 근무 상세 조회 -->
	<select parameterType="map" resultType="cMap" id="getWtmDailyWorkMgrWrkDtlList">
		SELECT A.ENTER_CD
		     , A.WRK_DTL_ID
			 , A.YMD
			 , A.SABUN
			 , A.WORK_CD
			 , A.PLAN_SYMD
			 , A.PLAN_SHM
			 , A.PLAN_EYMD
			 , A.PLAN_EHM
			 , A.PLAN_MM
			 , A.REAL_SYMD
			 , A.REAL_SHM
			 , A.REAL_EYMD
			 , A.REAL_EHM
			 , A.REAL_MM
			 , A.NOTE
		  FROM TWTM102 A
		 WHERE A.ENTER_CD = #{ssnEnterCd}
		   AND A.SABUN = #{selectSabun}
		   AND A.YMD = #{selectYmd}
		 ORDER BY A.PLAN_SYMD, A.PLAN_SHM
	</select>

	<!-- 일근무 출퇴근 타각 상세 조회 -->
	<select parameterType="map" resultType="cMap" id="getWtmDailyWorkMgrInoutList">
		SELECT A.ENTER_CD
			 , A.YMD
			 , A.SABUN
			 , A.SEQ
			 , A.IN_YMD
			 , A.IN_HM
			 , A.OUT_YMD
			 , A.OUT_HM
			 , A.AWAY_YN
			 , A.MEMO
		  FROM TWTM110 A
		 WHERE A.ENTER_CD = #{ssnEnterCd}
		   AND A.SABUN = #{selectSabun}
		   AND A.YMD = #{selectYmd}
		ORDER BY A.IN_YMD, A.IN_HM
	</select>

	<!-- 일근무집계 마감여부 변경 -->
	<update parameterType="map" id="updateWtmDailyWorkMgrCloseYn">
		 MERGE INTO TWTM101 T
		 USING (
		<foreach item="rm" collection="mergeRows" index="idx" separator=" UNION ALL ">
		    	SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD
		    	     , TRIM(#{rm.ymd}) AS YMD
		    	     , TRIM(#{rm.sabun}) AS SABUN
		    	     , TRIM(#{rm.closeYn}) AS CLOSE_YN
		    	     , TRIM(#{rm.note}) AS NOTE
		    	  FROM DUAL
		</foreach>
			  ) S
		   ON (
		        	T.ENTER_CD = S.ENTER_CD
                AND T.YMD = S.YMD
                AND T.SABUN = S.SABUN
              )
		 WHEN MATCHED THEN
	   UPDATE
		  SET T.CLOSE_YN = S.CLOSE_YN
		    , T.NOTE = S.NOTE
		    , CHKDATE = SYSDATE
		    , CHKID = #{ssnSabun}
	</update>

	<!-- 근무 상세 삭제 -->
	<delete parameterType="map" id="deleteWtmDailyWorkMgrWrkDtl">
		DELETE TWTM102
		 WHERE ENTER_CD = #{ssnEnterCd}
		   AND (WRK_DTL_ID, YMD, SABUN, WORK_CD) IN ( (NULL,NULL,NULL,NULL)
		<foreach collection="deleteRows" item="rm" >
			 , (TRIM(#{rm.wrkDtlId}), TRIM(#{rm.ymd}), TRIM(#{rm.sabun}), TRIM(#{rm.workCd}))
		</foreach>
        		)
	</delete>

	<!-- 근무 상세 저장 -->
	<update parameterType="map" id="saveWtmDailyWorkMgrWrkDtl">
		MERGE INTO TWTM102 T
		USING (
		<foreach item="rm" collection="mergeRows" index="idx" separator=" UNION ALL ">
				   SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD
						, TRIM(#{rm.wrkDtlId}) AS WRK_DTL_ID
						, TRIM(#{rm.ymd}) AS YMD
						, TRIM(#{rm.sabun}) AS SABUN
						, TRIM(#{rm.workCd}) AS WORK_CD
						, TRIM(#{rm.planSymd}) AS PLAN_SYMD
						, TRIM(#{rm.planShm}) AS PLAN_SHM
						, TRIM(#{rm.planEymd}) AS PLAN_EYMD
						, TRIM(#{rm.planEhm}) AS PLAN_EHM
						, TRIM(#{rm.planMm}) AS PLAN_MM
						, TRIM(#{rm.autoCreYn}) AS AUTO_CRE_YN
					 FROM DUAL
		</foreach>
			) S
			ON (
					  T.ENTER_CD = S.ENTER_CD
				 AND  T.WRK_DTL_ID = S.WRK_DTL_ID
				 AND  T.YMD = S.YMD
				 AND  T.SABUN = S.SABUN
				 AND  T.WORK_CD = S.WORK_CD
			)
			WHEN MATCHED THEN
			   UPDATE SET T.CHKDATE	= SYSDATE
						, T.CHKID	    = #{ssnSabun}
						, T.PLAN_SYMD = S.PLAN_SYMD
						, T.PLAN_SHM = S.PLAN_SHM
						, T.PLAN_EYMD = S.PLAN_EYMD
						, T.PLAN_EHM = S.PLAN_EHM
						, T.PLAN_MM = S.PLAN_MM
						, T.AUTO_CRE_YN = S.AUTO_CRE_YN
			WHEN NOT MATCHED THEN
			   INSERT
			   (
						  T.ENTER_CD
						, T.WRK_DTL_ID
						, T.YMD
						, T.SABUN
						, T.WORK_CD
						, T.PLAN_SYMD
						, T.PLAN_SHM
						, T.PLAN_EYMD
						, T.PLAN_EHM
						, T.PLAN_MM
						, T.AUTO_CRE_YN
						, T.INSDATE
						, T.INSID
						, T.CHKDATE
						, T.CHKID
			   )
			   VALUES
			   (
						  S.ENTER_CD
						, S.WRK_DTL_ID
						, S.YMD
						, S.SABUN
						, S.WORK_CD
						, S.PLAN_SYMD
						, S.PLAN_SHM
						, S.PLAN_EYMD
						, S.PLAN_EHM
						, S.PLAN_MM
						, S.AUTO_CRE_YN
						, SYSDATE
						, #{ssnSabun}
						, SYSDATE
						, #{ssnSabun}
			   )
	</update>

	<!-- 출퇴근타각 삭제 -->
	<delete parameterType="map" id="deleteWtmDailyWorkMgrInout">
		DELETE TWTM110
		 WHERE ENTER_CD = #{ssnEnterCd}
		   AND (YMD, SABUN, SEQ) IN ( (NULL,NULL,NULL)
		<foreach collection="deleteRows" item="rm" >
			 , (TRIM(#{rm.ymd}), TRIM(#{rm.sabun}), TRIM(#{rm.seq}))
		</foreach>
        		)
	</delete>

	<!-- 출퇴근타각 저장 -->
	<update parameterType="map" id="saveWtmDailyWorkMgrInout">
		MERGE INTO TWTM110 T
		USING (
		<foreach item="rm" collection="mergeRows" index="idx" separator=" UNION ALL ">
				   SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD
						, TRIM(#{rm.ymd}) AS YMD
						, TRIM(#{rm.sabun}) AS SABUN
						, CASE
							WHEN TRIM(#{rm.seq}) IS NULL OR TRIM(#{rm.seq}) = '0' THEN
							  (SELECT (NVL(MAX(SEQ),0) + (#{idx} + 1)) FROM TWTM110 WHERE ENTER_CD = #{ssnEnterCd} AND YMD = #{rm.ymd} AND SABUN = #{rm.sabun})
							ELSE TO_NUMBER(#{rm.seq})
						  END AS SEQ
						, TRIM(#{rm.inYmd}) AS IN_YMD
						, TRIM(#{rm.inHm}) AS IN_HM
						, TRIM(#{rm.outYmd}) AS OUT_YMD
						, TRIM(#{rm.outHm}) AS OUT_HM
						, TRIM(#{rm.awayYn}) AS AWAY_YN
						, TRIM(#{rm.memo}) AS MEMO
					 FROM DUAL
		</foreach>
			) S
			ON (
					  T.ENTER_CD = S.ENTER_CD
				 AND  T.YMD = S.YMD
				 AND  T.SABUN = S.SABUN
				 AND  T.SEQ = S.SEQ
			)
			WHEN MATCHED THEN
			   UPDATE SET T.CHKDATE	= SYSDATE
						, T.CHKID	    = #{ssnSabun}
						, T.IN_YMD = S.IN_YMD
						, T.IN_HM = S.IN_HM
						, T.OUT_YMD = S.OUT_YMD
						, T.OUT_HM = S.OUT_HM
						, T.AWAY_YN = S.AWAY_YN
						, T.MEMO = S.MEMO
			WHEN NOT MATCHED THEN
			   INSERT
			   (
						  T.ENTER_CD
						, T.YMD
						, T.SABUN
						, T.SEQ
						, T.IN_YMD
						, T.IN_HM
						, T.OUT_YMD
						, T.OUT_HM
						, T.AWAY_YN
						, T.MEMO
						, T.INSDATE
						, T.INSID
						, T.CHKDATE
						, T.CHKID
			   )
			   VALUES
			   (
						  S.ENTER_CD
						, S.YMD
						, S.SABUN
						, S.SEQ
						, S.IN_YMD
						, S.IN_HM
						, S.OUT_YMD
						, S.OUT_HM
						, S.AWAY_YN
						, S.MEMO
						, SYSDATE
						, #{ssnSabun}
						, SYSDATE
						, #{ssnSabun}
			   )
	</update>

</mapper>