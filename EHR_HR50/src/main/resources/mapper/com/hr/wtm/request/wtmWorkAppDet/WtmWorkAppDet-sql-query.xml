<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="wtm.request.wtmWorkAppDet">

		<!-- 근무신청 세부내역 조회 -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetList">
			SELECT A.ENTER_CD
				 , A.APPL_SEQ
			     , B.SEQ
				 , A.SABUN
				 , A.WORK_CD
				 , A.WORK_REQ_REASON
				 , B.REQ_TYPE
				 , B.S_YMD
				 , B.E_YMD
				 , B.HOL_DAY
				 , B.APP_DAY
				 , B.REQ_S_HM
				 , B.REQ_E_HM
				 , B.REQUEST_MM
				 , B.ENABLE_YN
				 , B.NOTE
				 , B.BF_APPL_SEQ
				 , B.BF_SEQ
			  FROM TWTM311 A
			  JOIN TWTM312 B
			    ON A.ENTER_CD = B.ENTER_CD
			   AND A.APPL_SEQ = B.APPL_SEQ
			 WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
			   AND A.APPL_SEQ = TRIM(#{searchApplSeq})
			ORDER BY A.ENTER_CD, A.APPL_SEQ, B.SEQ
		</select>

		<!-- 근무신청 근무코드 콤보 조회 -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetWorkCdList">
			SELECT A.WORK_CD AS CODE
				 , A.WORK_NM AS CODE_NM
				 , A.REQUEST_USE_TYPE         /* 근무신청단위 */
				 , A.BASE_CNT                 /* 최소신청가능일수 */
				 , A.MAX_CNT                  /* 최대신청가능일수 */
				 , A.APPLY_HOUR           	  /* 근무적용시간 */
				 , A.ORG_LEVEL_CD             /* 예외결재선(W82020) */
				 , A.EXCP_SEARCH_SEQ          /* 신청제외대상(조건검색) */
			  FROM TWTM051 A
			 WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
			<if test='searchAppYn != null and searchAppYn eq "Y"'>
				AND A.REQUEST_USE_TYPE != 'NA'
				AND A.USE_YN = 'Y'
			</if>
			ORDER BY A.SEQ
		</select>

		<!-- 근무내역 조회 -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetSheet1List">
			SELECT A.ENTER_CD
				 , B.APPL_SEQ AS BF_APPL_SEQ
				 , A.WORK_CD
				 , C.WORK_NM
				 , TO_CHAR(TO_DATE(B.S_YMD || B.REQ_S_HM, 'YYYYMMDDHH24MI'), 'YYYY-MM-DD HH24:MI') AS S_YMD
				 , TO_CHAR(TO_DATE(B.E_YMD || B.REQ_E_HM, 'YYYYMMDDHH24MI'), 'YYYY-MM-DD HH24:MI') AS E_YMD
			     , B.REQUEST_MM
			     , RTRIM(TO_CHAR(B.REQUEST_MM / 60, 'FM990.9999'), '.') AS REQUEST_HOUR
				 , B.HOL_DAY
				 , B.APP_DAY
				 , F.WRK_DTL_ID
				 , B.SEQ
			  FROM TWTM311 A
			  JOIN TWTM312 B
				ON A.ENTER_CD = B.ENTER_CD
			   AND A.APPL_SEQ = B.APPL_SEQ
			  JOIN TWTM051 C
				ON A.ENTER_CD = C.ENTER_CD
			   AND A.WORK_CD = C.WORK_CD
			  JOIN THRI103 D
				ON A.ENTER_CD = D.ENTER_CD
			   AND A.APPL_SEQ = D.APPL_SEQ
			  LEFT JOIN TWTM102 F
				ON A.ENTER_CD = F.ENTER_CD
			   AND A.SABUN = F.SABUN
			   AND A.WORK_CD = F.WORK_CD
			   AND A.APPL_SEQ = F.APPL_SEQ
			   AND F.YMD BETWEEN B.S_YMD AND B.E_YMD
			 WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
			   AND A.SABUN = TRIM(#{searchApplSabun})
			   AND A.WORK_CD = TRIM(#{workCd})
			   AND B.REQ_TYPE = 'I' -- 입력요청
			   AND B.ENABLE_YN = 'Y'
			   AND D.APPL_STATUS_CD = '99'
			   AND NOT EXISTS
			       (
			           SELECT 1
			             FROM TWTM311 T1
			                , TWTM312 T2
							, THRI103 T3
			            WHERE T1.ENTER_CD = T2.ENTER_CD
			              AND T1.APPL_SEQ = T2.APPL_SEQ
						  AND T1.ENTER_CD = T3.ENTER_CD
						  AND T1.APPL_SEQ = T3.APPL_SEQ
						  AND T3.APPL_STATUS_CD = '99' -- 처리완료
			              AND T1.ENTER_CD = A.ENTER_CD
			              AND T2.BF_APPL_SEQ = B.APPL_SEQ
			              AND T2.BF_SEQ = B.SEQ
			              AND T2.REQ_TYPE = 'D' -- 취소요청
				   )
			 ORDER BY B.S_YMD
		</select>

		<!-- 재직상태 체크 -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetStatusAndAuth">
			SELECT F_COM_GET_STATUS_CD( #{ssnEnterCd} , TRIM( #{sabun} ), TRIM( #{sYmd} )) AS STATUS_CD1
				 , F_COM_GET_STATUS_CD( #{ssnEnterCd} , TRIM( #{sabun} ), TRIM( #{eYmd} )) AS STATUS_CD2
				 ,  (SELECT CASE WHEN A.EXCP_SEARCH_SEQ IS NOT NULL THEN DECODE(F_COM_GET_SEARCH_YN(A.ENTER_CD, TRIM( #{sabun} ), A.EXCP_SEARCH_SEQ, TRIM( #{sYmd} ) ), 0, 'N', 'Y') -- 대상자 체크
								 ELSE 'N' END AS AUTH_YN
					   FROM TWTM051 A
					  WHERE A.ENTER_CD = #{ssnEnterCd}
						AND A.WORK_CD   = TRIM( #{workCd} )
				   ) AS AUTH_YN -- 신청대상자 확인
			  FROM DUAL
		</select>

		<!-- 근무신청 휴일 체크  -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetApplDay">
			SELECT F_WTM_GET_HOLIDAY_CNT( #{ssnEnterCd} , TRIM( #{sabun} ), TRIM( #{workCd} ), 'WORK', TRIM( nvl(#{sYmd}, '99991231') ), TRIM( nvl(#{eYmd}, '99991231') )) AS HOLIDAY_CNT
				 , CASE WHEN A.EXCP_SEARCH_SEQ IS NOT NULL THEN DECODE(F_COM_GET_SEARCH_YN(A.ENTER_CD, TRIM( #{sabun} ), A.EXCP_SEARCH_SEQ, TRIM( #{sYmd} ) ), 0, 'N', 'Y') -- 대상자 체크
					ELSE 'Y'
				   END AS AUTH_YN
			  FROM TWTM051 A
			 WHERE A.ENTER_CD = #{ssnEnterCd}
			   AND A.WORK_CD   = TRIM( #{workCd} )
		</select>

		<!-- 근무신청일자별 근무시간 조회 -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetWorkHours">
		<![CDATA[
			WITH DATES AS (
				SELECT TO_CHAR((TO_DATE(TRIM(#{sYmd}), 'YYYYMMDD') + LEVEL - 1), 'YYYYMMDD') AS DT
				  FROM DUAL
			   CONNECT BY LEVEL <= TO_DATE (TRIM(#{eYmd}), 'YYYYMMDD') - TO_DATE (TRIM(#{sYmd}), 'YYYYMMDD')
			)
			SELECT A.DT, B.WORK_CLASS_CD, B.WORK_CLASS_NM, B.WORK_TYPE_CD, NVL(B.WORK_HOURS, 0) AS WORK_HOURS
			     , F_WTM_GET_HOLIDAY_CNT( #{ssnEnterCd} , TRIM( #{sabun} ), TRIM( #{gntCd} ), A.DT, A.DT ) AS HOLIDAY_CNT
			  FROM DATES A
			  LEFT OUTER JOIN (
								SELECT B.DT
									 , B.WORK_CLASS_CD
									 , A.WORK_CLASS_NM
									 , A.WORK_TYPE_CD
									 , CASE
										 WHEN A.WORK_TYPE_CD IN ('R', 'B', 'D') THEN A.WORK_HOURS /* 고정, 시차, 교대 근무의 경우 근무시간을 그대로 가져온다. */
										 WHEN A.WORK_TYPE_CD IN ('A', 'C') THEN A.AVG_WEEK_WK_LMT / REGEXP_COUNT(A.WORK_DAY, '[^,]+')
									   END AS WORK_HOURS
								  FROM TWTM021 A
								  JOIN (
										SELECT ENTER_CD, DT, WORK_CLASS_CD, ROW_NUMBER() OVER (PARTITION BY DT ORDER BY PRIORITY) AS RN
										  FROM (
												/* TYPE: EMP */
												SELECT 1 AS PRIORITY, B.ENTER_CD, A.DT, B.WORK_CLASS_CD
												  FROM DATES A
												  JOIN TWTM022 B
													ON A.DT BETWEEN B.SDATE AND B.EDATE
												 WHERE B.ENTER_CD = #{ssnEnterCd}
												   AND B.SABUN = TRIM(#{sabun})
											   )
									   ) B
									ON A.ENTER_CD = B.ENTER_CD
								   AND A.WORK_CLASS_CD = B.WORK_CLASS_CD
								   AND B.RN = 1
			  				  ) B
				ON A.DT = B.DT
		]]>
		</select>

		<!-- 근무신청 시간 체크  -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetHour">
			SELECT ROUND(F_COM_GET_HH24MI_GAP(TRIM( NVL(#{sYmd}, #{ymd}) )||TRIM( nvl(#{reqSHm}, '1212') ), TRIM( NVL(#{eYmd}, #{ymd}) )||TRIM( nvl(#{reqEHm}, '1212') ) )/ 60, 2 ) AS HOURS
			  FROM DUAL
		</select>

		<!-- 근무 신청 정보 조회 -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetApplInfo">
			SELECT A.MAX_CNT
				 , A.BASE_CNT
			     , A.APPLY_HOUR
				 , A.WORK_TIME_TYPE
				 , A.DEEMED_YN
				 , NVL(B.NOTE1, NVL(A.DEEMED_YN, 'N')) AS ADD_WORK_TIME_YN
			  FROM TWTM051 A
			  JOIN TSYS005 B
				ON A.ENTER_CD = B.ENTER_CD
			   AND A.WORK_TIME_TYPE = B.CODE
			   AND B.GRCODE_CD = 'WT0511'
			 WHERE A.ENTER_CD =  #{ssnEnterCd}
			   AND A.WORK_CD = #{workCd}
		</select>

		<!-- 연장근무 기준 정보 조회 -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetOtBreakInfo">
			SELECT A.ENTER_CD
				 , A.SABUN
				 , NVL(C.WORK_CLASS_CD, B.WORK_CLASS_CD) AS WORK_CLASS_CD
				 , NVL2(C.WORK_CLASS_CD, C.OT_BREAK_TIME_T, B.OT_BREAK_TIME_T) AS OT_BREAK_TIME_T
				 , NVL2(C.WORK_CLASS_CD, C.OT_BREAK_TIME_R, B.OT_BREAK_TIME_R) AS OT_BREAK_TIME_R
				 , NVL2(C.WORK_CLASS_CD, C.BASE_WORK_PRE_USE_YN, B.BASE_WORK_PRE_USE_YN) AS BASE_WORK_PRE_USE_YN
				 , NVL2(C.WORK_CLASS_CD, C.WEEK_BEGIN_DAY, B.WEEK_BEGIN_DAY) AS WEEK_BEGIN_DAY
				 , NVL(NVL2(C.WORK_CLASS_CD, C.DAY_WK_LMT, B.DAY_WK_LMT), 0) AS DAY_WK_LMT
				 , NVL(NVL2(C.WORK_CLASS_CD, C.WEEK_WK_LMT, B.WEEK_WK_LMT), 0) AS WEEK_WK_LMT
			  FROM THRM100 A
			  JOIN TWTM021 B
				ON A.ENTER_CD = B.ENTER_CD
			   AND B.WORK_CLASS_DEF_YN = 'Y'
			  LEFT JOIN (
					SELECT A.*, B.SABUN
					  FROM TWTM021 A
					  JOIN TWTM022 B
						ON A.ENTER_CD = B.ENTER_CD
					   AND A.WORK_CLASS_CD = B.WORK_CLASS_CD
					   AND #{date} BETWEEN B.SDATE AND B.EDATE
				   ) C
				ON A.ENTER_CD = C.ENTER_CD
			   AND A.SABUN = C.SABUN
			 WHERE A.ENTER_CD = #{ssnEnterCd}
			   AND A.SABUN = #{sabun}
		</select>

		<!-- 근무 스케줄 조회 -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetApplDayCnt">
			SELECT SUM(CNT) AS CNT
			  FROM (
					/* 근무 상세 검사 */
					SELECT NVL(SUM(
								   CASE
									   WHEN B.REQUEST_USE_TYPE = 'D' OR C.REQUEST_USE_TYPE = 'D' THEN 1 /* 종일단위 신청 */
									   WHEN B.REQUEST_USE_TYPE = C.REQUEST_USE_TYPE THEN 1 /* 동일 단위 신청 */
									   ELSE 0
								   END
								  ), 0) AS CNT
					  FROM TWTM102 A
					  JOIN TWTM051 B
						ON A.ENTER_CD = B.ENTER_CD
					   AND A.WORK_CD = B.WORK_CD
			           AND B.REQUEST_USE_TYPE != 'NA'
					  JOIN TWTM051 C
						ON A.ENTER_CD = C.ENTER_CD
					   AND C.WORK_CD = #{workCd}
					   AND (
							-- 연장근무를 제외한 시간차는 체크 제외
							C.REQUEST_USE_TYPE NOT IN ( 'H' ) OR ( C.REQUEST_USE_TYPE IN ( 'H' ) AND '02' = C.WORK_TIME_TYPE)
						   )
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND A.SABUN    = #{sabun}
					   AND A.YMD BETWEEN #{sYmd} AND #{eYmd}
					<if test="deleteList != null and deleteList.size != 0">
						AND (A.ENTER_CD, A.SABUN, A.APPL_SEQ, A.SEQ) NOT IN
					<foreach item="rm" collection="deleteList" open="(" close=")" separator=" UNION ALL ">
							SELECT TRIM(#{ssnEnterCd} AS ENTER_CD
							     , TRIM(#{sabun}) AS SABUN
						         , TRIM(#{rm.bfApplSeq}) AS APPL_SEQ
						         , TRIM(#{rm.bfSeq}) AS SEQ
						      FROM DUAL
					</foreach>
					</if>
					 /* 근무신청중인 데이터 검사 */
					 UNION ALL
					SELECT NVL(SUM(
								   CASE
									   WHEN C.REQUEST_USE_TYPE = 'D' OR D.REQUEST_USE_TYPE = 'D' THEN 1 /* 종일단위 신청 */
									   WHEN C.REQUEST_USE_TYPE = D.REQUEST_USE_TYPE THEN 1 /* 동일 단위 신청 */
									   ELSE 0
								   END
								  ), 0) AS CNT
					  FROM TWTM311 A
					  JOIN TWTM312 B
						ON A.ENTER_CD = B.ENTER_CD
					   AND A.APPL_SEQ = B.APPL_SEQ
					  JOIN THRI103 E
						ON A.ENTER_CD = E.ENTER_CD
					   AND A.APPL_SEQ = E.APPL_SEQ
					  JOIN TWTM051 C
						ON A.ENTER_CD = C.ENTER_CD
					   AND A.WORK_CD = C.WORK_CD
			           AND C.REQUEST_USE_TYPE != 'NA'
					  JOIN TWTM051 D
						ON A.ENTER_CD = D.ENTER_CD
					   AND D.WORK_CD = #{workCd}
					   AND (
							-- 연장근무를 제외한 시간차는 체크 제외
							C.REQUEST_USE_TYPE NOT IN ( 'H' ) OR ( C.REQUEST_USE_TYPE IN ( 'H' ) AND '02' = C.WORK_TIME_TYPE)
						   )

					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND A.SABUN    = #{sabun}
					   -- 기간이 하나라도 겹치면 체크한다.
					   AND (
							   B.S_YMD BETWEEN #{sYmd} AND #{eYmd}
							OR B.E_YMD BETWEEN #{sYmd} AND #{eYmd}
							OR #{sYmd} BETWEEN B.S_YMD AND B.E_YMD
							OR #{eYmd} BETWEEN B.S_YMD AND B.E_YMD
						   )
					   AND B.REQ_TYPE = 'I'
					   AND E.APPL_STATUS_CD NOT IN ('11','23','33','99')
            	   )
		</select>

		<!-- 근무 스케줄 조회 -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetBaseWorkTime">
			SELECT *
			  FROM (
					SELECT ENTER_CD
						 , SYMD
						 , SHM
						 , EYMD
						 , EHM
						 , ROW_NUMBER() OVER (ORDER BY PRIORITY) AS RN
					  FROM (
							SELECT 1 AS PRIORITY, X.ENTER_CD, X.PLAN_SYMD AS SYMD, X.PLAN_SHM AS SHM, X.PLAN_EYMD AS EYMD, X.PLAN_EHM AS EHM
							  FROM TWTM102 X
							 WHERE X.ENTER_CD = #{ssnEnterCd}
							   AND X.SABUN = #{sabun}
							   AND X.YMD = #{sYmd}
							   AND X.WORK_CD = F_COM_GET_STD_CD_VALUE (X.ENTER_CD,'WTM_STD_WORK_CD') -- 기본근무코드
							 UNION ALL
							SELECT 2 AS PRIORITY, X.ENTER_CD, #{sYmd} AS SYMD, X.WORK_TIME_F AS SHM, #{sYmd} AS EYMD, X.WORK_TIME_T AS EHM
							  FROM TWTM021 X
							  JOIN TWTM022 Y
								ON X.ENTER_CD = Y.ENTER_CD
							   AND X.WORK_CLASS_CD = Y.WORK_CLASS_CD
							   AND #{sYmd} BETWEEN Y.SDATE AND Y.EDATE
							 WHERE X.ENTER_CD = #{ssnEnterCd}
							   AND Y.SABUN = #{sabun}
							/* 기본근무 */
							 UNION ALL
							SELECT 3 AS PRIORITY, X.ENTER_CD, #{sYmd} AS SYMD, X.WORK_TIME_F AS SHM, #{sYmd} AS EYMD, X.WORK_TIME_T AS EHM
							  FROM TWTM021 X
							 WHERE X.ENTER_CD = #{ssnEnterCd}
							   AND #{sYmd} BETWEEN X.SDATE AND X.EDATE
							   AND X.WORK_CLASS_DEF_YN = 'Y'
						   )
				   ) A
			 WHERE A.RN = 1
			/* 연장근무 여부 확인 */
			   AND #{workCd} = F_COM_GET_STD_CD_VALUE (A.ENTER_CD,'WTM_STD_OT_CD')
		</select>

		<!-- 근무 유형 조회 -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetWorkClassInfo">
			<![CDATA[
			WITH DATES AS (
				SELECT TO_CHAR(TO_DATE(TRIM( REPLACE(#{sYmd}, '-', '') ) , 'YYYYMMDD') + LEVEL - 1, 'YYYYMMDD') AS YMD
				  FROM DUAL
			   CONNECT BY LEVEL <= TO_DATE(TRIM( REPLACE(#{eYmd}, '-', '') ), 'YYYYMMDD') - TO_DATE(TRIM( REPLACE(#{sYmd}, '-', '') ) , 'YYYYMMDD') + 1
			)
			SELECT B.WORK_CLASS_CD
				 , A.WORK_CLASS_NM
				 , A.WORK_TYPE_CD
				 , A.SDATE
				 , A.EDATE
				 , B.PSNL_SDATE
				 , B.PSNL_EDATE
				 , A.INTERVAL_CD
				 , A.INTERVAL_BEGIN_TYPE
			  FROM TWTM021 A
			  JOIN (
					SELECT ENTER_CD, WORK_CLASS_CD, PSNL_SDATE, PSNL_EDATE, RANK() OVER (ORDER BY PRIORITY) AS RN
					  FROM (
							SELECT 1 AS PRIORITY, X.ENTER_CD, X.WORK_CLASS_CD, X.SDATE AS PSNL_SDATE, X.EDATE AS PSNL_EDATE
							  FROM TWTM022 X
							  JOIN DATES DT
								ON DT.YMD BETWEEN X.SDATE AND X.EDATE
							 WHERE X.ENTER_CD = #{ssnEnterCd}
							   AND X.SABUN = #{sabun}
							 GROUP BY X.ENTER_CD, X.WORK_CLASS_CD, X.SDATE, X.EDATE
							/* 기본근무 */
							 UNION ALL
							SELECT 2 AS PRIORITY, X.ENTER_CD, X.WORK_CLASS_CD, X.SDATE AS PSNL_SDATE, X.EDATE AS PSNL_EDATE
							  FROM TWTM021 X
							  JOIN DATES DT
								ON DT.YMD BETWEEN X.SDATE AND X.EDATE
							 WHERE X.ENTER_CD = #{ssnEnterCd}
							   AND X.WORK_CLASS_DEF_YN = 'Y'
							 GROUP BY X.ENTER_CD, X.WORK_CLASS_CD, X.SDATE, X.EDATE
						   )
				   ) B
				ON A.ENTER_CD = B.ENTER_CD
			   AND A.WORK_CLASS_CD = B.WORK_CLASS_CD
			   AND B.RN = 1
		   ]]>
		</select>

		<!-- 단위기간 전체 근무 상세 조회 -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetWorkDetailList">
			SELECT A.*
				 , B.WORK_TIME_TYPE
				 , F_COM_GET_NAMES(A.ENTER_CD, A.SABUN) AS NAME
				 , NVL(C.NOTE1, NVL(B.DEEMED_YN, 'N')) AS ADD_WORK_TIME_YN
			  FROM TWTM102 A
			  JOIN TWTM051 B
				ON A.ENTER_CD = B.ENTER_CD
			   AND A.WORK_CD = B.WORK_CD
			  LEFT JOIN TSYS005 C
				ON B.ENTER_CD = C.ENTER_CD
			   AND B.WORK_TIME_TYPE = C.CODE
			   AND C.GRCODE_CD = 'WT0511'
			 WHERE A.ENTER_CD = #{ssnEnterCd}
			   AND A.SABUN = #{sabun}
			   AND A.YMD BETWEEN #{unitSdate} AND #{unitEdate}
		</select>

		<!-- 단위기간 전체 근태 상세 조회 -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetGntDetailList">
			SELECT A.ENTER_CD
				 , A.GNT_DTL_ID
				 , A.YMD
				 , A.SABUN
				 , B.NAME
				 , A.GNT_CD
				 , A.SYMD
				 , A.SHM
				 , A.EYMD
				 , A.EHM
				 , A.MM
			  FROM TWTM103 A
			  JOIN THRM100 B
				ON A.ENTER_CD = B.ENTER_CD
			   AND A.SABUN = B.SABUN
			 WHERE A.ENTER_CD = #{ssnEnterCd}
			   AND A.SABUN = #{sabun}
			   AND A.YMD BETWEEN #{unitSdate} AND #{unitEdate}
		</select>

		<!-- 근무신청 세부내역 삭제 -->
		<delete parameterType="map" id="deleteWtmWorkAppDet">
			DELETE FROM TWTM312
			 WHERE ENTER_CD = TRIM(#{ssnEnterCd})
			   AND APPL_SEQ = TRIM(#{searchApplSeq})
		</delete>

		<!-- 근무신청 세부내역 저장 -->
		<update parameterType="map" id="saveWtmWorkAppDet1">
			 MERGE INTO TWTM311 T
			 USING
			(
				SELECT A.ENTER_CD
					 , A.APPL_SEQ
					 , A.SABUN
					 , A.WORK_CD
					 , A.WORK_REQ_REASON
				  FROM (
					   SELECT NULL AS ENTER_CD
							, NULL AS APPL_SEQ
							, NULL AS SABUN
							, NULL AS WORK_CD
							, NULL AS WORK_REQ_REASON
						 FROM DUAL
						UNION ALL
					   SELECT TRIM(#{ssnEnterCd})  					AS  ENTER_CD
							, TRIM(#{searchApplSeq})  				AS  APPL_SEQ
							, TRIM(#{searchApplSabun})				AS  SABUN
							, TRIM(#{workCd})  						AS  WORK_CD
							, TRIM(#{workReqReason})  				AS  WORK_REQ_REASON
						 FROM DUAL
				  ) A WHERE A.ENTER_CD IS NOT NULL
						AND A.APPL_SEQ IS NOT NULL
						AND A.SABUN IS NOT NULL
			) S
			ON (
					  T.ENTER_CD = S.ENTER_CD
				 AND  T.APPL_SEQ = S.APPL_SEQ
				 AND  T.SABUN    = S.SABUN
			)
			WHEN MATCHED THEN
			   UPDATE SET T.CHKDATE			= sysdate
						, T.CHKID			= #{ssnSabun}
						, T.WORK_CD 			= S.WORK_CD
						, T.WORK_REQ_REASON 	= S.WORK_REQ_REASON
			WHEN NOT MATCHED THEN
			   INSERT
			   (
						  T.ENTER_CD
						, T.APPL_SEQ
						, T.SABUN
						, T.WORK_CD
						, T.WORK_REQ_REASON
						, T.INSDATE
						, T.INSID
						, T.CHKDATE
						, T.CHKID
			   )
			   VALUES
			   (
						  S.ENTER_CD
						, S.APPL_SEQ
						, S.SABUN
						, S.WORK_CD
						, S.WORK_REQ_REASON
						, SYSDATE
						, #{ssnSabun}
					    , SYSDATE
					    , #{ssnSabun}
			   )
		</update>

		<update parameterType="list" id="saveWtmWorkAppDet2">
			MERGE INTO TWTM312 T
		 	USING (
			<foreach collection="list" item="rm" index="idx" separator=" UNION ALL ">
		       SELECT TRIM(#{rm.ssnEnterCd}) AS ENTER_CD
		            , TRIM(#{rm.applSeq}) AS APPL_SEQ
		            , TRIM(#{rm.reqType}) AS REQ_TYPE
				    , CASE
				        WHEN TRIM(#{rm.seq}) IS NULL OR TRIM(#{rm.seq}) = '0'
				            THEN (SELECT (NVL(MAX(SEQ),0) + (#{idx} + 1)) FROM TWTM302 WHERE ENTER_CD = #{rm.ssnEnterCd} AND APPL_SEQ = TRIM(#{rm.applSeq}) )
						ELSE TO_NUMBER(#{rm.seq})
				      END AS SEQ
		            , REPLACE(TRIM(#{rm.sYmd}), '-', '') AS S_YMD
		            , REPLACE(TRIM(#{rm.eYmd}), '-', '') AS E_YMD
		            , TRIM(#{rm.reqSHm}) AS REQ_S_HM
		            , TRIM(#{rm.reqEHm}) AS REQ_E_HM
		            , TRIM(#{rm.holDay}) AS HOL_DAY
		            , TRIM(#{rm.appDay}) AS APP_DAY
		            , TRIM(#{rm.requestMm}) AS REQUEST_MM
		            , TRIM(#{rm.wrkDtlId}) AS WRK_DTL_ID
		            , TRIM(#{rm.enableYn}) AS ENABLE_YN
		            , TRIM(#{rm.note}) AS NOTE
					, TRIM(#{rm.bfApplSeq}) AS BF_APPL_SEQ
					, TRIM(#{rm.bfSeq}) AS BF_SEQ
		            , SYSDATE AS CHKDATE
		            , TRIM(#{rm.ssnSabun}) AS CHKID
		        FROM DUAL
			</foreach>
			) S
			ON (
					  T.ENTER_CD = S.ENTER_CD
				 AND  T.APPL_SEQ = S.APPL_SEQ
				 AND  T.SEQ = S.SEQ
			)
			WHEN MATCHED THEN
			   UPDATE SET T.REQ_TYPE = S.REQ_TYPE
			            , T.S_YMD = S.S_YMD
						, T.E_YMD = S.E_YMD
						, T.REQ_S_HM = S.REQ_S_HM
						, T.REQ_E_HM = S.REQ_E_HM
						, T.HOL_DAY = S.HOL_DAY
						, T.APP_DAY = S.APP_DAY
						, T.REQUEST_MM = S.REQUEST_MM
						, T.WRK_DTL_ID = S.WRK_DTL_ID
						, T.ENABLE_YN = S.ENABLE_YN
						, T.NOTE = S.NOTE
						, T.BF_APPL_SEQ = S.BF_APPL_SEQ
						, T.BF_SEQ = S.BF_SEQ
			    		, T.CHKDATE	= S.CHKDATE
						, T.CHKID = S.CHKID
			WHEN NOT MATCHED THEN
			   INSERT
			   (
						  T.ENTER_CD
						, T.APPL_SEQ
						, T.SEQ
						, T.REQ_TYPE
						, T.S_YMD
						, T.E_YMD
						, T.REQ_S_HM
						, T.REQ_E_HM
						, T.HOL_DAY
						, T.APP_DAY
						, T.REQUEST_MM
						, T.WRK_DTL_ID
						, T.ENABLE_YN
						, T.NOTE
						, T.BF_APPL_SEQ
						, T.BF_SEQ
						, T.INSDATE
						, T.INSID
						, T.CHKDATE
						, T.CHKID
			   )
			   VALUES
			   (
						  S.ENTER_CD
						, S.APPL_SEQ
						, S.SEQ
						, S.REQ_TYPE
						, S.S_YMD
						, S.E_YMD
						, S.REQ_S_HM
						, S.REQ_E_HM
						, S.HOL_DAY
						, S.APP_DAY
						, S.REQUEST_MM
						, S.WRK_DTL_ID
						, S.ENABLE_YN
						, S.NOTE
						, S.BF_APPL_SEQ
						, S.BF_SEQ
						, S.CHKDATE
						, S.CHKID
						, S.CHKDATE
						, S.CHKID
			   )
		</update>

		<!-- 신청서 수정/삭제를 위한 이전 신청 정보 조회 -->
		<select parameterType="map" resultType="cMap" id="getWtmWorkAppDetInfoForUpd">
			SELECT A.WORK_CD
			  FROM TWTM311 A
			 INNER JOIN TWTM312 B
			    ON A.ENTER_CD = B.ENTER_CD
			   AND A.APPL_SEQ = B.APPL_SEQ
			 WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
			   AND A.APPL_SEQ = TRIM(#{searchApplSeq})
			   AND B.SEQ = TRIM(#{searchSeq})
		</select>
</mapper>