<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="wtm.request.wtmAttendTimeAdjAppDet">
		<!-- 조회 -->
		<select parameterType="map" resultType="cMap" id="getWtmAttendTimeAdjAppDetList">
			<![CDATA[
				SELECT A.ENTER_CD
					 , A.APPL_SEQ
					 , A.SABUN
					 , A.YMD
					 , B.SEQ
					 , B.CHG_TYPE
				     , DECODE(B.CHG_TYPE, 'D', 'Y', 'N') AS DEL_CHECK
					 , B.BF_IN_YMD
					 , B.BF_IN_HM
					 , B.BF_OUT_YMD
					 , B.BF_OUT_HM
					 , B.BF_AWAY_YN
					 , B.AF_IN_YMD
					 , B.AF_IN_HM
					 , B.AF_OUT_YMD
					 , B.AF_OUT_HM
					 , B.AF_AWAY_YN
					 , A.REASON
				  FROM TWTM321 A
				  JOIN TWTM322 B
				    ON A.ENTER_CD = B.ENTER_CD
				   AND A.APPL_SEQ = B.APPL_SEQ
				  JOIN THRI103 C
				    ON A.ENTER_CD = C.ENTER_CD
				   AND A.APPL_SEQ = C.APPL_SEQ
				 WHERE A.ENTER_CD = #{ssnEnterCd}
				   AND A.APPL_SEQ = TRIM( #{searchApplSeq} )
			]]>
		</select>

		<!-- 변경전 출퇴근 시간 조회 -->
		<select parameterType="map" resultType="cMap" id="getWtmAttendTimeAdjAppDetBfTimeList">
			SELECT ENTER_CD
			     , #{searchApplSeq} AS APPL_SEQ
				 , YMD
				 , SABUN
				 , 'K' AS CHG_TYPE
				 , IN_YMD AS BF_IN_YMD
				 , IN_HM AS BF_IN_HM
				 , OUT_YMD AS BF_OUT_YMD
				 , OUT_HM AS BF_OUT_HM
				 , AWAY_YN AS BF_AWAY_YN
				 , IN_YMD AS AF_IN_YMD
				 , IN_HM AS AF_IN_HM
				 , OUT_YMD AS AF_OUT_YMD
				 , OUT_HM AS AF_OUT_HM
				 , AWAY_YN AS AF_AWAY_YN
			  FROM TWTM110
			 WHERE ENTER_CD = #{ssnEnterCd}
			   AND SABUN = #{searchApplSabun}
			   AND YMD = REPLACE(#{tdYmd}, '-', '')
			 ORDER BY IN_YMD, IN_HM
		</select>

		<!-- 월 마감 여부 확인 -->
		<select parameterType="map" resultType="cMap" id="getWtmAttendTimeAdjAppDetEndYn">
            <![CDATA[
                SELECT NVL(MAX(END_YN), 'N') AS END_YN
                  FROM (
                        SELECT A.YM, A.SUM_YN, A.END_YN
                                 , F_CPN_GET_WORK_SYMD(A.ENTER_CD, F_COM_GET_PAY_TYPE(C.ENTER_CD, C.SABUN, C.YMD), A.YM) AS SDATE
                                 , F_CPN_GET_WORK_EYMD(A.ENTER_CD, F_COM_GET_PAY_TYPE(C.ENTER_CD, C.SABUN, C.YMD), A.YM) AS EDATE
                                 , C.YMD
                        FROM TTIM999 A, TTIM004 B, (SELECT #{ssnEnterCd} AS ENTER_CD   /*회사코드*/
                                                                                , #{searchApplSabun} AS SABUN   /*사번*/
                                                                                , REPLACE(#{tdYmd},'-', '') AS YMD     /*일자*/
                                                                     FROM DUAL) C
                        WHERE A.ENTER_CD = B.ENTER_CD
                            AND B.PAY_TYPE = F_COM_GET_PAY_TYPE(A.ENTER_CD, C.SABUN, C.YMD)
                            AND A.BUSINESS_PLACE_CD = F_COM_GET_BP_CD(A.ENTER_CD, C.SABUN, C.YMD)
                            AND A.ENTER_CD = C.ENTER_CD
                    ) WHERE YMD BETWEEN SDATE AND EDATE
            ]]>
		</select>

        <!-- 기 신청 건 체크   -->
		<select parameterType="map" resultType="cMap" id="getWtmAttendTimeAdjAppDetDupCheck">
            SELECT NVL(SUM(1),0) AS DUP_CNT
              FROM TWTM321 A, THRI103 B
             WHERE A.ENTER_CD     = #{ssnEnterCd}
               AND A.SABUN        = #{searchApplSabun}
               AND A.APPL_SEQ    != #{searchApplSeq}
               AND A.YMD          = REPLACE( #{tdYmd} ,'-','')
               AND A.ENTER_CD = B.ENTER_CD
               AND A.APPL_SEQ = B.APPL_SEQ
			   AND B.APPL_STATUS_CD IN ( '21', '31' )
		</select>

		<!-- 출퇴근시간 변경 신청 detail 삭제 -->
		<delete id="deleteWtmAttendTimeAdjAppDetMaster" parameterType="map">
			DELETE FROM TWTM321
			 WHERE ENTER_CD = #{ssnEnterCd}
			   AND APPL_SEQ = #{searchApplSeq}
		</delete>

		<!-- 출퇴근시간 변경 신청 Master 저장 -->
		<update parameterType="map" id="saveWtmAttendTimeAdjAppDetMaster">
			MERGE INTO TWTM321 T
		 	USING (
				   SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD
						, TRIM(#{searchApplSeq}) AS APPL_SEQ
						, REPLACE(TRIM(#{tdYmd}),'-','') AS YMD
						, TRIM(#{searchApplSabun}) AS SABUN
						, TRIM(#{reason}) AS REASON
					 FROM DUAL
				) S
				ON (
						  T.ENTER_CD = S.ENTER_CD
					 AND  T.APPL_SEQ = S.APPL_SEQ
				)
				WHEN MATCHED THEN
				   UPDATE SET T.CHKDATE	= SYSDATE
							, T.CHKID= #{ssnSabun}
				            , T.YMD = S.YMD
				            , T.SABUN = S.SABUN
							, T.REASON = S.REASON
				WHEN NOT MATCHED THEN
				   INSERT
				   (
							  T.ENTER_CD
							, T.APPL_SEQ
							, T.YMD
							, T.SABUN
							, T.REASON
							, T.INSDATE
							, T.INSID
							, T.CHKDATE
							, T.CHKID
				   )
				   VALUES
				   (
							  S.ENTER_CD
							, S.APPL_SEQ
							, S.YMD
							, S.SABUN
							, S.REASON
							, SYSDATE
							, #{ssnSabun}
							, SYSDATE
							, #{ssnSabun}
				   )
		</update>

		<!-- 출퇴근시간 변경 신청 detail 삭제 -->
		<delete id="deleteWtmAttendTimeAdjAppDetDetail" parameterType="map">
			DELETE FROM TWTM322
			 WHERE ENTER_CD = #{ssnEnterCd}
			   AND APPL_SEQ = #{searchApplSeq}

		</delete>

		<!-- 출퇴근시간 변경 신청 detail 저장 -->
		<update parameterType="map" id="saveWtmAttendTimeAdjAppDetDetail">
			MERGE INTO TWTM322 T
		 	USING (
			<foreach item="rm" collection="mergeRows" index="idx" separator=" UNION ALL ">
					   SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD
							, TRIM(#{rm.applSeq}) AS APPL_SEQ
							, CASE
							    WHEN TRIM(#{rm.seq}) IS NULL OR TRIM(#{rm.seq}) = '0' THEN
								  (SELECT (NVL(MAX(SEQ),0) + (#{idx} + 1)) FROM TWTM322 WHERE ENTER_CD = #{ssnEnterCd} AND APPL_SEQ = #{rm.applSeq})
							    ELSE TO_NUMBER(#{rm.seq})
							  END AS SEQ
							, TRIM(#{rm.chgType}) AS CHG_TYPE
							, TRIM(#{rm.bfInYmd}) AS BF_IN_YMD
							, TRIM(#{rm.bfInHm}) AS BF_IN_HM
							, TRIM(#{rm.bfOutYmd}) AS BF_OUT_YMD
							, TRIM(#{rm.bfOutHm}) AS BF_OUT_HM
							, TRIM(#{rm.bfAwayYn}) AS BF_AWAY_YN
							, TRIM(#{rm.afInYmd}) AS AF_IN_YMD
							, TRIM(#{rm.afInHm}) AS AF_IN_HM
							, TRIM(#{rm.afOutYmd}) AS AF_OUT_YMD
							, TRIM(#{rm.afOutHm}) AS AF_OUT_HM
							, TRIM(#{rm.afAwayYn}) AS AF_AWAY_YN
						 FROM DUAL
			</foreach>
				) S
				ON (
						  T.ENTER_CD = S.ENTER_CD
					 AND  T.APPL_SEQ = S.APPL_SEQ
					 AND  T.SEQ = S.SEQ
				)
				WHEN MATCHED THEN
				   UPDATE SET T.CHKDATE	= SYSDATE
							, T.CHKID	    = #{ssnSabun}
							, T.CHG_TYPE = S.CHG_TYPE
							, T.BF_IN_YMD = S.BF_IN_YMD
							, T.BF_IN_HM = S.BF_IN_HM
							, T.BF_OUT_YMD = S.BF_OUT_YMD
							, T.BF_OUT_HM = S.BF_OUT_HM
							, T.BF_AWAY_YN = S.BF_AWAY_YN
							, T.AF_IN_YMD = S.AF_IN_YMD
							, T.AF_IN_HM = S.AF_IN_HM
							, T.AF_OUT_YMD = S.AF_OUT_YMD
							, T.AF_OUT_HM = S.AF_OUT_HM
							, T.AF_AWAY_YN = S.AF_AWAY_YN
				WHEN NOT MATCHED THEN
				   INSERT
				   (
							  T.ENTER_CD
							, T.APPL_SEQ
							, T.SEQ
							, T.CHG_TYPE
							, T.BF_IN_YMD
							, T.BF_IN_HM
							, T.BF_OUT_YMD
							, T.BF_OUT_HM
							, T.BF_AWAY_YN
							, T.AF_IN_YMD
							, T.AF_IN_HM
							, T.AF_OUT_YMD
							, T.AF_OUT_HM
							, T.AF_AWAY_YN
							, T.INSDATE
							, T.INSID
							, T.CHKDATE
							, T.CHKID
				   )
				   VALUES
				   (
							  S.ENTER_CD
							, S.APPL_SEQ
							, S.SEQ
							, S.CHG_TYPE
							, S.BF_IN_YMD
							, S.BF_IN_HM
							, S.BF_OUT_YMD
							, S.BF_OUT_HM
							, S.BF_AWAY_YN
							, S.AF_IN_YMD
							, S.AF_IN_HM
							, S.AF_OUT_YMD
							, S.AF_OUT_HM
							, S.AF_AWAY_YN
							, SYSDATE
							, #{ssnSabun}
							, SYSDATE
							, #{ssnSabun}
				   )
		</update>
</mapper>