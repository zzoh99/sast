<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="hrm.psnalRecordUpload">

<!-- 인사기록사항관리(업로드) 조회 -->
		<select parameterType="map" resultType="cMap" id="getPsnalRecordUploadList">

				<![CDATA[
				  SELECT A.CCR_YMD
					      ,A.CCR_CD /* 구분(H90009) */
					      ,A.SEQ
					      ,A.SABUN
					      ,F_COM_GET_NAMES(B.ENTER_CD,B.SABUN) AS NAME
					      ,F_COM_GET_NAMES(B.ENTER_CD,B.SABUN,'ALIAS') AS ALIAS
					      ,F_COM_GET_ORG_NM2(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE,'YYYYMMDD'), #{ssnLocaleCd}) AS ORG_NM
					      ,A.MEMO
					      ,ADVISER AS ADVISER_SABUN
					      ,F_COM_GET_NAMES(A.ENTER_CD,A.ADVISER, #{ssnLocaleCd}) AS ADVISER
					      ,A.FILE_SEQ
					      ,TO_CHAR(A.CHKDATE, 'YYYY-MM-DD HH24:MI:SS') AS CHKDATE
					      ,F_COM_GET_NAMES(A.ENTER_CD, A.CHKID, #{ssnLocaleCd}) AS CHK_NM
					  FROM THRM185 A, THRM100 B
					 WHERE A.ENTER_CD = B.ENTER_CD
					   AND A.SABUN    = B.SABUN
					   AND A.ENTER_CD = #{ssnEnterCd}
					   AND A.CCR_CD LIKE '%' || #{searchGntCd} || '%'
					   AND A.CCR_YMD BETWEEN NVL(REPLACE(#{fromSdate},'-',''),'20000101') AND NVL(REPLACE(#{toSdate},'-',''),'99991231')
]]>
					   <if test='searchSaNm != null and !searchSaNm.equals("")'>
					       AND (B.SABUN LIKE #{searchSaNm} || '%' OR B.NAME LIKE #{searchSaNm} || '%')
					   </if>
					ORDER BY A.CCR_YMD DESC, A.CCR_CD, A.SABUN


		</select>

<!-- 인사기록사항관리(업로드) 저장 -->
		<update parameterType="map" id="savePsnalRecordUpload">

				MERGE INTO THRM185 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.SABUN
									, A.SEQ
									, A.CCR_YMD
									, A.CCR_CD
									, A.MEMO
									, A.ADVISER
									, A.FILE_SEQ
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS SABUN
											, NULL		AS SEQ
											, NULL		AS CCR_YMD
											, NULL		AS CCR_CD
											, NULL		AS MEMO
											, NULL		AS ADVISER
											, NULL		AS FILE_SEQ
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT	#{ssnEnterCd}                 AS ENTER_CD
											, TRIM( #{rm.sabun} )	    AS SABUN
										<choose><when test='rm.seq != null and !rm.seq.equals("")'>
											, TRIM(#{rm.seq}) 			AS SEQ
										</when><otherwise>
											, TO_CHAR( (
															SELECT (NVL(MAX(TO_NUMBER(SEQ)),0) + ${icnt})
															  FROM THRM185
															 WHERE ENTER_CD = TRIM( #{ssnEnterCd} )
															   AND SABUN IN TRIM( #{rm.sabun} )
														) )	AS SEQ
												<bind name="icnt" value="icnt + 1" />
										</otherwise>
										</choose>
											, TRIM( #{rm.ccrYmd} )	    AS CCR_YMD
											, TRIM( #{rm.ccrCd} )	    AS CCR_CD
											, TRIM( #{rm.memo} )	    AS MEMO
											, TRIM( #{rm.adviserSabun} )AS ADVISER
											, TRIM( #{rm.fileSeq} )     AS FILE_SEQ
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										  AND A.SABUN IS NOT NULL
										  AND A.SEQ IS NOT NULL
							) S
					ON ( T.ENTER_CD		= S.ENTER_CD
					AND  T.SABUN        = S.SABUN
					AND  T.SEQ      	= S.SEQ
					 )
					WHEN MATCHED THEN
						UPDATE SET	  T.CCR_YMD     = S.CCR_YMD
									, T.CCR_CD     	= S.CCR_CD
									, T.MEMO     	= S.MEMO
									, T.ADVISER  	= S.ADVISER
									, T.FILE_SEQ 	= S.FILE_SEQ
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.SABUN
							, T.SEQ
							, T.CCR_YMD
							, T.CCR_CD
							, T.MEMO
							, T.ADVISER
							, T.FILE_SEQ
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.SABUN
							, S.SEQ
							, S.CCR_YMD
							, S.CCR_CD
							, S.MEMO
							, S.ADVISER
							, S.FILE_SEQ
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

<!-- 인사기록사항관리(업로드) 삭제 -->
		<delete parameterType="map" id="deletePsnalRecordUpload">

					DELETE FROM THRM185
					WHERE 	(ENTER_CD,SABUN,SEQ) IN 	(  (NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
										#{ssnEnterCd}
										<if test='rm.sabun != null and !rm.sabun.equals("")'>
											,TRIM( #{rm.sabun} )
										</if>
										<if test='rm.seq != null and !rm.seq.equals("")'>
											,TRIM( #{rm.seq} )
										</if>
										)
</foreach>
										)
		</delete>

	<!-- 인사기록사항관리(업로드) 저장 -->
	<update id="thrm185Insert" parameterType="map">
		<![CDATA[
		MERGE INTO THRM185 T
			USING   (
				SELECT  TRIM(#{sabun}) AS SABUN
					 , (SELECT (NVL(MAX(TO_NUMBER(SEQ)),0)+1)
						FROM THRM185
						WHERE ENTER_CD = (#{ssnEnterCd})
						  AND SABUN = TRIM(#{sabun}) )  AS SEQ
					 , #{ccrYmd} AS CCR_YMD
					 , TRIM(#{ccrCd}) AS CCR_CD
					 , TRIM(#{fileSeq}) AS FILE_SEQ
					 , F_COM_GET_GRCODE_NAME(#{ssnEnterCd} ,'H90009', TRIM(#{ccrCd}) ) || '_' || #{ccrYmd}  AS MEMO
				FROM   DUAL
			) S
			ON (    T.ENTER_CD  = #{ssnEnterCd}
				AND T.SABUN = S.SABUN
				AND T.CCR_CD = S.CCR_CD
				AND T.CCR_YMD = S.CCR_YMD
				)
			WHEN NOT MATCHED THEN
				INSERT
					(
					 T.ENTER_CD
						, T.SABUN
						, T.SEQ
						, T.CCR_YMD
						, T.CCR_CD
						, T.MEMO
						, T.ADVISER
						, T.FILE_SEQ
						, T.CHKDATE
						, T.CHKID
						)
					VALUES
						(
						  #{ssnEnterCd}
						, S.SABUN
						, S.SEQ
						, S.CCR_YMD
						, S.CCR_CD
						, S.MEMO
						, #{ssnSabun}
						, S.FILE_SEQ
						, SYSDATE
						, #{ssnSabun}
						)
		]]>
	</update>
</mapper>