<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hrm.psnalInfo.psnalCareer">
	<!-- 인사기본(경력) 유저정보 조회 -->
	<select id="getPsnalCareerUserList" parameterType="map" resultType="cMap">
			<![CDATA[
				SELECT F_COM_GET_CAREER_CNT(A.ENTER_CD, A.SABUN, 'N', 'YYMMDD', '1', null, #{ssnLocaleCd}) AS TOT_AGREE_CNT
				     , F_COM_GET_CAREER_CNT(A.ENTER_CD, A.SABUN, 'W', 'YYMMDD', '1', null, #{ssnLocaleCd}) AS WORK_CNT
				     , F_COM_GET_CAREER_CNT(A.ENTER_CD, A.SABUN, 'Y', 'YYMMDD', '1', null, #{ssnLocaleCd}) AS ALL_CAREER_CNT
			      FROM THRM100 A
			     WHERE A.ENTER_CD = NVL(#{searchUserEnterCd}, #{ssnEnterCd})
			       AND A.SABUN = TRIM( #{sabun} )
				]]> 
	</select>

	<!-- 인사기본(경력) 경력 조회 -->
	<select id="getPsnalCareerList" parameterType="map" resultType="cMap">
		
			<![CDATA[
					SELECT A.ENTER_CD
					     , A.SABUN
					     , A.SEQ
					     , A.CMP_CD
					     , A.CMP_NM
					     , A.CMP_DIV
					     , A.SDATE
					     , A.EDATE
					     , A.JOB_CD
					     , A.JOB_NM
					     , A.JOB_NM_BEF
					     , A.BUSINESS_NM
					     , A.JIKWEE_NM
					     , A.WORK_MM
					     , A.FILE_SEQ
					     , A.DEPT_NM
					     , A.MEMO2
					     , A.AGREE_RATE
					     , A.NOTE
					     , A.CAREER_YY_CNT
					     , A.CAREER_MM_CNT
					     , A.NOTE
					     , F_COM_GET_CAREER_CNT(A.ENTER_CD, A.SABUN, 'N', 'YYMM', '1', A.SEQ,#{ssnLocaleCd}) AS AGREE_YYMM_CNT
					     , MANAGE_CD
					  FROM THRM117 A
					 WHERE A.ENTER_CD = NVL(#{searchUserEnterCd}, #{ssnEnterCd})
					   AND A.SABUN = TRIM( #{sabun} )
					 ORDER BY A.SDATE DESC
				]]>
		
		
	</select>

	<!-- 인사기본(경력) 유저정보 수정 -->
	<update id="updatePsnalCareerUser" parameterType="map">
		
			<![CDATA[
					UPDATE THRM100
					SET CAREER_YY_CNT		= TRIM( #{careerYyCnt} )
						, CAREER_MM_CNT		= TRIM( #{careerMmCnt} )
						, CHKDATE			= SYSDATE
						, CHKID				= #{ssnSabun}
					WHERE ENTER_CD = #{ssnEnterCd}
					  AND SABUN = #{sabun}
				]]>
		
		
	</update>

	<!-- 인사기본(경력) 경력 저장 -->
	<update id="savePsnalCareer" parameterType="map">

					MERGE INTO THRM117 T
					USING	(
							SELECT	  A.ENTER_CD
								 	, A.SABUN
								 	, A.SEQ
								 	, A.CMP_CD
								 	, A.CMP_NM
								 	, A.CMP_DIV
								 	, A.SDATE
								 	, A.EDATE
								 	, A.JOB_CD
								 	, A.JOB_NM
								 	, A.JOB_NM_BEF
								 	, A.BUSINESS_NM
								 	, A.JIKWEE_NM
								 	, A.FILE_SEQ
								 	, A.DEPT_NM
								    , A.MEMO2
								    , A.AGREE_RATE
								    , A.NOTE
								    , A.MANAGE_CD
								    , A.CAREER_YY_CNT
								    , A.CAREER_MM_CNT
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS SABUN
											, NULL		AS SEQ
											, NULL		AS CMP_CD
											, NULL		AS CMP_NM
											, NULL		AS CMP_DIV
											, NULL		AS SDATE
											, NULL		AS EDATE
											, NULL		AS JOB_CD
											, NULL		AS JOB_NM
											, NULL		AS JOB_NM_BEF
											, NULL		AS BUSINESS_NM
											, NULL		AS JIKWEE_NM
											, NULL		AS FILE_SEQ
											, NULL		AS DEPT_NM
											, NULL		AS MEMO2
											, NULL		AS AGREE_RATE
											, NULL		AS NOTE
											, NULL		AS MANAGE_CD
											, NULL		AS CAREER_YY_CNT
											, NULL		AS CAREER_MM_CNT
									FROM	DUAL
						<bind name="icnt" value="1"/>
       					<foreach collection='mergeRows' item='rm'>
							UNION ALL
									SELECT	TRIM( #{ssnEnterCd} )		AS ENTER_CD
											, TRIM( #{rm.sabun} )		AS SABUN
									<choose>
										<when test='rm.seq != null and !rm.seq.equals("")'>
											, TRIM( #{rm.seq} )			AS SEQ
										</when>
										<otherwise>
											, TO_CHAR( (
															SELECT (NVL(MAX(TO_NUMBER(SEQ)),0) + ${icnt})
															  FROM THRM117
															 WHERE ENTER_CD = TRIM( #{ssnEnterCd} )
															   AND SABUN = TRIM( #{rm.sabun} )
														) )	AS SEQ
											<bind name="icnt" value="icnt+1"/>
										</otherwise>
									</choose>
											, TRIM( #{rm.cmpCd} )		AS CMP_CD
											, TRIM( #{rm.cmpNm} )		AS CMP_NM
											, TRIM( #{rm.cmpDiv} )		AS CMP_DIV
											, TRIM( #{rm.sdate} )		AS SDATE
											, TRIM( #{rm.edate} )		AS EDATE
											, TRIM( #{rm.jobCd} )		AS JOB_CD
											, TRIM( #{rm.jobNm} )		AS JOB_NM
											, TRIM( #{rm.jobNmBef} )	AS JOB_NM_BEF
											, TRIM( #{rm.businessNm} )	AS BUSINESS_NM
											, TRIM( #{rm.jikweeNm} )	AS JIKWEE_NM
											, TRIM( #{rm.fileSeq} )		AS FILE_SEQ
											, TRIM( #{rm.deptNm})		AS DEPT_NM
											, TRIM( #{rm.memo2})		AS MEMO2
											, NVL(TRIM( #{rm.agreeRate}), 100)	AS AGREE_RATE
											, TRIM( #{rm.note})		    AS NOTE
											, TRIM( #{rm.manageCd})	    AS MANAGE_CD
										    , NVL( TRIM( #{rm.careerYyCnt}), F_COM_GET_AGREE_YY(TRIM( #{ssnEnterCd} ),TRIM( #{rm.sdate} ),TRIM( #{rm.edate} ), NVL(TRIM( #{rm.agreeRate}), 100))) AS CAREER_YY_CNT
										    , NVL( TRIM( #{rm.careerMmCnt}), F_COM_GET_AGREE_MM(TRIM( #{ssnEnterCd} ),TRIM( #{rm.sdate} ),TRIM( #{rm.edate} ), NVL(TRIM( #{rm.agreeRate}), 100))) AS CAREER_MM_CNT
											FROM   DUAL
		</foreach>
									) A
									WHERE A.ENTER_CD IS NOT NULL
									  AND A.SABUN IS NOT NULL
									  AND A.SEQ IS NOT NULL
							) S
					ON ( T.ENTER_CD		= S.ENTER_CD AND T.SABUN = S.SABUN AND T.SEQ = S.SEQ )
					WHEN MATCHED THEN
						UPDATE SET	  T.CMP_CD     	= S.CMP_CD
									, T.CMP_NM      = S.CMP_NM
									, T.CMP_DIV     = S.CMP_DIV
									, T.SDATE      	= S.SDATE
									, T.EDATE      	= S.EDATE
									, T.JOB_CD     	= S.JOB_CD
									, T.JOB_NM      = S.JOB_NM
									, T.JOB_NM_BEF  = S.JOB_NM_BEF
									, T.BUSINESS_NM = S.BUSINESS_NM
									, T.JIKWEE_NM   = S.JIKWEE_NM
									, T.FILE_SEQ    = S.FILE_SEQ
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
									, T.DEPT_NM     = S.DEPT_NM
								    , T.MEMO2       = S.MEMO2
								    , T.AGREE_RATE  = S.AGREE_RATE
								    , T.NOTE        = S.NOTE
								    , T.MANAGE_CD   = S.MANAGE_CD
								    , T.CAREER_YY_CNT   = S.CAREER_YY_CNT
								    , T.CAREER_MM_CNT   = S.CAREER_MM_CNT
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.SABUN
							, T.SEQ
							, T.CMP_CD
							, T.CMP_NM
							, T.CMP_DIV
							, T.SDATE
							, T.EDATE
							, T.JOB_CD
							, T.JOB_NM
							, T.JOB_NM_BEF
							, T.BUSINESS_NM
							, T.JIKWEE_NM
							, T.FILE_SEQ
							, T.CHKDATE
							, T.CHKID
							, T.DEPT_NM
						    , T.MEMO2
						    , T.AGREE_RATE
						    , T.NOTE
						    , T.MANAGE_CD
						    , T.CAREER_YY_CNT
						    , T.CAREER_MM_CNT
						)
						VALUES
						(
							  S.ENTER_CD
							, S.SABUN
							, S.SEQ
							, S.CMP_CD
							, S.CMP_NM
							, S.CMP_DIV
							, S.SDATE
							, S.EDATE
							, S.JOB_CD
							, S.JOB_NM
							, S.JOB_NM_BEF
							, S.BUSINESS_NM
							, S.JIKWEE_NM
							, S.FILE_SEQ
							, SYSDATE
							, #{ssnSabun}
							, S.DEPT_NM
							, S.MEMO2
							, S.AGREE_RATE
							, S.NOTE
							, S.MANAGE_CD
							, S.CAREER_YY_CNT
							, S.CAREER_MM_CNT
						)

	</update>

	<!-- 인사기본(경력) 경력 삭제 -->
	<delete id="deletePsnalCareer" parameterType="map" >

					DELETE FROM THRM117
					WHERE  ENTER_CD||'_'||SABUN||'_'||SEQ IN 	(  NULL
					<foreach collection="deleteRows" item="rm" >
						<if test='ssnEnterCd != null and !ssnEnterCd.equals("")
							and rm.sabun != null and !rm.sabun.equals("")
							and rm.seq != null and !rm.seq.equals("")' >
								, TRIM( #{ssnEnterCd} )||'_'||TRIM( #{rm.sabun} )||'_'||TRIM( #{rm.seq} )
						</if>
					</foreach>
										)

		
	</delete>


	<!-- ////////////////////////////////////// 임시사용 TAB ////////////////////////////////////// -->
	<!-- 인사기본(경력) 변경 조회 -->
	<select id="getPsnalCareerEditList" resultType="cMap" parameterType="map">
		
			<![CDATA[
					SELECT A.ENTER_CD
						 , A.SABUN
						 , A.SEQ
						 , A.CMP_CD
						 , A.CMP_NM
						 , A.SDATE
						 , A.EDATE
						 , A.JOB_CD
						 , A.JOB_NM
						 , A.JOB_NM_BEF
						 , A.BUSINESS_NM
						 , A.JIKWEE_NM
						 , TRUNC(MONTHS_BETWEEN(TO_DATE(NVL(A.EDATE,TO_CHAR(SYSDATE,'YYYYMMDD')),'YYYYMMDD'),A.SDATE)/12)
						 ||'년 '
						 ||CEIL(MOD(MONTHS_BETWEEN(TO_DATE(NVL(A.EDATE,TO_CHAR(SYSDATE,'YYYYMMDD')),'YYYYMMDD'), A.SDATE),12))
						 ||'개월' AS WORK_YM_CNT
						 , A.WORK_MM
						 , A.FILE_SEQ
						 , A.BIGO
					  FROM THRM117_T A
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND A.SABUN = TRIM( #{sabun} )
					ORDER BY A.SDATE DESC
				]]>
		
		
	</select>
	<!-- 인사기본(경력) 변경 저장 -->
	<update id="savePsnalCareerEdit" parameterType="map">

					MERGE INTO THRM117_T T
					USING	(
							SELECT	  A.ENTER_CD
								 	, A.SABUN
								 	, A.SEQ
								 	, A.CMP_CD
								 	, A.CMP_NM
								 	, A.SDATE
								 	, A.EDATE
								 	, A.JOB_CD
								 	, A.JOB_NM
								 	, A.JOB_NM_BEF
								 	, A.BUSINESS_NM
								 	, A.JIKWEE_NM
								 	, A.FILE_SEQ
								 	, A.BIGO
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS SABUN
											, NULL		AS SEQ
											, NULL		AS CMP_CD
											, NULL		AS CMP_NM
											, NULL		AS SDATE
											, NULL		AS EDATE
											, NULL		AS JOB_CD
											, NULL		AS JOB_NM
											, NULL		AS JOB_NM_BEF
											, NULL		AS BUSINESS_NM
											, NULL		AS JIKWEE_NM
											, NULL		AS FILE_SEQ
											, NULL		AS BIGO
									FROM	DUAL
					<bind name="icnt" value="1"/>
					<foreach collection="mergeRows" item="rm">
							UNION ALL
									SELECT	TRIM( #{ssnEnterCd} )		AS ENTER_CD
											, TRIM( #{rm.sabun} )		AS SABUN
									<choose>
										<when test='rm.seq != null and !rm.seq.equals("")'>
											, TRIM( #{rm.seq} )			AS SEQ
										</when>
										<otherwise>

											, TO_CHAR( (
															SELECT (NVL(MAX(TO_NUMBER(SEQ)),0) + ${icnt})
															  FROM THRM117_T
															 WHERE ENTER_CD = TRIM( #{ssnEnterCd} )
															   AND SABUN = TRIM( #{rm.sabun} )
														) )	AS SEQ
										<bind name="icnt" value="icnt+1"/>
										</otherwise>
									</choose>
											, TRIM( #{rm.cmpCd} )		AS CMP_CD
											, TRIM( #{rm.cmpNm} )		AS CMP_NM
											, TRIM( #{rm.sdate} )		AS SDATE
											, TRIM( #{rm.edate} )		AS EDATE
											, TRIM( #{rm.jobCd} )		AS JOB_CD
											, TRIM( #{rm.jobNm} )		AS JOB_NM
											, TRIM( #{rm.jobNmBef} )	AS JOB_NM_BEF
											, TRIM( #{rm.businessNm} )	AS BUSINESS_NM
											, TRIM( #{rm.jikweeNm} )	AS JIKWEE_NM
											, TRIM( #{rm.fileSeq} )		AS FILE_SEQ
											, TRIM( #{rm.bigo} )		AS BIGO
											FROM   DUAL
					</foreach>
									) A
									WHERE A.ENTER_CD IS NOT NULL
									  AND A.SABUN IS NOT NULL
									  AND A.SEQ IS NOT NULL
							) S
					ON ( T.ENTER_CD		= S.ENTER_CD AND T.SABUN = S.SABUN AND T.SEQ = S.SEQ )
					WHEN MATCHED THEN
						UPDATE SET	  T.CMP_CD     	= S.CMP_CD
									, T.CMP_NM      = S.CMP_NM
									, T.SDATE      	= S.SDATE
									, T.EDATE      	= S.EDATE
									, T.JOB_CD     	= S.JOB_CD
									, T.JOB_NM      = S.JOB_NM
									, T.JOB_NM_BEF  = S.JOB_NM_BEF
									, T.BUSINESS_NM = S.BUSINESS_NM
									, T.JIKWEE_NM   = S.JIKWEE_NM
									, T.FILE_SEQ    = S.FILE_SEQ
									, T.BIGO    	= S.BIGO
									, T.CHKDATE		= SYSDATE
									, T.CHKID		= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.SABUN
							, T.SEQ
							, T.CMP_CD
							, T.CMP_NM
							, T.SDATE
							, T.EDATE
							, T.JOB_CD
							, T.JOB_NM
							, T.JOB_NM_BEF
							, T.BUSINESS_NM
							, T.JIKWEE_NM
							, T.FILE_SEQ
							, T.BIGO
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.SABUN
							, S.SEQ
							, S.CMP_CD
							, S.CMP_NM
							, S.SDATE
							, S.EDATE
							, S.JOB_CD
							, S.JOB_NM
							, S.JOB_NM_BEF
							, S.BUSINESS_NM
							, S.JIKWEE_NM
							, S.FILE_SEQ
							, S.BIGO
							, SYSDATE
							, #{ssnSabun}
						)
		
		
	</update>
	<!-- 인사기본(경력) 변경 삭제 -->
	<delete id="deletePsnalCareerEdit" parameterType="map">

					DELETE FROM THRM117_T
					WHERE  ENTER_CD||'_'||SABUN||'_'||SEQ IN 	(  NULL
						<foreach collection="deleteRows" item="rm" >
							<if test='ssnEnterCd != null and !ssnEnterCd.equals("")
													and rm.sabun != null and !rm.sabun.equals("")
													and rm.seq != null and !rm.seq.equals("")' >
											, TRIM( #{ssnEnterCd} )||'_'||TRIM( #{rm.sabun} )||'_'||TRIM( #{rm.seq} )
							</if>
						</foreach>
										)
		
		
	</delete>

	<select id="getPsnalCareerYYMM" parameterType="map" resultType="cMap">
		
			<![CDATA[
					SELECT TRUNC(TOT_MM/12) AS YY
					     , TRUNC(MOD(TOT_MM, 12)) AS MM
					  FROM (
					        SELECT (NVL(YY,0)*12+NVL(MM,0))* (NVL(#{agreeRate} , 100)/100) AS TOT_MM
					          FROM (
					                SELECT TRUNC((MONTHS_BETWEEN(TO_DATE( replace( #{edate} , '-', ''), 'YYYYMMDD')+1, TO_DATE(replace( #{sdate} , '-', ''), 'YYYYMMDD')))/12) AS YY
					                     , TRUNC(MOD(MONTHS_BETWEEN(TO_DATE( replace( #{edate} , '-', ''), 'YYYYMMDD')+1, TO_DATE(replace( #{sdate} , '-', ''), 'YYYYMMDD')), 12)) AS MM
					                  FROM DUAL
					               )
					       )
				]]>
	</select>
</mapper>