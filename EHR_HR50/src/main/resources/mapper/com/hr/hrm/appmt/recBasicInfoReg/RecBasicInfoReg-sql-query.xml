<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="hrm.appmt.recBasicInfoReg">

<!-- 채용기본사항등록 조회 -->
		<select parameterType="map" resultType="cMap" id="getRecBasicInfoRegList">

				<![CDATA[
					SELECT A.ENTER_CD
						 , '3' AS IBS_IMAGE1
					     , A.RECEIVE_NO
					     , A.REG_YMD
					     , A.EMP_YMD
					     , A.GEMP_YMD
					     , A.TRA_YMD
					     , A.ORD_TYPE_CD
					     , A.ORD_DETAIL_CD
					     , A.ORD_REASON_CD
					     , A.REG_YMD AS REG_YMD2
        				 , CRYPTIT.DECRYPT(A.RES_NO, A.ENTER_CD) AS RES_NO
					     ,   SUBSTR(CRYPTIT.DECRYPT(A.RES_NO, A.ENTER_CD), 1, 7) ||
        					RPAD('*', LENGTH(CRYPTIT.DECRYPT(A.RES_NO, A.ENTER_CD)) - 7, '*') AS RES_NO2
					     , A.NAME
					     , A.NAME_CN
					     , A.NAME_US
					     , A.SEX_TYPE
					     , A.BIR_YMD
					     , A.BIR_YMD AS BIR_YMD2
					     , A.LUN_TYPE
					     , A.WED_YMD
					     , A.WED_YN
					     , A.BLOOD_CD
					     , A.REL_CD
					     , A.HOBBY
					     , A.SPECIALITY_NOTE
					     , A.FOREIGN_YN
					     , A.NATIONAL_CD
					     , A.EMP_TYPE
					     , A.STF_TYPE
					     , A.PATH_CD
					     , A.RECOM_NAME
					     , A.SABUN
					     , A.SABUN_TYPE
					     , A.SABUN_YN
					     , A.SABUN_YN AS SABUN_YN2
					     , DECODE(B.SABUN, NULL, 'N', 'Y') AS PRE_POST_YN
					     , DECODE(B.SABUN, NULL, 'N', 'Y') AS PRE_POST_YN2
					     , NVL(B.ORD_YN,'N') AS ORD_YN
					     , DECODE(NVL(B.ORD_YN, 'N'), 'N', '0', DECODE(B.ORD_YN,'Y','1','0')) AS IBS_IMAGE4
					     , B.APPLY_SEQ
					     , B.ORD_YMD
					     , NVL(B.VISUAL_YN,'Y') AS VISUAL_YN
					     , A.PROCESS_NO
					     , A.SEQ
					     , A.APPL_KEY
					     , A.MOBILE_NO
					     , A.MAIL_ADDR
					     , A.HT
						 , A.WT
					 	 , TO_CHAR(A.EYE_L, 'FM999,990.0') AS EYE_L
						 , TO_CHAR(A.EYE_R, 'FM999,990.0') AS EYE_R
						 , A.DALTONISM_CD
					     , A.BASE1_YMD
					     , A.BASE2_YMD
					     , A.BASE3_YMD
					     , A.BASE1_YN
					     , A.BASE2_YN
					     , A.BASE3_YN
					     , A.BASE1_CD
					     , A.BASE2_CD
					     , A.BASE3_CD
					     , A.BASE1_NM
					     , A.BASE2_NM
					     , A.BASE3_NM
					     , A.CAREER_YY_CNT
						 , A.CAREER_MM_CNT
						 , A.SEQ_NM
						 , A.ORD_ENTER_CD
						 , A.ORD_ENTER_SABUN
						 , NVL(A.APPR_YN,'A') AS APPR_YN
						 , A.APPL_TIME
						 , A.APPR_SABUN
						 , A.APPR_TIME
						 , A.REASON
						 , CRYPTIT.DECRYPT (A.FOREIGN_NO, A.ENTER_CD) AS FOREIGN_NO
						 , A.PSNL_EMAIL
					  FROM TSTF901 A, THRM221 B
					 WHERE A.ENTER_CD = B.ENTER_CD(+)
					   AND A.SABUN = B.SABUN(+)
					   AND A.EMP_YMD = B.ORD_YMD(+)
					   AND A.ORD_TYPE_CD = B.ORD_TYPE_CD(+)
					   AND A.ORD_DETAIL_CD = B.ORD_DETAIL_CD(+)
					   AND A.ENTER_CD = #{ssnEnterCd}
					   AND A.REG_YMD BETWEEN REPLACE(TRIM( #{regYmdFrom} ),'-','') AND REPLACE(TRIM( #{regYmdTo} ),'-','')
					           ]]>
				<if test='searchProcessNo != null and !searchProcessNo.equals("")'>
					   AND A.PROCESS_NO = #{searchProcessNo}
				</if>
				<choose><when test='searchSeqNm != null and !searchSeqNm.equals("")'>
					   AND A.SEQ = #{searchSeqNm}	-- 채용공고로 조회
				</when><otherwise>
					   AND A.SEQ IS NULL	-- 채용공고 제외 조회
				</otherwise>
				</choose>
					   AND A.NAME LIKE '%'||TRIM( #{searchName} )||'%'
				<if test='searchSabunYn != null and !searchSabunYn.equals("")'>
					   AND NVL(A.SABUN_YN, 'N') = #{searchSabunYn}
				</if>
				<if test='searchOrdYn != null and !searchOrdYn.equals("")'>
					   AND DECODE(B.SABUN, NULL, 'N', 'Y') = #{searchOrdYn}
				</if>
				<if test='searchApprYn != null and !searchApprYn.equals("")'>
					   AND NVL(A.APPR_YN,  'A') = #{searchApprYn}
				</if>
					   
					 ORDER BY NVL(A.EMP_YMD, '99991231'), A.NAME
		</select>

<!-- 채용기본사항등록(팝업) 조회 : 사용안함-->
		<select parameterType="map" resultType="cMap" id="getRecBasicInfoRegPopList">

				<![CDATA[
					SELECT A.ENTER_CD
					     , A.RECEIVE_NO
					     , A.REG_YMD
					     , CRYPTIT.DECRYPT (A.RES_NO, A.ENTER_CD) AS RES_NO
					     , A.ORD_TYPE_CD
					     , A.ORD_DETAIL_CD
					     , A.ORD_REASON_CD
					     , A.EMP_YMD
					     , A.GEMP_YMD
					     , A.TRA_YMD
					     , A.NAME
					     , A.NAME_CN
					     , A.NAME_US
					     , A.SEX_TYPE
					     , A.BIR_YMD
					     , A.LUN_TYPE
					     , A.WED_YMD
					     , A.WED_YN
					     , A.BLOOD_CD
					     , A.REL_CD
					     , A.HOBBY
					     , A.SPECIALITY_NOTE
					     , A.FOREIGN_YN
					     , A.NATIONAL_CD
					     , A.EMP_TYPE
					     , A.STF_TYPE
					     , A.PATH_CD
					     , A.RECOM_NAME
					     , A.SABUN_TYPE
					     , A.TRA_YMD
					     , A.MOBILE_NO
					     , A.MAIL_ADDR
					     , A.HT
						 , A.WT
					 	 , TO_CHAR(A.EYE_L, 'FM999,990.0') AS EYE_L
						 , TO_CHAR(A.EYE_R, 'FM999,990.0') AS EYE_R
						 , A.DALTONISM_CD
					     , A.BASE1_YMD
					     , A.BASE2_YMD
					     , A.BASE3_YMD
					     , A.BASE1_YN
					     , A.BASE2_YN
					     , A.BASE3_YN
					     , A.BASE1_CD
					     , A.BASE2_CD
					     , A.BASE3_CD
					     , A.BASE1_NM
					     , A.BASE2_NM
					     , A.BASE3_NM
					     , A.CAREER_YY_CNT
						 , A.CAREER_MM_CNT
						 , CRYPTIT.DECRYPT (A.FOREIGN_NO, A.ENTER_CD) AS FOREIGN_NO
					  FROM TSTF901 A
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND A.RECEIVE_NO = TRIM( #{receiveNo} )
				]]>


		</select>

<!-- 채용기본사항등록(합격자정보I/F 팝업) 조회 : 사용안함 -->
		<select parameterType="map" resultType="cMap" id="getRecBasicInfoRegIfPopList">

				<![CDATA[
					SELECT * 
					  FROM TSTF900 A
					 WHERE A.ENTER_CD =  #{ssnEnterCd}
					   AND A.APPL_KEY NOT IN ( SELECT APPL_KEY 
					   						     FROM TSTF901 
					   						    WHERE APPL_KEY IS NOT NULL )
   						AND A.NAME LIKE '%'|| #{searchName} ||'%'
   					  ORDER BY APPL_KEY DESC  
				]]>


		</select>

<!-- 채용기본사항등록(전환입사 발령 팝업) 조회 -->
		<select parameterType="map" resultType="cMap" id="getRecBasicInfoRegRejoinOrdPopList">

				<![CDATA[
					SELECT A.SABUN
					     , 'A' AS ORD_TYPE_CD
					     , 'A10' AS ORD_DETAIL_CD
					     , TO_CHAR(SYSDATE, 'YYYYMMDD') AS REG_YMD
					     , A.GEMP_YMD
					     , A.EMP_YMD
					     , A.RET_YMD
					     , A.NAME
					     , A.NAME_CN
					     , A.NAME_US
					     , CRYPTIT.DECRYPT(A.RES_NO, A.ENTER_CD) AS RES_NO
					     , CRYPTIT.DECRYPT(A.RES_NO, A.ENTER_CD) AS RES_NO2
					     , A.SEX_TYPE
					     , A.LUN_TYPE
					     , A.BIR_YMD AS BIRTH_YMD
					     , A.WED_YN
					     , A.WED_YMD
					     , A.BLOOD_CD
					     , A.REL_CD
					     , A.FOREIGN_YN
					     , A.NATIONAL_CD
					     , F_COM_GET_CONT_ADDRESS(A.ENTER_CD, A.SABUN, 'HP') AS MOBILE_NO
					     , F_COM_GET_CONT_ADDRESS(A.ENTER_CD, A.SABUN, 'IM') AS MAIL_ADDR
					     , A.HOBBY
					     , A.SPECIALITY_NOTE
					     , A.STF_TYPE
					     , A.EMP_TYPE
					     --, A.PATH_CD
					     , A.RECOM_NAME
					     , A.TRA_YMD
						 , A.DALTONISM_CD	--추가
					     , A.HT				--추가
					     , A.WT			--추가
					     , A.EYE_L			--추가
					     , A.EYE_R			--추가
					     , A.CAREER_YY_CNT	-- 추가
					     , A.CAREER_MM_CNT	-- 추가
					     , A.BASE1_CD	-- 추가
					     , A.BASE2_CD	-- 추가
					     , A.BASE3_CD	-- 추가
					     , A.BASE1_NM	-- 추가
					     , A.BASE2_NM	-- 추가
					     , A.BASE3_NM	-- 추가
					     , A.ENTER_CD AS ORD_ENTER_CD
					     , A.SABUN AS ORD_ENTER_SABUN
					     , '/EmpPhotoOut.do'||chr(63)||'enterCd=' || A.ENTER_CD || chr(38) || 'searchKeyword=' || A.SABUN || chr(38) || 'type=1' AS PHOTO
					  FROM THRM100 A
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					           ]]>
					   <if test='searchFromYmd != null and !searchFromYmd.equals("") and searchToYmd != null and !searchToYmd.equals("")'>
					   -- 퇴직일
					   AND A.RET_YMD BETWEEN NVL(REPLACE( #{searchFromYmd}, '-', ''), '00000101') AND NVL(REPLACE( #{searchToYmd}, '-', ''), '99991231')
					   </if>
					   <if test='searchSabunName != null and !searchSabunName.equals("")'>
					   AND ( UPPER(A.SABUN) LIKE '%'||UPPER(TRIM( #{searchSabunName} ))||'%' OR UPPER(F_COM_GET_NAMES(A.ENTER_CD, A.SABUN)) LIKE '%'||UPPER(TRIM( #{searchSabunName} ))||'%')
					   </if>
					   AND RET_YMD IS NOT NULL
					 ORDER BY A.RET_YMD DESC, F_COM_JIKJE_SORT (A.ENTER_CD, A.SABUN, A.RET_YMD)

		</select>


<!-- 채용기본사항등록(사간전입 발령 팝업) 조회 -->
		<select parameterType="map" resultType="cMap" id="getRecBasicInfoRegEnterOrdPopList">

				<![CDATA[
					SELECT A.ENTER_CD AS ORD_ENTER_CD
					     , A.SABUN AS ORD_ENTER_SABUN
					     , 'A' AS ORD_TYPE_CD
					     , 'A09' AS ORD_DETAIL_CD
					     , TO_CHAR(TO_DATE(B.ORD_YMD, 'YYYYMMDD')+1, 'YYYYMMDD') AS REG_YMD
					     , A.GEMP_YMD
					     , TO_CHAR(TO_DATE(B.ORD_YMD, 'YYYYMMDD')+1, 'YYYYMMDD') AS EMP_YMD
					     , A.RET_YMD
					     , A.NAME
					     , A.NAME_CN
					     , A.NAME_US
					     , CRYPTIT.DECRYPT(A.RES_NO, A.ENTER_CD) AS RES_NO
					     , CRYPTIT.DECRYPT(A.RES_NO, A.ENTER_CD) AS RES_NO2
					     , A.SEX_TYPE
					     , A.LUN_TYPE
					     , A.BIR_YMD AS BIRTH_YMD
					     , A.WED_YN
					     , A.WED_YMD
					     , A.BLOOD_CD
					     , A.REL_CD
					     , A.FOREIGN_YN
					     , A.NATIONAL_CD
					     , F_COM_GET_CONT_ADDRESS(A.ENTER_CD, A.SABUN, 'HP') AS MOBILE_NO
					     , F_COM_GET_CONT_ADDRESS(A.ENTER_CD, A.SABUN, 'IM') AS MAIL_ADDR
					     , A.HOBBY
					     , A.SPECIALITY_NOTE
					     , A.STF_TYPE
					     , A.EMP_TYPE
					     , A.RECOM_NAME
					     , A.TRA_YMD
						 , A.DALTONISM_CD	--추가
					     , A.HT				--추가
					     , A.WT			--추가
					     , A.EYE_L			--추가
					     , A.EYE_R			--추가
					    , '/EmpPhotoOut.do'||chr(63)||'enterCd=' || A.ENTER_CD || chr(38) || 'searchKeyword=' || A.SABUN || chr(38) || 'type=1' AS PHOTO
					  FROM THRM100 A, THRM191 B
					 WHERE A.ENTER_CD = B.ENTER_CD
					   AND A.SABUN = B.SABUN
					   AND B.ORD_TYPE_CD = 'E'
					   AND B.ORD_DETAIL_CD = 'E09'
					   AND B.ORD_ENTER_CD = #{ssnEnterCd}
					           ]]>
					   <if test='searchOrdEnterCd != null and !searchOrdEnterCd.equals("")'>
					   AND A.ENTER_CD = TRIM(#{searchOrdEnterCd}) -- 전출회사
					   </if>
					   <if test='searchFromYmd != null and !searchFromYmd.equals("") and searchToYmd != null and !searchToYmd.equals("")'>
					   -- 전출일
					   AND B.ORD_YMD BETWEEN NVL(REPLACE( #{searchFromYmd}, '-', ''), '00000101') AND NVL(REPLACE( #{searchToYmd}, '-', ''), '99991231')
					   </if>
					   <if test='searchSabunName != null and !searchSabunName.equals("")'>
					   AND ( UPPER(A.SABUN) LIKE '%'||UPPER(TRIM( #{searchSabunName} ))||'%' OR UPPER(F_COM_GET_NAMES(A.ENTER_CD, A.SABUN)) LIKE '%'||UPPER(TRIM( #{searchSabunName} ))||'%')
					   </if>
					   AND
						(B.ENTER_CD, B.SABUN) NOT IN (
							SELECT
								 X.ORD_ENTER_CD
								,X.ORD_ENTER_SABUN
							FROM TSTF901 X
							WHERE X.ENTER_CD = #{ssnEnterCd}
							 AND (X.ORD_ENTER_CD IS NOT NULL AND X.ORD_ENTER_SABUN IS NOT NULL)
						UNION ALL
							SELECT
								 X.ORD_ENTER_CD
								,X.ORD_ENTER_SABUN
							FROM THRM191 X
						   WHERE X.ENTER_CD = #{ssnEnterCd}
						     AND (X.ORD_ENTER_CD IS NOT NULL AND X.ORD_ENTER_SABUN IS NOT NULL)
						)
		</select>

<!-- 채용기본사항등록 저장 -->
		<update parameterType="map" id="saveRecBasicInfoReg">

				/* saveRecBasicInfoReg */
					MERGE INTO TSTF901 T
					USING	(
							SELECT A.ENTER_CD
								 , A.RECEIVE_NO
								 , A.REG_YMD
								 , A.ORD_TYPE_CD
								 , A.ORD_DETAIL_CD
								 , A.ORD_REASON_CD
								 , A.RES_NO
								 , A.NAME
								 , A.NAME_CN
								 , A.NAME_US
								 , A.SEX_TYPE
								 , A.BIR_YMD
								 , A.LUN_TYPE
								 , A.WED_YMD
								 , A.WED_YN
								 , A.BLOOD_CD
								 , A.REL_CD
								 , A.HOBBY
								 , A.SPECIALITY_NOTE
								 , A.FOREIGN_YN
								 , A.NATIONAL_CD
								 , A.STF_TYPE
								 , A.EMP_TYPE
								 , A.PATH_CD
					     		 , A.RECOM_NAME
								 , A.GEMP_YMD
								 , A.EMP_YMD
								 , A.TRA_YMD
								 , A.SABUN_TYPE
								 , A.SABUN_YN
								 , A.PROCESS_NO
								 , A.SABUN
								 , A.SEQ
								 , A.APPL_KEY
								 , A.MOBILE_NO
								 , A.MAIL_ADDR
							     , A.HT
								 , A.WT
							 	 , A.EYE_L
								 , A.EYE_R
								 , A.DALTONISM_CD
							     , A.BASE1_YMD
							     , A.BASE2_YMD
							     , A.BASE3_YMD
							     , A.BASE1_YN
							     , A.BASE2_YN
							     , A.BASE3_YN
							     , A.BASE1_CD
							     , A.BASE2_CD
							     , A.BASE3_CD
							     , A.BASE1_NM
							     , A.BASE2_NM
							     , A.BASE3_NM
							     , A.CAREER_YY_CNT
						 		 , A.CAREER_MM_CNT
						 		 , A.SEQ_NM
						 		 , A.ORD_ENTER_CD
						 		 , A.ORD_ENTER_SABUN
						 		 , A.APPR_YN
						 		 , A.APPL_TIME
						 		 , A.APPR_SABUN
						 		 , A.APPR_TIME
						 		 , A.REASON
						 		 , A.FOREIGN_NO
						 		 , A.PSNL_EMAIL
							FROM	(
									SELECT NULL AS ENTER_CD
										 , NULL AS RECEIVE_NO
										 , NULL AS REG_YMD
										 , NULL AS ORD_TYPE_CD
										 , NULL AS ORD_DETAIL_CD
										 , NULL AS ORD_REASON_CD
										 , NULL AS RES_NO
										 , NULL AS NAME
									     , NULL AS NAME_CN
									     , NULL AS NAME_US
									     , NULL AS SEX_TYPE
									     , NULL AS BIR_YMD
									     , NULL AS LUN_TYPE
										 , NULL AS WED_YMD
										 , NULL AS WED_YN
										 , NULL AS BLOOD_CD
										 , NULL AS REL_CD
										 , NULL AS HOBBY
										 , NULL AS SPECIALITY_NOTE
									     , NULL AS FOREIGN_YN
									     , NULL AS NATIONAL_CD
									     , NULL AS STF_TYPE
									     , NULL AS EMP_TYPE
									     , NULL AS PATH_CD
					     		 		 , NULL AS RECOM_NAME
										 , NULL AS GEMP_YMD
										 , NULL AS EMP_YMD
										 , NULL AS TRA_YMD
									     , NULL AS SABUN_TYPE
									     , NULL AS SABUN_YN
									     , NULL AS PROCESS_NO
									     , NULL AS SABUN
									     , NULL AS SEQ
									     , NULL AS APPL_KEY
									     , NULL AS MOBILE_NO
									     , NULL AS MAIL_ADDR
										 , NULL AS HT
										 , NULL AS WT
										 , NULL AS EYE_L
										 , NULL AS EYE_R
										 , NULL AS DALTONISM_CD
										 , NULL AS BASE1_YMD
										 , NULL AS BASE2_YMD
										 , NULL AS BASE3_YMD
										 , NULL AS BASE1_YN
										 , NULL AS BASE2_YN
										 , NULL AS BASE3_YN
										 , NULL AS BASE1_CD
										 , NULL AS BASE2_CD
										 , NULL AS BASE3_CD
										 , NULL AS BASE1_NM
										 , NULL AS BASE2_NM
										 , NULL AS BASE3_NM
										 , NULL AS CAREER_YY_CNT
										 , NULL AS CAREER_MM_CNT
										 , NULL AS SEQ_NM
										 , NULL AS ORD_ENTER_CD
						 		 		 , NULL AS ORD_ENTER_SABUN
						 		 		 , NULL AS APPR_YN
						 		 		 , NULL AS APPL_TIME
						 		 		 , NULL AS APPR_SABUN
						 		 		 , NULL AS APPR_TIME
						 		 		 , NULL AS REASON
						 		 		 , NULL AS FOREIGN_NO
						 		 		 , NULL AS PSNL_EMAIL
									FROM DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT TRIM( #{ssnEnterCd} )		AS  ENTER_CD,
										<choose><when test='rm.receiveNo != null and !rm.receiveNo.equals("")'>
											TRIM(#{rm.receiveNo}) 		AS RECEIVE_NO
										</when><otherwise>
											TO_CHAR( (
														SELECT (NVL(MAX(TO_NUMBER(RECEIVE_NO)),0) + ${icnt})
														  FROM TSTF901
														 WHERE ENTER_CD = #{ssnEnterCd}
													) )	AS RECEIVE_NO
											<bind name="icnt" value="icnt + 1" />
										</otherwise>
										</choose>
										 , TRIM( #{rm.regYmd})			AS  REG_YMD
										 , TRIM( #{rm.ordTypeCd} )		AS  ORD_TYPE_CD
										 , TRIM( #{rm.ordDetailCd} )	AS  ORD_DETAIL_CD
										 , TRIM( #{rm.ordReasonCd} )	AS  ORD_REASON_CD
										 , TRIM( #{rm.resNo})			AS  RES_NO
										 , TRIM( #{rm.name} )			AS  NAME
										 , TRIM( #{rm.nameCn})			AS  NAME_CN
										 , TRIM( #{rm.nameUs})			AS  NAME_US
										 , TRIM( #{rm.sexType})			AS  SEX_TYPE
										 , TRIM( #{rm.birYmd})			AS  BIR_YMD
										 , TRIM( #{rm.lunType}) 		AS  LUN_TYPE
										 , TRIM( #{rm.wedYmd})			AS  WED_YMD
										 , TRIM( #{rm.wedYn}) 			AS  WED_YN
										 , TRIM( #{rm.bloodCd}) 		AS  BLOOD_CD
										 , TRIM( #{rm.relCd}) 			AS	REL_CD
										 , TRIM( #{rm.hobby}) 			AS	HOBBY
										 , TRIM( #{rm.specialityNote}) 	AS	SPECIALITY_NOTE
										 , DECODE(TRIM( #{rm.nationalCd}), 'KR', 'N', TRIM( #{rm.foreignYn})) 		AS	FOREIGN_YN
										 , TRIM( #{rm.nationalCd}) 	AS	NATIONAL_CD
										 , TRIM( #{rm.stfType}) 		AS  STF_TYPE
										 , TRIM( #{rm.empType}) 		AS  EMP_TYPE
										 , TRIM( #{rm.pathCd}) 		AS PATH_CD
					     		 		 , TRIM( #{rm.recomName}) 		AS RECOM_NAME
										 , TRIM( #{rm.gempYmd}) 		AS  GEMP_YMD
										 , TRIM( #{rm.empYmd}) 		AS  EMP_YMD
										 , TRIM( #{rm.traYmd}) 		AS  TRA_YMD
                                         , TRIM( #{rm.sabunType}) 		AS  SABUN_TYPE
                                         , TRIM( #{rm.sabunYn}) 		AS  SABUN_YN
                                         , TRIM( #{rm.processNo} ) 		AS  PROCESS_NO
                                         , TRIM( #{rm.sabun} )          AS  SABUN
                                         , TRIM( #{rm.seq})         	AS  SEQ
                                         , TRIM( #{rm.applKey} )        AS  APPL_KEY
                                         , TRIM( #{rm.mobileNo})       AS  MOBILE_NO
                                         , TRIM( #{rm.mailAddr})       AS  MAIL_ADDR
									     , TRIM( #{rm.ht})         AS  HT
										 , TRIM( #{rm.wt})         AS  WT
									 	 , TRIM( #{rm.eyeL})          AS  EYE_L
										 , TRIM( #{rm.eyeR})		    AS  EYE_R
										 , TRIM( #{rm.daltonismCd})    AS  DALTONISM_CD
									     , TRIM( #{rm.base1Ymd})       AS  BASE1_YMD
									     , TRIM( #{rm.base2Ymd})       AS  BASE2_YMD
									     , TRIM( #{rm.base3Ymd})		AS  BASE3_YMD
										 , TRIM( #{rm.base1Yn})        AS  BASE1_YN
										 , TRIM( #{rm.base2Yn})        AS  BASE2_YN
										 , TRIM( #{rm.base3Yn})        AS  BASE3_YN
										 , TRIM( #{rm.base1Cd})        AS  BASE1_CD
										 , TRIM( #{rm.base2Cd})        AS  BASE2_CD
										 , TRIM( #{rm.base3Cd})        AS  BASE3_CD
										 , TRIM( #{rm.base1Nm})        AS  BASE1_NM
										 , TRIM( #{rm.base2Nm})        AS  BASE2_NM
										 , TRIM( #{rm.base3Nm})        AS  BASE3_NM
										 , TRIM( #{rm.careerYyCnt})	AS  CAREER_YY_CNT
										 , TRIM( #{rm.careerMmCnt})    AS  CAREER_MM_CNT
										 , TRIM( #{rm.seqNm})         	AS  SEQ_NM
										 , TRIM( #{rm.ordEnterCd}) 	AS ORD_ENTER_CD
						 		 		 , TRIM( #{rm.ordEnterSabun}) 	AS ORD_ENTER_SABUN
						 		 		 , TRIM( #{rm.apprYn}) 		AS APPR_YN
								<choose><when test='rm.apprYn != null and !rm.apprYn.equals("A")'>
						 		 		 , TRIM( #{rm.applTime})		AS APPL_TIME
								</when><otherwise>
								 		, SYSDATE						AS APPL_TIME
								</otherwise>
								</choose>
								<choose><when test='rm.apprYn != null and !rm.apprYn.equals("A")'>
									     , #{ssnSabun} 				    AS APPR_SABUN
									     , SYSDATE						AS APPR_TIME

								</when><otherwise>
									     , ''							AS APPR_SABUN
									     , ''							AS APPR_TIME
								</otherwise>
								</choose>
									     , TRIM( #{rm.reason}) 		AS REASON
									     , TRIM( #{rm.foreignNo})		AS  FOREIGN_NO
									     , TRIM( #{rm.psnlEmail})		AS  PSNL_EMAIL
									  FROM DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										  AND A.RECEIVE_NO IS NOT NULL
							) S
					ON ( T.ENTER_CD	= S.ENTER_CD AND T.RECEIVE_NO = S.RECEIVE_NO )
					WHEN MATCHED THEN
						UPDATE SET	  T.REG_YMD    	= S.REG_YMD
									, T.ORD_TYPE_CD = S.ORD_TYPE_CD
									, T.ORD_DETAIL_CD = S.ORD_DETAIL_CD
									, T.ORD_REASON_CD = S.ORD_REASON_CD
									, T.RES_NO        = CRYPTIT.ENCRYPT(S.RES_NO, S.ENTER_CD)
									, T.NAME       	= S.NAME
									, T.NAME_CN    	= S.NAME_CN
									, T.NAME_US    	= S.NAME_US
									, T.SEX_TYPE   	= S.SEX_TYPE
									, T.BIR_YMD    	= S.BIR_YMD
									, T.LUN_TYPE   	= S.LUN_TYPE
									, T.WED_YMD    	= S.WED_YMD
									, T.WED_YN     	= S.WED_YN
									, T.BLOOD_CD   	= S.BLOOD_CD
									, T.REL_CD     	= S.REL_CD
									, T.HOBBY      	= S.HOBBY
									, T.SPECIALITY_NOTE = S.SPECIALITY_NOTE
									, T.FOREIGN_YN  	= S.FOREIGN_YN
									, T.NATIONAL_CD  	= S.NATIONAL_CD
									, T.STF_TYPE   	= S.STF_TYPE
									, T.EMP_TYPE   	= S.EMP_TYPE
									, T.PATH_CD   	= S.PATH_CD
									, T.RECOM_NAME  = S.RECOM_NAME
									, T.GEMP_YMD	= S.GEMP_YMD
									, T.EMP_YMD		= S.EMP_YMD
									, T.TRA_YMD		= S.TRA_YMD
									, T.SABUN_TYPE 	= S.SABUN_TYPE
									, T.SABUN_YN	= S.SABUN_YN
									, T.PROCESS_NO	= S.PROCESS_NO
									, T.SABUN       = S.SABUN
									, T.SEQ         = S.SEQ
									, T.APPL_KEY    = S.APPL_KEY
									, T.MOBILE_NO   = S.MOBILE_NO
									, T.MAIL_ADDR   = S.MAIL_ADDR
									, T.HT		= S.HT
									, T.WT		= S.WT
									, T.EYE_L		= S.EYE_L
									, T.EYE_R		= S.EYE_R
									, T.DALTONISM_CD  = S.DALTONISM_CD
									, T.BASE1_YMD		= S.BASE1_YMD
									, T.BASE2_YMD		= S.BASE2_YMD
									, T.BASE3_YMD		= S.BASE3_YMD
									, T.BASE1_YN      = S.BASE1_YN
									, T.BASE2_YN      = S.BASE2_YN
									, T.BASE3_YN      = S.BASE3_YN
									, T.BASE1_CD      = S.BASE1_CD
									, T.BASE2_CD      = S.BASE2_CD
									, T.BASE3_CD      = S.BASE3_CD
									, T.BASE1_NM      = S.BASE1_NM
									, T.BASE2_NM      = S.BASE2_NM
									, T.BASE3_NM      = S.BASE3_NM
									, T.CAREER_YY_CNT = S.CAREER_YY_CNT
									, T.CAREER_MM_CNT = S.CAREER_MM_CNT
									, T.SEQ_NM = S.SEQ_NM
									, T.ORD_ENTER_CD = S.ORD_ENTER_CD
									, T.ORD_ENTER_SABUN = S.ORD_ENTER_SABUN
									, T.APPR_YN   	= S.APPR_YN
									, T.APPL_TIME   = S.APPL_TIME
									, T.APPR_SABUN  = S.APPR_SABUN         
									, T.APPR_TIME   = S.APPR_TIME          
									, T.REASON      = S.REASON
									, T.FOREIGN_NO        = CRYPTIT.ENCRYPT(S.FOREIGN_NO, S.ENTER_CD)		
									, T.PSNL_EMAIL      = S.PSNL_EMAIL
									, T.CHKDATE		= SYSDATE
									, T.CHKID		= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.RECEIVE_NO
							, T.REG_YMD
							, T.ORD_TYPE_CD
							, T.ORD_DETAIL_CD
							, T.ORD_REASON_CD
							, T.RES_NO
							, T.NAME
							, T.NAME_CN
							, T.NAME_US
							, T.SEX_TYPE
							, T.BIR_YMD
							, T.LUN_TYPE
							, T.WED_YMD
							, T.WED_YN
							, T.BLOOD_CD
							, T.REL_CD
							, T.HOBBY
							, T.SPECIALITY_NOTE
							, T.FOREIGN_YN
							, T.NATIONAL_CD
							, T.STF_TYPE
							, T.EMP_TYPE
							, T.PATH_CD
							, T.RECOM_NAME
							, T.GEMP_YMD
							, T.EMP_YMD
							, T.TRA_YMD
							, T.SABUN_TYPE
							, T.PROCESS_NO
							, T.SABUN
							, T.SEQ
							, T.APPL_KEY
							, T.MOBILE_NO
							, T.MAIL_ADDR
							, T.HT
							, T.WT
							, T.EYE_L
							, T.EYE_R
							, T.DALTONISM_CD
							, T.BASE1_YMD
							, T.BASE2_YMD
							, T.BASE3_YMD
							, T.BASE1_YN
							, T.BASE2_YN
							, T.BASE3_YN
							, T.BASE1_CD
							, T.BASE2_CD
							, T.BASE3_CD
							, T.BASE1_NM
							, T.BASE2_NM
							, T.BASE3_NM
							, T.CAREER_YY_CNT
						 	, T.CAREER_MM_CNT
						 	, T.SEQ_NM
						 	, T.ORD_ENTER_CD
							, T.ORD_ENTER_SABUN
							, T.APPR_YN
							, T.FOREIGN_NO
							, T.PSNL_EMAIL
							, T.APPL_TIME     
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.RECEIVE_NO
							, S.REG_YMD
							, S.ORD_TYPE_CD
							, S.ORD_DETAIL_CD
							, S.ORD_REASON_CD
							, CRYPTIT.ENCRYPT(S.RES_NO, S.ENTER_CD)
							, S.NAME
							, S.NAME_CN
							, S.NAME_US
							, S.SEX_TYPE
							, S.BIR_YMD
							, S.LUN_TYPE
							, S.WED_YMD
							, S.WED_YN
							, S.BLOOD_CD
							, S.REL_CD
							, S.HOBBY
							, S.SPECIALITY_NOTE
							, S.FOREIGN_YN
							, S.NATIONAL_CD
							, S.STF_TYPE
							, S.EMP_TYPE
							, S.PATH_CD
							, S.RECOM_NAME
							, S.GEMP_YMD
							, S.EMP_YMD
							, S.TRA_YMD
							, S.SABUN_TYPE
							, S.PROCESS_NO
							, S.SABUN
							, S.SEQ
							, S.APPL_KEY
							, S.MOBILE_NO
							, S.MAIL_ADDR
							, S.HT
							, S.WT
							, S.EYE_L
							, S.EYE_R
							, S.DALTONISM_CD
							, S.BASE1_YMD
							, S.BASE2_YMD
							, S.BASE3_YMD
							, S.BASE1_YN
							, S.BASE2_YN
							, S.BASE3_YN
							, S.BASE1_CD
							, S.BASE2_CD
							, S.BASE3_CD
							, S.BASE1_NM
							, S.BASE2_NM
							, S.BASE3_NM
							, S.CAREER_YY_CNT
						 	, S.CAREER_MM_CNT
						 	, S.SEQ_NM
						 	, S.ORD_ENTER_CD
							, S.ORD_ENTER_SABUN
							, S.APPR_YN
							, CRYPTIT.ENCRYPT(S.FOREIGN_NO, S.ENTER_CD)
							, S.PSNL_EMAIL
							, SYSDATE  
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

<!-- 채용기본사항등록 삭제 -->
		<delete parameterType="map" id="deleteRecBasicInfoReg901">

					DELETE FROM TSTF901
					 WHERE ENTER_CD||'_'||RECEIVE_NO IN 	(  NULL
<foreach item="rm" collection="deleteRows" >
						,
										<if test='ssnEnterCd != null and !ssnEnterCd.equals("")
												and rm.receiveNo != null and !rm.receiveNo.equals("")'>
											TRIM( #{ssnEnterCd} )||'_'||TRIM( #{rm.receiveNo} )
										</if>
</foreach>
										)
		</delete>


		<!-- 채용기본사항등록 삭제 -->
		<delete parameterType="map" id="deleteRecBasicInfoReg">

					DELETE FROM TSTF901
					 WHERE ENTER_CD||'_'||RECEIVE_NO IN 	(  NULL
<foreach item="rm" collection="deleteRows" >
						,
										<if test='ssnEnterCd != null and !ssnEnterCd.equals("")
												and rm.receiveNo != null and !rm.receiveNo.equals("")'>
											TRIM( #{ssnEnterCd} )||'_'||TRIM( #{rm.receiveNo} )
										</if>
</foreach>
										)

		</delete>



<!-- 채용기본사항등록(합격자정보I/F 팝업) 저장 : 사용안함 -->
		<update parameterType="map" id="saveRecBasicInfoRegIfPop">

					MERGE INTO TSTF901 T
					USING	(
							SELECT A.ENTER_CD
								 , A.RECEIVE_NO
								 , A.REG_YMD
								 , A.RES_NO
								 , A.NAME
								 , A.NAME_CN
								 , A.NAME_US
								 , A.SEX_TYPE
								 , A.BIR_YMD
								 , A.LUN_TYPE
								 , A.WED_YMD
								 , A.WED_YN
								 , A.BLOOD_CD
								 , A.REL_CD
								 , A.HOBBY
								 , A.SPECIALITY_NOTE
								 , A.MOBILE_NO
								 , A.MAIL_ADDR
								 , A.FOREIGN_YN
								 , A.NATIONAL_CD
								 , A.STF_TYPE
								 , A.EMP_TYPE
								 , A.PATH_CD
								 , A.RECOM_NAME
								 , A.SABUN_TYPE
							     , A.STAFFING_YN
							     , A.SEQ
							     , A.APPL_KEY
							FROM	(
									SELECT NULL AS ENTER_CD
										 , NULL AS RECEIVE_NO
										 , NULL AS REG_YMD
										 , NULL AS RES_NO
										 , NULL AS NAME
									     , NULL AS NAME_CN
									     , NULL AS NAME_US
									     , NULL AS SEX_TYPE
									     , NULL AS BIR_YMD
									     , NULL AS LUN_TYPE
										 , NULL AS WED_YMD
										 , NULL AS WED_YN
										 , NULL AS BLOOD_CD
										 , NULL AS REL_CD
										 , NULL AS HOBBY
										 , NULL AS SPECIALITY_NOTE
									     , NULL AS MOBILE_NO
									     , NULL AS MAIL_ADDR
									     , NULL AS FOREIGN_YN
									     , NULL AS NATIONAL_CD
									     , NULL AS STF_TYPE
									     , NULL AS EMP_TYPE
									     , NULL AS PATH_CD
								 		 , NULL AS RECOM_NAME
									     , NULL AS SABUN_TYPE
									     , NULL AS STAFFING_YN
									     , NULL AS SEQ
									     , NULL AS APPL_KEY
									FROM DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT TRIM( #{ssnEnterCd} )		AS  ENTER_CD,
										<choose><when test='rm.receiveNo != null and !rm.receiveNo.equals("")'>
											TRIM(#{rm.receiveNo}) 		AS RECEIVE_NO
										</when><otherwise>
											TO_CHAR( (
														SELECT (NVL(MAX(TO_NUMBER(RECEIVE_NO)),0) + ${icnt})
														  FROM TSTF901
														 WHERE ENTER_CD = #{ssnEnterCd}
													) )	AS RECEIVE_NO
											<bind name="icnt" value="icnt + 1" />
										</otherwise>
										</choose>
										 , TRIM( #{rm.regYmd})			AS  REG_YMD
										 , TRIM( #{rm.resNo})			AS  RES_NO
										 , TRIM( #{rm.name} )			AS  NAME
										 , TRIM( #{rm.nameCn})			AS  NAME_CN
										 , TRIM( #{rm.nameUs})			AS  NAME_US
										 , TRIM( #{rm.sexType})		AS  SEX_TYPE
										 , TRIM( #{rm.birYmd})			AS  BIR_YMD
										 , TRIM( #{rm.lunType}) 		AS  LUN_TYPE
										 , TRIM( #{rm.wedYmd})			AS  WED_YMD
										 , TRIM( #{rm.wedYn}) 			AS  WED_YN
										 , TRIM( #{rm.bloodCd}) 		AS  BLOOD_CD
										 , TRIM( #{rm.relCd}) 			AS	REL_CD
										 , TRIM( #{rm.hobby}) 			AS	HOBBY
										 , TRIM( #{rm.specialityNote}) 	AS	SPECIALITY_NOTE
										 , TRIM( #{rm.mobileNo}) 		AS	MOBILE_NO
										 , TRIM( #{rm.mailAddr}) 		AS	MAIL_ADDR
										 , TRIM( #{rm.foreignYn}) 		AS	FOREIGN_YN
										 , TRIM( #{rm.nationalCd}) 	AS	NATIONAL_CD
										 , TRIM( #{rm.stfType}) 		AS  STF_TYPE
										 , TRIM( #{rm.empType}) 		AS  EMP_TYPE
										 , TRIM( #{rm.pathCd}) 		AS PATH_CD
					     		 		 , TRIM( #{rm.recomName}) 		AS RECOM_NAME
                                         , TRIM( #{rm.sabunType}) 		AS  SABUN_TYPE
									     , TRIM( #{searchStaffingYn}) 		AS  STAFFING_YN
									     , TRIM( #{searchRecruitTitle}) 		AS  SEQ
									     , TRIM( #{rm.applKey} ) 		AS  APPL_KEY
									  FROM DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										  AND A.RECEIVE_NO IS NOT NULL
							) S
					ON ( T.ENTER_CD	= S.ENTER_CD AND T.RECEIVE_NO = S.RECEIVE_NO )
					WHEN MATCHED THEN
						UPDATE SET	  T.REG_YMD    	= S.REG_YMD
									, T.RES_NO     	= CRYPTIT.ENCRYPT( S.RES_NO,S.ENTER_CD )
									, T.NAME       	= S.NAME
									, T.NAME_CN    	= S.NAME_CN
									, T.NAME_US   	= S.NAME_US
									, T.SEX_TYPE   	= S.SEX_TYPE
									, T.BIR_YMD    	= S.BIR_YMD
									, T.LUN_TYPE   	= S.LUN_TYPE
									, T.WED_YMD    	= S.WED_YMD
									, T.WED_YN     	= S.WED_YN
									, T.BLOOD_CD   	= S.BLOOD_CD
									, T.REL_CD     	= S.REL_CD
									, T.HOBBY      	= S.HOBBY
									, T.SPECIALITY_NOTE = S.SPECIALITY_NOTE
									, T.MOBILE_NO  	= S.MOBILE_NO
									, T.MAIL_ADDR  	= S.MAIL_ADDR
									, T.FOREIGN_YN  	= S.FOREIGN_YN
									, T.NATIONAL_CD  	= S.NATIONAL_CD
									, T.STF_TYPE   	= S.STF_TYPE
									, T.EMP_TYPE   	= S.EMP_TYPE
									, T.PATH_CD   	= S.PATH_CD
									, T.RECOM_NAME  = S.RECOM_NAME
									, T.SABUN_TYPE 	= S.SABUN_TYPE
								    , T.STAFFING_YN 	= S.STAFFING_YN
								    , T.SEQ 	= S.SEQ
								    , T.APPL_KEY 	= S.APPL_KEY
									, T.CHKDATE		= SYSDATE
									, T.CHKID		= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.RECEIVE_NO
							, T.REG_YMD
							, T.RES_NO
							, T.NAME
							, T.NAME_CN
							, T.NAME_US
							, T.SEX_TYPE
							, T.BIR_YMD
							, T.LUN_TYPE
							, T.WED_YMD
							, T.WED_YN
							, T.BLOOD_CD
							, T.REL_CD
							, T.HOBBY
							, T.SPECIALITY_NOTE
							, T.MOBILE_NO
							, T.MAIL_ADDR
							, T.FOREIGN_YN
							, T.NATIONAL_CD
							, T.STF_TYPE
							, T.EMP_TYPE
							, T.PATH_CD
							, T.RECOM_NAME
							, T.SABUN_TYPE
						    , T.STAFFING_YN
						    , T.SEQ
						    , T.APPL_KEY
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.RECEIVE_NO
							, S.REG_YMD
							, CRYPTIT.ENCRYPT( S.RES_NO,S.ENTER_CD )
							, S.NAME
							, S.NAME_CN
							, S.NAME_US
							, S.SEX_TYPE
							, S.BIR_YMD
							, S.LUN_TYPE
							, S.WED_YMD
							, S.WED_YN
							, S.BLOOD_CD
							, S.REL_CD
							, S.HOBBY
							, S.SPECIALITY_NOTE
							, S.MOBILE_NO
							, S.MAIL_ADDR
							, S.FOREIGN_YN
							, S.NATIONAL_CD
							, S.STF_TYPE
							, S.EMP_TYPE
							, S.PATH_CD
							, S.RECOM_NAME
							, S.SABUN_TYPE
						    , S.STAFFING_YN
						    , S.SEQ
						    , S.APPL_KEY
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

		<!-- 사번생성/가발령(중복조회 THRM221) 조회 -->
		<select parameterType="map" resultType="cMap" id="getSabunCreAppmtCnt">

				<![CDATA[
					SELECT COUNT(SABUN) AS CNT
					FROM (
					            SELECT SABUN
					              FROM THRM100
					             WHERE ENTER_CD = #{ssnEnterCd}
					               AND SABUN = #{sabun}
					            UNION ALL
					            SELECT SABUN
					              FROM TSTF901
					             WHERE ENTER_CD = #{ssnEnterCd}
					               AND SABUN = #{sabun}
					            UNION ALL
	                            SELECT PRE_SABUN 
	                              FROM TSYS931 A
	                             WHERE A.ENTER_CD = #{ssnEnterCd}
	                               AND A.PRE_SABUN = #{sabun}
	                            UNION ALL
	                            SELECT NEW_SABUN 
	                              FROM TSYS931 A
	                             WHERE A.ENTER_CD = #{ssnEnterCd}
                                   AND NEW_SABUN = #{sabun}
					             )
				]]>


		</select>

		<!-- 사번생성 프로시저 -->
		<update parameterType="map" id="prcSabunCreAppmtSave" statementType="CALLABLE">
		<![CDATA[
			{CALL P_HRM_SABUN_CREATE(
				#{sqlCode,mode=OUT,jdbcType=VARCHAR},
				#{sqlErrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{regYmdFrom,mode=IN,jdbcType=VARCHAR},
				#{regYmdTo,mode=IN,jdbcType=VARCHAR},
				#{searchSeqNm,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

		<!-- 이메일(중복조회 V_GWIF_LEGACYUSER) 조회 -->
		<select parameterType="map" resultType="cMap" id="getEmailAppmtCnt">

				<![CDATA[
					SELECT
						COUNT(*) AS CNT
					FROM V_GWIF_LEGACYUSER
					WHERE EMAIL = #{email}
				]]>


		</select>

		<!-- 이메일(중복조회 V_GWIF_LEGACYUSER) 조회 -->
		<select parameterType="map" resultType="cMap" id="getEmailContractCnt">

				<![CDATA[
					SELECT
						COUNT(*) AS CNT
					FROM V_GWIF_LEGACYUSER
					WHERE EMAIL = #{email}
					   AND TRIM(SABUN) <> TRIM(#{sabun})
				]]>


		</select>

		<!-- 휴복직 저장 -->
		<update parameterType="map" id="saveTimeOffAppmt">

			<![CDATA[

			]]>


		</update>
		
		<!-- 파견발령 저장 -->
		<update parameterType="map" id="saveDispatchAppmt">

			<![CDATA[

			]]>


		</update>
		
		<!-- 퇴직발령 저장 -->
		<update parameterType="map" id="saveRetireAppmt">

			<![CDATA[

			]]>


		</update>
		
		<!-- 승진급대상자 저장 -->
		<update parameterType="map" id="savePromTargetAppmt">

			<![CDATA[

			]]>


		</update>
		
		<!-- 채용공고 증명사진 이관 대상 목록 조회 -->
		<select parameterType="map" resultType="cMap" id="getRecBasicInfoRegListForMovePicture">

			<![CDATA[
				SELECT ENTER_CD
				     , RECEIVE_NO
				     , SEQ
				     , TO_CHAR(APPL_KEY) AS APPL_KEY
				     , NAME
				     , SABUN
				  FROM TSTF901
				 WHERE SABUN IS NOT NULL
				   AND ENTER_CD = #{enterCd}
				   AND SEQ      = #{seq}
			]]>


		</select>
		
			<!-- 이메일 가져오기 -->
		<select parameterType="map" resultType="cMap" id="getEmailFromResNo">

				<![CDATA[
 				        
					 SELECT A.MAIL_ID AS CONT_ADDRESS     
					      FROM   
					          (  
					          SELECT  CONT_ADDRESS AS MAIL_ID   	
					                , COUNT(CONT_ADDRESS) CNT  
					            FROM THRM124   
					           WHERE (ENTER_CD,SABUN) IN (SELECT A.ENTER_CD,A.SABUN FROM THRM100 A WHERE CRYPTIT.DECRYPT(A.RES_NO, A.ENTER_CD) = #{schResNo})
					           AND CONT_TYPE = 'IM'
					            GROUP BY CONT_ADDRESS   
					            ORDER BY CNT DESC 
					           ) A  
					      WHERE A.MAIL_ID IS NOT NULL  
					        AND ROWNUM < 2  
					   ORDER BY CNT DESC  
					]]>


		</select>
				

</mapper>