<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hrm.psnalInfo.psnalWelfare">

<!-- 인사기본(병역/장애/보훈) 병력사항 조회 -->
		<select id="getPsnalWelfareArmyList" parameterType="map" resultType="cMap">

				<![CDATA[
					SELECT A.ENTER_CD
					     , A.SABUN
					     , A.TRANSFER_CD
					     , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'H20200',A.TRANSFER_CD, #{ssnLocaleCd}) AS TRANSFER_NM
					     , A.ARMY_CD
					     , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'H20230',A.ARMY_CD, #{ssnLocaleCd}) AS ARMY_NM
					     , A.ARMY_GRADE_CD
					     , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'H20220',A.ARMY_GRADE_CD, #{ssnLocaleCd}) AS ARMY_GRADE_NM
					     , A.ARMY_NO
					     , A.ARMY_D_CD
					     , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'H20210',A.ARMY_D_CD, #{ssnLocaleCd}) AS ARMY_D_NM
					     , A.ARMY_S_YMD
					     , A.ARMY_E_YMD
					     , ( CASE WHEN TRIM(ARMY_S_YMD) IS NULL OR TRIM(ARMY_E_YMD) IS NULL THEN NULL
                                  ELSE TRUNC(MONTHS_BETWEEN(NVL(TO_DATE(A.ARMY_E_YMD,'YYYYMMDD'),SYSDATE)+1,TO_DATE(A.ARMY_S_YMD,'YYYYMMDD'))/12) END ) AS ARMY_YEAR
					     , ( CASE WHEN TRIM(ARMY_S_YMD) IS NULL OR TRIM(ARMY_E_YMD) IS NULL THEN NULL
                                  ELSE TRUNC(MOD(MONTHS_BETWEEN(NVL(TO_DATE(A.ARMY_E_YMD,'YYYYMMDD'),SYSDATE)+1, TO_DATE(A.ARMY_S_YMD,'YYYYMMDD')),12)) END ) AS ARMY_MONTH
					     , A.ARMY_MEMO
					     , A.DISCHARGE_CD
					     , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'H20240',A.DISCHARGE_CD, #{ssnLocaleCd}) AS DISCHARGE_CD_NM
					     , A.ROTC_YN
					  FROM THRM121 A
					 WHERE A.ENTER_CD = NVL(#{searchUserEnterCd}, #{ssnEnterCd})
					   AND A.SABUN = #{sabun}
				]]>


		</select>

<!-- 인사기본(병역/장애/보훈) 보훈사항 조회 -->
		<select id="getPsnalWelfareBohunList" parameterType="map" resultType="cMap">

				<![CDATA[
					SELECT A.ENTER_CD
					     , A.SABUN
					     , A.BOHUN_CD
					     , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'H20310',A.BOHUN_CD, #{ssnLocaleCd}) AS BOHUN_NM
					     , A.FAM_CD
					     , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'H20120',A.FAM_CD, #{ssnLocaleCd}) AS FAM_NM
					     , A.BOHUN_NO
					     , A.NOTE
					     , A.FILE_SEQ
					     , A.BOHUN_P_NM
					     , A.EMP_ORDER_NO
					  FROM THRM122 A
					 WHERE A.ENTER_CD = NVL(#{searchUserEnterCd}, #{ssnEnterCd})
					   AND A.SABUN = #{sabun}
				]]>


		</select>

<!-- 인사기본(병역/장애/보훈) 장애사항 조회 -->
		<select id="getPsnalWelfareJangList" parameterType="map" resultType="cMap">

				<![CDATA[
					SELECT A.ENTER_CD
					     , A.SABUN
					     , A.JANG_CD
					     , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'H20320',A.JANG_CD, #{ssnLocaleCd}) AS JANG_NM
					     , A.JANG_GRADE_CD
					     , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'H20330',A.JANG_GRADE_CD, #{ssnLocaleCd}) AS JANG_GRADE_NM
					     , A.JANG_YMD
					     , A.JANG_NO
					     , A.JANG_MEMO
					     , A.FILE_SEQ
					     , A.JANG_TYPE
					     , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'H20336',A.JANG_TYPE, #{ssnLocaleCd}) AS JANG_TYPE_NM
					     , A.JANG_ORG_NM
					  FROM THRM120 A
					 WHERE A.ENTER_CD = NVL(#{searchUserEnterCd}, #{ssnEnterCd})
					   AND A.SABUN = #{sabun}
				]]>


		</select>

<!-- 인사기본(병역/장애/보훈) 병력특례사항 조회 -->
		<select id="getPsnalWelfareArmyEduList" parameterType="map" resultType="cMap">

				<![CDATA[
					SELECT A.ENTER_CD
					     , A.SABUN
					     , A.TARGET_YN
					     , A.ARMY_EDU_YN
					     , A.SDATE
					     , A.EDATE
					     , A.ARMY_EDU_SYMD
					     , A.ARMY_EDU_EYMD
					     , TRUNC(MONTHS_BETWEEN(NVL(TO_DATE(A.EDATE,'YYYYMMDD'),SYSDATE)+1,TO_DATE(A.SDATE,'YYYYMMDD'))/12) AS ARMY_EDU_YEAR
					     , TRUNC(MOD(MONTHS_BETWEEN(NVL(TO_DATE(A.EDATE,'YYYYMMDD'),SYSDATE)+1, TO_DATE(A.SDATE,'YYYYMMDD')),12)) AS ARMY_EDU_MONTH
					     , A.ARMY_EDU_NM
					  FROM THRM132 A
					 WHERE A.ENTER_CD = NVL(#{searchUserEnterCd}, #{ssnEnterCd})
					   AND A.SABUN = #{sabun}
				]]>


		</select>

<!-- 인사기본(병역/장애/보훈) 병력사항 저장 -->
		<update id="savePsnalWelfareArmy" parameterType="map">

					MERGE INTO THRM121 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.SABUN
									, A.TRANSFER_CD
									, A.ARMY_CD
									, A.ARMY_GRADE_CD
									, A.ARMY_NO
									, A.ARMY_D_CD
									, A.ARMY_S_YMD
									, A.ARMY_E_YMD
									, A.ARMY_MEMO
									, A.DISCHARGE_CD
					     			, A.ROTC_YN
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS SABUN
											, NULL		AS TRANSFER_CD
											, NULL		AS ARMY_CD
											, NULL		AS ARMY_GRADE_CD
											, NULL		AS ARMY_NO
											, NULL		AS ARMY_D_CD
											, NULL		AS ARMY_S_YMD
											, NULL		AS ARMY_E_YMD
											, NULL		AS ARMY_MEMO
											, NULL		AS DISCHARGE_CD
											, NULL		AS ROTC_YN
									FROM	DUAL
<foreach collection="mergeRows" item="rm" >
							UNION ALL
									SELECT	TRIM( #{ssnEnterCd} )		AS ENTER_CD
											, TRIM( #{rm.sabun} )		AS SABUN
											, TRIM( #{rm.transferCd} )	AS TRANSFER_CD
											, TRIM( #{rm.armyCd} )		AS ARMY_CD
											, TRIM( #{rm.armyGradeCd} )	AS ARMY_GRADE_CD
											, TRIM( #{rm.armyNo} )		AS ARMY_NO
											, TRIM( #{rm.armyDCd} )		AS ARMY_D_CD
											, TRIM( #{rm.armySYmd} )	AS ARMY_S_YMD
											, TRIM( #{rm.armyEYmd} )	AS ARMY_E_YMD
											, TRIM( #{rm.armyMemo} )	AS ARMY_MEMO
											, TRIM( #{rm.dischargeCd} )	AS DISCHARGE_CD
											, TRIM( #{rm.rotcYn} )		AS ROTC_YN
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										  AND A.SABUN IS NOT NULL
							) S
					ON ( T.ENTER_CD	= S.ENTER_CD AND T.SABUN = S.SABUN)
					WHEN MATCHED THEN
						UPDATE SET	  T.TRANSFER_CD  	= S.TRANSFER_CD
									, T.ARMY_CD      	= S.ARMY_CD
									, T.ARMY_GRADE_CD	= S.ARMY_GRADE_CD
									, T.ARMY_NO      	= S.ARMY_NO
									, T.ARMY_D_CD    	= S.ARMY_D_CD
									, T.ARMY_S_YMD      = S.ARMY_S_YMD
									, T.ARMY_E_YMD      = S.ARMY_E_YMD
									, T.ARMY_MEMO       = S.ARMY_MEMO
									, T.DISCHARGE_CD    = S.DISCHARGE_CD
									, T.ROTC_YN         = S.ROTC_YN
									, T.CHKDATE			= SYSDATE
									, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.SABUN
							, T.TRANSFER_CD
							, T.ARMY_CD
							, T.ARMY_GRADE_CD
							, T.ARMY_NO
							, T.ARMY_D_CD
							, T.ARMY_S_YMD
							, T.ARMY_E_YMD
							, T.ARMY_MEMO
							, T.DISCHARGE_CD
							, T.ROTC_YN
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.SABUN
							, S.TRANSFER_CD
							, S.ARMY_CD
							, S.ARMY_GRADE_CD
							, S.ARMY_NO
							, S.ARMY_D_CD
							, S.ARMY_S_YMD
							, S.ARMY_E_YMD
							, S.ARMY_MEMO
							, S.DISCHARGE_CD
							, S.ROTC_YN
							, SYSDATE
							, #{ssnSabun}
						)


		</update>

<!-- 인사기본(어학) 병역사항 삭제 -->
		<delete id="deletePsnalWelfareArmy" parameterType="map">

					DELETE FROM THRM121
					WHERE  ENTER_CD||'_'||SABUN IN 	(  NULL
<foreach collection="deleteRows" item="rm" >
						,
										<if test='ssnEnterCd != null and !ssnEnterCd.equals("")
										and rm.sabun != null and !rm.sabun.equals("")' >

											TRIM( #{ssnEnterCd} )||'_'||TRIM( #{rm.sabun} )
										</if>
</foreach>
										)



		</delete>

<!-- 인사기본(병역/장애/보훈) 보훈사항 저장 -->
		<update id="savePsnalWelfareBohun" parameterType="map">

					MERGE INTO THRM122 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.SABUN
									, A.BOHUN_CD
									, A.FAM_CD
									, A.BOHUN_NO
									, A.NOTE
									, A.FILE_SEQ
									, A.BOHUN_P_NM
									, A.EMP_ORDER_NO
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS SABUN
											, NULL		AS BOHUN_CD
											, NULL		AS FAM_CD
											, NULL		AS BOHUN_NO
											, NULL		AS NOTE
											, NULL		AS FILE_SEQ
											, NULL		AS BOHUN_P_NM
											, NULL		AS EMP_ORDER_NO
									FROM	DUAL
<foreach collection="mergeRows" item="rm" >
							UNION ALL
									SELECT	TRIM( #{ssnEnterCd} )		AS ENTER_CD
											, TRIM( #{rm.sabun} )		AS SABUN
											, TRIM( #{rm.bohunCd} )		AS BOHUN_CD
											, TRIM( #{rm.famCd} )		AS FAM_CD
											, TRIM( #{rm.bohunNo} )		AS BOHUN_NO
											, TRIM( #{rm.note} )	    AS NOTE
											, TRIM( #{rm.fileSeq} )	    AS FILE_SEQ
											, TRIM( #{rm.bohunPNm} )    AS BOHUN_P_NM
											, TRIM( #{rm.empOrderNo} )  AS EMP_ORDER_NO
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										  AND A.SABUN IS NOT NULL
							) S
					ON ( T.ENTER_CD	= S.ENTER_CD AND T.SABUN = S.SABUN)
					WHEN MATCHED THEN
						UPDATE SET	  T.BOHUN_CD	= S.BOHUN_CD
									, T.FAM_CD  	= S.FAM_CD
									, T.BOHUN_NO	= S.BOHUN_NO
									, T.NOTE    	= S.NOTE
									, T.FILE_SEQ    = S.FILE_SEQ
									, T.BOHUN_P_NM  = S.BOHUN_P_NM
									, T.EMP_ORDER_NO= S.EMP_ORDER_NO
									, T.CHKDATE		= SYSDATE
									, T.CHKID		= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.SABUN
							, T.BOHUN_CD
							, T.FAM_CD
							, T.BOHUN_NO
							, T.NOTE
							, T.FILE_SEQ
							, T.BOHUN_P_NM
							, T.EMP_ORDER_NO
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.SABUN
							, S.BOHUN_CD
							, S.FAM_CD
							, S.BOHUN_NO
							, S.NOTE
							, S.FILE_SEQ
							, S.BOHUN_P_NM
							, S.EMP_ORDER_NO
							, SYSDATE
							, #{ssnSabun}
						)

		</update>

<!-- 인사기본(어학) 보훈사항 삭제 -->
		<delete id="deletePsnalWelfareBohun" parameterType="map">

					DELETE FROM THRM122
					WHERE  ENTER_CD||'_'||SABUN IN 	(  NULL
<foreach collection="deleteRows" item="rm" >
						,
					<if test='ssnEnterCd != null and !ssnEnterCd.equals("")
					and rm.sabun != null and !rm.sabun.equals("") ' >

											TRIM( #{ssnEnterCd} )||'_'||TRIM( #{rm.sabun} )
					</if>
</foreach>
										)



		</delete>

<!-- 인사기본(병역/장애/보훈) 장애사항 저장 -->
		<update id="savePsnalWelfareJang"  parameterType="map">

					MERGE INTO THRM120 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.SABUN
									, A.JANG_CD
									, A.JANG_GRADE_CD
									, A.JANG_YMD
									, A.JANG_NO
									, A.JANG_MEMO
									, A.FILE_SEQ
									, A.JANG_TYPE
									, A.JANG_ORG_NM
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS SABUN
											, NULL		AS JANG_CD
											, NULL		AS JANG_GRADE_CD
											, NULL		AS JANG_YMD
											, NULL		AS JANG_NO
											, NULL		AS JANG_MEMO
											, NULL		AS FILE_SEQ
											, NULL		AS JANG_TYPE
											, NULL		AS JANG_ORG_NM
									FROM	DUAL
<foreach collection="mergeRows" item="rm" >
							UNION ALL
									SELECT	TRIM( #{ssnEnterCd} )		AS ENTER_CD
											, TRIM( #{rm.sabun} )		AS SABUN
											, TRIM( #{rm.jangCd} )		AS JANG_CD
											, TRIM( #{rm.jangGradeCd} )	AS JANG_GRADE_CD
											, TRIM( #{rm.jangYmd} )		AS JANG_YMD
											, TRIM( #{rm.jangNo} )		AS JANG_NO
											, TRIM( #{rm.jangMemo} )	AS JANG_MEMO
											, TRIM( #{rm.fileSeq} )	    AS FILE_SEQ
											, TRIM( #{rm.jangType} )    AS JANG_TYPE
											, TRIM( #{rm.jangOrgNm} )   AS JANG_ORG_NM
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										  AND A.SABUN IS NOT NULL
							) S
					ON ( T.ENTER_CD	= S.ENTER_CD AND T.SABUN = S.SABUN)
					WHEN MATCHED THEN
						UPDATE SET	  T.JANG_CD  		= S.JANG_CD
									, T.JANG_GRADE_CD	= S.JANG_GRADE_CD
									, T.JANG_YMD 		= S.JANG_YMD
									, T.JANG_NO 		= S.JANG_NO
									, T.JANG_MEMO		= S.JANG_MEMO
									, T.FILE_SEQ		= S.FILE_SEQ
									, T.JANG_TYPE  		= S.JANG_TYPE
									, T.JANG_ORG_NM		= S.JANG_ORG_NM
									, T.CHKDATE			= SYSDATE
									, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.SABUN
							, T.JANG_CD
							, T.JANG_GRADE_CD
							, T.JANG_YMD
							, T.JANG_NO
							, T.JANG_MEMO
							, T.FILE_SEQ
							, T.JANG_TYPE
							, T.JANG_ORG_NM
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.SABUN
							, S.JANG_CD
							, S.JANG_GRADE_CD
							, S.JANG_YMD
							, S.JANG_NO
							, S.JANG_MEMO
							, S.FILE_SEQ
							, S.JANG_TYPE
							, S.JANG_ORG_NM
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

<!-- 인사기본(어학) 장애사항 삭제 -->
		<delete id="deletePsnalWelfareJang" parameterType="map">

					DELETE FROM THRM120
					WHERE  ENTER_CD||'_'||SABUN IN 	(  NULL
<foreach collection="deleteRows" item="rm" >
						,
									<if test='ssnEnterCd != null and !ssnEnterCd.equals("")
									and rm.sabun != null and !rm.sabun.equals("") ' >

											TRIM( #{ssnEnterCd} )||'_'||TRIM( #{rm.sabun} )
									</if>
</foreach>
										)



		</delete>

<!-- 인사기본(병역/장애/보훈) 병력특례사항 저장 -->
		<update id="savePsnalWelfareArmyEdu" parameterType="map">

					MERGE INTO THRM132 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.SABUN
									, A.TARGET_YN
									, A.ARMY_EDU_YN
									, A.SDATE
									, A.EDATE
									, A.ARMY_EDU_SYMD
									, A.ARMY_EDU_EYMD
									, A.ARMY_EDU_NM
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS SABUN
											, NULL		AS TARGET_YN
											, NULL		AS ARMY_EDU_YN
											, NULL		AS SDATE
											, NULL		AS EDATE
											, NULL		AS ARMY_EDU_SYMD
											, NULL		AS ARMY_EDU_EYMD
											, NULL		AS ARMY_EDU_NM
									FROM	DUAL
<foreach collection="mergeRows" item="rm" >
							UNION ALL
									SELECT	TRIM( #{ssnEnterCd} )		AS ENTER_CD
											, TRIM( #{rm.sabun} )		AS SABUN
											, TRIM( #{rm.targetYn} )	AS TARGET_YN
											, TRIM( #{rm.armyEduYn} )	AS ARMY_EDU_YN
											, TRIM( #{rm.sdate} )		AS SDATE
											, TRIM( #{rm.edate} )		AS EDATE
											, TRIM( #{rm.armyEduSymd} )		AS ARMY_EDU_SYMD
											, TRIM( #{rm.armyEduEymd} )		AS ARMY_EDU_EYMD
											, TRIM( #{rm.armyEduNm} )	AS ARMY_EDU_NM
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										  AND A.SABUN IS NOT NULL
							) S
					ON ( T.ENTER_CD	= S.ENTER_CD AND T.SABUN = S.SABUN)
					WHEN MATCHED THEN
						UPDATE SET	  T.TARGET_YN  		= S.TARGET_YN
									, T.ARMY_EDU_YN		= S.ARMY_EDU_YN
									, T.SDATE      		= S.SDATE
									, T.EDATE      		= S.EDATE
									, T.ARMY_EDU_SYMD   = S.ARMY_EDU_SYMD
									, T.ARMY_EDU_EYMD   = S.ARMY_EDU_EYMD
									, T.ARMY_EDU_NM		= S.ARMY_EDU_NM
									, T.CHKDATE			= SYSDATE
									, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.SABUN
							, T.TARGET_YN
							, T.ARMY_EDU_YN
							, T.SDATE
							, T.EDATE
							, T.ARMY_EDU_SYMD
							, T.ARMY_EDU_EYMD
							, T.ARMY_EDU_NM
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.SABUN
							, S.TARGET_YN
							, S.ARMY_EDU_YN
							, S.SDATE
							, S.EDATE
							, S.ARMY_EDU_SYMD
							, S.ARMY_EDU_EYMD
							, S.ARMY_EDU_NM
							, SYSDATE
							, #{ssnSabun}
						)



		</update>

<!-- 인사기본(어학) 병역특례사항 삭제 -->
		<delete id="deletePsnalWelfareArmyEdu" parameterType="map">

					DELETE FROM THRM132
					WHERE  ENTER_CD||'_'||SABUN IN 	(  NULL
<foreach collection="deleteRows" item="rm" >
						,
	<if test='ssnEnterCd != null and !ssnEnterCd.equals("")
	and rm.sabun != null and !rm.sabun.equals("") ' >

											TRIM( #{ssnEnterCd} )||'_'||TRIM( #{rm.sabun} )
	</if>
</foreach>
										)



		</delete>
	</mapper>