<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="hrm.promotion.promTargetLstTy">

		<!-- 승진대상자명단 조회 -->
		<select parameterType="map" resultType="cMap" id="getPromTargetLstTyList">

				<![CDATA[
					SELECT	A.BASE_YMD																				
					,		A.HQ_ORG_CD																				
		           	, 		F_COM_GET_ORG_NM(A.ENTER_CD, A.HQ_ORG_CD,A.BASE_YMD)		AS HQ_ORG_NM 																				
		           	, 		A.ORG_CD																				
		           	, 		F_COM_GET_ORG_NM(A.ENTER_CD, A.ORG_CD,A.BASE_YMD) 			AS ORG_NM																				
		           	, 		A.SABUN																				
		           	, 		B.NAME																				
		           	, 		A.JIKGUB_CD																				
		           	, 		F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'H20010', A.JIKGUB_CD)	AS JIKGUB_NM
		           	, 		A.CURR_JIKGUB_YMD																				
		           	--, 		CASE WHEN B.BASE1_CD = A.JIKGUB_CD THEN  B.BASE1_NM ELSE '' END AS EMP_YEONCHA             					--입사인정																				
		           	--, 		A.JIKGUB_YEONCHA - NVL(CASE WHEN B.BASE1_CD = A.JIKGUB_CD THEN  B.BASE1_NM ELSE '' END,0) AS WORK_YEONCHA	--근속																				
		           	--, 		A.JIKGUB_YEONCHA AS TOT_YEONCHA        																		--총연차
		           	, 		A.ADD_JIKGUB_YEONCHA																
		           	, 		A.WORK_JIKGUB_YEONCHA
		           	, 		A.JIKGUB_YEONCHA
		           	, 		A.TAR_JIKGUB_CD																				
		           	, 		F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'H20010', A.TAR_JIKGUB_CD) AS TAR_JIKGUB_NM																				
		           	, 		A.ARMY_YN																				
		           	, 		C.STAY_YY																				
		           	, 		CASE WHEN C.STAY_YY = 1 THEN '수시' 																				
		                    	 WHEN A.JIKGUB_YEONCHA = C.STAY_YY THEN '적시'																				
		                     	 WHEN A.JIKGUB_YEONCHA > C.STAY_YY THEN '지체('||(A.JIKGUB_YEONCHA - C.STAY_YY ) ||'년)'																				
		                    END DELAY_GUBUN																				
		           	, 		B.BIR_YMD																				
		           	, 		F_COM_GET_AGE(B.ENTER_CD, B.BIR_YMD, B.RES_NO, TO_CHAR(SYSDATE, 'YYYYMMDD')) AS AGE																				
		           	, 		B.GEMP_YMD																				
		           	, 		B.EMP_YMD																				
		           	, 		F_COM_GET_CAREER_CNT (A.ENTER_CD,A.SABUN,'W','YYMM','1',NULL) AS WORK_PERIOD																				
			        ,       F_COM_FINAL_SCH(A.ENTER_CD, A.SABUN, '1') AS FINAL_ACA_NM  -- 최종학교																				
			        ,       F_COM_FINAL_SCH(A.ENTER_CD, A.SABUN, '2') AS FINAL_ACAMAJ_NM  -- 최종전공명																				
			        ,       CASE WHEN HANJA_FILE_SEQ IS NOT NULL THEN 'O' ELSE 'X' END AS HANJA_YN 																				
			        ,       HANJA_FILE_SEQ																				
			        ,       CASE WHEN HIST_FILE_SEQ IS NOT NULL THEN 'O'  ELSE 'X' END AS HIST_YN																				
			        ,       HIST_FILE_SEQ																				
			        ,       CASE WHEN LANG_FILE_SEQ IS NOT NULL THEN 'O'  ELSE 'X' END AS LANG_YN																				
			        ,       LANG_FILE_SEQ																				
			        ,       TRA_YN																				
			        ,       (SELECT MBO_POINT FROM TPAP555 WHERE ENTER_CD  = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-1 AND SABUN = A.SABUN) AS MBO_POINT_1																				
			        ,       (SELECT COMP_POINT FROM TPAP555 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-1 AND SABUN = A.SABUN) AS COMP_POINT_1																				
			        ,       (SELECT F_COM_GET_GRCODE_NAME(ENTER_CD, 'P00001', FINAL_CLASS_CD) FROM TPAP555 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-1 AND SABUN = A.SABUN) AS FINAL_CLASS_NM_1
			        ,       (SELECT MBO_POINT FROM TPAP555 WHERE ENTER_CD  = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-2 AND SABUN = A.SABUN) AS MBO_POINT_2
			        ,       (SELECT COMP_POINT FROM TPAP555 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-2 AND SABUN = A.SABUN) AS COMP_POINT_2
			        ,       (SELECT F_COM_GET_GRCODE_NAME(ENTER_CD, 'P00001', FINAL_CLASS_CD) FROM TPAP555 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-2 AND SABUN = A.SABUN) AS FINAL_CLASS_NM_2
			        ,       (SELECT MBO_POINT FROM TPAP555 WHERE ENTER_CD  = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-3 AND SABUN = A.SABUN) AS MBO_POINT_3
			        ,       (SELECT COMP_POINT FROM TPAP555 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-3 AND SABUN = A.SABUN) AS COMP_POINT_3
			        ,       (SELECT F_COM_GET_GRCODE_NAME(ENTER_CD, 'P00001', FINAL_CLASS_CD) FROM TPAP555 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-3 AND SABUN = A.SABUN) AS FINAL_CLASS_NM_3
			        ,       (SELECT MBO_POINT FROM TPAP555 WHERE ENTER_CD  = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-4 AND SABUN = A.SABUN) AS MBO_POINT_4
			        ,       (SELECT COMP_POINT FROM TPAP555 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-4 AND SABUN = A.SABUN) AS COMP_POINT_4
			        ,       (SELECT F_COM_GET_GRCODE_NAME(ENTER_CD, 'P00001', FINAL_CLASS_CD) FROM TPAP555 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-4 AND SABUN = A.SABUN) AS FINAL_CLASS_NM_4
			        ,       (SELECT MBO_POINT FROM TPAP555 WHERE ENTER_CD  = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-5 AND SABUN = A.SABUN) AS MBO_POINT_5
			        ,       (SELECT COMP_POINT FROM TPAP555 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-5 AND SABUN = A.SABUN) AS COMP_POINT_5
			        ,       (SELECT F_COM_GET_GRCODE_NAME(ENTER_CD, 'P00001', FINAL_CLASS_CD) FROM TPAP555 WHERE ENTER_CD = A.ENTER_CD AND APPRAISAL_YY = SUBSTR(A.BASE_YMD,1,4)-5 AND SABUN = A.SABUN) AS FINAL_CLASS_NM_5
			        ,       TARGET_YN
			        ,       (																				
		            			SELECT 	CASE WHEN COUNT(1) > 0 THEN 'Y'																				
		                        		     ELSE 'N'																				
		                         		END	ORD_YN																				
		                   		  FROM	THRM221 X																				
		                  		 WHERE 	X.ENTER_CD = A.ENTER_CD																				
		                    	   AND 	X.SABUN = A.SABUN																				
		                    	   AND 	X.ORD_YMD = A.BASE_YMD																				
		                    	   AND 	X.ORD_YN <> '4'																				
		                    	   AND 	X.ORD_TYPE_CD IN (SELECT ORD_TYPE_CD FROM TSYS011 WHERE ENTER_CD = X.ENTER_CD AND ORD_TYPE IN ('40', '41') )																				
				      		) AS ORD_YN --가발령여부																		
		            ,		NOTE																				
					FROM 	THRM465 A
					, 		THRM100 B
					, 		THRM444 C																				
				   WHERE 	A.ENTER_CD  = B.ENTER_CD																				
					 AND 	A.SABUN     = B.SABUN 																				
					 AND 	A.ENTER_CD  = C.ENTER_CD																				
					 AND 	A.JIKGUB_CD = C.BASE_JIKGUB_CD																				
					 AND 	A.ARMY_YN   = C.ARMY_YN																				
					 AND 	A.ENTER_CD  = #{ssnEnterCd}
					          ]]>
					 <if test='searchYear != null and !searchYear.equals("")'>
					 AND	A.BASE_YMD LIKE #{searchYear} || '%'
					 </if>
					 <if test='searchBaseYmd != null and !searchBaseYmd.equals("")'>
					 AND	A.BASE_YMD = TO_CHAR(TO_DATE(#{searchBaseYmd},'YYYY-MM-DD'), 'YYYYMMDD')
					 </if>
					 <if test='searchTarJikgubCd != null and !searchTarJikgubCd.equals("")'>
					 AND 	A.JIKGUB_CD = #{searchTarJikgubCd} 		-- 직급코드
					 </if>
					 <if test='searchSabunName != null and !searchSabunName.equals("")'>
					 AND	( A.SABUN LIKE #{searchSabunName} || '%' OR B.NAME LIKE #{searchSabunName} || '%')
					 </if>
			    ORDER BY F_COM_GET_GRCODE_SEQ(A.ENTER_CD, 'H20010', A.JIKGUB_CD), F_COM_JIKJE_SORT(A.ENTER_CD, A.SABUN, A.BASE_YMD)


		</select>

		<!-- 승진대상자명단 저장 -->
		<update parameterType="map" id="savePromTargetLstTy">

					MERGE INTO	THRM465 T
					USING	(
							SELECT	A.ENTER_CD
							,		A.BASE_YMD
							,		A.SABUN
							,		A.HQ_ORG_CD
							, 		A.ORG_CD
							, 		A.JIKGUB_CD
							, 		A.JIKGUB_YEONCHA -- 현직급년수					
							, 		A.ADD_JIKGUB_YEONCHA -- 가산년수
							, 		A.WORK_JIKGUB_YEONCHA -- 근속직급년수
							, 		A.TAR_JIKGUB_CD
 							, 		A.CURR_JIKGUB_YMD
							,		A.ARMY_YN
						    ,		A.HANJA_FILE_SEQ
							,		A.HIST_FILE_SEQ
							,		A.LANG_FILE_SEQ
							,		A.TRA_YN
							,		A.TARGET_YN
							,		A.NOTE
							FROM	(
									SELECT 	NULL AS ENTER_CD
									, 		NULL AS BASE_YMD
									, 		NULL AS SABUN
									, 		NULL AS HQ_ORG_CD
									,		NULL AS ORG_CD
									,		NULL AS JIKGUB_CD
									,		NULL AS JIKGUB_YEONCHA  -- 현직급년수
									, 		NULL AS ADD_JIKGUB_YEONCHA -- 가산년수
									, 		NULL AS WORK_JIKGUB_YEONCHA -- 근속직급년수
									, 		NULL AS TAR_JIKGUB_CD
									, 		NULL AS CURR_JIKGUB_YMD
									, 		NULL AS ARMY_YN
									, 		NULL AS HANJA_FILE_SEQ
									, 		NULL AS HIST_FILE_SEQ
									, 		NULL AS LANG_FILE_SEQ
									, 		NULL AS TRA_YN
									, 		NULL AS TARGET_YN
									, 		NULL AS NOTE
									FROM DUAL
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											#{ssnEnterCd}					AS	ENTER_CD
										,	TRIM(#{rm.baseYmd}		)	AS	BASE_YMD
										,	TRIM(#{rm.sabun}		)	AS	SABUN
										,	TRIM(#{rm.hqOrgCd}		)	AS	HQ_ORG_CD
										,	TRIM(#{rm.orgCd})	AS	ORG_CD
										,	TRIM(#{rm.jikgubCd})	AS	JIKGUB_CD
										,	TRIM(#{rm.jikgubYeoncha})	AS	JIKGUB_YEONCHA
										,	TRIM(#{rm.addJikgubYeoncha})	AS  ADD_JIKGUB_YEONCHA
										,	TRIM(#{rm.workJikgubYeoncha})	AS	WORK_JIKGUB_YEONCHA
										, 	TRIM(#{rm.tarJikgubCd})	AS	TAR_JIKGUB_CD
										,	TRIM(#{rm.sabun}		)	AS	CURR_JIKGUB_YMD
										,	TRIM(#{rm.armyYn})	AS	ARMY_YN
										,	TRIM(#{rm.hanjaFileSeq})	AS	HANJA_FILE_SEQ
										,	TRIM(#{rm.histFileSeq})	AS	HIST_FILE_SEQ
										,	TRIM(#{rm.langFileSeq})	AS	LANG_FILE_SEQ
										,	TRIM(#{rm.traYn})	AS	TRA_YN
										,	TRIM(#{rm.targetYn})	AS	TARGET_YN
										,	TRIM(#{rm.note}			)	AS	NOTE
									FROM	DUAL
</foreach>
									) A WHERE A.ENTER_CD		IS NOT NULL
										  AND A.BASE_YMD		IS NOT NULL
										  AND A.SABUN			IS NOT NULL
							) S
					ON (
								T.ENTER_CD		=	S.ENTER_CD
							AND	T.BASE_YMD		=	S.BASE_YMD
							AND	T.SABUN			=	S.SABUN
						)
					WHEN MATCHED THEN
						UPDATE SET	T.TAR_JIKGUB_CD   =  S.TAR_JIKGUB_CD   	
						,			T.ARMY_YN		  =  S.ARMY_YN
						, 			T.HANJA_FILE_SEQ  =	 S.HANJA_FILE_SEQ 
						, 			T.HIST_FILE_SEQ   =  S.HIST_FILE_SEQ
						, 			T.LANG_FILE_SEQ   =  S.LANG_FILE_SEQ
						, 			T.TRA_YN		  =  S.TRA_YN
						, 			T.TARGET_YN		  =  S.TARGET_YN
						, 			T.JIKGUB_YEONCHA  =  S.JIKGUB_YEONCHA
						, 			T.ADD_JIKGUB_YEONCHA  =  S.ADD_JIKGUB_YEONCHA
						, 			T.WORK_JIKGUB_YEONCHA  =  S.WORK_JIKGUB_YEONCHA
						, 			T.NOTE			  =  S.NOTE
						, 			T.CHKDATE		  =  SYSDATE
						, 			T.CHKID			  =  #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.BASE_YMD
							, T.SABUN
							, T.HQ_ORG_CD
							, T.ORG_CD
							, T.JIKGUB_CD
							, T.JIKGUB_YEONCHA -- 현직급년수
							, T.ADD_JIKGUB_YEONCHA					
							, T.WORK_JIKGUB_YEONCHA
							, T.TAR_JIKGUB_CD
 							, T.CURR_JIKGUB_YMD
							, T.ARMY_YN
							, T.HANJA_FILE_SEQ 
							, T.HIST_FILE_SEQ
							, T.LANG_FILE_SEQ
							, T.TRA_YN
							, T.TARGET_YN
							, T.NOTE
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.BASE_YMD
							, S.SABUN
							, S.HQ_ORG_CD
							, S.ORG_CD
							, S.JIKGUB_CD
							, S.JIKGUB_YEONCHA -- 현직급년수		
							, S.ADD_JIKGUB_YEONCHA					
							, S.WORK_JIKGUB_YEONCHA
							, S.TAR_JIKGUB_CD
 							, S.CURR_JIKGUB_YMD
							, S.ARMY_YN
							, S.HANJA_FILE_SEQ 
							, S.HIST_FILE_SEQ
							, S.LANG_FILE_SEQ
							, S.TRA_YN
							, S.TARGET_YN
							, S.NOTE
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

		<!-- 승진대상자명단 삭제 -->
		<delete parameterType="map" id="deletePromTargetLstTy">

					DELETE FROM THRM465
					 WHERE ENTER_CD||'_'||BASE_YMD||'_'||SABUN IN (  NULL
<foreach item="rm" collection="deleteRows" >
						,
						<if test='ssnEnterCd != null and !ssnEnterCd.equals("") and rm.baseYmd != null and !rm.baseYmd.equals("") and rm.sabun != null and !rm.sabun.equals("")'>
							TRIM( #{ssnEnterCd} )||'_'||TRIM( #{rm.baseYmd} )||'_'||TRIM( #{rm.sabun} )
						</if>
</foreach>
					 )
		</delete>

		<!-- 승진대상자명단(과거기준복사) 프로시저 -->
		<update parameterType="map" id="prchrmPrmCreate" statementType="CALLABLE">
		<![CDATA[
			{CALL P_HRM_PRM_CREATE(
				#{sqlCode,mode=OUT,jdbcType=VARCHAR},
				#{sqlErrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				REPLACE(#{baseYmd,mode=IN,jdbcType=VARCHAR}, '-', ''),
				#{tarJikgubCd,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>
		
		<!-- 가발령처리 프로시저 -->
		<update parameterType="map" id="prcHrmPrmpostCreate" statementType="CALLABLE">
		<![CDATA[
			{CALL P_HRM_PRMPOST_CREATE(
				#{sqlCode,mode=OUT,jdbcType=VARCHAR},
				#{sqlErrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				REPLACE(#{ordYmd,mode=IN,jdbcType=VARCHAR}, '-', ''),
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

</mapper>