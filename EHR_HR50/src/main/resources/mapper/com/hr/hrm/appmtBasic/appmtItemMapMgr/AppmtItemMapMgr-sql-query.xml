<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hrm.appmtBasic.appmtItemMapMgr">
	<select id="getAppmtItemMapMgrList" parameterType="map" resultType="cMap">
					SELECT ENTER_CD
					      ,POST_ITEM
					      ,POST_ITEM_NM
					      ,COLUMN_CD
					      ,CASE
					         WHEN INSTR(COLUMN_CD, 'CD') > 0 THEN
					          SUBSTR(COLUMN_CD, 1, INSTR(COLUMN_CD, '_CD') - 1)
					         ELSE
					          COLUMN_CD
					       END || '_NM' AS NM_COLUMN_CD
					      ,COLUMN_NM
					      ,LIMIT_LENGTH
					      ,C_TYPE
					      ,D_TYPE
					      ,D_CONTENT
					      ,POPUP_TYPE
					      ,READ_ONLY_YN
					      ,MERGE_YN
					      ,REL_COLUMN_CD
					      ,DATA_YN
					      ,USE_YN
					      ,SEQ
					      ,NOTE1
					      ,NOTE2
					      ,NOTE3
					      ,NOTE4
					      ,NOTE5
					      ,'CD' AS POST_ITEM_TYPE
					      ,REPLACE(POST_ITEM,'ITEM','') AS NUM
					  FROM THRM200
					 WHERE ENTER_CD = #{ssnEnterCd}
<if test='searchPostItemNm != null and searchPostItemNm neq ""'>
					   AND POST_ITEM_NM LIKE '%' || #{searchPostItemNm} || '%'
</if>
<if test='searchUseYn != null and searchUseYn neq ""'>
						AND USE_YN = #{searchUseYn}
</if>
<if test='includeNm != null and includeNm neq ""'>
					UNION ALL
					SELECT ENTER_CD
					      ,POST_ITEM||'_NM' AS POST_ITEM
					      ,POST_ITEM_NM
					      ,COLUMN_CD
					      ,CASE
					         WHEN INSTR(COLUMN_CD, 'CD') > 0 THEN
					          SUBSTR(COLUMN_CD, 1, INSTR(COLUMN_CD, '_CD') - 1)
					         ELSE
					          COLUMN_CD
					       END || '_NM' AS NM_COLUMN_CD
					      ,COLUMN_NM
					      ,LIMIT_LENGTH
					      ,C_TYPE
					      ,D_TYPE
					      ,D_CONTENT
					      ,POPUP_TYPE
					      ,READ_ONLY_YN
					      ,MERGE_YN
					      ,REL_COLUMN_CD
					      ,DATA_YN
					      ,USE_YN
					      ,SEQ+0.5 AS SEQ
					      ,NOTE1
					      ,NOTE2
					      ,NOTE3
					      ,NOTE4
					      ,NOTE5
					      ,'NM' AS POST_ITEM_TYPE
					  FROM THRM200
					 WHERE ENTER_CD = #{ssnEnterCd}
					 AND C_TYPE = 'P'
	<if test='searchPostItemNm != null and searchPostItemNm neq ""'>
					 AND POST_ITEM_NM LIKE '%' || #{searchPostItemNm} || '%'
	</if>
	<if test='searchUseYn != null and searchUseYn neq ""'>
					 AND USE_YN = #{searchUseYn}
	</if>
</if>
				<choose>
					<when test='sortYn != null and sortYn eq "N"'>

					</when>
					<otherwise>
					ORDER BY SEQ
					</otherwise>
				</choose>
			
	</select>
		<select id="saveAppmtItemMapMgr" parameterType="map" resultType="cMap">

					MERGE INTO THRM200 T
					USING (SELECT A.ENTER_CD
					             ,A.POST_ITEM
					             ,A.POST_ITEM_NM
					             ,A.COLUMN_CD
					             ,A.COLUMN_NM
					             ,A.LIMIT_LENGTH
					             ,A.C_TYPE
					             ,A.D_TYPE
					             ,A.D_CONTENT
					             ,A.POPUP_TYPE
					             ,A.READ_ONLY_YN
					             ,A.MERGE_YN
					             ,A.REL_COLUMN_CD
					             ,A.DATA_YN
					             ,A.USE_YN
					             ,A.SEQ
					             ,A.NOTE1
					             ,A.NOTE2
					             ,A.NOTE3
					             ,A.NOTE4
					             ,A.NOTE5
					         FROM (SELECT NULL AS ENTER_CD
					                     ,NULL AS POST_ITEM
					                     ,NULL AS POST_ITEM_NM
					                     ,NULL AS COLUMN_CD
					                     ,NULL AS COLUMN_NM
					                     ,NULL AS LIMIT_LENGTH
					                     ,NULL AS C_TYPE
					                     ,NULL AS D_TYPE
					                     ,NULL AS D_CONTENT
					                     ,NULL AS POPUP_TYPE
					                     ,NULL AS READ_ONLY_YN
					                     ,NULL AS MERGE_YN
					                     ,NULL AS REL_COLUMN_CD
					                     ,NULL AS DATA_YN
					                     ,NULL AS USE_YN
					                     ,NULL AS SEQ
					                     ,NULL AS NOTE1
					                     ,NULL AS NOTE2
					                     ,NULL AS NOTE3
					                     ,NULL AS NOTE4
					                     ,NULL AS NOTE5

					                 FROM DUAL
<foreach item="rm" collection="mergeRows">
									UNION ALL
									SELECT #{ssnEnterCd} AS ENTER_CD
											,TRIM(#{rm.postItem}) AS POST_ITEM
											,TRIM(#{rm.postItemNm}) AS POST_ITEM_NM
											,TRIM(#{rm.columnCd}) AS COLUMN_CD
											,TRIM(#{rm.columnNm}) AS COLUMN_NM
											,TRIM(#{rm.limitLength}) AS LIMIT_LENGTH
											,TRIM(#{rm.cType}) AS C_TYPE
											,TRIM(#{rm.dType}) AS D_TYPE
											,TRIM(#{rm.dContent}) AS D_CONTENT
											,TRIM(#{rm.popupType}) AS POPUP_TYPE
											,TRIM(#{rm.readOnlyYn}) AS READ_ONLY_YN
											,TRIM(#{rm.mergeYn}) AS MERGE_YN
											,TRIM(#{rm.relColumnCd}) AS REL_COLUMN_CD
											,TRIM(#{rm.dataYn}) AS DATA_YN
											,TRIM(#{rm.useYn}) AS USE_YN
											,TRIM(#{rm.seq}) AS SEQ
											,TRIM(#{rm.note1}) AS NOTE1
											,TRIM(#{rm.note2}) AS NOTE2
											,TRIM(#{rm.note3}) AS NOTE3
											,TRIM(#{rm.note4}) AS NOTE4
											,TRIM(#{rm.note5}) AS NOTE5
										FROM DUAL
</foreach>

					                 ) A
					        WHERE A.ENTER_CD IS NOT NULL
					          AND A.POST_ITEM IS NOT NULL) S
					ON (T.ENTER_CD = S.ENTER_CD AND T.POST_ITEM = S.POST_ITEM)
					WHEN MATCHED THEN
					  UPDATE
					     SET T.POST_ITEM_NM  = S.POST_ITEM_NM
					        ,T.COLUMN_CD     = S.COLUMN_CD
					        ,T.COLUMN_NM     = S.COLUMN_NM
					        ,T.LIMIT_LENGTH  = S.LIMIT_LENGTH
					        ,T.C_TYPE        = S.C_TYPE
					        ,T.D_TYPE        = S.D_TYPE
					        ,T.D_CONTENT     = S.D_CONTENT
					        ,T.POPUP_TYPE    = S.POPUP_TYPE
					        ,T.READ_ONLY_YN  = S.READ_ONLY_YN
					        ,T.MERGE_YN  	 = S.MERGE_YN
					        ,T.REL_COLUMN_CD = S.REL_COLUMN_CD
					        ,T.DATA_YN       = S.DATA_YN
					        ,T.USE_YN        = S.USE_YN
					        ,T.SEQ           = S.SEQ
					        ,T.NOTE1         = S.NOTE1
					        ,T.NOTE2         = S.NOTE2
					        ,T.NOTE3         = S.NOTE3
					        ,T.NOTE4         = S.NOTE4
					        ,T.NOTE5         = S.NOTE5
					        ,T.CHKDATE       = SYSDATE
					        ,T.CHKID         = #{ssnSabun}

					WHEN NOT MATCHED THEN
					  INSERT
					    (T.ENTER_CD
					    ,T.POST_ITEM
					    ,T.POST_ITEM_NM
					    ,T.COLUMN_CD
					    ,T.COLUMN_NM
					    ,T.LIMIT_LENGTH
					    ,T.C_TYPE
					    ,T.D_TYPE
					    ,T.D_CONTENT
					    ,T.POPUP_TYPE
					    ,T.READ_ONLY_YN
					    ,T.MERGE_YN
					    ,T.REL_COLUMN_CD
					    ,T.DATA_YN
					    ,T.USE_YN					    
					    ,T.SEQ
					    ,T.NOTE1
					    ,T.NOTE2
					    ,T.NOTE3
					    ,T.NOTE4
					    ,T.NOTE5
					    ,T.CHKDATE
					    ,T.CHKID)
					  VALUES
					    (S.ENTER_CD
					    ,S.POST_ITEM
					    ,S.POST_ITEM_NM
					    ,S.COLUMN_CD
					    ,S.COLUMN_NM
					    ,S.LIMIT_LENGTH
					    ,S.C_TYPE
					    ,S.D_TYPE
					    ,S.D_CONTENT
					    ,S.POPUP_TYPE
					    ,S.READ_ONLY_YN
					    ,S.MERGE_YN
					    ,S.REL_COLUMN_CD
					    ,S.DATA_YN
					    ,S.USE_YN
					    ,S.SEQ
					    ,S.NOTE1
					    ,S.NOTE2
					    ,S.NOTE3
					    ,S.NOTE4
					    ,S.NOTE5
					    ,SYSDATE
					    ,#{ssnSabun}
					     )
 
			
		</select>
		
		<delete id="deleteAppmtItemMapMgr" parameterType="map" >
			 
					DELETE FROM THRM200
					 WHERE (ENTER_CD, POST_ITEM) IN ( (NULL, NULL)
					 <foreach item='rm' collection='deleteRows'>
					 		,( TRIM( #{ssnEnterCd} ), TRIM( #{rm.postItem} ) )
					 </foreach>
					 )
			
		</delete>
</mapper>