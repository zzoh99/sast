<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hrm.psnalInfo.psnalFamily">
<!-- 인사기본(가족) 조회 -->
		<select id="getPsnalFamilyList" parameterType="map" resultType="cMap">

					SELECT A.ENTER_CD
					     , A.SABUN
					     , A.FAM_NM
					     , A.FAM_CD
						 , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'H20120', A.FAM_CD) AS FAM_CD_NM
					     , F_COM_GET_GRCODE_SEQ(A.ENTER_CD,'H20120', A.FAM_CD) AS FAM_CD_SEQ
					     , A.SDATE
					     , A.EDATE
					     , CRYPTIT.DECRYPT(A.FAMRES,A.ENTER_CD) AS FAMRES
					     , A.FAM_YMD
					     , A.LUN_TYPE
					     , A.LOCATION_GBN
					     , A.OFFICE_NM
					     , A.WORK_NM
					     , A.ACA_CD
					     , A.TEL_NO
					     , A.FAM_JIKWEE_NM
					     , A.NOTE
					     , A.DISPLAY_YN
					     , A.FAM_YN
					     , A.FILE_SEQ
					     , A.FAM_SEQ
					     , A.H_SUPPORT_YN
					     , A.SCH_YN
					     , A.STA_YMD
					     , A.END_YMD
					     , A.SEX_TYPE
					  FROM THRM111 A
					 WHERE A.ENTER_CD = NVL(#{searchUserEnterCd}, #{ssnEnterCd})
					   AND A.SABUN = #{sabun}
				<if test='displayYn and !displayYn.equals("")' >
					   AND A.DISPLAY_YN = #{displayYn}
				</if>
					 ORDER BY  FAM_CD_SEQ, A.FAM_YMD
		</select>


<!-- 인사기본(가족) 저장 -->
		<update id="savePsnalFamily" parameterType="map">

					MERGE INTO THRM111 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.SABUN
									, A.FAM_NM
									, A.FAM_CD
									, A.SDATE
									, A.FAMRES
									, A.FAM_YMD
									, A.LUN_TYPE
									, A.LOCATION_GBN
									, A.OFFICE_NM
									, A.WORK_NM
									, A.ACA_CD
									, A.TEL_NO
									, A.FAM_JIKWEE_NM
									, A.NOTE
									, A.FAM_YN
									, A.FILE_SEQ
									, A.FAM_SEQ
									, A.H_SUPPORT_YN
									, A.SCH_YN
									, A.STA_YMD
									, A.END_YMD
									, A.SEX_TYPE
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS SABUN
											, NULL		AS FAM_NM
											, NULL		AS FAM_CD
											, NULL		AS SDATE
											, NULL		AS FAMRES
											, NULL		AS FAM_YMD
											, NULL		AS LUN_TYPE
											, NULL		AS LOCATION_GBN
											, NULL		AS OFFICE_NM
											, NULL		AS WORK_NM
											, NULL		AS ACA_CD
											, NULL		AS TEL_NO
											, NULL		AS FAM_JIKWEE_NM
											, NULL		AS NOTE
											, NULL		AS FAM_YN
											, NULL		AS FILE_SEQ
											, NULL		AS FAM_SEQ
											, NULL		AS H_SUPPORT_YN
											, NULL		AS SCH_YN
											, NULL		AS STA_YMD
											, NULL		AS END_YMD
											, NULL		AS SEX_TYPE
									FROM	DUAL

<foreach collection="mergeRows" item="rm" index="cnt">
							UNION ALL
									SELECT	TRIM( #{ssnEnterCd} )		AS ENTER_CD
											, TRIM( #{rm.sabun} )		AS SABUN
											, TRIM( #{rm.famNm} )		AS FAM_NM
											, TRIM( #{rm.famCd} )		AS FAM_CD
											, TRIM( #{rm.sdate} )		AS SDATE
											, TRIM( #{rm.famres} )		AS FAMRES
											, TRIM( #{rm.famYmd} )		AS FAM_YMD
											, TRIM( #{rm.lunType} )		AS LUN_TYPE
											, TRIM( #{rm.locationGbn} )	AS LOCATION_GBN
											, TRIM( #{rm.officeNm} )	AS OFFICE_NM
											, TRIM( #{rm.workNm} )		AS WORK_NM
											, TRIM( #{rm.acaCd} )		AS ACA_CD
											, TRIM( #{rm.telNo} )		AS TEL_NO
											, TRIM( #{rm.famJikweeNm} )	AS FAM_JIKWEE_NM
											, TRIM( #{rm.note} )		AS NOTE
											, TRIM( #{rm.famYn} )		AS FAM_YN
											, TRIM( #{rm.fileSeq} )		AS FILE_SEQ
											, CASE WHEN TRIM( #{rm.famSeq} ) IS NULL OR TRIM( #{rm.famSeq} ) = '0' THEN
											            (SELECT (NVL(MAX(FAM_SEQ), 0) + #{cnt} + 1 ) FROM THRM111 WHERE ENTER_CD = #{ssnEnterCd} AND SABUN = TRIM( #{rm.sabun} ))
											       ELSE TO_NUMBER(#{rm.famSeq}) END FAM_SEQ
											, TRIM( #{rm.hSupportYn} )	AS H_SUPPORT_YN
											, TRIM( #{rm.schYn} )	AS SCH_YN
											, TRIM( #{rm.staYmd} )	AS STA_YMD
											, TRIM( #{rm.endYmd} )	AS END_YMD
											, TRIM( #{rm.sexType} )  AS SEX_TYPE
									FROM DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										  AND A.SABUN IS NOT NULL
										  AND A.FAM_NM IS NOT NULL
										  AND A.FAM_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD	= S.ENTER_CD AND T.SABUN = S.SABUN AND T.FAM_NM = S.FAM_NM AND T.FAM_CD = S.FAM_CD AND T.SDATE = S.SDATE)
					WHEN MATCHED THEN
						UPDATE SET	  T.FAMRES			= CRYPTIT.ENCRYPT(S.FAMRES, S.ENTER_CD)
									, T.FAM_YMD			= S.FAM_YMD
									, T.LUN_TYPE		= S.LUN_TYPE
									, T.LOCATION_GBN	= S.LOCATION_GBN
									, T.OFFICE_NM		= S.OFFICE_NM
									, T.WORK_NM			= S.WORK_NM
									, T.ACA_CD			= S.ACA_CD
									, T.TEL_NO			= S.TEL_NO
									, T.FAM_JIKWEE_NM	= S.FAM_JIKWEE_NM
									, T.NOTE			= S.NOTE
									, T.FAM_YN			= S.FAM_YN
									, T.FILE_SEQ        = S.FILE_SEQ
									, T.FAM_SEQ         = S.FAM_SEQ
									, T.H_SUPPORT_YN    = S.H_SUPPORT_YN
									, T.SCH_YN          = S.SCH_YN
									, T.STA_YMD         = S.STA_YMD
									, T.END_YMD         = S.END_YMD
									, T.SEX_TYPE        = S.SEX_TYPE
									, T.CHKDATE			= SYSDATE
									, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.SABUN
							, T.FAM_NM
							, T.FAM_CD
							, T.SDATE
							, T.FAMRES
							, T.FAM_YMD
							, T.LUN_TYPE
							, T.LOCATION_GBN
							, T.OFFICE_NM
							, T.WORK_NM
							, T.ACA_CD
							, T.TEL_NO
							, T.FAM_JIKWEE_NM
							, T.NOTE
							, T.FAM_YN
							, T.FILE_SEQ
							, T.FAM_SEQ
							, T.H_SUPPORT_YN
							, T.SCH_YN
							, T.STA_YMD
							, T.END_YMD
							, T.SEX_TYPE
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.SABUN
							, S.FAM_NM
							, S.FAM_CD
							, '19000101'
							, CRYPTIT.ENCRYPT(S.FAMRES, S.ENTER_CD)
							, S.FAM_YMD
							, S.LUN_TYPE
							, S.LOCATION_GBN
							, S.OFFICE_NM
							, S.WORK_NM
							, S.ACA_CD
							, S.TEL_NO
							, S.FAM_JIKWEE_NM
							, S.NOTE
							, S.FAM_YN
							, S.FILE_SEQ
							, S.FAM_SEQ
							, S.H_SUPPORT_YN
							, S.SCH_YN
							, S.STA_YMD
							, S.END_YMD
							, S.SEX_TYPE
							, SYSDATE
							, #{ssnSabun}
						)

		</update>

<!-- 인사기본(가족) 삭제 -->
		<delete id="deletePsnalFamily" parameterType="map">

					DELETE FROM THRM111
					WHERE  ENTER_CD||'_'||SABUN||'_'||FAM_NM||'_'||FAM_CD||'_'||SDATE IN 	(  NULL
<foreach collection="deleteRows" item="rm" >
										<if test='ssnEnterCd != null and !ssnEnterCd.equals("")
											and rm.sabun != null and !rm.sabun.equals("")
											and rm.famNm != null and !rm.famNm.equals("")
											and rm.famCd != null and !rm.famCd.equals("")
											and rm.sdate != null and !rm.sdate.equals("")' >

											, TRIM( #{ssnEnterCd} )||'_'||TRIM( #{rm.sabun} )||'_'||TRIM( #{rm.famNm} )||'_'||TRIM( #{rm.famCd} )||'_'||TRIM( #{rm.sdate} )

										</if>
</foreach>
										)


		</delete>

	</mapper>