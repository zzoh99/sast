<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="hrm.appmt.reEmpDataCopy">
		<!-- 조회 -->
        <select parameterType="map" resultType="cMap" id="getReEmpDataCopyList">

                <![CDATA[
                    SELECT ENTER_CD
                         , SABUN
                         , ORD_ENTER_CD
                         , ORD_ENTER_SABUN
                         , NAME
                         , CRYPTIT.DECRYPT(RES_NO, ENTER_CD) AS RES_NO
                         , WORK_DATE
                         , COMPLETE_YN
                         , TO_CHAR(WORK_ST_TIME,'YYYYMMDDHH24MISS') AS WORK_ST_TIME 
                         , TO_CHAR(WORK_ED_TIME,'YYYYMMDDHH24MISS') AS WORK_ED_TIME
                         , BIGO
                         , ERR_MSG
                         , F_COM_GET_NAMES(TRIM(#{ssnEnterCd}),CHKID) AS CHKID
                    FROM   THRM224
                    WHERE  1 = 1
                   	 AND    ENTER_CD  = #{ssnEnterCd}
                   	            ]]>
                <if test="regYmdFrom != null and regYmdFrom neq ''">
                     AND    WORK_DATE <![CDATA[ >= ]]> NVL(REPLACE(TRIM( #{regYmdFrom} ),'-',''), '00000000')
                </if>
                <if test="regYmdTo != null and regYmdTo neq ''">
                     AND    WORK_DATE <![CDATA[ <= ]]> NVL(REPLACE(TRIM( #{regYmdTo} ),'-',''), '99991231')
                </if>
                <if test="searchName != null and searchName neq ''">
                    AND NAME LIKE '%'||trim(#{searchName})||'%'
                </if>
                <if test="searchSabun != null and searchSabun neq ''">
                    AND SABUN LIKE '%'||trim(#{searchSabun})||'%'
                </if>
                <if test="searchOrdEnterSabun != null and searchOrdEnterSabun neq ''">
                    AND ORD_ENTER_SABUN LIKE '%'||trim(#{searchOrdEnterSabun})||'%'
                </if>
                <if test="searchCompleteYn != null and searchCompleteYn neq ''">
                    AND COMPLETE_YN = TRIM(#{searchCompleteYn})
                </if>
                    ORDER BY  WORK_DATE DESC, WORK_ED_TIME DESC

        </select>

		<!-- 팝업 조회 -->
		<select parameterType="map" resultType="cMap" id="getReEmpDataCopyEmpPopup">

				<![CDATA[
					SELECT A.ENTER_CD
					     , A.RECEIVE_NO
					     , A.REG_YMD
					     , A.EMP_YMD
					     , A.GEMP_YMD
					     , A.TRA_YMD
					     , A.ORD_TYPE_CD
					     , A.ORD_DETAIL_CD
					     , A.ORD_REASON_CD
					     , CRYPTIT.DECRYPT (A.RES_NO, A.ENTER_CD) AS RES_NO
					     , A.NAME
					     , A.NAME_CN
					     , A.NAME_US
					     , A.SEX_TYPE
					     , A.BIR_YMD
					     , A.LUN_TYPE
					     , A.WED_YMD
					     , A.WED_YN
					     , A.BLOOD_CD
					     , A.REL_CD
					     , A.HOBBY
					     , A.SPECIALITY_NOTE
					     , A.FOREIGN_YN
					     , A.NATIONAL_CD
					     , A.EMP_TYPE
					     , A.STF_TYPE
					     , A.PATH_CD
					     , A.RECOM_NAME
					     , A.SABUN
					     , A.SABUN_TYPE
					     , A.SABUN_YN
					     , NVL(B.ORD_YN,'N') AS ORD_YN
					     , B.APPLY_SEQ
					     , B.ORD_YMD
					     , NVL(B.VISUAL_YN,'Y') AS VISUAL_YN
					     , A.PROCESS_NO
					     , A.SEQ
					     , A.APPL_KEY
					     , A.MOBILE_NO
					     , A.MAIL_ADDR
					     , A.HT
						 , A.WT
					 	 , TO_CHAR(A.EYE_L, 'FM999,990.0') AS EYE_L
						 , TO_CHAR(A.EYE_R, 'FM999,990.0') AS EYE_R
						 , A.DALTONISM_CD
					     , A.BASE1_YMD
					     , A.BASE2_YMD
					     , A.BASE3_YMD
					     , A.BASE1_YN
					     , A.BASE2_YN
					     , A.BASE3_YN
					     , A.BASE1_CD
					     , A.BASE2_CD
					     , A.BASE3_CD
					     , A.BASE1_NM
					     , A.BASE2_NM
					     , A.BASE3_NM
					     , A.CAREER_YY_CNT
						 , A.CAREER_MM_CNT
						 , A.SEQ_NM
						 , A.ORD_ENTER_CD
						 , A.ORD_ENTER_SABUN
						 , NVL(A.APPR_YN,'A') AS APPR_YN
						 , A.APPL_TIME
						 , A.APPR_SABUN
						 , A.APPR_TIME
						 , A.REASON
					  FROM TSTF901 A, THRM221 B
					 WHERE A.ENTER_CD = B.ENTER_CD
					   AND A.SABUN = B.SABUN
					   AND A.EMP_YMD = B.ORD_YMD
					   AND A.ORD_TYPE_CD = B.ORD_TYPE_CD
					   AND A.ORD_DETAIL_CD = B.ORD_DETAIL_CD
					   AND A.ENTER_CD = #{ssnEnterCd}
					   AND A.ORD_ENTER_CD IS NOT NULL
					   AND A.ORD_ENTER_SABUN IS NOT NULL
					   AND A.SEQ IS NULL	-- 채용공고 제외 조회
					   AND B.ORD_YN = 'Y'
					   AND (A.ENTER_CD, A.SABUN) NOT IN (SELECT X.ENTER_CD, X.ORD_ENTER_SABUN FROM THRM224 X WHERE X.ENTER_CD = #{ssnEnterCd})
					   
					   AND A.NAME LIKE '%'||TRIM( #{searchName} )||'%'
					   AND B.ORD_YMD BETWEEN REPLACE(TRIM( #{searchFromYmd} ),'-','') AND REPLACE(TRIM( #{searchToYmd} ),'-','')
					   
					 ORDER BY NVL(B.ORD_YMD, '99991231'), A.NAME
				]]>


		</select>

		<!-- 저장 -->
        <update parameterType="map" id="saveReEmpDataCopy">

                    MERGE INTO THRM224 T
                    USING   (
                            SELECT    A.ENTER_CD
                                    , A.SABUN
                                    , A.ORD_ENTER_CD
                                    , A.ORD_ENTER_SABUN
                                    , A.NAME
                                    , A.RES_NO
                                    , A.BIGO
                                    
                            FROM    (
                                    SELECT    NULL      AS ENTER_CD
                                            , NULL      AS SABUN
                                            , NULL      AS ORD_ENTER_CD
                                            , NULL      AS ORD_ENTER_SABUN
                                            , NULL      AS NAME
                                            , NULL      AS RES_NO
                                            , NULL      AS BIGO
                                    FROM    DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
                            UNION ALL
                                    SELECT   #{ssnEnterCd}                 	AS ENTER_CD
                                            , TRIM( #{rm.sabun} )        	AS SABUN
                                            , TRIM( #{rm.ordEnterCd} )   	AS ORD_ENTER_CD
                                            , TRIM( #{rm.ordEnterSabun} )	AS ORD_ENTER_SABUN
                                            , TRIM( #{rm.name} )      	 	AS NAME
                                            , TRIM( #{rm.resNo} )     	 	AS RES_NO
                                            , TRIM( #{rm.bigo} )         	AS BIGO
                                            FROM   DUAL
</foreach>
                                    ) A WHERE A.ENTER_CD IS NOT NULL
                            ) S
                    ON ( T.ENTER_CD      	= S.ENTER_CD
                    AND  T.SABUN     		= S.SABUN
                    AND  T.ORD_ENTER_CD     = S.ORD_ENTER_CD
                    AND  T.ORD_ENTER_SABUN  = S.ORD_ENTER_SABUN
                     )
                    WHEN MATCHED THEN
                        UPDATE SET    T.NAME            = S.NAME
                        			, T.RES_NO          = CRYPTIT.ENCRYPT(S.RES_NO, S.ENTER_CD)
                        			, T.BIGO            = S.BIGO
                                    , T.CHKDATE         = SYSDATE
                                    , T.CHKID           = #{ssnSabun}
                    WHEN NOT MATCHED THEN
                        INSERT
                        (
                              T.ENTER_CD
                            , T.SABUN
                            , T.ORD_ENTER_CD
                            , T.ORD_ENTER_SABUN
                            , T.NAME
                            , T.RES_NO
                            , T.COMPLETE_YN
                            , T.BIGO
                            , T.CHKDATE
                            , T.CHKID
                        )
                        VALUES
                        (
                              S.ENTER_CD
                            , S.SABUN
                            , S.ORD_ENTER_CD
                            , S.ORD_ENTER_SABUN
                            , S.NAME
                            , CRYPTIT.ENCRYPT(S.RES_NO, S.ENTER_CD)
                            , 'N'
                            , S.BIGO
                            , SYSDATE
                            , #{ssnSabun}
                        )
        </update>
        
		<!-- 삭제 -->
        <delete parameterType="map" id="deleteReEmpDataCopy">

                    DELETE FROM THRM224
                    WHERE   (ENTER_CD,SABUN,ORD_ENTER_CD,ORD_ENTER_SABUN) IN     (  (NULL,NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
                        ,
                                        <if test='rm.sabun != null and !rm.sabun.equals("")'>
                                          ( #{ssnEnterCd} , TRIM( #{rm.sabun} ) , TRIM( #{rm.ordEnterCd} ) , TRIM( #{rm.ordEnterSabun} ))
                                        </if>
</foreach>
                                        )
        </delete>
 
        <!-- 프로시저 호출 -->
        <update parameterType="map" id="prcP_HRM_POST_REEMP_DATA_COPY" statementType="CALLABLE">
		<![CDATA[
			{CALL P_HRM_POST_REEMP_DATA_COPY(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{sabun,mode=IN,jdbcType=VARCHAR},
				#{ordEnterCd,mode=IN,jdbcType=VARCHAR},
				#{ordEnterSabun,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
        </update>


</mapper>