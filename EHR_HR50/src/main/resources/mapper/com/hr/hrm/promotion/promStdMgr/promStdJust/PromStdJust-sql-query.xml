<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="hrm.promotion.promStdMgr.promStdJust">
		<!-- 상벌(포상) 조회 -->
		<select parameterType="map" resultType="cMap" id="getPromStdJustPrizeList">

				<![CDATA[
					SELECT ENTER_CD
					     , PMT_CD
					     , PRIZE_CD
					     , PLUS_POINT
					  FROM THRM445
					 WHERE ENTER_CD = #{ssnEnterCd}
					   AND PMT_CD = #{pmtCd}
					 ORDER BY PRIZE_CD
				]]>


		</select>

		<!-- 상벌(징계) 조회 -->
		<select parameterType="map" resultType="cMap" id="getPromStdJustPunishList">

				<![CDATA[
					SELECT ENTER_CD
					     , PMT_CD
					     , PUNISH_CD
					     , MINUS_POINT
					  FROM THRM447
					 WHERE ENTER_CD = #{ssnEnterCd}
					   AND PMT_CD = #{pmtCd}
					 ORDER BY PUNISH_CD
				]]>


		</select>
		
		<!-- 상벌(근태) 조회 -->
		<select parameterType="map" resultType="cMap" id="getPromStdJustGntList">

				<![CDATA[
					SELECT ENTER_CD
					     , PMT_CD
					     , GNT_CD
					     , MINUS_POINT
					  FROM THRM443
					 WHERE ENTER_CD = #{ssnEnterCd}
					   AND PMT_CD = #{pmtCd}
					 ORDER BY GNT_CD
				]]>


		</select>
		
			<!-- 자격사항 조회 -->
		<select parameterType="map" resultType="cMap" id="getPromStdLicenseList">

				<![CDATA[
					SELECT ENTER_CD
					     , PMT_CD
					     , GUBUN
					     , JIKWEE_CD
					     , LICENSE_CD
					     , CALCULATOR 
					  FROM THRM442
					 WHERE ENTER_CD = #{ssnEnterCd}
					   AND PMT_CD = #{pmtCd}
					 ORDER BY JIKWEE_CD
				]]>


		</select>

<!-- 상벌(포상) 저장 -->
		<update parameterType="map" id="savePromStdJustPrize">

					MERGE INTO THRM445 T
					USING (
							SELECT A.ENTER_CD
							     , A.PMT_CD
							     , A.PRIZE_CD
							     , A.PLUS_POINT
							  FROM (
									SELECT NULL		AS ENTER_CD
									     , NULL		AS PMT_CD
									     , NULL		AS PRIZE_CD
									     , NULL		AS PLUS_POINT
									  FROM DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT TRIM( #{ssnEnterCd} )		AS ENTER_CD
									     , TRIM( #{rm.pmtCd} )		AS PMT_CD
									     , TRIM( #{rm.prizeCd} ) 	AS PRIZE_CD
									     , TRIM( #{rm.plusPoint} )	AS PLUS_POINT
									  FROM DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										  AND A.PMT_CD IS NOT NULL
										  AND A.PRIZE_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD	= S.ENTER_CD AND T.PMT_CD = S.PMT_CD AND T.PRIZE_CD = S.PRIZE_CD)
					WHEN MATCHED THEN
						UPDATE SET T.PLUS_POINT		= S.PLUS_POINT
						         , T.CHKDATE		= SYSDATE
						         , T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.PMT_CD
							, T.PRIZE_CD
							, T.PLUS_POINT
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.PMT_CD
							, S.PRIZE_CD
							, S.PLUS_POINT
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

<!-- 상벌(징계) 저장 -->
		<update parameterType="map" id="savePromStdJustPunish">

					MERGE INTO THRM447 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.PMT_CD
									, A.PUNISH_CD
									, A.MINUS_POINT
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS PMT_CD
											, NULL		AS PUNISH_CD
											, NULL		AS MINUS_POINT
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT	  TRIM( #{ssnEnterCd} )		AS ENTER_CD
											, TRIM( #{rm.pmtCd} )		AS PMT_CD
											, TRIM( #{rm.punishCd} ) 	AS PUNISH_CD
											, TRIM( #{rm.minusPoint} )	AS MINUS_POINT
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										  AND A.PMT_CD IS NOT NULL
										  AND A.PUNISH_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD	= S.ENTER_CD AND T.PMT_CD = S.PMT_CD AND T.PUNISH_CD = S.PUNISH_CD)
					WHEN MATCHED THEN
						UPDATE SET	  T.MINUS_POINT		= S.MINUS_POINT
									, T.CHKDATE			= SYSDATE
									, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.PMT_CD
							, T.PUNISH_CD
							, T.MINUS_POINT
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.PMT_CD
							, S.PUNISH_CD
							, S.MINUS_POINT
							, SYSDATE
							, #{ssnSabun}
						)
		</update>
		
<!-- 상벌(근태) 저장 -->
		<update parameterType="map" id="savePromStdJustGnt">

					MERGE INTO THRM443 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.PMT_CD
									, A.GNT_CD
									, A.MINUS_POINT
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS PMT_CD
											, NULL		AS GNT_CD
											, NULL		AS MINUS_POINT
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT	  TRIM( #{ssnEnterCd} )		AS ENTER_CD
											, TRIM( #{rm.pmtCd} )		AS PMT_CD
											, TRIM( #{rm.gntCd} ) 		AS GNT_CD
											, TRIM( #{rm.minusPoint} )	AS MINUS_POINT
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										  AND A.PMT_CD IS NOT NULL
										  AND A.GNT_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD	= S.ENTER_CD AND T.PMT_CD = S.PMT_CD AND T.GNT_CD = S.GNT_CD)
					WHEN MATCHED THEN
						UPDATE SET	  T.MINUS_POINT		= S.MINUS_POINT
									, T.CHKDATE			= SYSDATE
									, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.PMT_CD
							, T.GNT_CD
							, T.MINUS_POINT
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.PMT_CD
							, S.GNT_CD
							, S.MINUS_POINT
							, SYSDATE
							, #{ssnSabun}
						)
		</update>
		<!-- 자격사항  -->
		<update parameterType="map" id="savePromStdLicense">

					MERGE INTO THRM442 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.PMT_CD
									, A.JIKWEE_CD
									, A.LICENSE_CD
									, A.CALCULATOR 
									, A.GUBUN
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS PMT_CD
											, NULL		AS JIKWEE_CD
											, NULL		AS LICENSE_CD
											, NULL		AS CALCULATOR
											, NULL		AS GUBUN 
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT	  TRIM( #{ssnEnterCd} )		AS ENTER_CD
											, TRIM( #{rm.pmtCd} )		AS PMT_CD
											, TRIM( #{rm.jikweeCd})		AS JIKWEE_CD
											, TRIM( #{rm.licenseCd} ) 	AS LICENSE_CD
											, TRIM( #{rm.calculator} )	AS CALCULATOR
											, TRIM( #{rm.gubun} )	AS GUBUN
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										  AND A.PMT_CD IS NOT NULL
										  AND A.JIKWEE_CD IS NOT NULL
										  AND A.LICENSE_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD	= S.ENTER_CD AND T.PMT_CD = S.PMT_CD AND T.JIKWEE_CD = S.JIKWEE_CD AND T.LICENSE_CD = S.LICENSE_CD)
					WHEN MATCHED THEN
						UPDATE SET	  T.CALCULATOR		= S.CALCULATOR
									, T.GUBUN			= S.GUBUN
									, T.CHKDATE			= SYSDATE
									, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.PMT_CD
							, T.JIKWEE_CD
							, T.LICENSE_CD
							, T.CALCULATOR
							, T.GUBUN
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.PMT_CD
							, S.JIKWEE_CD
							, S.LICENSE_CD
							, S.CALCULATOR
							, S.GUBUN
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

<!-- 상벌(포상) 삭제 -->
		<delete parameterType="map" id="deletePromStdJustPrize">

					DELETE FROM THRM445
					 WHERE ENTER_CD||'_'||PMT_CD||'_'||PRIZE_CD	 IN 	(  NULL
<foreach item="rm" collection="deleteRows" >
						,
										<if test='ssnEnterCd != null and !ssnEnterCd.equals("") and rm.pmtCd != null and !rm.pmtCd.equals("") and rm.prizeCd != null and !rm.prizeCd.equals("")'>
											TRIM(#{ssnEnterCd})||'_'||TRIM( #{rm.pmtCd} )||'_'||TRIM( #{rm.prizeCd} )
										</if>
</foreach>
										)
		</delete>

<!-- 상벌(징계) 삭제 -->
		<delete parameterType="map" id="deletePromStdJustPunish">

					DELETE FROM THRM447
					 WHERE ENTER_CD||'_'||PMT_CD||'_'||PUNISH_CD	 IN 	(  NULL
<foreach item="rm" collection="deleteRows" >
						,
										<if test='ssnEnterCd != null and !ssnEnterCd.equals("") and rm.pmtCd != null and !rm.pmtCd.equals("") and rm.punishCd != null and !rm.punishCd.equals("")'>
											TRIM(#{ssnEnterCd})||'_'||TRIM( #{rm.pmtCd} )||'_'||TRIM( #{rm.punishCd} )
										</if>
</foreach>
										)
		</delete>
<!-- 상벌(근태) 삭제 -->
		<delete parameterType="map" id="deletePromStdJustGnt">

					DELETE FROM THRM443
					 WHERE ENTER_CD||'_'||PMT_CD||'_'||GNT_CD	 IN 	(  NULL
<foreach item="rm" collection="deleteRows" >
						,
										<if test='ssnEnterCd != null and !ssnEnterCd.equals("") and rm.pmtCd != null and !rm.pmtCd.equals("") and rm.gntCd != null and !rm.gntCd.equals("")'>
											TRIM(#{ssnEnterCd})||'_'||TRIM( #{rm.pmtCd} )||'_'||TRIM( #{rm.gntCd} )
										</if>
</foreach>
										)

		</delete>
		<!-- 자격증 삭제 -->
		<delete parameterType="map" id="deletePromStdLicense">

					DELETE FROM THRM442
					 WHERE ENTER_CD||'_'||PMT_CD||'_'||JIKWEE_CD||'_'||LICENSE_CD	 IN 	(  NULL
<foreach item="rm" collection="deleteRows" >
						,
										<if test='ssnEnterCd != null and !ssnEnterCd.equals("") and rm.pmtCd != null and !rm.pmtCd.equals("")
												and rm.jikweeCd != null and !rm.jikweeCd.equals("")and rm.licenseCd != null and !rm.licenseCd.equals("")'>
											TRIM(#{ssnEnterCd})||'_'||TRIM( #{rm.pmtCd} )||'_'||TRIM( #{rm.jikweeCd} )||'_'||TRIM( #{rm.licenseCd} )
										</if>
</foreach>
										)
		</delete>

</mapper>