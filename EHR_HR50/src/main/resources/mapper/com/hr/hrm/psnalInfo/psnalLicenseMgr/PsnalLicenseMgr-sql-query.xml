<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hrm.psnalInfo.psnalLicenseMgr">

<!-- 개인별 자격관리 다건 조회 -->

		<select id="getPsnalLicenseMgrList" parameterType="map" resultType="cMap">

				SELECT *
				  FROM (
					SELECT F_COM_GET_ORG_NM     (B.ENTER_CD, B.ORG_CD, TO_CHAR(SYSDATE,'YYYYMMDD'), #{ssnLocaleCd}) AS ORG_NM
					     , F_COM_GET_NAMES		(A.ENTER_CD, A.SABUN, #{ssnLocaleCd}) AS NAME
             		     , F_COM_GET_GRCODE_NAME(B.ENTER_CD, 'H20010' , B.JIKGUB_CD , #{ssnLocaleCd}) AS JIKGUB_NM
	<if test='searchBizPlaceCd != null and !searchBizPlaceCd.equals("")'>
					     , F_COM_GET_BP_CD(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE,'yyyymmdd')) AS BP_CD
	</if>
	  					 , A.*
			<![CDATA[
			             , CASE WHEN A.FILE_SEQ IS NULL THEN '<a class=basic>첨부</a>' 
                            ELSE '<a class=basic>다운로드</a>' END AS BTN_FILE
					     ]]>
			             , B.STATUS_CD
			             , ROW_NUMBER() OVER( ORDER BY F_COM_JIKJE_SORT(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')), A.LIC_S_YMD  DESC) AS ORDER_SEQ
					  FROM THRM113 A
	<choose>
	<when test='ssnSearchType != null and ssnSearchType.equals("A")'>
						           , THRM151 B
	</when>
	<otherwise>
								   , TABLE(THRM151_AUTH(#{ssnEnterCd}, #{ssnSearchType} , #{ssnSabun}, #{ssnGrpCd}, TO_CHAR(SYSDATE, 'YYYYMMDD'))) B
	</otherwise>
	</choose>
						 WHERE A.ENTER_CD = #{ssnEnterCd}
		<if test='searchLicenseGubun != null and !searchLicenseGubun.equals("")'>
						   AND A.LICENSE_CD = #{searchLicenseGubun}
		</if>
		<if test='searchStatusCd != null and !searchStatusCd.equals("")'>
						   AND B.STATUS_CD = #{searchStatusCd}
		</if>
						 AND A.ENTER_CD	= B.ENTER_CD
	  				     AND A.SABUN		= B.SABUN
	  				     AND B.STATUS_CD NOT IN ('RAA')
						 AND B.SDATE = (SELECT MAX(BB.SDATE)
			                          FROM THRM151 BB
			                          WHERE BB.ENTER_CD=  B.ENTER_CD
			                          AND BB.SABUN = B.SABUN
			                          AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN BB.SDATE AND NVL(BB.EDATE, '99991231'))
		)
		WHERE 1=1
	<if test='searchBizPlaceCd != null and !searchBizPlaceCd.equals("")'>
				AND BP_CD = #{searchBizPlaceCd}
	</if>
	<if test='searchSabunNameAlias != null and !searchSabunNameAlias.equals("")' >
				AND ( SABUN LIKE '%'||TRIM( #{searchSabunNameAlias} )||'%'OR NAME LIKE '%'||TRIM( #{searchSabunNameAlias} )||'%')
	</if>


		</select>



		<!-- 인사기본(자격) 저장 -->
		<update id="savePsnalLicenseMgr" parameterType="map">

					MERGE INTO THRM113 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.SABUN
									, A.SEQ
									, A.LICENSE_GUBUN
									, A.LICENSE_CD
									, A.LICENSE_NM
									, A.LICENSE_GRADE
									, A.LIC_S_YMD
									, A.LIC_U_YMD
									, A.LIC_E_YMD
									, A.OFFICE_CD
									, A.LICENSE_NO
									, A.ALLOW_SYMD
									, A.ALLOW_EYMD
									, A.LICENSE_BIGO
									, A.FILE_SEQ
									, A.ALLOW_AMOUNT
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS SABUN
											, NULL		AS SEQ
											, NULL		AS LICENSE_GUBUN
											, NULL		AS LICENSE_CD
											, NULL		AS LICENSE_NM
											, NULL		AS LICENSE_GRADE
											, NULL		AS LIC_S_YMD
											, NULL      AS LIC_U_YMD
											, NULL		AS LIC_E_YMD
											, NULL		AS OFFICE_CD
											, NULL		AS LICENSE_NO
											, NULL		AS ALLOW_SYMD
											, NULL		AS ALLOW_EYMD
											, NULL		AS LICENSE_BIGO
											, NULL		AS FILE_SEQ
											, NULL		AS ALLOW_AMOUNT
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach collection="mergeRows" item="rm" >
							UNION ALL
									SELECT	TRIM( #{ssnEnterCd} )		AS ENTER_CD
											, TRIM( #{rm.sabun} )		AS SABUN
									     <choose>
											<when test='rm.seq != null and !rm.seq.equals("")' >
											, TRIM(#{rm.seq}) 			AS SEQ
											</when>
										<otherwise>
											, TO_CHAR( (
															SELECT (NVL(MAX(TO_NUMBER(SEQ)),0) + ${icnt})
															  FROM THRM113
															 WHERE ENTER_CD = TRIM( #{ssnEnterCd} )
															   AND SABUN = TRIM( #{rm.sabun} )
														) )	AS SEQ
												<bind name="icnt" value="icnt+1"/>
										</otherwise>
									</choose>
											, TRIM( #{rm.licenseGubun})	AS LICENSE_GUBUN
											, TRIM( #{rm.licenseCd} )		AS LICENSE_CD
											, TRIM( #{rm.licenseNm})		AS LICENSE_NM
											, TRIM( #{rm.licenseGrade} )	AS LICENSE_GRADE
											, TRIM( #{rm.licSYmd})			AS LIC_S_YMD
											, TRIM( #{rm.licUYmd})			AS LIC_U_YMD
											, TRIM( #{rm.licEYmd})			AS LIC_E_YMD
											, TRIM( #{rm.officeCd} )		AS OFFICE_CD
											, TRIM( #{rm.licenseNo})		AS LICENSE_NO
											, TRIM( #{rm.allowSymd})		AS ALLOW_SYMD
											, TRIM( #{rm.allowEymd})		AS ALLOW_EYMD
											, TRIM( #{rm.licenseBigo})		AS LICENSE_BIGO
											, TRIM( #{rm.fileSeq} )			AS FILE_SEQ
											, TRIM( #{rm.allowAmount})		AS ALLOW_AMOUNT
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										  AND A.SABUN IS NOT NULL
										  AND A.SEQ IS NOT NULL
							) S
					ON ( T.ENTER_CD	= S.ENTER_CD AND T.SABUN = S.SABUN AND T.SEQ = S.SEQ)
					WHEN MATCHED THEN
						UPDATE SET	  T.LICENSE_GUBUN 	= S.LICENSE_GUBUN
									, T.LICENSE_CD   	= S.LICENSE_CD
									, T.LICENSE_NM 		= S.LICENSE_NM
									, T.LICENSE_GRADE	= S.LICENSE_GRADE
									, T.LIC_S_YMD    	= S.LIC_S_YMD
									, T.LIC_U_YMD       = S.LIC_U_YMD
									, T.LIC_E_YMD    	= S.LIC_E_YMD
									, T.OFFICE_CD    	= S.OFFICE_CD
									, T.LICENSE_NO   	= S.LICENSE_NO
									, T.ALLOW_SYMD     	= S.ALLOW_SYMD
									, T.ALLOW_EYMD     	= S.ALLOW_EYMD
									, T.LICENSE_BIGO 	= S.LICENSE_BIGO
									, T.FILE_SEQ     	= S.FILE_SEQ
									, T.ALLOW_AMOUNT   	= S.ALLOW_AMOUNT
									, T.CHKDATE			= SYSDATE
									, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.SABUN
							, T.SEQ
							, T.LICENSE_GUBUN
							, T.LICENSE_CD
							, T.LICENSE_NM
							, T.LICENSE_GRADE
							, T.LIC_S_YMD
							, T.LIC_U_YMD
							, T.LIC_E_YMD
							, T.OFFICE_CD
							, T.LICENSE_NO
							, T.ALLOW_SYMD
							, T.ALLOW_EYMD
							, T.LICENSE_BIGO
							, T.FILE_SEQ
							, T.ALLOW_AMOUNT
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.SABUN
							, S.SEQ
							, S.LICENSE_GUBUN
							, S.LICENSE_CD
							, S.LICENSE_NM
							, S.LICENSE_GRADE
							, S.LIC_S_YMD
							, S.LIC_U_YMD
							, S.LIC_E_YMD
							, S.OFFICE_CD
							, S.LICENSE_NO
							, S.ALLOW_SYMD
							, S.ALLOW_EYMD
							, S.LICENSE_BIGO
							, S.FILE_SEQ
							, S.ALLOW_AMOUNT
							, SYSDATE
							, #{ssnSabun}
						)



		</update>

<!-- 개인별자격관리 삭제 -->
		<delete id="deletePsnalLicenseMgr" parameterType="map">

                    DELETE FROM THRM113
					WHERE 	(ENTER_CD, SABUN,SEQ ) IN 	(  ( NULL,NULL,NULL)
<foreach collection="deleteRows" item="rm" >

					<if test='ssnEnterCd != null and !ssnEnterCd.equals("")
					and rm.sabun != null and !rm.sabun.equals("")
					and rm.seq != null and !rm.seq.equals("")' >
						, (TRIM(#{ssnEnterCd}),TRIM(#{rm.sabun}),TRIM( #{rm.seq} ) )
					</if>
</foreach>
						)
               



		</delete>





	</mapper>