<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="hrm.appmt.timeOffPatAppmtFamMgr">

<!-- 육아휴직 대상자녀 관리 목록 조회 -->
		<select parameterType="map" resultType="cMap" id="getTimeOffPatAppmtFamMgrList">

				<![CDATA[
					SELECT A.ENTER_CD
					     , A.SABUN
					     , F_COM_GET_NAMES(A.ENTER_CD, A.SABUN, NULL, TO_CHAR(SYSDATE, 'YYYYMMDD')) AS NAME 
					     , A.ORG_NM
					     , A.JIKWEE_NM
					     , A.JIKCHAK_NM
					     , A.JIKGUB_NM
					     , A.ORD_TYPE_CD
					     , A.ORD_DETAIL_CD
					     , OC.ORD_DETAIL_NM
					     , A.ORD_YMD
					     , A.APPLY_SEQ
					     , CRYPTIT.decrypt(B.FAMRES, A.ENTER_CD) AS FAMRES
					     , B.FAM_NM
					     , '/EmpPhotoOut.do'||chr(63)||'enterCd=' || A.ENTER_CD || chr(38) || 'searchKeyword=' || A.SABUN || chr(38) || 'type=1' AS PHOTO
					     , A.STATUS_NM
					     , A.ORD_E_YMD
					  FROM THRM191 A
					     , TSYS013 OC
					     , THRM229 B
					 WHERE 1 = 1
					   AND A.ENTER_CD      = OC.ENTER_CD
					   AND A.ORD_TYPE_CD   = OC.ORD_TYPE_CD
					   AND A.ORD_DETAIL_CD = OC.ORD_DETAIL_CD
					   AND A.ENTER_CD      = B.ENTER_CD(+)
					   AND A.SABUN         = B.SABUN(+)
					   AND A.ORD_TYPE_CD   = B.ORD_TYPE_CD(+)
					   AND A.ORD_DETAIL_CD = B.ORD_DETAIL_CD(+)
					   AND A.APPLY_SEQ     = B.APPLY_SEQ(+)
					   AND A.ORD_YMD       = B.ORD_YMD(+)
					   AND A.ENTER_CD      = #{ssnEnterCd}
					   AND A.ORD_TYPE_CD   = 'M'
					   AND A.ORD_DETAIL_CD = 'M0'
					           ]]>
					<if test='sdate != null and !sdate.equals("") and edate != null and !edate.equals("")'>
					   AND A.ORD_YMD BETWEEN TRIM(REPLACE(  #{sdate}, '-', '' ) ) AND TRIM(REPLACE( #{edate}, '-', '' ) )
					</if>
					<if test='searchOrg != null and !searchOrg.equals("")'>
					   AND (A.ORG_CD LIKE '%' || TRIM( #{searchOrg} ) || '%' OR A.ORG_NM LIKE '%' || TRIM( #{searchOrg} ) || '%')
					</if>
					<if test='searchSabun != null and !searchSabun.equals("")'>
					   AND (A.SABUN LIKE '%' || TRIM( #{searchSabun} ) || '%' OR F_COM_GET_NAMES(A.ENTER_CD, A.SABUN, NULL, A.ORD_YMD) LIKE '%' || TRIM( #{searchSabun} ) || '%')
					</if>
					 ORDER BY A.ORD_YMD DESC


		</select>
		

<!-- 육아휴직 대상자녀 관리 저장 -->
		<update parameterType="map" id="saveTimeOffPatAppmtFamMgr">

					MERGE INTO THRM229 T
					USING (
					          SELECT A.ENTER_CD
					               , A.SABUN
					               , A.ORD_TYPE_CD
					               , A.ORD_DETAIL_CD
					               , A.ORD_YMD
					               , A.APPLY_SEQ
					               , A.FAM_NM
					               , A.FAMRES
					               , A.CHKID
					            FROM (
					                      SELECT NULL AS ENTER_CD
					                           , NULL AS SABUN
					                           , NULL AS ORD_TYPE_CD
					                           , NULL AS ORD_DETAIL_CD
					                           , NULL AS ORD_YMD
					                           , NULL AS APPLY_SEQ
					                           , NULL AS FAM_NM
					                           , NULL AS FAMRES
					                           , NULL AS CHKID
					                        FROM DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
					                       UNION ALL
					                      SELECT #{ssnEnterCd} AS ENTER_CD
					                           , TRIM( #{rm.sabun} ) AS SABUN
					                           , TRIM( #{rm.ordTypeCd} ) AS ORD_TYPE_CD
					                           , TRIM( #{rm.ordDetailCd} ) AS ORD_DETAIL_CD
					                           , TRIM( #{rm.ordYmd} ) AS ORD_YMD
					                           , TRIM( #{rm.applySeq} ) AS APPLY_SEQ
					                           , TRIM( #{rm.famNm} ) AS FAM_NM
					                           , TRIM( #{rm.famres} ) AS FAMRES
					                           , #{ssnSabun} AS CHKID
					                        FROM DUAL
</foreach>
					                 ) A
					           WHERE A.ENTER_CD IS NOT NULL
					             AND A.SABUN IS NOT NULL
					             AND A.ORD_TYPE_CD IS NOT NULL
					             AND A.ORD_DETAIL_CD IS NOT NULL
					      ) S
					   ON (
					                 T.ENTER_CD      = S.ENTER_CD
					             AND T.SABUN         = S.SABUN
					             AND T.ORD_TYPE_CD   = S.ORD_TYPE_CD
					             AND T.ORD_DETAIL_CD = S.ORD_DETAIL_CD
					             AND T.ORD_YMD       = S.ORD_YMD
					             AND T.APPLY_SEQ     = S.APPLY_SEQ
					      )
					WHEN MATCHED THEN
					      UPDATE SET
					             T.CHKDATE = SYSDATE
					           , T.CHKID   = S.CHKID
					           , T.FAMRES  = CRYPTIT.encrypt(S.FAMRES, S.ENTER_CD)
					           , T.FAM_NM  = S.FAM_NM
					WHEN NOT MATCHED THEN
					     INSERT (
					             T.ENTER_CD
					           , T.SABUN
					           , T.ORD_TYPE_CD
					           , T.ORD_DETAIL_CD
					           , T.ORD_YMD
					           , T.APPLY_SEQ
					           , T.FAMRES
					           , T.FAM_NM
					           , T.CHKDATE
					           , T.CHKID
					     ) VALUES (
					             S.ENTER_CD
					           , S.SABUN
					           , S.ORD_TYPE_CD
					           , S.ORD_DETAIL_CD
					           , S.ORD_YMD
					           , S.APPLY_SEQ
					           , CRYPTIT.encrypt(S.FAMRES, S.ENTER_CD)
					           , S.FAM_NM
					           , SYSDATE
					           , S.CHKID
					     )
		</update>
		

</mapper>