<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="hrm.appmt.execAppmt">




<!-- 발령처리 권한 정보 조회 -->
		<select parameterType="map" resultType="cMap" id="getExecAppmtAuthInfo">

				<![CDATA[
					SELECT DECODE(COUNT(*),0,'R','A') AS AUTH_INFO
					  FROM THRM207 A
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND A.SABUN = #{ssnSabun}
					   AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN A.SDATE AND NVL(A.EDATE,'99991231')
				]]>


		</select>


		<!-- 징계  시퀀스값 처리 -->
		<select parameterType="map" resultType="cMap" id="getPunishSeq">

				<![CDATA[
		 		SELECT (NVL(MAX(TO_NUMBER(SEQ)),0) + 1) AS SEQ
													   FROM THRM129
													  WHERE ENTER_CD = #{ssnEnterCd}
													    AND SABUN    = #{sabun}

				]]>


		</select>

		<select parameterType="map" resultType="cMap" id="getExecAppmtCnt">

					SELECT COUNT(*) AS CNT
					  FROM THRM221 A
					 WHERE A.ENTER_CD = #{ssnEnterCd}

					<if test='searchOrdTypeCd != null and !searchOrdTypeCd.equals("")'>
						   AND A.ORD_TYPE_CD = #{searchOrdTypeCd}
					</if>
					<if test='searchOrdDetailCd != null and !searchOrdDetailCd.equals("")'>
						   AND A.ORD_DETAIL_CD = #{searchOrdDetailCd}
					</if>
					<if test='searchOrdReasonCd != null and !searchOrdReasonCd.equals("")'>
						   AND A.ORD_REASON_CD = #{searchOrdReasonCd}
					</if>
					<if test='searchOrdYn != null and !searchOrdYn.equals("")'>
						   AND A.ORD_YN IN ( #{searchOrdYn} )
					</if>
					<if test='searchSabun != null and !searchSabun.equals("")'>
					       AND (A.SABUN LIKE '%'||TRIM( #{searchSabun} )||'%' OR A.NAME LIKE '%'||TRIM( #{searchSabun} )||'%' )
					</if>
					<if test='searchOrdYmdFrom != null and !searchOrdYmdFrom.equals("")'>
					       AND A.ORD_YMD <![CDATA[ >= ]]> REPLACE(TRIM( #{searchOrdYmdFrom} ),'-','')
					</if>
					<if test='searchOrdYmdTo != null and !searchOrdYmdTo.equals("")'>
					       <![CDATA[ AND A.ORD_YMD <= REPLACE(TRIM( #{searchOrdYmdTo} ),'-','') ]]>
					</if>
					<if test='searchProcessNo != null and !searchProcessNo.equals("")'>
						   AND A.PROCESS_NO =  #{searchProcessNo}
					</if>
					<if test='searchErrorYn != null and searchErrorYn.equals("Y")'>
							AND A.ORD_ERROR	 IS NOT NULL
					</if>


		</select>

		<select parameterType="map" resultType="cMap" id="getExecAppmtFamNmList">

				<![CDATA[
					SELECT DISTINCT CRYPTIT.decrypt(FAMRES,#{ssnEnterCd}) AS CODE
						, FAM_NM||'(만 '||F_COM_GET_AGE(A.ENTER_CD, B.FAM_YMD, B.FAMRES, TO_CHAR(SYSDATE,'YYYYMMDD') )||'세)' AS CODE_NM
					  FROM TSYS005 A,
					  	THRM111 B
					 WHERE 1=1
					 AND A.ENTER_CD = B.ENTER_CD
					 AND A.CODE = B.FAM_CD
					 AND A.GRCODE_CD = 'H20120'
					 AND A.NOTE4 = 'F004' AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN A.S_YMD AND A.E_YMD
					 AND B.ENTER_CD = #{ssnEnterCd}
					 AND B.SABUN = TRIM( #{searchApplSabun} )
					 ORDER BY CODE
				]]>


		</select>

		<select parameterType="map" resultType="cMap" id="getExecAppmtMdHstList">

				<![CDATA[
					SELECT DISTINCT
					       CASE WHEN MODIFY_MODE='U' THEN '변경' WHEN MODIFY_MODE='D' THEN '삭제' END AS MODIFY_MODE
		                 , MODIFY_CMT
					     , TO_CHAR(MODIFY_DATE, 'YYYY-MM-DD HH24:MI:SS') AS MODIFY_DATE
					     , F_COM_GET_NAMES(ENTER_CD, MODIFY_SABUN) || '(' || MODIFY_SABUN || ')' AS MODIFY_SABUN
		              FROM THRM222
		             WHERE ENTER_CD = #{ssnEnterCd}
		               AND SABUN = TRIM( #{sabun} )
		               AND ORD_YMD = TRIM( #{ordYmd} )
		               AND APPLY_SEQ = TRIM( #{applySeq} )
		               AND ORD_TYPE_CD = TRIM( #{ordTypeCd} )
		               AND ORD_DETAIL_CD = TRIM( #{ordDetailCd} )
					 ORDER BY MODIFY_DATE DESC
				]]>


		</select>

		<select parameterType="map" resultType="cMap" id="getExecAppmtMdHstListPop">

				<![CDATA[
					WITH HST AS ( SELECT X.ENTER_CD
                                , TO_CHAR(X.MODIFY_DATE, 'YYYY-MM-DD HH24:MI:SS') AS MODIFY_DATE
                                , F_COM_GET_NAMES(X.ENTER_CD, X.MODIFY_SABUN) || '(' || X.MODIFY_SABUN || ')' AS MODIFY_SABUN
                                , CASE WHEN X.MODIFY_MODE = 'U' THEN '변경'
                                       WHEN X.MODIFY_MODE = 'D' THEN '삭제'
                                  END AS MODIFY_MODE
                                , X.MODIFY_CMT
                                , X.POST_ITEM
                                , X.POST_ITEM_VALUE
                                , TO_CHAR(X.CHKDATE, 'YYYY-MM-DD HH24:MI:SS') AS CHKDATE
                                , F_COM_GET_NAMES(X.ENTER_CD, X.CHKID) || '(' || X.CHKID || ')' AS CHKID
                           FROM THRM222 X
                        WHERE X.ENTER_CD          = #{ssnEnterCd}
                             AND X.SABUN          = TRIM( #{sabun} )
                             AND X.ORD_YMD        = TRIM( #{ordYmd} )
                             AND X.APPLY_SEQ      = TRIM( #{applySeq} )
                             AND X.ORD_TYPE_CD    = TRIM( #{ordTypeCd} )
                             AND X.ORD_DETAIL_CD  = TRIM( #{ordDetailCd} )
					)
					SELECT B.MODIFY_DATE, B.MODIFY_SABUN, B.MODIFY_MODE, B.MODIFY_CMT
					     , A.POST_ITEM_NM, B.POST_ITEM, B.POST_ITEM_VALUE, B.CHKDATE, B.CHKID, A.SEQ
					  FROM THRM200 A
					     , HST B
					 WHERE A.ENTER_CD = B.ENTER_CD
					   AND A.POST_ITEM = B.POST_ITEM
					 UNION ALL
					SELECT B.MODIFY_DATE, B.MODIFY_SABUN, B.MODIFY_MODE, B.MODIFY_CMT
					     , A.POST_ITEM_NM, B.POST_ITEM, B.POST_ITEM_VALUE, B.CHKDATE, B.CHKID, A.SEQ
					  FROM THRM200 A
					     , HST B
					 WHERE A.ENTER_CD = B.ENTER_CD
					   AND A.POST_ITEM || '_NM' = B.POST_ITEM
					 ORDER BY MODIFY_DATE DESC, MODIFY_SABUN, MODIFY_CMT, SEQ, POST_ITEM
				]]>


		</select>


<!-- 발령처리 조회 -->
		<select parameterType="map" resultType="cMap" id="getExecAppmtList">

				<![CDATA[
					SELECT A.ENTER_CD
					      ,A.ORD_TYPE_CD
					      , (SELECT AA.ORD_TYPE
					           FROM TSYS011 AA
					          WHERE AA.ENTER_CD = A.ENTER_CD
					            AND AA.ORD_TYPE_CD = A.ORD_TYPE_CD ) AS ORD_TYPE					      ,A.ORD_DETAIL_CD
					      ,A.ORD_REASON_CD
					      ,A.SABUN
					      ,A.NAME
					      ,A.ORD_YMD
					      ,A.APPLY_SEQ
					      ,A.PROCESS_NO
					      ,(SELECT PROCESS_TITLE FROM THRM220 WHERE ENTER_CD = A.ENTER_CD AND PROCESS_NO = A.PROCESS_NO ) AS PROCESS_TITLE
					      ,A.ORD_YN
					      ,A.ORD_YN AS ORD_YN_TMP
					      ,A.VISUAL_YN
					      ,A.MEMO
					      ,A.ORD_ERROR
						  ,A.SEQ2 AS SEQ
					      ,A.PUNISH_YMD
					      , A.PUNISH_CD
					      , A.SDATE
					      , A.EDATE
					      , A.PUNISH_TERM
					      , A.IN_OUT_CD
					      , A.SUGGEST_ORG_CD
					      , A.SUGGEST_ORG_NM
					      , A.PUNISH_SUGGEST_YMD
					      , A.PUNISH_OFFICE
					      , A.DISPLAY_YN
					      , A.PUNISH_MEMO
					      , A.DISPLAY_MEMO
						  , A.APPL_SEQ
					      , A.FAM_NM
					      , A.FAMRES
					      , '/EmpPhotoOut.do'||chr(63)||'enterCd=' || A.ENTER_CD || chr(38) || 'searchKeyword=' || A.SABUN || chr(38) || 'type=1' AS PHOTO
					      , (SELECT COUNT(*)
					           FROM THRM222 ZZ
					          WHERE ZZ.ENTER_CD = A.ENTER_CD
					            AND ZZ.ORD_TYPE_CD = A.ORD_TYPE_CD
					            AND ZZ.ORD_DETAIL_CD = A.ORD_DETAIL_CD
					            AND ZZ.SABUN = A.SABUN
					            AND ZZ.ORD_YMD = A.ORD_YMD
					            AND ZZ.APPLY_SEQ = A.APPLY_SEQ ) AS IS_MODIFIED
					            ]]>
<foreach item="rm" collection="postItemRows" >
	<bind name="nm" value='rm.postItem+"_VALUE"'/>

							,(SELECT POST_ITEM_VALUE
					          FROM THRM223
					         WHERE ENTER_CD = A.ENTER_CD
					           AND ORD_TYPE_CD = A.ORD_TYPE_CD
					           AND ORD_DETAIL_CD = A.ORD_DETAIL_CD
					           AND SABUN = A.SABUN
					           AND ORD_YMD = A.ORD_YMD
					           AND APPLY_SEQ = A.APPLY_SEQ
					           AND POST_ITEM = #{rm.postItem}) AS ${nm}

	<if test='rm.cType.equals("P") or rm.cType.equals("C")'>
	<bind name="nm" value='rm.postItem+"_NM_VALUE"' />
							,(SELECT POST_ITEM_VALUE
					          FROM THRM223
					         WHERE ENTER_CD = A.ENTER_CD
					           AND ORD_TYPE_CD = A.ORD_TYPE_CD
					           AND ORD_DETAIL_CD = A.ORD_DETAIL_CD
					           AND SABUN = A.SABUN
					           AND ORD_YMD = A.ORD_YMD
					           AND APPLY_SEQ = A.APPLY_SEQ
					           AND POST_ITEM = #{rm.postItem}||'_NM') AS ${nm}
	</if>
</foreach>
					FROM (SELECT AA.*
					              ,ROWNUM RNUM
					          FROM (SELECT A.*
					                  , B.SEQ AS SEQ2
								      , B.PUNISH_YMD
								      , B.PUNISH_CD
								      , B.SDATE
								      , B.EDATE
								      , B.PUNISH_TERM
								      , B.IN_OUT_CD
								      , B.SUGGEST_ORG_CD
								      , F_COM_GET_ORG_NM(A.ENTER_CD, B.SUGGEST_ORG_CD, B.PUNISH_YMD, '') AS SUGGEST_ORG_NM
								      , B.PUNISH_SUGGEST_YMD
								      , B.PUNISH_OFFICE
								      , B.DISPLAY_YN
								      , B.PUNISH_MEMO
								      , B.MEMO AS DISPLAY_MEMO
								      , C.FAM_NM
					                  , C.APPL_SEQ
								      , CRYPTIT.decrypt(C.FAMRES,#{ssnEnterCd}) AS FAMRES
									  FROM THRM221 A
									  	, THRM129 B
									  	, THRM229 C
									 WHERE  A.ENTER_CD = B.ENTER_CD(+)
										AND A.ORD_TYPE_CD = B.ORD_TYPE_CD(+)
										AND A.ORD_DETAIL_CD = B.ORD_DETAIL_CD(+)
										AND A.SABUN = B.SABUN(+)
										AND A.ORD_YMD = B.ORD_YMD(+)
										AND A.APPLY_SEQ = B.APPLY_SEQ(+)
										AND A.ENTER_CD = C.ENTER_CD(+)
										AND A.ORD_TYPE_CD = C.ORD_TYPE_CD(+)
										AND A.ORD_DETAIL_CD = C.ORD_DETAIL_CD(+)
										AND A.SABUN = C.SABUN(+)
										AND A.APPLY_SEQ = C.APPLY_SEQ(+)
										AND A.ENTER_CD = #{ssnEnterCd}
									<if test='searchOrdTypeCd != null and !searchOrdTypeCd.equals("")'>
										   AND A.ORD_TYPE_CD = #{searchOrdTypeCd}
									</if>
									<if test='searchOrdDetailCd != null and !searchOrdDetailCd.equals("")'>
										   AND A.ORD_DETAIL_CD = #{searchOrdDetailCd}
									</if>
									<if test='searchOrdReasonCd != null and !searchOrdReasonCd.equals("")'>
										   AND A.ORD_REASON_CD = #{searchOrdReasonCd}
									</if>
									<if test='searchOrdYn != null and !searchOrdYn.equals("")'>
										   AND A.ORD_YN =  #{searchOrdYn}
									</if>
									<if test='searchSabun != null and !searchSabun.equals("")'>
									       AND (A.SABUN LIKE '%'||TRIM( #{searchSabun} )||'%' OR A.NAME LIKE '%'||TRIM( #{searchSabun} )||'%' )
									</if>
									<if test='searchOrdYmdFrom != null and !searchOrdYmdFrom.equals("")'>
									       AND A.ORD_YMD <![CDATA[ >= ]]> REPLACE(TRIM( #{searchOrdYmdFrom} ),'-','')
									</if>
									<if test='searchOrdYmdTo != null and !searchOrdYmdTo.equals("")'>
									       AND A.ORD_YMD <![CDATA[ <= ]]> REPLACE(TRIM( #{searchOrdYmdTo} ),'-','')
									</if>
									<if test='searchProcessNo != null and !searchProcessNo.equals("")'>
										   AND A.PROCESS_NO =  #{searchProcessNo}
									</if>
									ORDER BY A.ORD_YMD DESC, A.NAME, A.APPLY_SEQ
				) AA) A
		WHERE RNUM BETWEEN (((#{searchPage})-1)*#{searchPageSize})+1 AND (#{searchPage})*#{searchPageSize}
		  AND EXISTS (SELECT X.ORD_TYPE_CD
					  FROM TSYS011 X , THRM207 Y
					 WHERE X.ENTER_CD = Y.ENTER_CD
					   AND X.ENTER_CD = A.ENTER_CD
					   AND A.ORD_TYPE_CD = X.ORD_TYPE_CD
					   AND Y.SABUN = #{ssnSabun}
					 UNION ALL
					SELECT X.ORD_TYPE_CD
					  FROM TSYS011 X , THRM205 Y
					 WHERE X.ENTER_CD = Y.ENTER_CD
					   AND X.ORD_TYPE_CD = Y.ORD_TYPE_CD
					   AND X.ENTER_CD = A.ENTER_CD
					   AND A.ORD_TYPE_CD = X.ORD_TYPE_CD
					   AND Y.SABUN = #{ssnSabun})

		</select>

		<select parameterType="map" resultType="cMap" id="getExecAppmtList2">

				<![CDATA[
					SELECT A.ENTER_CD
						,A.ENTER_CD AS SSN_ENTER_CD
						,#{ssnSabun} AS SSN_SABUN
						,A.ORD_TYPE_CD
					      ,A.ORD_DETAIL_CD
					      ,A.ORD_REASON_CD
					      ,A.SABUN
					      ,A.NAME
					      ,A.ORD_YMD
					      ,A.APPLY_SEQ
					      ,A.PROCESS_NO
					      ,(SELECT PROCESS_TITLE FROM THRM220 WHERE ENTER_CD = A.ENTER_CD AND PROCESS_NO = A.PROCESS_NO ) AS PROCESS_TITLE
					      ,A.ORD_YN
					      ,A.ORD_YN AS ORD_YN_TMP
					      ,A.VISUAL_YN
					      ,A.MEMO
						  ,A.ORD_ERROR
					FROM THRM221 A
					WHERE A.ENTER_CD = #{ssnEnterCd} ]]>
					<if test='searchOrdTypeCd != null and !searchOrdTypeCd.equals("")'>
						   AND A.ORD_TYPE_CD = #{searchOrdTypeCd}
					</if>
					<if test='searchOrdDetailCd != null and !searchOrdDetailCd.equals("")'>
						   AND A.ORD_DETAIL_CD = #{searchOrdDetailCd}
					</if>
					<if test='searchOrdReasonCd != null and !searchOrdReasonCd.equals("")'>
						   AND A.ORD_REASON_CD = #{searchOrdReasonCd}
					</if>
					<if test='searchOrdYn != null and !searchOrdYn.equals("")'>
						   AND A.ORD_YN =  #{searchOrdYn}
					</if>
					<if test='searchSabun != null and !searchSabun.equals("")'>
					       AND (A.SABUN LIKE '%'||TRIM( #{searchSabun} )||'%' OR A.NAME LIKE '%'||TRIM( #{searchSabun} )||'%' )
					</if>
					<if test='searchOrdYmdFrom != null and !searchOrdYmdFrom.equals("")'>
					       AND A.ORD_YMD <![CDATA[ >= ]]> REPLACE(TRIM( #{searchOrdYmdFrom} ),'-','')
					</if>
					<if test='searchOrdYmdTo != null and !searchOrdYmdTo.equals("")'>
					       AND A.ORD_YMD <![CDATA[ <= ]]> REPLACE(TRIM( #{searchOrdYmdTo} ),'-','')
					</if>
					<if test='searchProcessNo != null and !searchProcessNo.equals("")'>
						   AND A.PROCESS_NO =  #{searchProcessNo}
					</if>
					<if test='searchErrorYn != null and searchErrorYn.equals("Y")'>
							AND A.ORD_ERROR	 IS NOT NULL
					</if>
					ORDER BY A.ORD_YMD DESC, A.SABUN , A.APPLY_SEQ

		</select>

		<select parameterType="map" resultType="cMap" id="getExecAppmtSoredList">

				<![CDATA[
					SELECT * FROM (
						SELECT NULL AS SSN_ENTER_CD
								,NULL AS ORD_DETAIL_CD
								,NULL AS SABUN
								,NULL AS ORD_YMD
								,NULL AS APPLY_SEQ
								,NULL AS ORD_TYPE_CD
								,NULL AS ORD_REASON_CD
								,NULL AS PROCESS_NO
								,NULL AS ORD_YN
								,NULL AS ORD_YN_TMP
								,NULL AS SSN_SABUN
						        ,NULL AS GRP_CD
							FROM DUAL
						]]>
<foreach item="rm" collection="updateRows" >
	<if test='!rm.ordYn.equals(rm.ordYnTmp)'>
							UNION ALL
							SELECT #{ssnEnterCd} AS SSN_ENTER_CD
								,#{rm.ordDetailCd} AS ORD_DETAIL_CD
								,#{rm.sabun} AS SABUN
								,#{rm.ordYmd} AS ORD_YMD
								,#{rm.applySeq} AS APPLY_SEQ
								,#{rm.ordTypeCd} AS ORD_TYPE_CD
								,#{rm.ordReasonCd} AS ORD_REASON_CD
								,#{rm.processNo} AS PROCESS_NO
								,#{rm.ordYn} AS ORD_YN
								,#{rm.ordYnTmp} AS ORD_YN_TMP
								,#{ssnSabun} AS SSN_SABUN
							    ,#{rm.item30Value} AS GRP_CD
							FROM DUAL
	</if>
</foreach>
					) WHERE SSN_ENTER_CD IS NOT NULL
					<if test='ordYn != null and ordYn.equals("Y")'>
					/* 발령확정 처리건만 조회 */
					AND ORD_YN = 'Y' AND ORD_YN_TMP = 'N'
					ORDER BY ORD_YMD, SABUN, APPLY_SEQ
					</if>
					<if test='ordYn != null and ordYn.equals("N")'>
					/* 발령확정취소 처리건만 조회 */
					AND ORD_YN = 'N' AND ORD_YN_TMP = 'Y'
					ORDER BY ORD_YMD DESC , SABUN, APPLY_SEQ DESC
					</if>

		</select>

<!-- 발령처리 저장 -->
		<update parameterType="map" id="saveExecAppmt">

					MERGE INTO THRM221 T
					USING (SELECT A.ENTER_CD
					             ,A.ORD_DETAIL_CD
					             ,A.SABUN
					             ,A.NAME
					             ,A.ORD_YMD
					             ,A.APPLY_SEQ
					             ,A.ORD_TYPE_CD
					             ,A.ORD_REASON_CD
					             ,A.PROCESS_NO
					             ,A.ORD_YN
					             ,A.VISUAL_YN
					         FROM (SELECT NULL AS ENTER_CD
					                     ,NULL AS ORD_DETAIL_CD
					                     ,NULL AS SABUN
					                     ,NULL AS NAME
					                     ,NULL AS ORD_YMD
					                     ,NULL AS APPLY_SEQ
					                     ,NULL AS ORD_TYPE_CD
					                     ,NULL AS ORD_REASON_CD
					                     ,NULL AS PROCESS_NO
					                     ,NULL AS ORD_YN
					                     ,NULL AS VISUAL_YN
					                 FROM DUAL
<foreach item="rm" collection="mergeRows" >
					               UNION ALL
					               SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD
					                     ,TRIM(#{rm.ordDetailCd}) AS ORD_DETAIL_CD
					                     ,TRIM(#{rm.sabun}) AS SABUN
					                     ,TRIM(#{rm.name}) AS NAME
					                     ,TRIM(#{rm.ordYmd}) AS ORD_YMD
					                     ,TRIM(#{rm.applySeq}) AS APPLY_SEQ
					                     ,TRIM(#{rm.ordTypeCd}) AS ORD_TYPE_CD
					                     ,TRIM(#{rm.ordReasonCd}) AS ORD_REASON_CD
					                     ,TRIM(#{rm.processNo}) AS PROCESS_NO
					                     ,TRIM(#{rm.ordYn}) AS ORD_YN
					                     ,TRIM(#{rm.visualYn}) AS VISUAL_YN
					                 FROM DUAL
</foreach>
					                 ) A
					        WHERE ENTER_CD 		IS NOT NULL
					          AND ORD_DETAIL_CD IS NOT NULL
					          AND SABUN 		IS NOT NULL
					          AND ORD_YMD 		IS NOT NULL
					          AND APPLY_SEQ 	IS NOT NULL) S
					ON (T.ENTER_CD = S.ENTER_CD AND T.ORD_TYPE_CD = S.ORD_TYPE_CD AND T.ORD_DETAIL_CD = S.ORD_DETAIL_CD AND T.SABUN = S.SABUN AND T.ORD_YMD = S.ORD_YMD AND T.APPLY_SEQ = S.APPLY_SEQ)
					WHEN MATCHED THEN
					  UPDATE SET T.ORD_REASON_CD = S.ORD_REASON_CD
					        --,T.ORD_YN        = S.ORD_YN
					        ,T.VISUAL_YN     = S.VISUAL_YN
					        ,T.CHKDATE       = SYSDATE
					        ,T.CHKID         = #{ssnSabun}
					WHEN NOT MATCHED THEN
					  INSERT
					    (T.ENTER_CD
					    ,T.ORD_DETAIL_CD
					    ,T.SABUN
					    ,T.NAME
					    ,T.ORD_YMD
					    ,T.APPLY_SEQ
					    ,T.ORD_TYPE_CD
					    ,T.ORD_REASON_CD
					    ,T.PROCESS_NO
					    --,T.ORD_YN
					    ,T.VISUAL_YN)
					  VALUES
					    (S.ENTER_CD
					    ,S.ORD_DETAIL_CD
					    ,S.SABUN
					    ,S.NAME
					    ,S.ORD_YMD
					    ,S.APPLY_SEQ
					    ,S.ORD_TYPE_CD
					    ,S.ORD_REASON_CD
					    ,S.PROCESS_NO
					    --,S.ORD_YN
					    ,S.VISUAL_YN
					     )

		</update>
		<update parameterType="map" id="saveExecAppmt2">

					MERGE INTO THRM223 T
					USING (SELECT A.ENTER_CD
					             ,A.ORD_DETAIL_CD
					             ,A.SABUN
					             ,A.ORD_YMD
					             ,A.APPLY_SEQ
					             ,A.POST_ITEM
					             ,A.POST_ITEM_VALUE
					             ,A.ORD_TYPE_CD
					         FROM (SELECT NULL AS ENTER_CD
					                     ,NULL AS ORD_DETAIL_CD
					                     ,NULL AS SABUN
					                     ,NULL AS ORD_YMD
					                     ,NULL AS APPLY_SEQ
					                     ,NULL AS POST_ITEM
					                     ,NULL AS POST_ITEM_VALUE
					                     ,NULL AS ORD_TYPE_CD
					                 FROM DUAL
<foreach item="rm" collection="mergeRows" >
					               UNION ALL
					               SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD
					                     ,TRIM(#{rm.ordDetailCd}) AS ORD_DETAIL_CD
					                     ,TRIM(#{rm.sabun}) AS SABUN
					                     ,TRIM(#{rm.ordYmd}) AS ORD_YMD
					                     ,TRIM(#{rm.applySeq}) AS APPLY_SEQ
					                     ,TRIM(#{rm.postItem}) AS POST_ITEM
					                     ,TRIM(#{rm.value}) AS POST_ITEM_VALUE
					                     ,TRIM(#{rm.ordTypeCd}) AS ORD_TYPE_CD

					                 FROM DUAL
</foreach>
					                 ) A
					        WHERE ENTER_CD IS NOT NULL
					          AND ORD_DETAIL_CD IS NOT NULL
					          AND SABUN IS NOT NULL
					          AND ORD_YMD IS NOT NULL
					          AND APPLY_SEQ IS NOT NULL
					          AND POST_ITEM IS NOT NULL) S
					ON (T.ENTER_CD = S.ENTER_CD AND T.ORD_TYPE_CD = S.ORD_TYPE_CD AND T.ORD_DETAIL_CD = S.ORD_DETAIL_CD AND T.SABUN = S.SABUN AND T.ORD_YMD = S.ORD_YMD AND T.APPLY_SEQ = S.APPLY_SEQ AND T.POST_ITEM = S.POST_ITEM)
					WHEN MATCHED THEN
					  UPDATE SET T.POST_ITEM_VALUE = S.POST_ITEM_VALUE
					        ,T.CHKDATE = SYSDATE
					        ,T.CHKID   = #{ssnSabun}
					WHEN NOT MATCHED THEN
					  INSERT
					    (T.ENTER_CD
					    ,T.ORD_DETAIL_CD
					    ,T.SABUN
					    ,T.ORD_YMD
					    ,T.APPLY_SEQ
					    ,T.POST_ITEM
					    ,T.POST_ITEM_VALUE
					    ,T.ORD_TYPE_CD
					    ,T.CHKDATE
					    ,T.CHKID)
					  VALUES
					    (S.ENTER_CD
					    ,S.ORD_DETAIL_CD
					    ,S.SABUN
					    ,S.ORD_YMD
					    ,S.APPLY_SEQ
					    ,S.POST_ITEM
					    ,S.POST_ITEM_VALUE
					    ,S.ORD_TYPE_CD
					    ,SYSDATE
					    ,#{ssnSabun})
		</update>


		<update parameterType="map" id="saveExecAppmt3">

					MERGE INTO THRM129 T
					USING (SELECT A.ENTER_CD
					             ,A.ORD_DETAIL_CD
					             ,A.SABUN
					             ,A.ORD_YMD
					             ,A.APPLY_SEQ
					             ,A.ORD_TYPE_CD
					             ,A.SEQ
					       		 ,A.PUNISH_YMD
					      		 ,A.PUNISH_CD
					      		 ,A.SDATE
					      		 ,A.EDATE
					      		 ,A.PUNISH_TERM
					      		 ,A.IN_OUT_CD
					      		 ,A.SUGGEST_ORG_CD
					      		 ,A.PUNISH_SUGGEST_YMD
					      		 ,A.PUNISH_OFFICE
					      		 ,A.DISPLAY_YN
					      		 ,A.PUNISH_MEMO
					      		 ,A.MEMO
					         FROM (SELECT NULL AS ENTER_CD
					                     ,NULL AS ORD_DETAIL_CD
					                     ,NULL AS SABUN
					                     ,NULL AS ORD_YMD
					                     ,NULL AS APPLY_SEQ
					                     ,NULL AS ORD_TYPE_CD
					                     ,NULL AS SEQ

					                     ,NULL AS PUNISH_YMD
					                     ,NULL AS PUNISH_CD
					                     ,NULL AS SDATE
					                     ,NULL AS EDATE
					                     ,NULL AS PUNISH_TERM
					                     ,NULL AS IN_OUT_CD
					                     ,NULL AS SUGGEST_ORG_CD
					                     ,NULL AS PUNISH_SUGGEST_YMD
					                     ,NULL AS PUNISH_OFFICE
					                     ,NULL AS DISPLAY_YN
					                     ,NULL AS PUNISH_MEMO
					                     ,NULL AS MEMO
					                 FROM DUAL
					               UNION ALL
					               SELECT TRIM(#{ssnEnterCd}) 		AS ENTER_CD
					                     ,TRIM(#{ordDetailCd}) 		AS ORD_DETAIL_CD
					                     ,TRIM(#{sabun}) 				AS SABUN
					                     ,TRIM(#{ordYmd}) 			AS ORD_YMD
					                     ,TRIM(#{applySeq}) 			AS APPLY_SEQ
					                     ,TRIM(#{ordTypeCd}) 			AS ORD_TYPE_CD
	                                     ,TRIM(#{seq})            AS SEQ
					                     ,TRIM(#{punishYmd}) 		AS PUNISH_YMD
					                     ,TRIM(#{punishCd}) 	AS PUNISH_CD
					                     ,TRIM(#{sdate}) 		AS SDATE
					                     ,TRIM(#{edate}) 			AS EDATE
					                     ,TRIM(#{punishTerm}) 			AS PUNISH_TERM
					                     ,TRIM(#{inOutCd})  AS IN_OUT_CD
					                     ,TRIM(#{suggestOrgCd}) 			AS SUGGEST_ORG_CD
					                     ,TRIM(#{punishSuggestYmd}) 		AS PUNISH_SUGGEST_YMD
					                     ,TRIM(#{punishOffice}) 			AS PUNISH_OFFICE
					                     ,TRIM(#{displayYn}) 		AS DISPLAY_YN
					                     ,TRIM(#{punishMemo}) 		AS PUNISH_MEMO
					                     ,TRIM(#{displayMemo}) 		AS MEMO
					                 FROM DUAL
					                 ) A
					        WHERE ENTER_CD IS NOT NULL
					          AND ORD_DETAIL_CD IS NOT NULL
					          AND SABUN IS NOT NULL
					          AND ORD_YMD IS NOT NULL
					          AND APPLY_SEQ IS NOT NULL
					          AND ORD_TYPE_CD IS NOT NULL
					           AND SEQ IS NOT NULL) S
					ON (T.ENTER_CD = S.ENTER_CD
						AND T.ORD_DETAIL_CD = S.ORD_DETAIL_CD
						AND T.SABUN = S.SABUN
						AND T.ORD_YMD = S.ORD_YMD
						AND T.APPLY_SEQ = S.APPLY_SEQ
						AND T.ORD_TYPE_CD = S.ORD_TYPE_CD
						 AND T.SEQ = S.SEQ)
					WHEN MATCHED THEN
					  UPDATE SET
					         T.PUNISH_YMD        = S.PUNISH_YMD
					        ,T.PUNISH_CD         = S.PUNISH_CD
					        ,T.SDATE             = S.SDATE
					        ,T.EDATE             = S.EDATE
					        ,T.PUNISH_TERM       = S.PUNISH_TERM
					        ,T.IN_OUT_CD         = S.IN_OUT_CD
					        ,T.SUGGEST_ORG_CD    = S.SUGGEST_ORG_CD
					        ,T.PUNISH_SUGGEST_YMD = S.PUNISH_SUGGEST_YMD
					        ,T.PUNISH_OFFICE     = S.PUNISH_OFFICE
					        ,T.DISPLAY_YN        = S.DISPLAY_YN
					        ,T.PUNISH_MEMO       = S.PUNISH_MEMO
					        ,T.MEMO              = S.MEMO

					        ,T.CHKDATE = SYSDATE
					        ,T.CHKID   = #{ssnSabun}
					WHEN NOT MATCHED THEN
					  INSERT
					    (T.ENTER_CD
					    ,T.ORD_DETAIL_CD
					    ,T.SABUN
					    ,T.ORD_YMD
					    ,T.APPLY_SEQ
					    ,T.SEQ
					    ,T.ORD_TYPE_CD

					    ,T.PUNISH_YMD
					    ,T.PUNISH_CD
					    ,T.SDATE
					    ,T.EDATE
					    ,T.PUNISH_TERM
					    ,T.IN_OUT_CD
					    ,T.SUGGEST_ORG_CD
					    ,T.PUNISH_SUGGEST_YMD
					    ,T.PUNISH_OFFICE
					    ,T.DISPLAY_YN
					    ,T.PUNISH_MEMO
					    ,T.MEMO

					    ,T.CHKDATE
					    ,T.CHKID)
					  VALUES
					    (S.ENTER_CD
					    ,S.ORD_DETAIL_CD
					    ,S.SABUN
					    ,S.ORD_YMD
					    ,S.APPLY_SEQ
					    ,S.SEQ
					    ,S.ORD_TYPE_CD

					    ,S.PUNISH_YMD
					    ,S.PUNISH_CD
					    ,S.SDATE
					    ,S.EDATE
					    ,S.PUNISH_TERM
					    ,S.IN_OUT_CD
					    ,S.SUGGEST_ORG_CD
					    ,S.PUNISH_SUGGEST_YMD
					    ,S.PUNISH_OFFICE
					    ,S.DISPLAY_YN
					    ,S.PUNISH_MEMO
					    ,S.MEMO

					    ,SYSDATE
					    ,#{ssnSabun})
		</update>

		<update parameterType="map" id="saveExecAppmt4">

					MERGE INTO THRM229 T
					USING (SELECT A.ENTER_CD
					             ,A.ORD_DETAIL_CD
					             ,A.SABUN
					             ,A.ORD_YMD
					             ,A.APPLY_SEQ
					             ,A.APPL_SEQ
					             ,A.ORD_TYPE_CD
					             ,A.FAM_NM
					             ,A.FAMRES
					         FROM (SELECT NULL AS ENTER_CD
					                     ,NULL AS ORD_DETAIL_CD
					                     ,NULL AS SABUN
					                     ,NULL AS ORD_YMD
					                     ,NULL AS APPLY_SEQ
					                     ,NULL AS APPL_SEQ
					                     ,NULL AS ORD_TYPE_CD
					                     ,NULL AS FAM_NM
					                     ,NULL AS FAMRES
					                 FROM DUAL
					               UNION ALL
					               SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD
					                     ,TRIM(#{ordDetailCd}) AS ORD_DETAIL_CD
					                     ,TRIM(#{sabun}) AS SABUN
					                     ,TRIM(#{ordYmd}) AS ORD_YMD
					                     ,TRIM(#{applySeq}) AS APPLY_SEQ
					                     ,TRIM(#{applSeq}) AS APPL_SEQ
					                     ,TRIM(#{ordTypeCd}) AS ORD_TYPE_CD
					                     ,TRIM(#{famNm}) AS FAM_NM
					                     ,CRYPTIT.ENCRYPT(TRIM(#{famres}), #{ssnEnterCd}) AS FAM_RES
					                 FROM DUAL
					                 ) A
					        WHERE ENTER_CD IS NOT NULL
					          AND ORD_DETAIL_CD IS NOT NULL
					          AND SABUN IS NOT NULL
					          AND ORD_YMD IS NOT NULL
					          AND APPL_SEQ IS NOT NULL
					          AND ORD_TYPE_CD IS NOT NULL
					          AND ORD_TYPE_CD IS NOT NULL) S
					ON (T.ENTER_CD = S.ENTER_CD
						AND T.ORD_DETAIL_CD = S.ORD_DETAIL_CD
						AND T.SABUN = S.SABUN
						AND T.ORD_YMD = S.ORD_YMD
						AND T.APPL_SEQ = S.APPL_SEQ
						AND T.ORD_TYPE_CD = S.ORD_TYPE_CD)
					WHEN MATCHED THEN
					  UPDATE SET
					        T.FAM_NM	= S.FAM_NM
					       , T.APPLY_SEQ	= S.APPLY_SEQ
					        ,T.FAMRES	= S.FAMRES
					        ,T.CHKDATE	= SYSDATE
					        ,T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
					  INSERT
					    (T.ENTER_CD
					    ,T.ORD_DETAIL_CD
					    ,T.SABUN
					    ,T.ORD_YMD
					    ,T.APPLY_SEQ
					    ,T.APPL_SEQ
					    ,T.ORD_TYPE_CD
					    ,T.FAM_NM
					    ,T.FAMRES
					    ,T.CHKDATE
					    ,T.CHKID)
					  VALUES
					    (S.ENTER_CD
					    ,S.ORD_DETAIL_CD
					    ,S.SABUN
					    ,S.ORD_YMD
					    ,S.APPLY_SEQ
					    ,S.APPL_SEQ
					    ,S.ORD_TYPE_CD
					    ,S.FAM_NM
					    ,S.FAMRES
					    ,SYSDATE
					    ,#{ssnSabun})
		</update>

<!-- 발령처리 삭제 -->
		<delete parameterType="map" id="deleteExecAppmt">

					DELETE FROM THRM221
					WHERE ENTER_CD = #{ssnEnterCd}
					  AND (ENTER_CD, ORD_DETAIL_CD, SABUN, ORD_YMD, APPLY_SEQ, ORD_TYPE_CD) IN (  (NULL, NULL, NULL, NULL, NULL, NULL)
									<foreach item="rm" collection="deleteRows" >
										,(#{ssnEnterCd}, #{rm.ordDetailCd}, #{rm.sabun}, #{rm.ordYmd}, #{rm.applySeq}, #{rm.ordTypeCd})
									</foreach>
									)


		</delete>
		<delete parameterType="map" id="deleteExecAppmt2">

					DELETE FROM THRM223
					 WHERE ENTER_CD = #{ssnEnterCd}
					 AND (ENTER_CD, ORD_DETAIL_CD, SABUN, ORD_YMD, APPLY_SEQ, POST_ITEM) IN ( (NULL, NULL, NULL, NULL, NULL, NULL)
					 <foreach item="rm" collection="deleteRows" >
					 	,(#{ssnEnterCd}, #{rm.ordDetailCd}, #{rm.sabun}, #{rm.ordYmd}, #{rm.applySeq}, #{rm.postItem})
					 </foreach>
					 )

		</delete>

		<delete parameterType="map" id="deleteExecAppmt3">

					DELETE FROM THRM129
					WHERE ENTER_CD = #{ssnEnterCd}
					  AND (ENTER_CD, ORD_DETAIL_CD, SABUN, ORD_YMD, APPLY_SEQ, ORD_TYPE_CD) IN (  (NULL, NULL, NULL, NULL, NULL, NULL)
									<foreach item="rm" collection="deleteRows" >
										,(#{ssnEnterCd}, #{rm.ordDetailCd}, #{rm.sabun}, #{rm.ordYmd}, #{rm.applySeq}, #{rm.ordTypeCd})
									</foreach>
									)


		</delete>

		<delete parameterType="map" id="deleteExecAppmt4">

					DELETE FROM THRM229
					WHERE ENTER_CD = #{ssnEnterCd}
					  AND (ENTER_CD, ORD_DETAIL_CD, SABUN, ORD_YMD, APPL_SEQ, ORD_TYPE_CD ) IN (  (NULL, NULL, NULL, NULL, NULL, NULL)
									<foreach item="rm" collection="deleteRows" >
										,(#{ssnEnterCd}, #{rm.ordDetailCd}, #{rm.sabun}, #{rm.ordYmd}, #{rm.applSeq}, #{rm.ordTypeCd})
									</foreach>
									)
		</delete>

		<select parameterType="map" resultType="cMap" id="getEmployeePostInfo">

				SELECT A.ENTER_CD
<foreach item="rm" collection="postItemRows" >
	<choose><when test='!rm.dataYn.equals("Y")'>
		<bind name="nm" value='rm.postItem+"_VALUE"'/>
					      ,NULL AS ${nm}
		<if test='rm.cType.equals("P") or rm.cType.equals("C")'>
			<bind name="nm" value='rm.postItem+"_NM_VALUE"' />
							  ,NULL AS ${nm}
		</if>
		</when><otherwise>
		<bind name="nm" value='rm.postItem+"_VALUE"'/>
					      ,DECODE(B.SABUN
					             ,NULL
			<choose><when test='rm.cType.equals("D")'>
					             ,TO_CHAR(TO_DATE(A.${rm.columnCd}, 'YYYYMMDD'), 'YYYY-MM-DD')
					             ,(SELECT TO_CHAR(TO_DATE(POST_ITEM_VALUE, 'YYYYMMDD'), 'YYYY-MM-DD') AS POST_ITEM_VALUE
			</when><otherwise>
								,A.${rm.columnCd}
								,(SELECT POST_ITEM_VALUE
			</otherwise>
			</choose>
					                FROM THRM223
					               WHERE ENTER_CD = #{ssnEnterCd}
					               	 AND ORD_DETAIL_CD = B.ORD_DETAIL_CD
					                 AND SABUN = #{sabun}
					                 AND ORD_YMD = B.ORD_YMD
					                 AND APPLY_SEQ = B.APPLY_SEQ
					                 AND POST_ITEM = #{rm.postItem})) AS ${nm}
		<if test='rm.cType.equals("P") or rm.cType.equals("C")'>
		<bind name="nm" value='rm.postItem+"_NM_VALUE"' />
						  ,DECODE(B.SABUN
					             ,NULL
					             ,A.${rm.nmColumnCd}
					             ,(SELECT POST_ITEM_VALUE
					                FROM THRM223
					               WHERE ENTER_CD = #{ssnEnterCd}
					                 AND ORD_DETAIL_CD = B.ORD_DETAIL_CD
					                 AND SABUN = #{sabun}
					                 AND ORD_YMD = B.ORD_YMD
					                 AND APPLY_SEQ = B.APPLY_SEQ
					                 AND POST_ITEM = #{rm.postItem}||'_NM')) AS ${nm}
		</if>
		</otherwise>
	</choose>
</foreach>
				  FROM (SELECT A.*
			                 , F_COM_GET_ORG_NM(A.ENTER_CD, A.ORG_CD, A.SDATE) AS ORG_NM
			                 , F_COM_GET_JOB_NM(A.ENTER_CD, A.SABUN, A.SDATE) AS JOB_NM
				          FROM THRM151 A
				         WHERE ENTER_CD = #{ssnEnterCd}
				           AND SABUN = #{sabun}
						   AND SDATE = (
										SELECT MAX(SDATE)
										  FROM THRM151
										 WHERE ENTER_CD = #{ssnEnterCd}
										   AND SABUN = #{sabun}
										<if test='ordYmd != null and !ordYmd.equals("")'>
										   AND #{ordYmd} BETWEEN SDATE AND EDATE
										</if>
										)
				        ) A
				      ,(SELECT *
				          FROM THRM221
				         WHERE ENTER_CD = #{ssnEnterCd}
				           AND SABUN = #{sabun}
				           AND (ORD_YMD, APPLY_SEQ) =
				               (SELECT ORD_YMD
				                      ,MAX(APPLY_SEQ)
				                  FROM THRM221
				                 WHERE ENTER_CD = #{ssnEnterCd}
				                   AND SABUN = #{sabun}
				                   AND ORD_YMD = (SELECT MAX(ORD_YMD)
				                                       FROM THRM221
				                                      WHERE ENTER_CD = #{ssnEnterCd}
				                                        AND SABUN = #{sabun}
													<if test='ordYmd != null and !ordYmd.equals("")'>
				                                       <![CDATA[ AND ORD_YMD <= #{ordYmd} ]]>
													</if>
													)
				                 GROUP BY ORD_YMD)) B
				 WHERE A.ENTER_CD = B.ENTER_CD(+)
				   AND A.SABUN = B.SABUN(+)
		</select>

		<select parameterType="map" resultType="cMap" id="getPostItemPropList">

				<![CDATA[
					SELECT ORD_TYPE_CD
					      , POST_ITEM
					      , MANDATORY_YN
					      , VISIBLE_YN
					  FROM THRM201
					 WHERE ENTER_CD = #{ssnEnterCd}
					   AND ORD_TYPE_CD IN
					   ]]>
		<foreach collection="multiOrdTypeCd" item="item" index="index" open="(" close=")" separator=",">
				#{item}
		</foreach>


		</select>
		<select parameterType="map" resultType="cMap" id="getPostDetailTypeList">

					SELECT A.ORD_TYPE_CD
						, A.ORD_TYPE_NM
						, A.ORD_TYPE
						, A.MAIN_YN
						, B.ORD_DETAIL_CD AS CODE
						, B.ORD_DETAIL_NM AS CODE_NM
					FROM TSYS011 A
						, TSYS013 B
					WHERE A.ENTER_CD = B.ENTER_CD
						AND A.ORD_TYPE_CD = B.ORD_TYPE_CD
						AND A.ENTER_CD = #{ssnEnterCd}
						AND A.ORD_TYPE_CD IN
		<foreach collection="multiOrdTypeCd" item="item" index="index" open="(" close=")" separator=",">
				#{item}
		</foreach>
						<if test='useYn != null and !useYn.equals("")'>
							AND B.USE_YN = TRIM( #{useYn} )
						</if>
					ORDER BY A.SEQ


		</select>
		<select parameterType="map" resultType="cMap" id="getMaxApplySeq">

				<![CDATA[
					SELECT NVL(MAX(APPLY_SEQ), 0) + 1 APPLY_SEQ
					  FROM ( SELECT APPLY_SEQ
							   FROM THRM221
							  WHERE ENTER_CD = #{ssnEnterCd}
							    AND SABUN = #{sabun}
							    AND ORD_YMD = REPLACE(TRIM( #{ordYmd} ),'-','')
							  UNION ALL
							 SELECT APPLY_SEQ
							   FROM THRM191 /* 발령내역수정에만 입력된 경우도 있음 */
							  WHERE ENTER_CD = #{ssnEnterCd}
							    AND SABUN = #{sabun}
							    AND ORD_YMD = REPLACE(TRIM( #{ordYmd} ),'-','')
							)
				]]>

		</select>

		<select parameterType="map" resultType="cMap" id="getPostDupChk">

				<![CDATA[
					SELECT PROCESS_NO
						 , (SELECT PROCESS_TITLE FROM THRM220 WHERE ENTER_CD = A.ENTER_CD AND PROCESS_NO = A.PROCESS_NO ) AS PROCESS_TITLE
					  FROM THRM221 A
					 WHERE ENTER_CD = #{ssnEnterCd}
					   AND ORD_TYPE_CD = #{ordTypeCd}
					   AND ORD_DETAIL_CD = #{ordDetailCd}
					   AND SABUN = #{sabun}
					   AND ORD_YMD = REPLACE(TRIM( #{ordYmd} ), '-', '')
					   AND ROWNUM = 1
				]]>

		</select>

		<select parameterType="map" resultType="cMap" id="getOrdTypeYn">

				<![CDATA[
				   SELECT DECODE(SUM(APPL_ORD_TYPE_CD),0,'N','Y')  AS ORD_TYPE_YN
				     FROM ( SELECT COUNT(*) AS APPL_ORD_TYPE_CD
				              FROM TSYS011 A , THRM207 B
				             WHERE A.ENTER_CD = B.ENTER_CD
				         	   AND A.ENTER_CD = #{ssnEnterCd}
				        	   AND A.ORD_TYPE_CD = #{ordTypeCd}
				        	   AND B.SABUN = #{ssnSabun}
				        	 UNION ALL
				        	SELECT COUNT(*) AS APPL_ORD_TYPE_CD
				              FROM TSYS011 A , THRM205 B
				             WHERE A.ENTER_CD = B.ENTER_CD
				               AND A.ORD_TYPE_CD = B.ORD_TYPE_CD
				        	   AND A.ENTER_CD = #{ssnEnterCd}
				        	   AND A.ORD_TYPE_CD =  #{ordTypeCd}
				        	   AND B.SABUN = #{ssnSabun}
				          )

				]]>

		</select>

		<select parameterType="map" resultType="cMap" id="getMainDeptCnt">

				<![CDATA[
						SELECT COUNT(*) AS MAIN_DEPT_CNT
						  FROM THRM100 A, THRM151 B
						 WHERE A.ENTER_CD = B.ENTER_CD
						   AND A.SABUN = B.SABUN
						   AND B.SDATE = (SELECT MAX(X.SDATE)
						                    FROM THRM151 X
						                   WHERE X.ENTER_CD = B.ENTER_CD
						                     AND X.SABUN = B.SABUN)
						   AND B.MAIN_DEPT_YN = 'Y'
						   AND B.ENTER_CD <> #{ssnEnterCd}
						   AND B.STATUS_CD <> 'RA'
						   AND A.RES_NO IN 	 (SELECT A.RES_NO
						                        FROM TSTF901 A
						                       WHERE A.ENTER_CD = #{ssnEnterCd}
						                         AND A.SABUN = #{searchSabun}
						                       UNION
						                      SELECT A.RES_NO
						                        FROM THRM100 A
						                        WHERE A.ENTER_CD = #{ssnEnterCd}
						                          AND A.SABUN = #{searchSabun}
						                        )
				]]>

		</select>

		<!-- 발령처리 프로시저 -->
		<update parameterType="map" id="prcExecAppmtSave" statementType="CALLABLE">
		<![CDATA[
			{CALL P_HRM_POST(
				#{rMsg,mode=OUT,jdbcType=VARCHAR},
				#{sqlCode,mode=OUT,jdbcType=VARCHAR},
				#{sqlErrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{sabun,mode=IN,jdbcType=VARCHAR},
				#{ordYmd,mode=IN,jdbcType=VARCHAR},
				#{applySeq,mode=IN,jdbcType=VARCHAR},
				#{ordTypeCd,mode=IN,jdbcType=VARCHAR},
				#{ordDetailCd,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

		<update parameterType="map" id="prcExecAppmtLaregeSave" statementType="CALLABLE">
		<![CDATA[
			{CALL P_HRM_POST_LARGE(
				#{rMsg,mode=OUT,jdbcType=VARCHAR},
				#{successCnt,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{searchProcessNo,mode=IN,jdbcType=VARCHAR},
				#{searchSabun,mode=IN,jdbcType=VARCHAR},
				#{searchOrdYmdFrom,mode=IN,jdbcType=VARCHAR},
				#{searchOrdYmdTo,mode=IN,jdbcType=VARCHAR},
				#{searchOrdTypeCd,mode=IN,jdbcType=VARCHAR},
				#{searchOrdTypeCd,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

		<!-- 발령취소 프로시저 -->
		<update parameterType="map" id="prcExecAppmtCancel" statementType="CALLABLE">
		<![CDATA[
			{CALL P_HRM_POST_CANCEL(
				#{rMsg,mode=OUT,jdbcType=VARCHAR},
				#{sqlCode,mode=OUT,jdbcType=VARCHAR},
				#{sqlErrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{sabun,mode=IN,jdbcType=VARCHAR},
				#{ordYmd,mode=IN,jdbcType=VARCHAR},
				#{applySeq,mode=IN,jdbcType=VARCHAR},
				#{ordTypeCd,mode=IN,jdbcType=VARCHAR},
				#{ordDetailCd,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

		<select parameterType="map" resultType="cMap" id="getOrdResonCdText">

				<![CDATA[
					SELECT F_COM_GET_GRCODE_NOTE_VAL(#{ssnEnterCd} , 'H40110' ,#{searchOrdReasonCd}, 2) AS REASON_TXT
					  FROM DUAL
				]]>


		</select>


		<select parameterType="map" resultType="cMap" id="getOrdTypeStatusCd">

				<![CDATA[
				   SELECT NVL(B.NOTE1, D.STATUS_CD) AS STATUS_CD
				        , NVL2(B.NOTE1, F_COM_GET_GRCODE_NAME(B.ENTER_CD, 'H10010', B.NOTE1), D.STATUS_NM) AS STATUS_NM
				        , C.POST_ITEM                   AS ITEM_FIELD
				        , C.POST_ITEM || '_NM_VALUE'          AS ITEM_FIELD_NM
				        , C.POST_ITEM || '_VALUE' AS ITEM_FIELD_VALUE
                     FROM TSYS011 A
               INNER JOIN TSYS005 B
                       ON A.ENTER_CD    = B.ENTER_CD
                      AND A.ORD_TYPE    = B.CODE
                      AND B.GRCODE_CD   = 'H40001'
					  AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN B.S_YMD AND B.E_YMD
               INNER JOIN THRM200 C
                       ON C.ENTER_CD    = A.ENTER_CD
					  AND C.COLUMN_CD   = 'STATUS_CD'
					  AND C.C_TYPE      = 'C'
			          AND C.POPUP_TYPE  = 'H10010'
   	      LEFT OUTER JOIN THRM151 D
			           ON D.ENTER_CD    = A.ENTER_CD
			          AND D.SABUN       = #{sabun}
			          AND NVL(#{ordYmd}, TO_CHAR(SYSDATE,'YYYYMMDD')) BETWEEN D.SDATE AND NVL(D.EDATE, '99991231')
                    WHERE A.ENTER_CD    = #{ssnEnterCd}
				      AND A.ORD_TYPE_CD = #{ordTypeCd}
				]]>

		</select>

	<!-- 발령처리 권한그룹사용자 저장 -->
    <update parameterType="map" id="saveExecAppmtAuthGrp">
        MERGE INTO TSYS313 T
             USING (
					SELECT #{ssnEnterCd}              AS ENTER_CD
						 , TRIM(#{grpCd})            AS GRP_CD
						 , TRIM(#{sabun})          AS SABUN
						 , 'R'                        AS DATA_RW_TYPE
						 , 'O'                        AS SEARCH_TYPE
						 , 'Y'                        AS AUTO_YN
					 FROM  DUAL
					) S
				ON (    T.ENTER_CD = S.ENTER_CD
					AND T.GRP_CD = S.GRP_CD
					AND T.SABUN = S.SABUN )
        WHEN MATCHED THEN
		     UPDATE
		       SET T.DATA_RW_TYPE   = S.DATA_RW_TYPE
			      , T.SEARCH_TYPE    = S.SEARCH_TYPE
		 	      , T.AUTO_YN         = S.AUTO_YN
				  , T.CHKDATE        = SYSDATE
				  , T.CHKID          = #{ssnSabun}
        WHEN NOT MATCHED THEN
			INSERT
	    	(
				  T.ENTER_CD
				, T.GRP_CD
				, T.SABUN
				, T.DATA_RW_TYPE
				, T.SEARCH_TYPE
				, T.AUTO_YN
				, T.CHKDATE
				, T.CHKID
			)
			VALUES
			(
				  S.ENTER_CD
				, S.GRP_CD
				, S.SABUN
				, S.DATA_RW_TYPE
				, S.SEARCH_TYPE
				, S.AUTO_YN
				, SYSDATE
				, #{ssnSabun}
			)
	</update>

	<!-- 발령처리 권한그룹사용자 삭제 -->
	<delete parameterType="map" id="deleteExecAppmtAuthGrp">

		DELETE FROM TSYS313
	      WHERE ENTER_CD = TRIM(#{ssnEnterCd})
			AND GRP_CD   = TRIM(#{grpCd})
			AND SABUN    = TRIM(#{sabun})
	</delete>

</mapper>