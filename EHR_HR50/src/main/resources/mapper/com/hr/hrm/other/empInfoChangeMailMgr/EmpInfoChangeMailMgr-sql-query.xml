<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="hrm.other.empInfoChangeMailMgr">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getEmpInfoChangeMailMgrList">

						SELECT T.ENTER_CD
						     , (SELECT ENTER_NM FROM TORG900 WHERE ENTER_CD = T.ENTER_CD) AS ENTER_NM
						     , T.SABUN
						     , T.NAME
						     , T.ORG_CD
						     , T.ORG_NM
						     , T.JIKCHAK_CD
						     , T.JIKCHAK_NM
						     , T.JIKGUB_CD
						     , T.JIKGUB_NM
						     , F_COM_GET_JIKWEE_CD(T.ENTER_CD, T.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')) AS JIKWEE_CD
						     , F_COM_GET_JIKWEE_NM(T.ENTER_CD, T.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')) AS JIKWEE_NM
						     , T.HAND_PHONE
						     , T.MAIL_ID
						     , T.MAIL_YN
						     , T.SMS_YN
						     , T.GW_YN
						     , T.NOTE
						     , T.EMP_TABLE
						  FROM THRM801 T
						 WHERE 1=1
						 AND T.ENTER_CD= #{ssnEnterCd}
						<if test='searchName != null and !searchName.equals("")'>
						   AND NAME LIKE '%'|| #{searchName} ||'%'
						</if>
						ORDER BY CHKDATE DESC



		</select>

<!-- 		저장 -->
		<update parameterType="map" id="saveEmpInfoChangeMailMgr">

MERGE INTO THRM801 T
USING (
       SELECT A.ENTER_CD
            , A.SABUN
            , A.NAME
            , A.ORG_CD
            , A.ORG_NM
            , A.JIKCHAK_CD
            , A.JIKCHAK_NM
            , A.JIKGUB_CD
            , A.JIKGUB_NM
            , A.HAND_PHONE
            , A.MAIL_ID
            , A.MAIL_YN
            , A.SMS_YN
            , A.GW_YN
            , A.NOTE
            , A.EMP_TABLE
         FROM (
              SELECT NULL AS ENTER_CD
                   , NULL AS SABUN
                   , NULL AS NAME
                   , NULL AS ORG_CD
                   , NULL AS ORG_NM
                   , NULL AS JIKCHAK_CD
                   , NULL AS JIKCHAK_NM
                   , NULL AS JIKGUB_CD
                   , NULL AS JIKGUB_NM
                   , NULL AS HAND_PHONE
                   , NULL AS MAIL_ID
                   , NULL AS MAIL_YN
                   , NULL AS SMS_YN
                   , NULL AS GW_YN
                   , NULL AS NOTE
                   , NULL AS EMP_TABLE
                FROM DUAL
<foreach item="rm" collection="mergeRows" >
               UNION ALL
              SELECT TRIM( #{rm.enterCd}) AS ENTER_CD
                   , TRIM( #{rm.sabun}) AS SABUN
                   , TRIM( #{rm.name}) AS NAME
                   , TRIM( #{rm.orgCd}) AS ORG_CD
                   , TRIM( #{rm.orgNm}) AS ORG_NM
                   , TRIM( #{rm.jikchakCd}) AS JIKCHAK_CD
                   , TRIM( #{rm.jikchakNm}) AS JIKCHAK_NM
                   , TRIM( #{rm.jikgubCd}) AS JIKGUB_CD
                   , TRIM( #{rm.jikgubNm}) AS JIKGUB_NM
                   , TRIM( #{rm.handPhone}) AS HAND_PHONE
                   , TRIM( #{rm.mailId}) AS MAIL_ID
                   , TRIM( #{rm.mailYn}) AS MAIL_YN
                   , TRIM( #{rm.smsYn}) AS SMS_YN
                   , TRIM( #{rm.gwYn}) AS GW_YN
                   , TRIM( #{rm.note}) AS NOTE
                   , TRIM( #{rm.empTable}) AS EMP_TABLE
                FROM DUAL
</foreach>
                ) A WHERE ENTER_CD IS NOT NULL
      ) S
      ON (    T.ENTER_CD = S.ENTER_CD
          AND T.SABUN = S.SABUN 
          AND T.EMP_TABLE = S.EMP_TABLE 
          )
      WHEN MATCHED THEN
          UPDATE 
             SET T.NAME = S.NAME
               , T.ORG_CD = S.ORG_CD
               , T.ORG_NM = S.ORG_NM
               , T.JIKCHAK_CD = S.JIKCHAK_CD
               , T.JIKCHAK_NM = S.JIKCHAK_NM
               , T.JIKGUB_CD = S.JIKGUB_CD
               , T.JIKGUB_NM = S.JIKGUB_NM
               , T.HAND_PHONE = S.HAND_PHONE
               , T.MAIL_ID = S.MAIL_ID
               , T.MAIL_YN = S.MAIL_YN
               , T.SMS_YN = S.SMS_YN
               , T.GW_YN = S.GW_YN
               , T.NOTE = S.NOTE
      WHEN NOT MATCHED THEN
          INSERT (T.ENTER_CD
                , T.SABUN
                , T.NAME
                , T.ORG_CD
                , T.ORG_NM
                , T.JIKCHAK_CD
                , T.JIKCHAK_NM
                , T.JIKGUB_CD
                , T.JIKGUB_NM
                , T.HAND_PHONE
                , T.MAIL_ID
                , T.MAIL_YN
                , T.SMS_YN
                , T.GW_YN
                , T.NOTE 
                , T.EMP_TABLE 
          ) VALUES (
                  S.ENTER_CD
                , S.SABUN
                , S.NAME
                , S.ORG_CD
                , S.ORG_NM
                , S.JIKCHAK_CD
                , S.JIKCHAK_NM
                , S.JIKGUB_CD
                , S.JIKGUB_NM
                , S.HAND_PHONE
                , S.MAIL_ID
                , S.MAIL_YN
                , S.SMS_YN
                , S.GW_YN
                , S.NOTE
                , S.EMP_TABLE
          )



		</update>
<!-- 		삭제 -->
		<delete parameterType="map" id="deleteEmpInfoChangeMailMgr">

		DELETE FROM THRM801
		 WHERE ENTER_CD = TRIM(#{ssnEnterCd})
		   AND ( EMP_TABLE,SABUN ) IN ( ( NULL,NULL) 
<foreach item="rm" collection="deleteRows" >
    <if test='rm.empTable != null and !rm.empTable.equals("") and rm.sabun != null and !rm.sabun.equals("")'>
		     , ( TRIM( #{rm.empTable} ),TRIM( #{rm.sabun} ) )
	</if>
</foreach>
		       )


		</delete>

</mapper>