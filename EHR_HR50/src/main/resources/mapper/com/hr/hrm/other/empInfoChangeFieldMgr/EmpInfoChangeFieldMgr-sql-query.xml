<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

	<mapper namespace="hrm.other.empInfoChangeFieldMgr">
		<select parameterType="map" resultType="cMap" id="getEmpInfoChangeFieldMgrList">

					SELECT A.ENTER_CD
					      ,A.EMP_TABLE
					      ,A.COLUMN_CD
					      ,A.COLUMN_NM
					      ,A.LIMIT_LENGTH
					      ,A.C_TYPE
					      ,A.D_TYPE
					      ,A.D_CONTENT
					      ,A.POPUP_TYPE
					      ,A.READ_ONLY_YN
					      ,A.MERGE_YN
					      ,A.REL_COLUMN_CD
					      ,A.USE_YN
					      ,A.SEQ
					      ,A.NOTE1
					      ,A.NOTE2
					      ,A.NOTE3
					      ,A.NOTE4
					      ,A.NOTE5
					      ,A.GROUP_COLUMN_CD
					      ,A.GROUP_SEPARATOR
					      ,A.PK_TYPE
					      ,A.CRYPT_KEY
					      ,A.NOT_NULL_YN
					      ,A.HIDDEN_VAL_COLUMN_CD
					      ,A.DISPLAY_YN
					      ,A.CONDITION_YN
					  FROM THRM802 A, THRM800 B
					  WHERE A.ENTER_CD = #{ssnEnterCd}
					    AND A.ENTER_CD = B.ENTER_CD
					    AND A.EMP_TABLE = B.EMP_TABLE
					    <if test='searchEmpTable != null and !searchEmpTable.equals("")'>
					    AND ( B.EMP_TABLE LIKE '%'||UPPER(#{searchEmpTable}) ||'%' OR B.EMP_TABLE_NM LIKE '%'||UPPER(#{searchEmpTable})||'%')
						</if>
					    <if test='searchColumnCd != null and !searchColumnCd.equals("")'>
					    AND ( A.COLUMN_CD LIKE '%'||UPPER(#{searchColumnCd}) ||'%' OR A.COLUMN_NM LIKE '%'||UPPER(#{searchColumnCd})||'%')
						</if>
					    <if test='searchUseYn != null and !searchUseYn.equals("")'>
					    AND A.USE_YN = #{searchUseYn}
						</if>
					  ORDER BY B.SEQ, A.SEQ



		</select>
		
		<update parameterType="map" id="saveEmpInfoChangeFieldMgr">

					MERGE INTO THRM802 T
					USING (SELECT *
					         FROM (SELECT NULL AS ENTER_CD
					                     ,NULL AS EMP_TABLE
					                     ,NULL AS COLUMN_CD
					                     ,NULL AS COLUMN_NM
					                     ,NULL AS LIMIT_LENGTH
					                     ,NULL AS C_TYPE
					                     ,NULL AS D_TYPE
					                     ,NULL AS D_CONTENT
					                     ,NULL AS POPUP_TYPE
					                     ,NULL AS READ_ONLY_YN
					                     ,NULL AS MERGE_YN
					                     ,NULL AS REL_COLUMN_CD
					                     ,NULL AS PK_TYPE
					                     ,NULL AS USE_YN
					                     ,NULL AS SEQ
					                     ,NULL AS GROUP_COLUMN_CD
					                     ,NULL AS GROUP_SEPARATOR
					                     ,NULL AS CRYPT_KEY
					                     ,NULL AS NOT_NULL_YN
					                     ,NULL AS HIDDEN_VAL_COLUMN_CD
					                     ,NULL AS NOTE1
					                     ,NULL AS NOTE2
					                     ,NULL AS NOTE3
					                     ,NULL AS NOTE4
					                     ,NULL AS NOTE5
					                     ,NULL AS DISPLAY_YN
					                     ,NULL AS CONDITION_YN
					                 FROM DUAL
<foreach item="rm" collection="mergeRows" >
					               UNION ALL
					               SELECT #{ssnEnterCd} AS ENTER_CD
					                     ,UPPER(TRIM(#{rm.empTable})) AS EMP_TABLE
					                     ,UPPER(TRIM(#{rm.columnCd})) AS COLUMN_CD
					                     ,TRIM(#{rm.columnNm}) AS COLUMN_NM
					                     ,TRIM(#{rm.limitLength}) AS LIMIT_LENGTH
					                     ,TRIM(#{rm.cType}) AS C_TYPE
					                     ,TRIM(#{rm.dType}) AS D_TYPE
					                     ,TRIM(#{rm.dContent}) AS D_CONTENT
					                     ,TRIM(#{rm.popupType}) AS POPUP_TYPE
					                     ,TRIM(#{rm.readOnlyYn}) AS READ_ONLY_YN
					                     ,TRIM(#{rm.mergeYn}) AS MERGE_YN
					                     ,TRIM(#{rm.relColumnCd}) AS REL_COLUMN_CD
					                     ,TRIM(#{rm.pkType}) AS PK_TYPE
					                     ,TRIM(#{rm.useYn}) AS USE_YN
					                     ,TRIM(#{rm.seq}) AS SEQ
					                     ,TRIM(#{rm.groupColumnCd}) AS GROUP_COLUMN_CD
					                     ,TRIM(#{rm.groupSeparator}) AS GROUP_SEPARATOR
					                     ,TRIM(#{rm.cryptKey}) AS CRYPT_KEY
					                     ,TRIM(#{rm.notNullYn}) AS NOT_NULL_YN
					                     ,TRIM(#{rm.hiddenValColumnCd}) AS HIDDEN_VAL_COLUMN_CD
					                     ,TRIM(#{rm.note1}) AS NOTE1
					                     ,TRIM(#{rm.note2}) AS NOTE2
					                     ,TRIM(#{rm.note3}) AS NOTE3
					                     ,TRIM(#{rm.note4}) AS NOTE4
					                     ,TRIM(#{rm.note5}) AS NOTE5
					                     ,TRIM(#{rm.displayYn}) AS DISPLAY_YN
					                     ,TRIM(#{rm.conditionYn}) AS CONDITION_YN
					                 FROM DUAL
</foreach>
					                 )
					        WHERE ENTER_CD IS NOT NULL) S
					ON (T.ENTER_CD = S.ENTER_CD AND T.EMP_TABLE = S.EMP_TABLE AND T.COLUMN_CD = S.COLUMN_CD)
					WHEN MATCHED THEN
					  UPDATE
					     SET T.COLUMN_NM     = S.COLUMN_NM
					        ,T.LIMIT_LENGTH  = S.LIMIT_LENGTH
					        ,T.C_TYPE        = S.C_TYPE
					        ,T.D_TYPE        = S.D_TYPE
					        ,T.D_CONTENT     = S.D_CONTENT
					        ,T.POPUP_TYPE    = S.POPUP_TYPE
					        ,T.READ_ONLY_YN  = S.READ_ONLY_YN
					        ,T.MERGE_YN      = S.MERGE_YN
					        ,T.REL_COLUMN_CD = S.REL_COLUMN_CD
					        ,T.PK_TYPE		 = S.PK_TYPE
					        ,T.USE_YN        = S.USE_YN
					        ,T.SEQ           = S.SEQ
					        ,T.GROUP_COLUMN_CD	= S.GROUP_COLUMN_CD
					        ,T.GROUP_SEPARATOR	= S.GROUP_SEPARATOR
					        ,T.CRYPT_KEY		= S.CRYPT_KEY
					        ,T.NOT_NULL_YN		= S.NOT_NULL_YN
					        ,T.HIDDEN_VAL_COLUMN_CD	= S.HIDDEN_VAL_COLUMN_CD
					        ,T.NOTE1         = S.NOTE1
					        ,T.NOTE2         = S.NOTE2
					        ,T.NOTE3         = S.NOTE3
					        ,T.NOTE4         = S.NOTE4
					        ,T.NOTE5         = S.NOTE5
					        ,T.DISPLAY_YN    = S.DISPLAY_YN
					        ,T.CONDITION_YN  = S.CONDITION_YN
					        ,T.CHKDATE       = SYSDATE
					        ,T.CHKID         = #{ssnSabun}
					WHEN NOT MATCHED THEN
					  INSERT
					    (T.ENTER_CD
					    ,T.EMP_TABLE
					    ,T.COLUMN_CD
					    ,T.COLUMN_NM
					    ,T.LIMIT_LENGTH
					    ,T.C_TYPE
					    ,T.D_TYPE
					    ,T.D_CONTENT
					    ,T.POPUP_TYPE
					    ,T.READ_ONLY_YN
					    ,T.MERGE_YN
					    ,T.REL_COLUMN_CD
					    ,T.PK_TYPE
					    ,T.USE_YN
					    ,T.SEQ
					    ,T.GROUP_COLUMN_CD
					    ,T.GROUP_SEPARATOR
					    ,T.CRYPT_KEY
					    ,T.NOT_NULL_YN
					    ,T.HIDDEN_VAL_COLUMN_CD
					    ,T.NOTE1
					    ,T.NOTE2
					    ,T.NOTE3
					    ,T.NOTE4
					    ,T.NOTE5
					    ,T.DISPLAY_YN
					    ,T.CONDITION_YN
					    ,T.CHKDATE
					    ,T.CHKID)
					  VALUES
					    (S.ENTER_CD
					    ,UPPER(S.EMP_TABLE)
					    ,UPPER(S.COLUMN_CD)
					    ,S.COLUMN_NM
					    ,S.LIMIT_LENGTH
					    ,S.C_TYPE
					    ,S.D_TYPE
					    ,S.D_CONTENT
					    ,S.POPUP_TYPE
					    ,S.READ_ONLY_YN
					    ,S.MERGE_YN
					    ,S.REL_COLUMN_CD
					    ,S.PK_TYPE
					    ,S.USE_YN
					    ,S.SEQ
					    ,S.GROUP_COLUMN_CD
					    ,S.GROUP_SEPARATOR
					    ,S.CRYPT_KEY
					    ,S.NOT_NULL_YN
					    ,S.HIDDEN_VAL_COLUMN_CD
					    ,S.NOTE1
					    ,S.NOTE2
					    ,S.NOTE3
					    ,S.NOTE4
					    ,S.NOTE5
					    ,S.DISPLAY_YN
					    ,S.CONDITION_YN
					    ,SYSDATE
					    ,#{ssnSabun})


		</update>
		
		<delete parameterType="map" id="deleteEmpInfoChangeFieldMgr">

					DELETE FROM THRM802
					WHERE ENTER_CD = #{ssnEnterCd}
					  AND (EMP_TABLE, COLUMN_CD) IN
					  		( (NULL, NULL)
							<foreach item="rm" collection="deleteRows" >
							 ,(#{rm.empTable}, #{rm.columnCd})
							</foreach>
					  		)



		</delete>
		

</mapper>

