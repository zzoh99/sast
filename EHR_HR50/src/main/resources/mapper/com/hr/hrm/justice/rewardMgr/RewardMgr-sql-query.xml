<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="hrm.justice.rewardMgr">


		<select parameterType="map" resultType="cMap" id="getRewardMgrListCnt">

				<![CDATA[
					SELECT COUNT(1) AS CNT
					  FROM THRM128 A
					     , THRM100 B
					     , THRM151 C
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND A.PRIZE_YMD BETWEEN #{srchPrizeYmdS} AND #{srchPrizeYmdE}
					           ]]>
		  <if test='srchPrizeCd != null and !srchPrizeCd.equals("") '>
					   AND A.PRIZE_CD = TRIM(#{srchPrizeCd})
		  </if>
					   AND A.ENTER_CD = B.ENTER_CD
					   AND A.SABUN    = B.SABUN
					   AND C.ENTER_CD = A.ENTER_CD
					   AND C.SABUN    = A.SABUN
					   AND C.SDATE    = (SELECT MAX(SDATE)
					                       FROM THRM151 X
					                      WHERE X.ENTER_CD = A.ENTER_CD
					                        AND X.SABUN = A.SABUN
				<![CDATA[	                        AND X.SDATE <= A.PRIZE_YMD)
				]]>


		</select>

		<!-- 포상내역관리 조회 -->
		<select parameterType="map" resultType="cMap" id="getRewardMgrList">

				<![CDATA[
					SELECT A.SEQ
					     , A.PRIZE_YMD
					     , A.PRIZE_CD
					     --, B.NAME
					     , F_COM_GET_NAMES(B.ENTER_CD, B.SABUN, #{ssnLocaleCd}) AS NAME
					     , A.SABUN
					     , F_COM_GET_ORG_NM2(B.ENTER_CD, B.SABUN, A.PRIZE_YMD, #{ssnLocaleCd}) AS ORG_NM
					     , F_COM_GET_JIKGUB_NM(B.ENTER_CD, B.SABUN, A.PRIZE_YMD, #{ssnLocaleCd}) AS JIKGUB_NM
					     , F_COM_GET_JIKCHAK_NM(B.ENTER_CD, B.SABUN, A.PRIZE_YMD, #{ssnLocaleCd}) AS JIKCHAK_NM
					     , A.PRIZE_REASON_CD
					     , A.IN_OUT_CD
					     , A.PRIZE_OFFICE_NM
					     , A.APIZE_MEMO
					     , A.PRIZE_MON
					     , A.NOTE
					     , A.COMMITTEE_CD
					     , A.MEMO2
					     , A.DISPLAY_YN
					     , A.FILE_SEQ
					     , CASE WHEN A.FILE_SEQ IS NULL AND #{authPg} = 'A' THEN '<a class="basic">첨부</a>'
					            WHEN A.FILE_SEQ IS NOT NULL THEN '<a class="basic">다운로드</a>'
					        END AS BTN_FILE
					  FROM THRM128 A
					     , THRM100 B
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND A.PRIZE_YMD BETWEEN #{srchPrizeYmdS} AND #{srchPrizeYmdE}
					           ]]>
					<if test='srchPrizeCd != null and !srchPrizeCd.equals("") '>
					   AND A.PRIZE_CD = TRIM(#{srchPrizeCd})
					</if>
					<if test='searchSaNm != null and !searchSaNm.equals("")'>
					   AND ( A.SABUN LIKE #{searchSaNm} || '%' OR B.NAME LIKE #{searchSaNm} || '%')
					</if>
					   AND A.ENTER_CD = B.ENTER_CD
					   AND A.SABUN = B.SABUN
					 ORDER BY A.PRIZE_YMD DESC


		</select>

		<!-- 포상내역관리 조회 -->
		<select parameterType="map" resultType="cMap" id="getRewardCdComboList">

				<![CDATA[
					SELECT A.PUNISH_CD AS CODE
					     , F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'H20270', A.PUNISH_CD, #{ssnLocaleCd}) AS CODE_NM
					  FROM THRM485 A
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND A.WARNING_YN = 'N'
					 ORDER BY A.PUNISH_CD
				]]>


		</select>

		<!-- 인사위원회관리 조회 -->
		<select parameterType="map" resultType="cMap" id="getCommitteeCdComboListRewardMgr">

				<![CDATA[
					SELECT A.COMMITTEE_CD AS CODE
					     , A.COMMITTEE_NM AS CODE_NM
					  FROM THRM481 A
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					 ORDER BY A.CHKDATE DESC
				]]>


		</select>



		<!-- 포상내역관리 저장 -->
		<update parameterType="map" id="saveRewardMgr">

					MERGE INTO THRM128 T
					USING  (
							SELECT A.ENTER_CD
								 , A.SABUN
								 , A.SEQ
								 , A.PRIZE_YMD
								 , A.PRIZE_CD
							     , A.IN_OUT_CD
							     , A.PRIZE_OFFICE_NM
								 , A.APIZE_MEMO
								 , A.PRIZE_MON
								 , A.NOTE
								 , A.COMMITTEE_CD
								 , A.DISPLAY_YN
								 , A.FILE_SEQ
								 , A.MEMO2
							FROM	(
									SELECT NULL AS ENTER_CD
										 , NULL AS SABUN
										 , NULL AS SEQ
										 , NULL AS PRIZE_YMD
										 , NULL AS PRIZE_CD
										 , NULL AS IN_OUT_CD
										 , NULL AS PRIZE_OFFICE_NM
										 , NULL AS APIZE_MEMO
										 , NULL AS PRIZE_MON
										 , NULL AS NOTE
										 , NULL AS COMMITTEE_CD
										 , NULL AS DISPLAY_YN
										 , NULL AS FILE_SEQ
										 , NULL AS MEMO2
									FROM DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT TRIM( #{ssnEnterCd} )			AS  ENTER_CD
									     , TRIM( #{rm.sabun}   )			AS  SABUN


										<choose><when test='rm.seq != null and !rm.seq.equals("")'>
										 , TRIM(#{rm.seq}) 			        AS SEQ
										</when><otherwise>
										 , TO_CHAR( (
										  			 SELECT (NVL(MAX(TO_NUMBER(SEQ)),0) + ${icnt})
													   FROM THRM128
													  WHERE ENTER_CD = TRIM( #{ssnEnterCd} )
													    AND SABUN = TRIM( #{rm.sabun}   )
														) )	AS SEQ
												 <bind name="icnt" value="icnt + 1" />
										</otherwise>
										</choose>

										 , TRIM( #{rm.prizeYmd}         )		AS  PRIZE_YMD
										 , TRIM( #{rm.prizeCd}          )		AS  PRIZE_CD
										 , TRIM( #{rm.inOutCd}          )		AS  IN_OUT_CD
										 , TRIM( #{rm.prizeOfficeNm}    )		AS  PRIZE_OFFICE_NM
										 , TRIM( #{rm.apizeMemo}        )		AS  APIZE_MEMO
										 , TRIM( #{rm.prizeMon}         )		AS  PRIZE_MON
										 , TRIM( #{rm.note}             )		AS  NOTE
										 , TRIM( #{rm.committeeCd}      )		AS  COMMITTEE_CD
										 , TRIM( #{rm.displayYn}        )		AS  DISPLAY_YN
										 , TRIM( #{rm.fileSeq}          )		AS  FILE_SEQ
										 , TRIM( #{rm.memo2}          )			AS  MEMO2
									  FROM DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										  AND A.SABUN    IS NOT NULL
										  AND A.SEQ      IS NOT NULL
							) S
					ON ( T.ENTER_CD	= S.ENTER_CD AND T.SABUN = S.SABUN AND T.SEQ = S.SEQ)
					WHEN MATCHED THEN
						UPDATE SET	  T.PRIZE_YMD  	 		= S.PRIZE_YMD
									, T.PRIZE_CD 			= S.PRIZE_CD
									, T.IN_OUT_CD  	        = S.IN_OUT_CD
									, T.PRIZE_OFFICE_NM  	= S.PRIZE_OFFICE_NM
									, T.APIZE_MEMO   		= S.APIZE_MEMO
									, T.PRIZE_MON 			= S.PRIZE_MON
									, T.NOTE  			 	= S.NOTE
									, T.COMMITTEE_CD  		= S.COMMITTEE_CD
									, T.DISPLAY_YN  	 	= S.DISPLAY_YN
									, T.FILE_SEQ 	 		= S.FILE_SEQ
									, T.MEMO2 	 			= S.MEMO2
									, T.CHKDATE				= SYSDATE
									, T.CHKID				= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.SABUN
							, T.SEQ
							, T.PRIZE_YMD
							, T.PRIZE_CD
							, T.IN_OUT_CD
							, T.PRIZE_OFFICE_NM
							, T.APIZE_MEMO
							, T.PRIZE_MON
							, T.NOTE
							, T.COMMITTEE_CD
							, T.DISPLAY_YN
							, T.FILE_SEQ
							, T.MEMO2
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.SABUN
							, S.SEQ
							, S.PRIZE_YMD
							, S.PRIZE_CD
							, S.IN_OUT_CD
							, S.PRIZE_OFFICE_NM
							, S.APIZE_MEMO
							, S.PRIZE_MON
							, S.NOTE
							, S.COMMITTEE_CD
							, S.DISPLAY_YN
							, S.FILE_SEQ
							, S.MEMO2
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

		<!-- 포상내역관리 삭제 -->
		<delete parameterType="map" id="deleteRewardMgr">

					DELETE FROM THRM128
					 WHERE ENTER_CD||'_'||SABUN||'_'||SEQ IN 	(  NULL
<foreach item="rm" collection="deleteRows" >
						,
										<if test='ssnEnterCd != null and !ssnEnterCd.equals("")
												and rm.sabun != null and !rm.sabun.equals("")
												and rm.seq != null and !rm.seq.equals("")'>
											TRIM( #{ssnEnterCd} )||'_'||TRIM( #{rm.sabun} )||'_'||TRIM( #{rm.seq} )
										</if>
</foreach>
										)
		</delete>


</mapper>