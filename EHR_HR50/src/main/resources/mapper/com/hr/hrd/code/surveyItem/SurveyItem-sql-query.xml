<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="hrd.code.surveyItem">
		<select parameterType="map" resultType="cMap" id="getSurveyItemList">


				<![CDATA[
					SELECT A.ENTER_CD
						   , A.SURVEY_ITEM_CD
						   , A.SURVEY_ITEM_NM
						   , A.SURVEY_ITEM_DESC
						   , A.START_YMD
						   , A.END_YMD
						   , A.SEQ
					  FROM TCDPV100 A
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND (LENGTH(#{searchSurveyItemNm}) IS NULL OR LOWER(A.SURVEY_ITEM_NM) LIKE '%' || LOWER(#{searchSurveyItemNm}) || '%')
					 ORDER BY A.SEQ
				]]>


		</select>
		<update parameterType="map" id="saveSurveyItem">

						MERGE INTO TCDPV100 T
						USING (
							 SELECT  A.ENTER_CD
								   , A.SURVEY_ITEM_CD
								   , A.SURVEY_ITEM_NM
								   , A.SURVEY_ITEM_DESC
								   , A.START_YMD
								   , A.END_YMD
								   , A.SEQ
							FROM (
								 SELECT  NULL AS ENTER_CD
									   , NULL AS SURVEY_ITEM_CD
									   , NULL AS SURVEY_ITEM_NM
									   , NULL AS SURVEY_ITEM_DESC
									   , NULL AS START_YMD
									   , NULL AS END_YMD
									   , NULL AS SEQ
								FROM DUAL
						<bind name="icnt" value="1" />
						<foreach item="rm" collection="mergeRows" >
								UNION ALL
								 SELECT  TRIM(#{rm.enterCd}) AS ENTER_CD
								 		 <choose><when test='rm.surveyItemCd != null and !rm.surveyItemCd.equals("")'>
								 		   , TRIM(#{rm.surveyItemCd}) AS SURVEY_ITEM_CD
										 </when><otherwise>
										   , (SELECT NVL(MAX(SURVEY_ITEM_CD),0) + ${icnt} FROM TCDPV100 WHERE ENTER_CD=#{ssnEnterCd})  AS SURVEY_ITEM_CD
											<bind name="icnt" value="icnt + 1" />
										 </otherwise>
										 </choose>
									   , TRIM(#{rm.surveyItemNm}) AS SURVEY_ITEM_NM
									   , TRIM(#{rm.surveyItemDesc}) AS SURVEY_ITEM_DESC
									   , TRIM(#{rm.startYmd}) AS START_YMD
									   , TRIM(#{rm.endYmd}) AS END_YMD
									   , TRIM(#{rm.seq}) AS SEQ
								FROM DUAL
						</foreach>
							) A WHERE A.ENTER_CD IS NOT NULL
						 AND A.SURVEY_ITEM_CD IS NOT NULL
						) S
						ON (T.ENTER_CD=S.ENTER_CD AND T.SURVEY_ITEM_CD=S.SURVEY_ITEM_CD)
						WHEN MATCHED THEN
							UPDATE SET  T.SURVEY_ITEM_NM = S.SURVEY_ITEM_NM
									  , T.SURVEY_ITEM_DESC = S.SURVEY_ITEM_DESC
									  , T.START_YMD = S.START_YMD
									  , T.END_YMD = S.END_YMD
									  , T.SEQ = S.SEQ
						WHEN NOT MATCHED THEN
							INSERT (
								  T.ENTER_CD
								, T.SURVEY_ITEM_CD
								, T.SURVEY_ITEM_NM
								, T.SURVEY_ITEM_DESC
								, T.START_YMD
								, T.END_YMD
								, T.SEQ
								, T.CHKDATE
								, T.CHKID
							) VALUES (
								  S.ENTER_CD
								, S.SURVEY_ITEM_CD
								, S.SURVEY_ITEM_NM
								, S.SURVEY_ITEM_DESC
								, S.START_YMD
								, S.END_YMD
								, S.SEQ
								, SYSDATE
								, #{ssnSabun}
							)
		</update>
		<delete parameterType="map" id="deleteSurveyItem">


					DELETE FROM TCDPV100
					 WHERE 1=1
					   AND ENTER_CD||'_'||SURVEY_ITEM_CD IN ( NULL
						<foreach item="rm" collection="deleteRows" >
						,
							<if test='rm.enterCd != null and !rm.enterCd.equals("") and
						rm.surveyItemCd != null and !rm.surveyItemCd.equals("")'>
								TRIM(#{rm.enterCd})||'_'||TRIM(#{rm.surveyItemCd})
							</if>
						</foreach>
					)
		</delete>

</mapper>
