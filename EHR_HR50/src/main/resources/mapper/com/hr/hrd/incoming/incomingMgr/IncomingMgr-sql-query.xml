<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="hrd.incoming.incomingMgr">
<!-- 		후임자관리 조회 -->
		<select parameterType="map" resultType="cMap" id="getIncomingMgrList">

				<![CDATA[
					SELECT A.ENTER_CD
					     , A.SABUN
					     , A.NAME
					     , A.ORG_NM
					     , A.JIKGUB_NM
					     , A."1_INCOM_ID" AS INCOM_ID1
					     , A."2_INCOM_ID" AS INCOM_ID2
					     , A."3_INCOM_ID" AS INCOM_ID3
					     , A."1_INCOM_NAME" AS INCOM_NAME1
					     , A."2_INCOM_NAME" AS INCOM_NAME2
					     , A."3_INCOM_NAME" AS INCOM_NAME3
					     , A."1_INCOM_ORG_NM" AS INCOM_ORG_NM1
					     , A."2_INCOM_ORG_NM" AS INCOM_ORG_NM2
					     , A."3_INCOM_ORG_NM" AS INCOM_ORG_NM3
					     , A."1_EXT_INCOM_YN" AS EXT_INCOM_YN1
					     , A."2_EXT_INCOM_YN" AS EXT_INCOM_YN2
					     , A."3_EXT_INCOM_YN" AS EXT_INCOM_YN3
					     , DECODE(A."1_EXT_INCOM_YN", 'Y', NULL, DECODE(A."1_INCOM_ID", NULL, NULL, '0')) AS DETAIL1
					     , DECODE(A."2_EXT_INCOM_YN", 'Y', NULL, DECODE(A."2_INCOM_ID", NULL, NULL, '0')) AS DETAIL2
					     , DECODE(A."3_EXT_INCOM_YN", 'Y', NULL, DECODE(A."3_INCOM_ID", NULL, NULL, '0')) AS DETAIL3
					  FROM (
					         SELECT A.ENTER_CD
					              , A.SABUN
					              , F_COM_GET_NAMES(A.ENTER_CD, A.SABUN, #{ssnLocaleCd}) AS NAME -- 성명
					              , F_COM_GET_ORG_NM2(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD'), #{ssnLocaleCd}) AS ORG_NM
					              , F_COM_GET_JIKGUB_NM(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD'), #{ssnLocaleCd}) AS JIKGUB_NM
					              , A.INCOM_ID
					              , F_COM_GET_NAMES(A.ENTER_CD, A.INCOM_ID, #{ssnLocaleCd}) AS INCOM_NAME
					              , F_COM_GET_ORG_NM2(A.ENTER_CD, A.INCOM_ID, TO_CHAR(SYSDATE, 'YYYYMMDD'), #{ssnLocaleCd}) AS INCOM_ORG_NM
					              , A.INCOM_SEQ
					              , A.EXT_INCOM_YN
					           FROM TCDP800 A
					          WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
					                    ]]>
<if test='searchSabunName != null and !searchSabunName.equals("")' >
					            AND (A.SABUN LIKE '%'||TRIM( #{searchSabunName} )||'%' OR F_COM_GET_NAMES(A.ENTER_CD, A.SABUN, #{ssnLocaleCd}) LIKE '%'||TRIM( #{searchSabunName} )||'%')
</if>
<if test='searchBizPlaceCd != null and !searchBizPlaceCd.equals("")' >
					            AND F_COM_GET_BP_CD(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')) = #{searchBizPlaceCd}
	<if test='searchOrgCd != null and !searchOrgCd.equals("")' >
		<choose>
		<when test='searchOrgType != null and searchOrgType.equals("Y") ' >
		<![CDATA[
					            /*하위조직포함일때 Y , 아닐때 N */
					            AND F_COM_GET_ORG_CD(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')) IN (
					                    SELECT #{searchOrgCd} AS ORG_CD
					                      FROM DUAL
					                     UNION
					                    SELECT ORG_CD
					                      FROM (
					                            SELECT O.ENTER_CD, O.ORG_CD, O.PRIOR_ORG_CD, O.SDATE
					                              FROM TORG105 O
					                             WHERE O.ENTER_CD = TRIM(#{ssnEnterCd})
					                               AND O.SDATE = (SELECT MAX(SDATE) FROM TORG105 WHERE ENTER_CD = O.ENTER_CD AND ORG_CD = O.ORG_CD AND SDATE <= TO_CHAR(SYSDATE, 'YYYYMMDD'))
					                           )
					                     START WITH PRIOR_ORG_CD = #{searchOrgCd}
					                   CONNECT BY PRIOR ENTER_CD = ENTER_CD
					                       AND PRIOR SDATE = SDATE
					                       AND PRIOR ORG_CD = PRIOR_ORG_CD
					                )
					      ]]>
		</when>
					      <otherwise>
					            AND F_COM_GET_ORG_CD(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')) = #{searchOrgCd}
						  </otherwise>
		</choose>
	</if>
</if>
<if test='ssnSearchType and ssnSearchType.equals("O")' >
					            AND F_COM_GET_ORG_CD(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')) IN (
					                    SELECT ORG_CD
					                      FROM TABLE(THRM151_AUTH(#{ssnEnterCd}, #{ssnSearchType}, #{ssnSabun}, #{ssnGrpCd}, TO_CHAR(SYSDATE, 'YYYYMMDD')))
					                     GROUP BY ORG_CD
					                )
</if>
<if test='searchExtIncomYn != null and searchExtIncomYn.equals("Y") ' >
					            AND EXISTS (SELECT 1
					                          FROM TCDP800
					                         WHERE ENTER_CD = A.ENTER_CD
					                           AND SABUN    = A.SABUN
					                           AND EXT_INCOM_YN = 'Y')
</if>
					       )
					 PIVOT (
					            MAX(INCOM_ID) AS INCOM_ID, MAX(INCOM_NAME) AS INCOM_NAME, MAX(INCOM_ORG_NM) AS INCOM_ORG_NM, MAX(EXT_INCOM_YN) AS EXT_INCOM_YN
					            FOR INCOM_SEQ IN (1, 2, 3)
					       ) A
					 ORDER BY F_COM_JIKJE_SORT(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD'))


		</select>

<!-- 후임자관리 Popup 인사정보 조회 -->
		<select parameterType="map" resultType="cMap" id="getIncomingMgrPopupHrInfoMap">

				<![CDATA[
					SELECT G1.SABUN
					     , G1.NAME
					     , G1.EMP_YMD
					     , G1.WORK_TERM
					     , G1.BIR_YMD || DECODE(G1.AGE, NULL, NULL, ' (' || G1.AGE || '세)') AS BIR_YMD
					   	 , G1.JIKGUB_NM
					     , G1.ORG_NM
					     , G1.STF_TYPE_NM
					     , G1.EMP_TYPE_NM
					     , G1.ACA_DEG_NM 
					  FROM (
					        SELECT A.SABUN
					             , A.NAME
					             , TO_CHAR(TO_DATE(A.EMP_YMD, 'YYYY.MM.DD'), 'YYYY.MM.DD') AS EMP_YMD
					             , F_COM_GET_CAREER_CNT(A.ENTER_CD, A.SABUN, '9', TO_CHAR(SYSDATE, 'YYYYMMDD')) AS WORK_TERM
					             , TO_CHAR(TO_DATE(A.BIR_YMD, 'YYYY.MM.DD'), 'YYYY.MM.DD') AS BIR_YMD
					             , F_COM_GET_AGE(A.ENTER_CD, A.BIR_YMD, A.RES_NO, TO_CHAR(SYSDATE, 'YYYYMMDD')) AS AGE
					             , F_COM_GET_JIKGUB_NM(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')) AS JIKGUB_NM
					             , F_COM_GET_ORG_NM2(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')) AS ORG_NM 
					             , F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'F10001' , A.STF_TYPE, '') AS STF_TYPE_NM
					             , F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'F10003' , A.EMP_TYPE, '') AS EMP_TYPE_NM
					             , F_COM_FINAL_SCH(A.ENTER_CD, A.SABUN, '6') AS ACA_DEG_NM
					          FROM THRM100 A
					         WHERE A.ENTER_CD = #{ssnEnterCd}
					           AND A.SABUN = #{pIncomId}
					       ) G1
				]]>


		</select>

<!-- 후임자관리 Popup 인사정보-학력 조회 -->	
		<select parameterType="map" resultType="cMap" id="getIncomingMgrPopupHrInfoSchList">

				<![CDATA[
					SELECT SCH_NM
					  FROM (
					         SELECT A.ACA_SCH_NM || ' ' || A.ACAMAJ_NM || ' ' || NVL2(A.ACA_DEG_CD, '(' || F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'H20140' , A.ACA_DEG_CD, #{ssnLocaleCd}) || ')', NULL) AS SCH_NM
					              , F_COM_GET_GRCODE_NOTE_VAL(A.ENTER_CD, 'H20130', A.ACA_CD, 1) AS NOTE1
					           FROM THRM115 A
					          WHERE A.ENTER_CD = #{ssnEnterCd}
					            AND A.SABUN = #{pIncomId}
					          ORDER BY A.ACA_S_YM DESC
					       )
					 WHERE NOTE1 >= '0050' -- 학력이 대학교 이상인 경우
				]]>

		</select>

<!-- 후임자관리 Popup 평가결과 조회 -->	
		<select parameterType="map" resultType="cMap" id="getIncomingMgrPopupEvalResultList">

					SELECT A.SABUN
<foreach item="tCnt" collection="titles" >
					     , MAX(CASE WHEN A.STD_YEAR = TO_CHAR(SYSDATE, 'YYYY') - ${tCnt} THEN F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'L30050', A.EVAL_GRADE) END) AS YEAR${tCnt}
</foreach>
					     <![CDATA[
					     , ROUND(AVG(CASE WHEN F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'L30050', A.EVAL_GRADE) = 'S' THEN 5
					                      WHEN F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'L30050', A.EVAL_GRADE) = 'A' THEN 4
					                      WHEN F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'L30050', A.EVAL_GRADE) = 'B1' THEN 3.5
					                      WHEN F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'L30050', A.EVAL_GRADE) IN ('B2', 'B') THEN 3
					                      WHEN F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'L30050', A.EVAL_GRADE) = 'C' THEN 2
					                      WHEN F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'L30050', A.EVAL_GRADE) = 'D' THEN 1
					                      ELSE 0
					                 END), 1) AS AVG_EVAL_SCORE
					  FROM THRM590 A
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND A.SABUN = #{pIncomId}
					   AND A.STD_YEAR >= TO_CHAR(SYSDATE, 'YYYY') - 9
					 GROUP BY A.SABUN

	]]>
		</select>
				
<!-- 후임자관리 Popup 평판 조회 -->
		<select parameterType="map" resultType="cMap" id="getIncomingMgrPopupReputationMap">

				<![CDATA[
					SELECT A.INCOM_ID
					     , F_COM_GET_NAMES(A.ENTER_CD, A.INCOM_ID, #{ssnLocaleCd} ) AS INCOM_NAME -- 성명
					     , F_COM_GET_ORG_NM2(A.ENTER_CD, A.INCOM_ID, TO_CHAR(SYSDATE, 'YYYYMMDD'), #{ssnLocaleCd}) AS INCOM_ORG_NM
					     , F_COM_GET_JIKGUB_NM(A.ENTER_CD, A.INCOM_ID, TO_CHAR(SYSDATE, 'YYYYMMDD'), #{ssnLocaleCd}) AS INCOM_JIKGUB_NM
					     , A.INCOM_TIME
					     , A.INCOM_PATH
					     , A.INCOM_OUT 
					     , A.INCOM_IMPACT
					     , A.INCOM_RSN
					     , A.INCOM_PROS
					     , A.INCOM_CONS 
					     , A.EXT_INCOM_YN 
					  FROM TCDP800 A
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND A.SABUN = #{pSabun}
					   AND A.INCOM_SEQ = #{pIncomSeq}
					 ORDER BY A.INCOM_SEQ
				]]>


		</select>
		
<!-- 후임자관리 Popup 평판 저장 -->
		<update parameterType="map" id="saveIncomingMgrPopup">

				<![CDATA[
					MERGE INTO TCDP800 T
					USING (
					       SELECT A.ENTER_CD
					            , A.SABUN
					            , A.INCOM_ID
					            , A.INCOM_SEQ
					            , A.INCOM_TIME
					            , A.INCOM_PATH
					            , A.INCOM_OUT
					            , A.INCOM_IMPACT
					            , A.INCOM_RSN
					            , A.INCOM_PROS
					            , A.INCOM_CONS
					         FROM (
					               SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD
					                    , TRIM(#{pSabun}) AS SABUN
					                    , TRIM(#{pIncomId}) AS INCOM_ID
					                    , TRIM(#{pIncomSeq}) AS INCOM_SEQ
					                    , TRIM(#{incomTime}) AS INCOM_TIME
					                    , TRIM(#{incomPath}) AS INCOM_PATH
					                    , TRIM(#{incomOut}) AS INCOM_OUT
					                    , TRIM(#{incomImpact}) AS INCOM_IMPACT
					                    , TRIM(#{incomRsn}) AS INCOM_RSN
					                    , TRIM(#{incomPros}) AS INCOM_PROS
					                    , TRIM(#{incomCons}) AS INCOM_CONS
					                 FROM DUAL
					              ) A
					) S
					ON (
					            T.ENTER_CD  = S.ENTER_CD
					        AND T.SABUN     = S.SABUN
					        AND T.INCOM_SEQ = S.INCOM_SEQ
					)
					WHEN MATCHED THEN
					     UPDATE
					        SET T.CHKDATE      = SYSDATE
					          , T.CHKID        = #{ssnSabun}
					          , T.INCOM_ID     = S.INCOM_ID
					          , T.INCOM_TIME   = S.INCOM_TIME
					          , T.INCOM_PATH   = S.INCOM_PATH
					          , T.INCOM_OUT    = S.INCOM_OUT
					          , T.INCOM_IMPACT = S.INCOM_IMPACT
					          , T.INCOM_RSN    = S.INCOM_RSN
					          , T.INCOM_PROS   = S.INCOM_PROS
					          , T.INCOM_CONS   = S.INCOM_CONS
					WHEN NOT MATCHED THEN
					     INSERT (
					            T.ENTER_CD
					          , T.SABUN
					          , T.INCOM_ID
					          , T.INCOM_SEQ
					          , T.INCOM_TIME
					          , T.INCOM_PATH
					          , T.INCOM_OUT
					          , T.INCOM_IMPACT
					          , T.INCOM_RSN
					          , T.INCOM_PROS
					          , T.INCOM_CONS
					          , T.CHKDATE
					          , T.CHKID
					     ) VALUES (
					            S.ENTER_CD
					          , S.SABUN
					          , S.INCOM_ID
					          , S.INCOM_SEQ
					          , S.INCOM_TIME
					          , S.INCOM_PATH
					          , S.INCOM_OUT
					          , S.INCOM_IMPACT
					          , S.INCOM_RSN
					          , S.INCOM_PROS
					          , S.INCOM_CONS
					          , SYSDATE
					          , #{ssnSabun}
					     )
				]]>
		</update>

<!-- 후임자관리 Popup 평판 삭제 -->		
		<delete parameterType="map" id="deleteIncomingMgrPopup">

				<![CDATA[
					DELETE FROM	 TCDP800
					 WHERE ENTER_CD 	= TRIM(#{ssnEnterCd})
					   AND SABUN 		= TRIM(#{parentSabun})
					   AND INCOM_SEQ 	= TRIM(#{incomSeq})
				]]>

		</delete>
				

</mapper>