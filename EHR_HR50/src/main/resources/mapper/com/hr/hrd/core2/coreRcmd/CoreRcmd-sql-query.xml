<?xml version="1.0" encoding="UTF-8"?>
<!--
 * 핵심인재추천
 * @author JSG
-->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hrd.core2.coreRcmd">
	<select parameterType="map" resultType="cMap" id="getCoreRcmdList">
		<if test="searchKeyword != null and searchKeyword neq ''">
			/*키워드*/
			WITH KEYWORD AS (SELECT SABUN FROM THRM_KEYWORD WHERE KEYWORD LIKE '%' ||  TRIM(#{searchKeyword})  || '%')
		</if>
		<![CDATA[
				SELECT R.ENTER_CD,
					   R.AUTH_ENTER_CD, R.AUTH_ENTER_NM,
					   R.SABUN,
					   R.ORG_CD,
					   R.JIKGUB_CD,JIKGUB_NM,
					   R.JIKWEE_CD,JIKWEE_NM,JIKMOO_NM,
					   R.WORK_TYPE,R.WORK_TYPE_NM,
					   R.MANAGE_CD,R.MANAGE_NM,
					   R.SAL_CLASS,
					   R.JIKCHAK_CD,JIKCHAK_NM,
					   R.SALE_AID_GB,
					   R.STATUS_CD ,STATUS_NM ,
					   R.NAME,
					   R.GEMP_YMD,
					   TO_CHAR(TO_DATE(R.EMP_YMD,'YYYY-MM-DD'),'YYYY-MM-DD') AS EMP_YMD,
					   TO_CHAR(TO_DATE(R.BIR_YMD,'YYYY-MM-DD'),'YYYY-MM-DD') AS BIR_YMD,
					   TO_CHAR(TO_DATE(R.RET_YMD,'YYYY-MM-DD'),'YYYY-MM-DD') AS RET_YMD,
					   R.RES_NO,
					   R.EMP_TYPE,
					   R.ORG_NM ,
					   R.OFFICE_TEL,
					   R.HAND_PHONE,
					   R.MAIL_ID,
					   R.OUT_MAIL_ID,
					   R.ADDR1,
					   R.ADDR2 ,
					   R.TOT_CNT,
					   F_HRM_GET_WORK_PLACE(#{ssnEnterCd}, R.SABUN) AS WORK_PLACE,
					   '/EmpPhotoOut.do'||chr(63)||'enterCd=' || R.ENTER_CD || chr(38) || 'searchKeyword=' || R.SABUN || chr(38) || 'type=1' AS PHOTO,
					   0 AS DETAIL,
					   '<a class="button">출력</a>' AS BTN_PRT
				  FROM
					   (SELECT ROWNUM AS RNUM,
							  ENTER_CD,
							  AUTH_ENTER_CD, AUTH_ENTER_NM,
							  SABUN,
							  ORG_CD,
							  JIKGUB_CD, JIKGUB_NM,
							  JIKWEE_CD, JIKWEE_NM,JIKMOO_NM,
							  WORK_TYPE,WORK_TYPE_NM,
							  MANAGE_CD,MANAGE_NM,
							  SAL_CLASS,
							  JIKCHAK_CD,JIKCHAK_NM,
							  SALE_AID_GB,
							  STATUS_CD , STATUS_NM ,
							  NAME,
							  GEMP_YMD,
							  EMP_YMD,
							  BIR_YMD,
							  RET_YMD,
							  RES_NO,
							  EMP_TYPE,
							  ORG_NM ,
							  OFFICE_TEL,
							  HAND_PHONE,
							  MAIL_ID,
							  OUT_MAIL_ID,
							  ADDR1,
							  ADDR2 ,
							  COUNT(*) OVER() AS TOT_CNT
						 FROM
							  (SELECT DISTINCT F_COM_GET_NAMES(B.ENTER_CD,B.SABUN) NAME ,
									 A.ENTER_CD,
									 E.ENTER_CD AS AUTH_ENTER_CD,
									 F_COM_GET_ENTER_ALIAS(E.ENTER_CD) AS AUTH_ENTER_NM,
									 A.SABUN ,
									 F.ORG_NM ,
									 A.ORG_CD ,
									 A.STATUS_CD ,A.STATUS_NM ,
									 A.JIKGUB_CD ,A.JIKGUB_NM,
									 A.SAL_CLASS ,
									 A.JIKCHAK_CD ,A.JIKCHAK_NM,
									 A.JIKWEE_CD ,A.JIKWEE_NM ,
									 A.WORK_TYPE,A.WORK_TYPE_NM,
									 A.MANAGE_CD,A.MANAGE_NM,
									 F_COM_GET_JOB_NM(A.ENTER_CD,A.SABUN,TO_CHAR(SYSDATE,'YYYYMMDD')) AS JIKMOO_NM,
									 '' AS SALE_AID_GB ,
									 B.GEMP_YMD ,
									 B.EMP_YMD ,
									 B.RET_YMD ,
									 B.BIR_YMD ,
									 CRYPTIT.DECRYPT (B.RES_NO, B.ENTER_CD) AS RES_NO ,
									 B.EMP_TYPE ,
									 D.ADDR1 ,
									 D.ADDR2 ,
									 F_COM_GET_CONT_ADDRESS(A.ENTER_CD,A.SABUN,'OT') AS OFFICE_TEL,
									 F_COM_GET_CONT_ADDRESS(A.ENTER_CD,A.SABUN,'HP') AS HAND_PHONE,
									 F_COM_GET_CONT_ADDRESS(A.ENTER_CD,A.SABUN,'OM') AS OUT_MAIL_ID,
									 F_COM_GET_CONT_ADDRESS(A.ENTER_CD,A.SABUN,'IM') AS MAIL_ID
								FROM THRM151 A ,
									 THRM100 B ,
									 TORG101 F ,
									 THRM123 D ,
									 TORG900 E
							   WHERE 1=1
							   ]]>
								 AND E.ENTER_CD IN (
														SELECT #{ssnEnterCd} FROM DUAL
														UNION
														SELECT A.AUTH_ENTER_CD
														FROM TSYS318 A, TSYS307 B
														WHERE A.ENTER_CD = B.ENTER_CD
															AND A.GRP_CD = B.GRP_CD
															AND B.ENTER_ALL_YN = 'Y'
															AND A.ENTER_CD = #{ssnEnterCd}
													)

		<if test='authEnterCd != null and !authEnterCd.equals("")'>
			AND E.ENTER_CD IN
			<foreach collection="authEnterCd" item="item" index="index" open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
		<if test='searchOrgType != null and searchOrgType neq "" and searchOrgType eq "Y"'>
			<if test='searchOrgCd != null and searchOrgCd neq ""'>
				AND A.ORG_CD IN
				    (
				        SELECT #{searchOrgCd} /*소속*/
				          FROM DUAL
				        UNION
				        SELECT ORG_CD
				          FROM ( SELECT T.ENTER_CD, T.SDATE, T.ORG_CD, T.PRIOR_ORG_CD
				                   FROM TORG105 T
				                  WHERE ENTER_CD = #{ssnEnterCd}
				                    AND SDATE = ( SELECT MAX(SDATE)
				                                    FROM TORG105
				                                   WHERE ENTER_CD = T.ENTER_CD ) )
				         START WITH PRIOR_ORG_CD = #{searchOrgCd}
				       CONNECT BY PRIOR ENTER_CD = ENTER_CD
				              AND PRIOR SDATE = SDATE
				              AND PRIOR ORG_CD = PRIOR_ORG_CD
				    )
			</if>
		</if>
		<if test="searchOrgType == null or searchOrgType eq ''">
			<if test="searchOrgCd != null and searchOrgCd neq ''">
				AND A.ORG_CD = #{searchOrgCd} /*소속*/
			</if>
		</if>
		<if test="jikmooCd != null and jikmooCd neq '' and jikmooCd.getClass().isArray()">
			AND A.JOB_CD IN
			<foreach collection="jikmooCd" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="jikmooCd != null and jikmooCd neq '' and !jikmooCd.getClass().isArray()">
			AND A.JOB_CD = #{jikmooCd}
		</if>

		<if test="jikgubCd != null and jikgubCd neq '' and jikgubCd.getClass().isArray()">
			AND A.JIKGUB_CD IN
			<foreach collection="jikgubCd" item="item" index="index" open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
		<if test="jikgubCd != null and jikgubCd neq '' and !jikgubCd.getClass().isArray()">
			AND A.JIKGUB_CD = #{jikgubCd}
		</if>

		<if test="jikchakCd != null and jikchakCd neq '' and jikchakCd.getClass().isArray()">
			AND A.JIKCHAK_CD IN
			<foreach collection="jikchakCd" item="item" index="index" open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
		<if test="jikchakCd != null and jikchakCd neq '' and !jikchakCd.getClass().isArray()">
			AND A.JIKCHAK_CD = #{jikchakCd}
		</if>

		<if test="jikweeCd != null and jikweeCd neq '' and jikweeCd.getClass().isArray()">
			AND A.JIKWEE_CD IN
			<foreach collection="jikweeCd" item="item" index="index" open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
		<if test="jikweeCd != null and jikweeCd neq '' and !jikweeCd.getClass().isArray()">
			AND A.JIKWEE_CD = #{jikweeCd}
		</if>
		<if test='searchLicenseCd != null and !searchLicenseCd.equals("")'>
			/*자격증*/
			AND A.SABUN IN (SELECT SABUN FROM THRM113 WHERE ENTER_CD = A.ENTER_CD AND SABUN = A.SABUN AND LICENSE_CD IN
			<foreach collection="searchLicenseCd" item="item" index="index" open="(" close=")" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="searchSAge != null and searchSAge neq ''">
			/*나이*/
			AND F_COM_GET_AGE(B.ENTER_CD, B.BIR_YMD, B.RES_NO, TO_CHAR(SYSDATE,'YYYYMMDD')) BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE+1, (-12 * NVL(#{searchEAge}, 99))-12), 'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(SYSDATE, -12 * #{searchSAge}), 'YYYYMMDD')
		</if>
		<if test="searchSex != null and searchSex neq ''">
			AND B.SEX_TYPE = #{searchSex} /*남여구분*/
		</if>
		<if test="empSYmd != null and empSYmd neq ''">
			AND B.EMP_YMD BETWEEN REPLACE(#{empSYmd},'-','') AND NVL(REPLACE(#{empEYmd},'-',''),'99991231') /*입사일*/
		</if>
		AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN A.SDATE AND NVL(A.EDATE,'99991231')
		AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN F.SDATE AND NVL(F.EDATE,'99991231')
		<if test="retSYmd != null and retSYmd neq ''">
			AND B.RET_YMD BETWEEN REPLACE(#{retSYmd},'-','') AND NVL(REPLACE(#{retEYmd},'-',''),'99991231') /*퇴사일*/
		</if>
		<if test="statusCd != null and statusCd neq ''">
			AND A.STATUS_CD IN
			<foreach collection="statusCd" item="item" index="index" open="(" close=")" separator=",">
				#{item}
			</foreach>
			/*재직상태*/
		</if>
		<if test="searchBfCmp != null and searchBfCmp neq ''">
			AND F_HRM_GET_WORK_PLACE(#{ssnEnterCd}, A.SABUN) LIKE '%'|| #{searchBfCmp} ||'%' /*출신회사 */
		</if>
		AND ( TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')) - SUBSTR(NVL(B.EMP_YMD, B.GEMP_YMD),0,4) )+1 BETWEEN  NVL(#{searchSYear},0) AND NVL(#{searchEYear}, 100)
		AND A.ENTER_CD = B.ENTER_CD
		AND A.SABUN = B.SABUN
		AND A.ENTER_CD = F.ENTER_CD(+)
		AND A.ORG_CD = F.ORG_CD(+)
		AND A.ENTER_CD = D.ENTER_CD(+)
		AND A.SABUN = D.SABUN(+)
		AND D.ADD_TYPE(+) = '2' /*AND D.DISPLAY_YN(+) = 'Y'*/
		AND A.ENTER_CD = E.ENTER_CD
		ORDER BY A.ENTER_CD, B.RET_YMD DESC,
		(SELECT SEQ FROM TSYS005 WHERE ENTER_CD = #{ssnEnterCd} AND GRCODE_CD = 'H20020' AND CODE = A.JIKCHAK_CD) ASC,
		(SELECT SEQ FROM TSYS005 WHERE ENTER_CD = #{ssnEnterCd} AND GRCODE_CD = 'H20010' AND CODE = A.JIKGUB_CD) ASC,
		A.SAL_CLASS ASC
		)
		) R
		WHERE 1=1
		<if test="searchKeyword != null and searchKeyword neq ''">
			AND R.SABUN IN (SELECT SABUN FROM KEYWORD)
		</if>
		<if test="sltSch != null and sltSch neq ''">
			AND NVL(R.SABUN, '^') = NVL(
			(SELECT MAX(AAA.SABUN)
			FROM THRM115 AAA
			WHERE AAA.ENTER_CD = #{ssnEnterCd}
			<if test="searchSch != null and searchSch neq ''">
				AND NVL(AAA.ACA_SCH_NM,'^') LIKE '%' || #{searchSch} || '%'
			</if>
			AND NVL(AAA.ACA_CD,'^') LIKE '%' || #{sltSch} || '%'
			AND AAA.SABUN = R.SABUN )
			, '^')
		</if>
	</select>

	<select parameterType="map" resultType="cMap" id="getCoreRcmdOrgList">
		SELECT ORG_CD AS CODE
			 , F_COM_GET_ORG_NM(ENTER_CD, ORG_CD, TO_CHAR(SYSDATE, 'YYYYMMDD')) AS CODE_NM
		FROM TCDP990
		WHERE ENTER_CD = #{ssnEnterCd}
		  AND MGR_TYPE = '1' -- 추천자
		  AND SABUN = #{ssnSabun}
	</select>

	<select parameterType="map" resultType="cMap" id="getCoreRcmdLayerList">

		<if test="searchGrpCd != null and searchGrpCd neq 'H10060'">
			--직무는 그룹코드가 아닌 테이블이 따로 있으므로 처리를 다르게 한다.
			SELECT CODE, CODE_NM, '0' AS DUMMY_CHECK
			FROM TSYS005
			WHERE ENTER_CD = #{ssnEnterCd}
			AND GRCODE_CD = #{searchGrpCd}
			AND USE_YN = 'Y'
			ORDER BY SEQ
		</if>
		<if test="searchGrpCd != null and searchGrpCd eq 'H10060'">
			SELECT 0 AS "_level",
			'0' AS DUMMY_CHECK,
			'0' AS CODE,
			'직무분류표' AS CODE_NM
			FROM DUAL
			UNION ALL
			SELECT *
			FROM (
			SELECT LEVEL AS "_level",
			'0' AS DUMMY_CHECK,
			A.JOB_CD AS CODE,
			B.JOB_NM AS CODE_NM
			FROM	TORG204 A
			LEFT OUTER JOIN TORG201 B
			ON B.ENTER_CD = A.ENTER_CD
			AND B.JOB_CD = A.JOB_CD
			AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN B.SDATE AND NVL(B.EDATE, '99991231')
			WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
			AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN A.SDATE AND NVL(A.EDATE, '99991231')
			START WITH A.PRIOR_JOB_CD = '0'
			CONNECT BY PRIOR A.ENTER_CD = A.ENTER_CD
			AND PRIOR A.JOB_CD = A.PRIOR_JOB_CD
			ORDER SIBLINGS BY A.PRIOR_JOB_CD, A.SEQ
			)
		</if>
	</select>

	<update parameterType="map" id="saveCoreRcmd">
		MERGE INTO TCDP991 T
		USING (
				SELECT A.ENTER_CD
					 , A.ORG_CD
					 , A.SABUN
					 , A.CORE_TYPE
					 , A.RCMD_SABUN
					 , A.RCMD_YMD
					 , A.RCMD_REASON
				  FROM (
						SELECT NULL AS ENTER_CD
							 , NULL AS ORG_CD
						 	 , NULL AS SABUN
							 , NULL AS CORE_TYPE
							 , NULL AS RCMD_SABUN
							 , NULL AS RCMD_YMD
							 , NULL AS RCMD_REASON
						  FROM DUAL
		<bind name="icnt" value="1" />
		<foreach item="rm" collection="mergeRows" >
						 UNION ALL
						SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD
							 , TRIM(#{searchCoreOrgCd}) AS ORG_CD
							 , TRIM(#{rm.sabun}) AS SABUN
							 , TRIM(#{rm.coreType}) AS CORE_TYPE
							 , TRIM(#{ssnSabun}) AS RCMD_SABUN
							 , TO_CHAR(SYSDATE, 'YYYYMMDD') AS RCMD_YMD
							 , TRIM(#{rm.rcmdReason}) AS RCMD_REASON
						  FROM DUAL
		</foreach>
					   ) A
				 WHERE 1 = 1
				   AND A.ENTER_CD IS NOT NULL
				   AND A.ORG_CD IS NOT NULL
				   AND A.SABUN IS NOT NULL
				   AND A.CORE_TYPE IS NOT NULL
		      ) S
		   ON (
				T.ENTER_CD = S.ENTER_CD
				AND T.ORG_CD = S.ORG_CD
				AND T.SABUN = S.SABUN
				AND T.CORE_TYPE = S.CORE_TYPE
			  )
		 WHEN MATCHED THEN
		UPDATE SET T.RCMD_SABUN = S.RCMD_SABUN
		         , T.RCMD_YMD = S.RCMD_YMD
		    	 , T.RCMD_REASON = S.RCMD_REASON
				 , T.CHKDATE = SYSDATE
				 , T.CHKID = #{ssnSabun}
		WHEN NOT MATCHED THEN
	  INSERT (
				T.ENTER_CD
				, T.ORG_CD
				, T.SABUN
				, T.CORE_TYPE
				, T.RCMD_SABUN
				, T.RCMD_YMD
				, T.RCMD_REASON
				, T.CHKDATE
				, T.CHKID
			 )
	  VALUES (
				S.ENTER_CD
				, S.ORG_CD
				, S.SABUN
				, S.CORE_TYPE
				, S.RCMD_SABUN
				, S.RCMD_YMD
				, S.RCMD_REASON
				, SYSDATE
				, #{ssnSabun}
			 )
	</update>
</mapper>