<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="hrd.selfDevelopment.selfDevelopmentApr">
        <select parameterType="map" resultType="cMap" id="getSelfDevelopmentArpList">

                <![CDATA[
                    -- getSelfDevelopmentArpList
                    SELECT A.ACTIVE_YYYY, A.HALF_GUBUN_TYPE, A.SABUN,
                           B.NAME, A.APPROVAL_REQ_YMD, A.APPROVAL_STATUS,
                           A.APPROVAL_MAIN_ORG_CD, F_COM_GET_ORG_NM(B.ENTER_CD,A.APPROVAL_MAIN_ORG_CD,A.APPROVAL_YMD) AS MAIN_ORG_NM,
                           F_COM_GET_PRIOR_ORG_NM(A.ENTER_CD, A.APPROVAL_ORG_CD, TO_CHAR(SYSDATE, 'YYYYMMDD')) AS PRIOR_ORG_NM,
                           A.APPROVAL_ORG_CD, C.ORG_NM, A.APPROVAL_EMP_NO,
                           A.APPROVAL_EMP_NO , A.APPROVAL_EMP_NAME, A.APPROVAL_YMD,
                           A.APPROVAL_REQ_MEMO, A.APPROVAL_RETURN_MEMO,
                           '0' AS NOTE
                      FROM TCDPV301 A, THRM100 B, TORG101 C
                     WHERE A.ENTER_CD          = #{ssnEnterCd}
                       AND A.ENTER_CD          = B.ENTER_CD
                       AND A.SABUN             = B.SABUN
                       AND A.ENTER_CD          = C.ENTER_CD(+)
                       AND A.APPROVAL_ORG_CD   = C.ORG_CD(+)
                       AND NVL(A.APPROVAL_REQ_YMD,TO_CHAR(SYSDATE,'YYYYMMDD')) BETWEEN C.SDATE(+) AND NVL(C.EDATE(+),'99991231')
                       --  searchApprovalOrgCd 현재승인대상, searchApprovalEmpNo 과거승인내역
                       AND (A.APPROVAL_ORG_CD  = #{searchApprovalOrgCd} OR A.APPROVAL_EMP_NO   = #{searchApprovalEmpNo})
                       AND A.ACTIVE_YYYY       BETWEEN NVL(#{sYear},'0000') AND NVL(#{eYear},'9999')
                               ]]>
				<if test='searchHalfGubunTypeCd != null and !searchHalfGubunTypeCd.equals("")'>
                       AND A.HALF_GUBUN_TYPE   = #{searchHalfGubunTypeCd}
                </if>
				<if test='searchApprovalStatus != null and !searchApprovalStatus.equals("")'>
					   AND A.APPROVAL_STATUS   = #{searchApprovalStatus}
                </if>
                     ORDER BY A.ACTIVE_YYYY, A.HALF_GUBUN_TYPE, A.SABUN, B.NAME, A.APPROVAL_REQ_YMD DESC, A.APPROVAL_STATUS



        </select>

        <update parameterType="map" id="saveSelfDevelopment">

                    MERGE INTO TCDPV301 T
                        USING (
                                SELECT A.ENTER_CD
                                     , A.ACTIVE_YYYY
                                     , A.HALF_GUBUN_TYPE
                                     , A.SABUN
                                     , A.APPROVAL_REQ_YMD
                                     , A.APPROVAL_REQ_MEMO
                                     , A.APPROVAL_STATUS
                                     , A.APPROVAL_MAIN_ORG_CD
                                     , A.APPROVAL_ORG_CD
                                     , A.APPROVAL_EMP_NO
                                     , A.APPROVAL_EMP_NAME
                                     , A.APPROVAL_YMD
                                     , A.APPROVAL_RETURN_MEMO
                                     , F_COM_GET_ORG_CD(ENTER_CD,SABUN,TO_CHAR(SYSDATE,'YYYYMMDD')) AS ORG_CD
                                     , A.CHKDATE
                                     , A.CHKID
                                  FROM (
                                        SELECT NULL AS ENTER_CD
                                             , NULL AS ACTIVE_YYYY
                                             , NULL AS HALF_GUBUN_TYPE
                                             , NULL AS SABUN
                                             , NULL AS APPROVAL_REQ_YMD
                                             , NULL AS APPROVAL_REQ_MEMO
                                             , NULL AS APPROVAL_STATUS
                                             , NULL AS APPROVAL_MAIN_ORG_CD
                                             , NULL AS APPROVAL_ORG_CD
                                             , NULL AS APPROVAL_EMP_NO
                                             , NULL AS APPROVAL_EMP_NAME
                                             , NULL AS APPROVAL_YMD
                                             , NULL AS APPROVAL_RETURN_MEMO
                                             , NULL AS CHKDATE
                                             , NULL AS CHKID
                                          FROM DUAL
                                        <foreach item="rm" collection="mergeRows" >
                                         UNION ALL
                                        SELECT TRIM( #{ssnEnterCd} )              AS ENTER_CD
                                             , TRIM( #{rm.activeYyyy})          AS ACTIVE_YYYY
                                             , TRIM( #{rm.halfGubunType})       AS HALF_GUBUN_TYPE
                                             , TRIM( #{rm.sabun})               AS SABUN
                                             , TRIM( #{rm.approvalReqYmd})      AS APPROVAL_REQ_YMD
                                             , TRIM( #{rm.approvalReqMemo})     AS APPROVAL_REQ_MEMO
                                             , TRIM( #{rm.approvalStatus})      AS APPROVAL_STATUS
                                             , TRIM( #{rm.approvalMainOrgCd})   AS APPROVAL_MAIN_ORG_CD
                                             , TRIM( #{rm.approvalOrgCd})       AS APPROVAL_ORG_CD
                                             , TRIM( #{rm.approvalEmpNo})       AS APPROVAL_EMP_NO
                                             , TRIM( #{rm.approvalEmpName})     AS APPROVAL_EMP_NAME
                                             , TRIM( #{rm.approvalYmd})         AS APPROVAL_YMD
                                             , TRIM( #{rm.approvalReturnMemo})  AS APPROVAL_RETURN_MEMO
                                             , SYSDATE                          AS CHKDATE
                                             , #{ssnSabun}                        AS CHKID
                                          FROM DUAL
                                        </foreach>
                                       ) A WHERE A.ENTER_CD IS NOT NULL
                              ) S
                           ON ( T.ENTER_CD = S.ENTER_CD AND T.ACTIVE_YYYY = S.ACTIVE_YYYY AND T.HALF_GUBUN_TYPE = S.HALF_GUBUN_TYPE AND T.SABUN = S.SABUN )
                         WHEN MATCHED THEN
                              UPDATE SET T.APPROVAL_REQ_YMD     = S.APPROVAL_REQ_YMD
                                       , T.APPROVAL_REQ_MEMO    = S.APPROVAL_REQ_MEMO
                                       , T.APPROVAL_STATUS      = S.APPROVAL_STATUS
                                       , T.APPROVAL_MAIN_ORG_CD = S.ORG_CD -- S.APPROVAL_MAIN_ORG_CD
                                       , T.APPROVAL_ORG_CD      = S.ORG_CD -- S.APPROVAL_ORG_CD
                                       --, T.APPROVAL_EMP_NO      = S.APPROVAL_EMP_NO
                                       , T.APPROVAL_EMP_NO      = NVL(F_COM_GET_CHIP_SABUN(S.ENTER_CD, F_COM_GET_ORG_CD(S.ENTER_CD, S.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')), TO_CHAR(SYSDATE, 'YYYYMMDD')), S.SABUN)
                                       --, T.APPROVAL_EMP_NAME    = S.APPROVAL_EMP_NAME
                                       , T.APPROVAL_EMP_NAME    = F_COM_GET_NAMES(S.ENTER_CD,NVL(F_COM_GET_CHIP_SABUN(S.ENTER_CD, F_COM_GET_ORG_CD(S.ENTER_CD, S.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')), TO_CHAR(SYSDATE, 'YYYYMMDD')), S.SABUN))
                                       , T.APPROVAL_YMD         = S.APPROVAL_YMD
                                       , T.APPROVAL_RETURN_MEMO = S.APPROVAL_RETURN_MEMO
                                       , T.CHKDATE              = S.CHKDATE
                                       , T.CHKID                = S.CHKID
                         WHEN NOT MATCHED THEN
                              INSERT ( T.ENTER_CD     
                              , T.ACTIVE_YYYY     
                              , T.HALF_GUBUN_TYPE     
                              , T.SABUN     
                              , T.APPROVAL_REQ_YMD     
                              , T.APPROVAL_REQ_MEMO     
                              , T.APPROVAL_STATUS     
                              , T.APPROVAL_MAIN_ORG_CD     
                              , T.APPROVAL_ORG_CD     
                              , T.APPROVAL_EMP_NO     
                              , T.APPROVAL_EMP_NAME     
                              , T.APPROVAL_YMD     
                              , T.APPROVAL_RETURN_MEMO     
                              , T.CHKDATE     
                              , T.CHKID
                              ) VALUES ( 
                              S.ENTER_CD     
                              , S.ACTIVE_YYYY     
                              , S.HALF_GUBUN_TYPE     
                              , S.SABUN     
                              , S.APPROVAL_REQ_YMD     
                              , S.APPROVAL_REQ_MEMO     
                              , S.APPROVAL_STATUS     
                              , S.ORG_CD                   
                              , S.ORG_CD              
                              --, S.APPROVAL_EMP_NO     
                              , NVL(F_COM_GET_CHIP_SABUN(S.ENTER_CD, F_COM_GET_ORG_CD(S.ENTER_CD, S.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')), TO_CHAR(SYSDATE, 'YYYYMMDD')), S.SABUN)
                              --, S.APPROVAL_EMP_NAME
                              , F_COM_GET_NAMES(S.ENTER_CD,NVL(F_COM_GET_CHIP_SABUN(S.ENTER_CD, F_COM_GET_ORG_CD(S.ENTER_CD, S.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')), TO_CHAR(SYSDATE, 'YYYYMMDD')), S.SABUN))     
                              , S.APPROVAL_YMD     
                              , S.APPROVAL_RETURN_MEMO     
                              , S.CHKDATE     
                              , S.CHKID
                              )

        </update>
        <update parameterType="map" id="saveSelfDevelopmentAprCancel">

                    MERGE INTO TCDPV301 T
                        USING (
                                SELECT A.ENTER_CD
                                     , A.ACTIVE_YYYY
                                     , A.HALF_GUBUN_TYPE
                                     , A.SABUN
                                     , A.APPROVAL_STATUS
                                     , A.CHKDATE
                                     , A.CHKID
                                  FROM (
                                        SELECT NULL AS ENTER_CD
                                             , NULL AS ACTIVE_YYYY
                                             , NULL AS HALF_GUBUN_TYPE
                                             , NULL AS SABUN
                                             , NULL AS APPROVAL_STATUS
                                             , NULL AS CHKDATE
                                             , NULL AS CHKID
                                          FROM DUAL
                                        <foreach item="rm" collection="mergeRows" >
                                         UNION ALL
                                        SELECT TRIM( #{ssnEnterCd} )              AS ENTER_CD
                                             , TRIM( #{rm.activeYyyy})          AS ACTIVE_YYYY
                                             , TRIM( #{rm.halfGubunType})       AS HALF_GUBUN_TYPE
                                             , TRIM( #{rm.sabun})               AS SABUN
                                             , TRIM( #{rm.approvalStatus})      AS APPROVAL_STATUS
                                             , SYSDATE                          AS CHKDATE
                                             , #{ssnSabun}                        AS CHKID
                                          FROM DUAL
                                        </foreach>
                                       ) A WHERE A.ENTER_CD IS NOT NULL
                              ) S
                           ON ( T.ENTER_CD = S.ENTER_CD AND T.ACTIVE_YYYY = S.ACTIVE_YYYY AND T.HALF_GUBUN_TYPE = S.HALF_GUBUN_TYPE AND T.SABUN = S.SABUN )
                         WHEN MATCHED THEN
                              UPDATE SET T.APPROVAL_STATUS      = S.APPROVAL_STATUS
                                       , T.CHKDATE              = S.CHKDATE
                                       , T.CHKID                = S.CHKID


        </update>







        <update parameterType="map" id="saveSelfDevelopmentAprConfirmOrReject">


                    MERGE INTO TCDPV301 T
                        USING (
                                SELECT A.ENTER_CD
                                     , A.ACTIVE_YYYY
                                     , A.HALF_GUBUN_TYPE
                                     , A.SABUN
                                     , A.APPROVAL_STATUS
                                     , A.APPROVAL_EMP_NO
                                     , F_COM_GET_NAMES(A.ENTER_CD,A.SABUN) AS APPROVAL_EMP_NAME
                                     , A.APPROVAL_YMD
                                     , A.APPROVAL_RETURN_MEMO
                                     , F_COM_GET_ORG_CD(ENTER_CD,SABUN,TO_CHAR(SYSDATE,'YYYYMMDD')) AS ORG_CD
                                     , A.CHKDATE
                                     , A.CHKID
                                  FROM (
                                        SELECT NULL AS ENTER_CD
                                             , NULL AS ACTIVE_YYYY
                                             , NULL AS HALF_GUBUN_TYPE
                                             , NULL AS SABUN
                                             , NULL AS APPROVAL_STATUS
                                             , NULL AS APPROVAL_EMP_NO
                                             , NULL AS APPROVAL_EMP_NAME
                                             , NULL AS APPROVAL_YMD
                                             , NULL AS APPROVAL_RETURN_MEMO
                                             , NULL AS CHKDATE
                                             , NULL AS CHKID
                                          FROM DUAL
                                        <foreach item="rm" collection="mergeRows" >
                                         UNION ALL
                                        SELECT TRIM( #{ssnEnterCd} )              AS ENTER_CD
                                             , TRIM( #{rm.activeYyyy})          AS ACTIVE_YYYY
                                             , TRIM( #{rm.halfGubunType})       AS HALF_GUBUN_TYPE
                                             , TRIM( #{rm.sabun})               AS SABUN
                                             , TRIM( #{rm.approvalStatus})      AS APPROVAL_STATUS
                                             , TRIM( #{rm.approvalEmpNo})       AS APPROVAL_EMP_NO
                                             , TRIM( #{rm.approvalEmpName})     AS APPROVAL_EMP_NAME
                                             , TRIM( #{rm.approvalYmd})         AS APPROVAL_YMD
                                             , TRIM( #{rm.approvalReturnMemo})  AS APPROVAL_RETURN_MEMO
                                             , SYSDATE                          AS CHKDATE
                                             , #{ssnSabun}                        AS CHKID
                                          FROM DUAL
                                        </foreach>
                                       ) A WHERE A.ENTER_CD IS NOT NULL
                              ) S
                           ON ( T.ENTER_CD = S.ENTER_CD AND T.ACTIVE_YYYY = S.ACTIVE_YYYY AND T.HALF_GUBUN_TYPE = S.HALF_GUBUN_TYPE AND T.SABUN = S.SABUN )
                         WHEN MATCHED THEN
                              UPDATE SET T.APPROVAL_STATUS      = S.APPROVAL_STATUS
                                       , T.APPROVAL_MAIN_ORG_CD = S.ORG_CD
                                       , T.APPROVAL_ORG_CD      = S.ORG_CD
                                       , T.APPROVAL_EMP_NO      = S.APPROVAL_EMP_NO
                                       , T.APPROVAL_EMP_NAME    = S.APPROVAL_EMP_NAME
                                       , T.APPROVAL_YMD         = S.APPROVAL_YMD
                                       , T.APPROVAL_RETURN_MEMO = S.APPROVAL_RETURN_MEMO
                                       , T.CHKDATE              = S.CHKDATE
                                       , T.CHKID                = S.CHKID
        </update>





























        <delete parameterType="map" id="deleteSelfDevelopmentApr">

                    DELETE FROM TCDPV301
                     WHERE ENTER_CD||'_'||ACTIVE_YYYY||'_'||HALF_GUBUN_TYPE||'_'||SABUN IN ( NULL
<foreach item="rm" collection="deleteRows" >  ,
    <if test='ssnEnterCd != null and !ssnEnterCd.equals("") and rm.activeYyyy != null and !rm.activeYyyy.equals("") and rm.halfGubunType != null and !rm.halfGubunType.equals("") and rm.sabun != null and !rm.sabun.equals("")'>
                          TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.activeYyyy})||'_'||TRIM(#{rm.halfGubunType})||'_'||TRIM(#{rm.sabun})
    </if>
</foreach>
                    )

        </delete>



        <update parameterType="map" id="saveSelfSkillAndDevPlan">


                   MERGE INTO TCDPV302 T
                   USING (
                          SELECT A.ENTER_CD
                               , A.ACTIVE_YYYY
                               , A.HALF_GUBUN_TYPE
                               , A.SABUN
                               , A.TRM_CD
                               , A.EDUCATION
                               , A.EDU_DEV_PLAN
                               , A.EDU_PRE_YMD
                               , A.POINT
                               , A.GUBUN
                               , A.TOTAL_TIME
                               , A.CONFIRM_STATUS
                               , A.CHKDATE
                               , A.CHKID
                           FROM (
                                  SELECT NULL AS ENTER_CD
                                       , NULL AS ACTIVE_YYYY
                                       , NULL AS HALF_GUBUN_TYPE
                                       , NULL AS SABUN
                                       , NULL AS TRM_CD
                                       , NULL AS EDUCATION
                                       , NULL AS EDU_DEV_PLAN
                                       , NULL AS EDU_PRE_YMD
                                       , NULL AS POINT
                                       , NULL AS GUBUN
                                       , NULL AS TOTAL_TIME
                                       , NULL AS CONFIRM_STATUS
                                       , NULL AS CHKDATE
                                       , NULL AS CHKID
                                    FROM DUAL
                                <bind name="icnt" value="1" />
                                <foreach item="rm" collection="mergeRows" >
                                  UNION ALL
                                 SELECT TRIM( #{ssnEnterCd}         ) AS ENTER_CD
                                      , TRIM( #{rm.activeYyyy}    ) AS ACTIVE_YYYY
                                      , TRIM( #{rm.halfGubunType} ) AS HALF_GUBUN_TYPE
                                      , TRIM( #{rm.sabun}         ) AS SABUN
                                      , TRIM( #{rm.code}         ) AS TRM_CD
                                     -- , TRIM( #{rm.education}     ) AS EDUCATION
                                      <choose><when test='rm.education != null and !rm.education.equals("")'>
							 		   , TO_NUMBER(TRIM(#{rm.education})) AS EDUCATION
                                      </when><otherwise>
									   , (SELECT NVL(MAX(TO_NUMBER(EDUCATION)),0) + ${icnt} FROM TCDPV302 WHERE ENTER_CD = #{ssnEnterCd} AND ACTIVE_YYYY = #{rm.activeYyyy} AND HALF_GUBUN_TYPE = #{rm.halfGubunType} AND SABUN = #{rm.sabun})  AS EDUCATION
									  <bind name="icnt" value="icnt + 1" />
                                      </otherwise>
                                      </choose>
                                      , TRIM( #{rm.eduDevPlan}     ) AS EDU_DEV_PLAN
                                      , TRIM( #{rm.eduPreYmd}     ) AS EDU_PRE_YMD
                                      , TRIM( #{rm.point}         ) AS POINT
                                      , TRIM( #{rm.gubunCode}     ) AS GUBUN
                                      , TRIM( #{rm.time}          ) AS TOTAL_TIME
                                      , TRIM( #{rm.confirmStatus} ) AS CONFIRM_STATUS
                                      , SYSDATE                     AS CHKDATE
                                      , #{ssnSabun}                   AS CHKID
                                   FROM DUAL
                                </foreach>
                               ) A WHERE A.ENTER_CD IS NOT NULL
                         ) S
                      ON ( T.ENTER_CD  = S.ENTER_CD AND T.ACTIVE_YYYY = S.ACTIVE_YYYY AND T.HALF_GUBUN_TYPE = S.HALF_GUBUN_TYPE AND T.SABUN = S.SABUN AND T.TRM_CD = S.TRM_CD AND T.EDUCATION = S.EDUCATION AND T.GUBUN = S.GUBUN )
                    WHEN MATCHED THEN
                         UPDATE SET T.EDU_PRE_YMD    = S.EDU_PRE_YMD
                                  , T.POINT          = S.POINT
                                  , T.TOTAL_TIME     = S.TOTAL_TIME
                                  , T.CONFIRM_STATUS = S.CONFIRM_STATUS
                                  , T.EDU_DEV_PLAN   = S.EDU_DEV_PLAN
                                  , T.CHKDATE        = S.CHKDATE
                                  , T.CHKID          = S.CHKID
                    WHEN NOT MATCHED THEN
                         INSERT ( T.ENTER_CD, T.ACTIVE_YYYY, T.HALF_GUBUN_TYPE, T.SABUN, T.TRM_CD, T.EDUCATION, T.EDU_DEV_PLAN, T.EDU_PRE_YMD, T.POINT, T.GUBUN, T.TOTAL_TIME, T.CONFIRM_STATUS, T.CHKDATE, T.CHKID)
                         VALUES ( S.ENTER_CD, S.ACTIVE_YYYY, S.HALF_GUBUN_TYPE, S.SABUN, S.TRM_CD, S.EDUCATION, S.EDU_DEV_PLAN, S.EDU_PRE_YMD, S.POINT, S.GUBUN, S.TOTAL_TIME, S.CONFIRM_STATUS, S.CHKDATE, S.CHKID)
        </update>

        <delete parameterType="map" id="deleteSelfSkillAndDevPlan">

                    DELETE FROM TCDPV302
                     WHERE ENTER_CD||'_'||ACTIVE_YYYY||'_'||HALF_GUBUN_TYPE||'_'||SABUN||'_'||TRM_CD||'_'||EDUCATION IN ( NULL
<foreach item="rm" collection="deleteRows" >  ,
    <if test=' ssnEnterCd != null      and !ssnEnterCd.equals("")          and
          rm.activeYyyy != null and !rm.activeYyyy.equals("")       and
          rm.halfGubunType != null and !rm.halfGubunType.equals("")    and
          rm.sabun != null and !rm.sabun.equals("")            and
          rm.trmCd != null and !rm.trmCd.equals("")            and
          rm.education != null and !rm.education.equals("")        '>
                          TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.activeYyyy})||'_'||TRIM(#{rm.halfGubunType})||'_'||TRIM(#{rm.sabun})||'_'||TRIM(#{rm.trmCd})||'_'||TRIM(#{rm.education})
    </if>
</foreach>
                    )

        </delete>


</mapper>
