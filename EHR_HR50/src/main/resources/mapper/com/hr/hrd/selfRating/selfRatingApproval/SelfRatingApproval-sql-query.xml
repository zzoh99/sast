<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="hrd.selfRating.selfRatingApproval">
		<select parameterType="map" resultType="cMap" id="getSelfRatingApprovalList">

				<![CDATA[
					SELECT T1.NAME
						 , T1.SABUN
						 , T1.ACTIVE_START_YMD
						 , T2.APPROVAL_MAIN_ORG_CD                   AS ORG_CD
						 , F_COM_GET_ORG_NM(T1.ENTER_CD, T2.APPROVAL_MAIN_ORG_CD, T1.ACTIVE_START_YMD, #{ssnLocaleCd}) AS APPROVAL_MAIN_ORG_NM
						 , F_COM_GET_JIKGUB_CD(T1.ENTER_CD, T1.SABUN, T1.ACTIVE_START_YMD)                AS JIKGUB_CD
						 , F_COM_GET_JIKWEE_CD(T1.ENTER_CD, T1.SABUN, T1.ACTIVE_START_YMD)                AS JIKWEE_CD
						 , F_COM_GET_JIKCHAK_CD(T1.ENTER_CD, T1.SABUN, T1.ACTIVE_START_YMD)               AS JIKCHAK_CD
						 , F_COM_GET_JIKGUB_NM(T1.ENTER_CD, T1.SABUN, T1.ACTIVE_START_YMD, #{ssnLocaleCd})  AS JIKGUB_NM
						 , F_COM_GET_JIKWEE_NM(T1.ENTER_CD, T1.SABUN, T1.ACTIVE_START_YMD, #{ssnLocaleCd})  AS JIKWEE_NM
						 , F_COM_GET_JIKCHAK_NM(T1.ENTER_CD, T1.SABUN, T1.ACTIVE_START_YMD, #{ssnLocaleCd}) AS JIKCHAK_NM
						 , F_COM_GET_STATUS_CD(T1.ENTER_CD, T1.SABUN, T1.ACTIVE_START_YMD)                AS STATUS_CD
						 , T2.ENTER_CD
						 , T2.ACTIVE_YYYY
						 , T2.HALF_GUBUN_TYPE
						 , T2.SABUN
						 , T2.APPROVAL_REQ_YMD
						 , T2.APPROVAL_STATUS
						 , T2.APPROVAL_MAIN_ORG_CD
						 , T2.APPROVAL_ORG_CD
						 , T2.APPROVAL_EMP_NO
						 , T2.APPROVAL_EMP_NAME
						 , T2.APPROVAL_YMD
					FROM (SELECT A.*
							   , B.ACTIVE_YYYY
							   , B.HALF_GUBUN_TYPE
							   , B.ACTIVE_START_YMD
							   , B.ACTIVE_END_YMD
						  FROM THRM100 A,
							   (SELECT *
								FROM TCDPV000
								WHERE ENTER_CD        = #{ssnEnterCd}
								  AND ACTIVE_YYYY     = #{searchActiveYyyy}
								  AND HALF_GUBUN_TYPE = #{searchHalfGubunType}) B
						 ) T1 INNER JOIN
						 (SELECT *
							FROM TCDPV101 A
						  WHERE A.ENTER_CD        = #{ssnEnterCd}
							AND A.ACTIVE_YYYY     = #{searchActiveYyyy}
							AND A.HALF_GUBUN_TYPE = #{searchHalfGubunType}) T2
						 ON T1.ENTER_CD = T2.ENTER_CD
						AND T1.SABUN = T2.SABUN
						AND T1.ACTIVE_YYYY = T2.ACTIVE_YYYY
						AND T1.HALF_GUBUN_TYPE = T2.HALF_GUBUN_TYPE
					  WHERE T2.APPROVAL_STATUS IN ( '1', '3' )
						AND T1.ENTER_CD        = #{ssnEnterCd}
						AND T2.APPROVAL_EMP_NO = #{ssnSabun}
					  ORDER BY T1.SABUN
				]]>


		</select>
		<select parameterType="map" resultType="cMap" id="getSelfRatingApprovalDetailList1">

				<![CDATA[
					SELECT A.ENTER_CD
						 , B.SKILL_CD AS PRIOR_SKILL_CD
						 , B.SKILL_NM AS PRIOR_SKILL_NM
						 , A.SKILL_CD
						 , A.SKILL_NM
						 , #{searchActiveYyyy}    AS ACTIVE_YYYY
						 , #{searchHalfGubunType} AS HALF_GUBUN_TYPE
						 , #{searchSabun}         AS SABUN
						 , C.USE_MONTH
						 , C.RATING_GRADE
						 , C.MODIFY_GRADE
						 , C.MODIFY_DESC
						 , C.FINAL_GRADE
					  FROM TCDPW203 A INNER JOIN TCDPW203 B
						ON A.ENTER_CD       = B.ENTER_CD
					   AND A.PRIOR_SKILL_CD = B.SKILL_CD
					  LEFT OUTER JOIN (SELECT *
					                     FROM TCDPV104
					                    WHERE ENTER_CD        = #{ssnEnterCd}
					                      AND ACTIVE_YYYY     = #{searchActiveYyyy}
					                      AND HALF_GUBUN_TYPE = #{searchHalfGubunType}
					                      AND SABUN           = #{searchSabun}        ) C
						ON A.ENTER_CD = C.ENTER_CD
					   AND A.SKILL_CD = C.SKILL_CD
					 WHERE A.START_YMD <= #{searchBaseYmd}
					   AND A.END_YMD   >= #{searchBaseYmd}
					   AND A.USE_YN = 'Y'
					   AND C.ENTER_CD IS NOT NULL
	                 ORDER BY A.PRIOR_SKILL_CD, A.SKILL_CD
				]]>


		</select>
		<select parameterType="map" resultType="cMap" id="getSelfRatingApprovalDetailList2">

				<![CDATA[
					SELECT A.ENTER_CD
						 , B.KNOWLEDGE_CD AS PRIOR_KNOWLEDGE_CD
						 , B.KNOWLEDGE_NM AS PRIOR_KNOWLEDGE_NM
						 , A.KNOWLEDGE_CD
						 , A.KNOWLEDGE_NM
						 , #{searchActiveYyyy}    AS ACTIVE_YYYY
						 , #{searchHalfGubunType} AS HALF_GUBUN_TYPE
						 , #{searchSabun}         AS SABUN
						 , C.USE_MONTH
						 , C.RATING_GRADE
						 , C.MODIFY_GRADE
						 , C.MODIFY_DESC
						 , C.FINAL_GRADE
					  FROM TCDPW201 A INNER JOIN TCDPW201 B
						ON A.ENTER_CD           = B.ENTER_CD
					   AND A.PRIOR_KNOWLEDGE_CD = B.KNOWLEDGE_CD
					  LEFT OUTER JOIN (SELECT *
					                     FROM TCDPV102
					                    WHERE ENTER_CD        = #{ssnEnterCd}
					                      AND ACTIVE_YYYY     = #{searchActiveYyyy}
					                      AND HALF_GUBUN_TYPE = #{searchHalfGubunType}
					                      AND SABUN           = #{searchSabun}        ) C
						ON A.ENTER_CD     = C.ENTER_CD
					   AND A.KNOWLEDGE_CD = C.KNOWLEDGE_CD
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND B.KNOWLEDGE_TYPE = 'C'
					   AND B.TECH_BIZ_TYPE  = 'T'
					   AND A.START_YMD <= #{searchBaseYmd}
					   AND A.END_YMD   >= #{searchBaseYmd}
					   AND A.USE_YN = 'Y'
					   AND C.ENTER_CD IS NOT NULL
					 ORDER BY A.PRIOR_KNOWLEDGE_CD, A.KNOWLEDGE_CD
				]]>


		</select>
		<select parameterType="map" resultType="cMap" id="getSelfRatingApprovalDetailList3">

				<![CDATA[
					SELECT A.ENTER_CD
						 , B.KNOWLEDGE_CD AS PRIOR_KNOWLEDGE_CD
						 , B.KNOWLEDGE_NM AS PRIOR_KNOWLEDGE_NM
						 , A.KNOWLEDGE_CD
						 , A.KNOWLEDGE_NM
						 , #{searchActiveYyyy}    AS ACTIVE_YYYY
						 , #{searchHalfGubunType} AS HALF_GUBUN_TYPE
						 , #{searchSabun}         AS SABUN
						 , C.USE_MONTH
						 , C.RATING_GRADE
						 , C.MODIFY_GRADE
						 , C.MODIFY_DESC
						 , C.FINAL_GRADE
					  FROM TCDPW201 A INNER JOIN TCDPW201 B
						ON A.ENTER_CD           = B.ENTER_CD
					   AND A.PRIOR_KNOWLEDGE_CD = B.KNOWLEDGE_CD
					  LEFT OUTER JOIN (SELECT *
					                     FROM TCDPV103
					                    WHERE ENTER_CD        = #{ssnEnterCd}
					                      AND ACTIVE_YYYY     = #{searchActiveYyyy}
					                      AND HALF_GUBUN_TYPE = #{searchHalfGubunType}
					                      AND SABUN           = #{searchSabun}        ) C
						ON A.ENTER_CD     = C.ENTER_CD
					   AND A.KNOWLEDGE_CD = C.KNOWLEDGE_CD
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND B.KNOWLEDGE_TYPE = 'C'
					   AND B.TECH_BIZ_TYPE  = 'B'
					   AND A.START_YMD <= #{searchBaseYmd}
					   AND A.END_YMD   >= #{searchBaseYmd}
					   AND A.USE_YN = 'Y'
					   AND C.ENTER_CD IS NOT NULL
					 ORDER BY A.PRIOR_KNOWLEDGE_CD, A.KNOWLEDGE_CD
				]]>


		</select>
		<update parameterType="map" id="saveSelfRatingApproval">

					MERGE INTO TCDPV101 T
					USING (
						 SELECT  A.ENTER_CD
							   , A.ACTIVE_YYYY
							   , A.HALF_GUBUN_TYPE
							   , A.SABUN
							   , A.APPROVAL_REQ_YMD
							   , A.APPROVAL_STATUS
							   , A.APPROVAL_MAIN_ORG_CD
							   , A.APPROVAL_ORG_CD
							   , A.APPROVAL_EMP_NO
							   , A.APPROVAL_EMP_NAME
							   , A.APPROVAL_YMD
						FROM (
							 SELECT  NULL AS ENTER_CD
								   , NULL AS ACTIVE_YYYY
								   , NULL AS HALF_GUBUN_TYPE
								   , NULL AS SABUN
								   , NULL AS APPROVAL_REQ_YMD
								   , NULL AS APPROVAL_STATUS
								   , NULL AS APPROVAL_MAIN_ORG_CD
								   , NULL AS APPROVAL_ORG_CD
								   , NULL AS APPROVAL_EMP_NO
								   , NULL AS APPROVAL_EMP_NAME
								   , NULL AS APPROVAL_YMD
							FROM DUAL
					<bind name="icnt" value="1" />
					<foreach item="rm" collection="mergeRows" >
							UNION ALL
							 SELECT  TRIM(#{rm.enterCd}           ) AS ENTER_CD
								   , TRIM(#{rm.activeYyyy}        ) AS ACTIVE_YYYY
								   , TRIM(#{rm.halfGubunType}     ) AS HALF_GUBUN_TYPE
								   , TRIM(#{rm.sabun}             ) AS SABUN
								   , TRIM(#{rm.approvalReqYmd}    ) AS APPROVAL_REQ_YMD
								   , TRIM(#{rm.approvalStatus}    ) AS APPROVAL_STATUS
								   , TRIM(#{rm.approvalMainOrgCd} ) AS APPROVAL_MAIN_ORG_CD
								   , TRIM(#{rm.approvalOrgCd}     ) AS APPROVAL_ORG_CD
								   , TRIM(#{rm.approvalEmpNo}     ) AS APPROVAL_EMP_NO
								   , TRIM(#{rm.approvalEmpName}   ) AS APPROVAL_EMP_NAME
								   , TRIM(#{rm.approvalYmd}       ) AS APPROVAL_YMD
							FROM DUAL
					</foreach>
						) A WHERE A.ENTER_CD IS NOT NULL
					    AND A.ACTIVE_YYYY IS NOT NULL
					    AND A.HALF_GUBUN_TYPE IS NOT NULL
					    AND A.SABUN IS NOT NULL
					) S
					ON (T.ENTER_CD=S.ENTER_CD AND T.ACTIVE_YYYY=S.ACTIVE_YYYY AND T.HALF_GUBUN_TYPE=S.HALF_GUBUN_TYPE AND T.SABUN=S.SABUN)
					WHEN MATCHED THEN
						UPDATE SET  T.APPROVAL_REQ_YMD     = S.APPROVAL_REQ_YMD
								  , T.APPROVAL_STATUS      = S.APPROVAL_STATUS
								  , T.APPROVAL_YMD         = S.APPROVAL_YMD
								  , T.CHKDATE = SYSDATE
								  , T.CHKID = #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT (
							  T.ENTER_CD
							, T.ACTIVE_YYYY
							, T.HALF_GUBUN_TYPE
							, T.SABUN
							, T.APPROVAL_REQ_YMD
							, T.APPROVAL_STATUS
							, T.APPROVAL_YMD
							, T.CHKDATE
							, T.CHKID
						) VALUES (
							  S.ENTER_CD
							, S.ACTIVE_YYYY
							, S.HALF_GUBUN_TYPE
							, S.SABUN
							, S.APPROVAL_REQ_YMD
							, S.APPROVAL_STATUS
							, S.APPROVAL_YMD
							, SYSDATE
							, #{ssnSabun}
						)
		</update>
		<delete parameterType="map" id="deleteSelfRatingApproval">

						DELETE FROM TCDPV101 WHERE ( ENTER_CD, ACTIVE_YYYY, HALF_GUBUN_TYPE, SABUN )
									IN (
													(NULL, NULL, NULL, NULL)
						<foreach item="rm" collection="deleteRows" >
						,							(	TRIM(#{enterCd}), TRIM(#{activeYyyy}),TRIM(#{halfGubunType}), TRIM(#{sabun}) )
						</foreach>
										)
		</delete>

		<update parameterType="map" id="saveSelfRatingApprovalDetail1">

					MERGE INTO TCDPV104 T
					USING (
						 SELECT  A.ENTER_CD
							   , A.ACTIVE_YYYY
							   , A.HALF_GUBUN_TYPE
							   , A.SABUN
							   , A.SKILL_CD
							   , A.USE_MONTH
							   , A.RATING_GRADE
							   , A.MODIFY_GRADE
							   , A.FINAL_GRADE
							   , A.MODIFY_DESC
						FROM (
							 SELECT  NULL AS ENTER_CD
								   , NULL AS ACTIVE_YYYY
								   , NULL AS HALF_GUBUN_TYPE
								   , NULL AS SABUN
								   , NULL AS SKILL_CD
								   , NULL AS USE_MONTH
								   , NULL AS RATING_GRADE
								   , NULL AS MODIFY_GRADE
								   , NULL AS FINAL_GRADE
								   , NULL AS MODIFY_DESC
							FROM DUAL
					<bind name="icnt" value="1" />
					<foreach item="rm" collection="mergeRows" >
							UNION ALL
							 SELECT  TRIM(#{rm.enterCd}) AS ENTER_CD
								   , TRIM(#{rm.activeYyyy}) AS ACTIVE_YYYY
								   , TRIM(#{rm.halfGubunType}) AS HALF_GUBUN_TYPE
								   , TRIM(#{rm.sabun}) AS SABUN
								   , TRIM(#{rm.skillCd}) AS SKILL_CD
								   , TRIM(#{rm.useMonth}) AS USE_MONTH
								   , TRIM(#{rm.ratingGrade}) AS RATING_GRADE
								   , TRIM(#{rm.modifyGrade}) AS MODIFY_GRADE
								   , TRIM(#{rm.modifyGrade}) AS FINAL_GRADE
								   , TRIM(#{rm.modifyDesc}) AS MODIFY_DESC
							FROM DUAL
					</foreach>
						) A WHERE A.ENTER_CD IS NOT NULL
					 AND A.ACTIVE_YYYY IS NOT NULL
					 AND A.HALF_GUBUN_TYPE IS NOT NULL
					 AND A.SABUN IS NOT NULL
					 AND A.SKILL_CD IS NOT NULL
					) S
					ON (T.ENTER_CD=S.ENTER_CD AND T.ACTIVE_YYYY=S.ACTIVE_YYYY AND T.HALF_GUBUN_TYPE=S.HALF_GUBUN_TYPE AND T.SABUN=S.SABUN AND T.SKILL_CD=S.SKILL_CD)
					WHEN MATCHED THEN
						UPDATE SET  T.USE_MONTH = S.USE_MONTH
								  , T.RATING_GRADE = S.RATING_GRADE
								  , T.MODIFY_GRADE = S.MODIFY_GRADE
								  , T.FINAL_GRADE = S.FINAL_GRADE
								  , T.MODIFY_DESC = S.MODIFY_DESC
								  , T.CHKDATE = SYSDATE
								  , T.CHKID = #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT (
							  T.ENTER_CD
							, T.ACTIVE_YYYY
							, T.HALF_GUBUN_TYPE
							, T.SABUN
							, T.SKILL_CD
							, T.USE_MONTH
							, T.RATING_GRADE
							, T.MODIFY_GRADE
							, T.FINAL_GRADE
							, T.MODIFY_DESC
							, T.CHKDATE
							, T.CHKID
						) VALUES (
							  S.ENTER_CD
							, S.ACTIVE_YYYY
							, S.HALF_GUBUN_TYPE
							, S.SABUN
							, S.SKILL_CD
							, S.USE_MONTH
							, S.RATING_GRADE
							, S.MODIFY_GRADE
							, S.FINAL_GRADE
							, S.MODIFY_DESC
							, SYSDATE
							, #{ssnSabun}
						)
		</update>
		<delete parameterType="map" id="deleteSelfRatingApprovalDetail1">

						DELETE FROM TCDPV104
						 WHERE 1=1
						   AND ENTER_CD||'_'||ACTIVE_YYYY||'_'||HALF_GUBUN_TYPE||'_'||SABUN||'_'||SKILL_CD IN ( NULL
							<foreach item="rm" collection="deleteRows" >
							,
								<if test='rm.enterCd != null and !rm.enterCd.equals("") and
							rm.activeYyyy != null and !rm.activeYyyy.equals("") and
							rm.halfGubunType != null and !rm.halfGubunType.equals("") and
							rm.sabun != null and !rm.sabun.equals("") and
							rm.skillCd != null and !rm.skillCd.equals("")'>
									TRIM(#{rm.enterCd})||'_'||TRIM(#{rm.activeYyyy})||'_'||TRIM(#{rm.halfGubunType})||'_'||TRIM(#{rm.sabun})||'_'||TRIM(#{rm.skillCd})
								</if>
							</foreach>
							)
		</delete>
		
		<update parameterType="map" id="saveSelfRatingApprovalDetail2">
					MERGE INTO
				  		<if test='techBizType != null  and techBizType.equals("T")'>
 							TCDPV102
						</if>
						<if test='techBizType != null  and techBizType.equals("B")'>
 							TCDPV103
						</if>
					 T
					USING (
						 SELECT  A.ENTER_CD
							   , A.ACTIVE_YYYY
							   , A.HALF_GUBUN_TYPE
							   , A.SABUN
							   , A.KNOWLEDGE_CD
							   , A.USE_MONTH
							   , A.RATING_GRADE
							   , A.MODIFY_GRADE
							   , A.FINAL_GRADE
							   , A.MODIFY_DESC
						FROM (
							 SELECT  NULL AS ENTER_CD
								   , NULL AS ACTIVE_YYYY
								   , NULL AS HALF_GUBUN_TYPE
								   , NULL AS SABUN
								   , NULL AS KNOWLEDGE_CD
								   , NULL AS USE_MONTH
								   , NULL AS RATING_GRADE
								   , NULL AS MODIFY_GRADE
								   , NULL AS FINAL_GRADE
								   , NULL AS MODIFY_DESC
							FROM DUAL
					<bind name="icnt" value="1" />
					<foreach item="rm" collection="mergeRows" >
							UNION ALL
							 SELECT  TRIM(#{rm.enterCd}) AS ENTER_CD
								   , TRIM(#{rm.activeYyyy}) AS ACTIVE_YYYY
								   , TRIM(#{rm.halfGubunType}) AS HALF_GUBUN_TYPE
								   , TRIM(#{rm.sabun}) AS SABUN
								   , TRIM(#{rm.knowledgeCd}) AS KNOWLEDGE_CD
								   , TRIM(#{rm.useMonth}) AS USE_MONTH
								   , TRIM(#{rm.ratingGrade}) AS RATING_GRADE
								   , TRIM(#{rm.modifyGrade}) AS MODIFY_GRADE
								   , TRIM(#{rm.modifyGrade}) AS FINAL_GRADE
								   , TRIM(#{rm.modifyDesc}) AS MODIFY_DESC
							FROM DUAL
					</foreach>
						) A WHERE A.ENTER_CD IS NOT NULL
					 AND A.ACTIVE_YYYY IS NOT NULL
					 AND A.HALF_GUBUN_TYPE IS NOT NULL
					 AND A.SABUN IS NOT NULL
					 AND A.KNOWLEDGE_CD IS NOT NULL
					) S
					ON (T.ENTER_CD=S.ENTER_CD AND T.ACTIVE_YYYY=S.ACTIVE_YYYY AND T.HALF_GUBUN_TYPE=S.HALF_GUBUN_TYPE AND T.SABUN=S.SABUN AND T.KNOWLEDGE_CD=S.KNOWLEDGE_CD)
					WHEN MATCHED THEN
						UPDATE SET  T.USE_MONTH = S.USE_MONTH
								  , T.RATING_GRADE = S.RATING_GRADE
								  , T.MODIFY_GRADE = S.MODIFY_GRADE
								  , T.FINAL_GRADE = S.FINAL_GRADE
								  , T.MODIFY_DESC = S.MODIFY_DESC
								  , T.CHKDATE = SYSDATE
								  , T.CHKID = #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT (
							  T.ENTER_CD
							, T.ACTIVE_YYYY
							, T.HALF_GUBUN_TYPE
							, T.SABUN
							, T.KNOWLEDGE_CD
							, T.USE_MONTH
							, T.RATING_GRADE
							, T.MODIFY_GRADE
							, T.FINAL_GRADE
							, T.MODIFY_DESC
							, T.CHKDATE
							, T.CHKID
						) VALUES (
							  S.ENTER_CD
							, S.ACTIVE_YYYY
							, S.HALF_GUBUN_TYPE
							, S.SABUN
							, S.KNOWLEDGE_CD
							, S.USE_MONTH
							, S.RATING_GRADE
							, S.MODIFY_GRADE
							, S.FINAL_GRADE
							, S.MODIFY_DESC
							, SYSDATE
							, #{ssnSabun}
						)

		</update>
		<delete parameterType="map" id="deleteSelfRatingApprovalDetail2">

						DELETE FROM
							  		<if test='techBizType != null  and techBizType.equals("T")'>
			 							TCDPV102
									</if>
									<if test='techBizType != null  and techBizType.equals("B")'>
		 								TCDPV103
									</if>
						 WHERE 1=1
						   AND ENTER_CD||'_'||ACTIVE_YYYY||'_'||HALF_GUBUN_TYPE||'_'||SABUN||'_'||KNOWLEDGE_CD IN ( NULL
								<foreach item="rm" collection="deleteRows" >
								,
									<if test='rm.enterCd != null and !rm.enterCd.equals("") and
								rm.activeYyyy != null and !rm.activeYyyy.equals("") and
								rm.halfGubunType != null and !rm.halfGubunType.equals("") and
								rm.sabun != null and !rm.sabun.equals("") and
								rm.knowledgeCd != null and !rm.knowledgeCd.equals("")'>
										TRIM(#{rm.enterCd})||'_'||TRIM(#{rm.activeYyyy})||'_'||TRIM(#{rm.halfGubunType})||'_'||TRIM(#{rm.sabun})||'_'||TRIM(#{rm.knowledgeCd})
									</if>
								</foreach>
						)
		</delete>

</mapper>
