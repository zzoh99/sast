<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ben.benefitBasis.flexPayUpload">
	<select id="getFlexPayUploadMap" parameterType="map" resultType="cMap">
		 SELECT PAY_ACTION_CD
			 , PAY_ACTION_NM
			 , CLOSE_YN
		   FROM (
				SELECT A.PAY_ACTION_CD
					  , A.PAY_ACTION_NM
					  , NVL(C.CLOSE_YN, 'N') AS CLOSE_YN
				  FROM TCPN201 A
					 , TCPN051 B
					 , TCPN981 C
					 , TCPN203 D
				 WHERE A.ENTER_CD        = B.ENTER_CD
				   AND A.PAY_CD            = B.PAY_CD
				   AND A.ENTER_CD        = D.ENTER_CD(+)
				   AND A.PAY_ACTION_CD    = D.PAY_ACTION_CD(+)
				   AND A.ENTER_CD        = C.ENTER_CD(+)
				   AND A.PAY_ACTION_CD    = C.PAY_ACTION_CD(+)
				   AND A.ENTER_CD        = #{ssnEnterCd}
		<if test='searchRunType != null and searchRunType neq ""'>
				   AND B.RUN_TYPE IN
			<foreach collection="searchRunType" item="item" index="index" open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
<if test="ssnSearchType != null and ssnSearchType eq 'O'">
	<![CDATA[
					AND (B.BUSINESS_PLACE_CD IN (SELECT DISTINCT REGEXP_SUBSTR(A.PARAM, '[^,]+', 1, LEVEL)
												  FROM (SELECT F_COM_GET_AUTH_PARSE(TRIM(#{ssnEnterCd}),'C10',F_COM_GET_AUTH_VALUE(TRIM(#{ssnEnterCd}),TRIM(#{ssnSabun}),TRIM(#{ssnGrpCd}))) AS PARAM FROM dual) A
												CONNECT BY LEVEL <= length(REGEXP_REPLACE(A.PARAM, '[^,]+',''))+1)
					  OR B.BUSINESS_PLACE_CD IS NULL)
	]]>
</if>
				 ORDER BY A.PAY_ACTION_CD DESC, A.PAY_YM DESC, A.PAYMENT_YMD DESC
				 )
		   WHERE ROWNUM = 1
	</select>

	<select id="getBenefitCloseStMap" parameterType="map" resultType="cMap">
		--마감상태(S90003)('10001':작업전, '10003':작업, '10005':마감)
		SELECT MAX(CLOSE_ST) AS CLOSE_ST
		  FROM TBEN991
		 WHERE ENTER_CD = #{ssnEnterCd}
		   AND PAY_ACTION_CD = #{searchPayActionCd}
		   AND BENEFIT_BIZ_CD = #{searchBenefitBizCd}
	</select>

	<!-- 		조회 -->
	<select id="getFlexPayUploadFirstList" parameterType="map" resultType="cMap">
		WITH CPN210 AS
		     (
		         SELECT PAY_ACTION_CD, ORD_EYMD, PAY_CD
		           FROM TCPN201
		          WHERE ENTER_CD = #{ssnEnterCd}
		            AND PAY_ACTION_CD = #{searchPayActionCd}
			 )
		SELECT A.ENTER_CD
			 , A.SABUN
			 , F_COM_GET_NAMES(A.ENTER_CD, A.SABUN, #{ssnLocaleCd}) AS NAME
			 , A.BENEFIT_BIZ_CD
			 , F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'B10230', A.BENEFIT_BIZ_CD) AS BENEFIT_BIZ_NM
		     , ( SELECT F_COM_GET_MAP_CD3(B.ENTER_CD, '100', B.SABUN, B.ORG_CD, ( SELECT ORD_EYMD FROM CPN210 )) FROM DUAL ) AS BUSINESS_PLACE_CD
		     , ( SELECT F_COM_GET_MAP_NM2(C.ENTER_CD, '100', C.BUSINESS_PLACE_CD, ( SELECT ORD_EYMD FROM CPN210 ), 'NM', #{ssnLocaleCd}) FROM DUAL) AS BUSINESS_PLACE_NM
			 , #{searchPayActionCd} AS PAY_ACTION_CD
			 , F_COM_GET_PAY_ACTION_NM(A.ENTER_CD, #{searchPayActionCd}) AS PAY_ACTION_NM
			 , NVL(F_COM_GET_GRCODE_NAME(C.ENTER_CD, 'S90003', C.CLOSE_ST), '작업전') AS MAGAM_YN
		     , DECODE(C.CLOSE_ST, '10005', 'Y', 'N') AS CLOSE_YN
		 FROM TBEN993 A
		    , THRM151 B
		    , TBEN991 C
		WHERE A.ENTER_CD = #{ssnEnterCd}
		  AND A.SABUN    = #{ssnSabun}  --세션사번
		  AND B.ENTER_CD = A.ENTER_CD
		  AND B.SABUN    = A.SABUN
		  AND A.BENEFIT_BIZ_CD IN
		      (
		          SELECT BENEFIT_BIZ_CD
				    FROM TCPN980
				   WHERE ENTER_CD = A.ENTER_CD
				     AND NVL(FLEX_YN, 'N')  = 'Y'
				     AND PAY_CD = ( SELECT PAY_CD FROM CPN210 )
			  )
		  AND B.SDATE =
		      (
		          SELECT MAX(SDATE)
		            FROM THRM151
		           WHERE ENTER_CD = B.ENTER_CD
		             AND SABUN = B.SABUN
		             AND ( SELECT ORD_EYMD FROM CPN210 ) BETWEEN SDATE AND NVL(EDATE, '99991231')
			  )
		  AND C.ENTER_CD = A.ENTER_CD
		  AND C.PAY_ACTION_CD = #{searchPayActionCd}
		  AND C.BENEFIT_BIZ_CD = A.BENEFIT_BIZ_CD
		  AND C.BUSINESS_PLACE_CD = ( SELECT F_COM_GET_MAP_CD3(B.ENTER_CD, '100', B.SABUN, B.ORG_CD, ( SELECT ORD_EYMD FROM CPN210 )) FROM DUAL )
		ORDER BY BENEFIT_BIZ_CD
	</select>

	<!-- 		조회 -->
	<select id="getFlexPayUploadSecondList" parameterType="map" resultType="cMap">
		SELECT A.ENTER_CD
			 , A.SABUN
			 , B.NAME
			 , A.PAY_ACTION_CD
			 , F_COM_GET_PAY_ACTION_NM(A.ENTER_CD, A.PAY_ACTION_CD) AS PAY_ACTION_NM
			 , A.BENEFIT_BIZ_CD
			 , F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'B10230', A.BENEFIT_BIZ_CD) AS BENEFIT_BIZ_NM
			 , A.PAYMENT_MON, A.NOTE
			 , TO_CHAR(A.CHKDATE, 'YYYYMMDDHH24MI') AS CHKDATE
			 , A.CHKID
		  FROM TBEN981 A, THRM100 B
		 WHERE A.ENTER_CD = #{ssnEnterCd}
		   AND B.ENTER_CD = A.ENTER_CD
		   AND B.SABUN    = A.SABUN
		   AND A.PAY_ACTION_CD = #{searchPayActionCd}
		   AND A.BENEFIT_BIZ_CD = #{searchBenefitBizCd}
<if test="searchSabunName != null and searchSabunName neq ''">
		   AND (UPPER(A.SABUN) LIKE '%' || UPPER(TRIM(#{searchSabunName})) || '%' OR UPPER(B.NAME) LIKE '%' || UPPER(TRIM(#{searchSabunName})) || '%' )
</if>
		 ORDER BY F_COM_JIKJE_SORT(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD'))
	</select>

	<!-- 		저장 -->
	<update id="saveFlexPayUpload" parameterType="map">
		MERGE INTO TBEN981 T
		USING	(
				SELECT #{ssnEnterCd} AS ENTER_CD
					 , A.SABUN
					 , #{searchPayActionCd} AS PAY_ACTION_CD
					 , A.BENEFIT_BIZ_CD
					 , A.PAYMENT_MON
					 , A.NOTE
					 , #{ssnSabun} AS CHKID
				FROM	(
						SELECT NULL		AS SABUN
							 , NULL		AS BENEFIT_BIZ_CD
							 , NULL		AS PAYMENT_MON
							 , NULL		AS NOTE
						FROM	DUAL
<foreach item="rm" collection="mergeRows">
						UNION ALL
						SELECT TRIM(#{rm.sabun})			AS SABUN
							 , TRIM(#{rm.benefitBizCd})	AS BENEFIT_BIZ_CD
							 , TRIM(#{rm.paymentMon})		AS PAYMENT_MON
							 , TRIM(#{rm.note})	    	AS NOTE
						FROM   DUAL
</foreach>
						) A
						WHERE SABUN IS NOT NULL
						AND BENEFIT_BIZ_CD IS NOT NULL
				) S
		ON (	T.ENTER_CD			= S.ENTER_CD
			AND	T.SABUN				= S.SABUN
			AND T.PAY_ACTION_CD		= S.PAY_ACTION_CD
			AND T.BENEFIT_BIZ_CD    = S.BENEFIT_BIZ_CD
		)
		WHEN MATCHED THEN
			UPDATE SET	  T.PAYMENT_MON	= S.PAYMENT_MON
						, T.NOTE       	= S.NOTE
						, T.CHKDATE	= SYSDATE
						, T.CHKID	= S.CHKID
		WHEN NOT MATCHED THEN
			INSERT
			(
				  T.ENTER_CD
				, T.SABUN
				, T.PAY_ACTION_CD
				, T.BENEFIT_BIZ_CD
				, T.PAYMENT_MON
				, T.NOTE
				, T.CHKDATE
				, T.CHKID
			)
			VALUES
			(
				S.ENTER_CD
				, S.SABUN
				, S.PAY_ACTION_CD
				, S.BENEFIT_BIZ_CD
				, S.PAYMENT_MON
				, S.NOTE
				, SYSDATE
				, S.CHKID
			)
	</update>

	<!-- 		삭제 -->
	<delete id="deleteFlexPayUpload" parameterType="map">
		DELETE FROM TBEN981
		 WHERE (ENTER_CD, SABUN, PAY_ACTION_CD, BENEFIT_BIZ_CD) IN 	( (NULL,NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows">
<if test="ssnEnterCd != null and ssnEnterCd neq '' and rm.sabun != null and rm.sabun neq '' and rm.payActionCd != null and rm.payActionCd neq '' and rm.benefitBizCd != null and rm.benefitBizCd neq ''">
				, (#{ssnEnterCd}, TRIM(#{rm.sabun}), TRIM(#{rm.payActionCd}), TRIM(#{rm.benefitBizCd}))
</if>
</foreach>
			)
	</delete>


</mapper>