<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ben.medical.medStd">

	<select id="getMedStdList" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT A.ENTER_CD
		     , A.FAM_CD
		     , A.SDATE
		     , A.EDATE
		     , A.EMP_YEAR_MON
		     , A.STD_MON
		     , A.WORK_YEAR
		     , A.YEAREND_YN
		     , A.NOTE
		  FROM TBEN702 A 
		 WHERE A.ENTER_CD = TRIM(#{ssnEnterCd}) ]]>
		<if test="searchYmd != null and searchYmd neq ''">
		   AND REPLACE( #{searchYmd},'-','') BETWEEN A.SDATE AND NVL(A.EDATE, '29991231')
		</if>
		 ORDER BY F_COM_GET_GRCODE_SEQ( A.ENTER_CD, 'B60030', A.FAM_CD)
	</select>
		
	<select id="getMedStd" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT A.ENTER_CD
	     , A.FAM_CD
	     , A.SDATE
	     , A.EDATE
	     , A.EMP_YEAR_MON
	     , A.STD_MON
	     , A.WORK_YEAR
	     , UPPER(A.YEAREND_YN) AS YEAREND_YN
	     , A.NOTE
	  FROM TBEN702 A 
	 WHERE A.ENTER_CD = TRIM(#{ssnEnterCd}) ]]>
	<choose>
		<when test="searchYmd != null and searchYmd neq ''">
	   AND REPLACE( #{searchYmd},'-','') BETWEEN A.SDATE AND NVL(A.EDATE, '29991231')
		</when>
		<otherwise>
	   AND TO_CHAR(SYSDATE, 'yyyymmdd') BETWEEN A.SDATE AND NVL(A.EDATE, '29991231')
		</otherwise>
	</choose>
	<if test="searchYmd != null and searchYmd neq ''">
	   AND REPLACE( #{searchYmd},'-','') BETWEEN A.SDATE AND NVL(A.EDATE, '29991231')
	</if>
	   AND FAM_CD = TRIM(#{famCd})
	</select>

	<update id="saveMedStd" parameterType="map">
	<![CDATA[			
         MERGE INTO TBEN702 T 
		 USING ( ]]>
		<foreach item="rm" collection="mergeRows" separator=" UNION ALL ">
			SELECT TRIM(#{ssnEnterCd})  AS  ENTER_CD 
	             , TRIM(#{rm.famCd})  AS  FAM_CD
	             , TRIM(#{rm.sdate})  AS  SDATE
	             , TRIM(#{rm.edate})  AS  EDATE
	             , TRIM(#{rm.empYearMon})  AS  EMP_YEAR_MON
	             , TRIM(#{rm.stdMon})  AS  STD_MON
	             , TRIM(#{rm.workYear})  AS  WORK_YEAR
	             , TRIM(#{rm.yearendYn})  AS  YEAREND_YN
	             , TRIM(#{rm.note})  AS  NOTE
	          FROM DUAL
		</foreach>
	<![CDATA[
		) S 
		ON ( 
		          T.ENTER_CD = S.ENTER_CD 
		     AND  T.FAM_CD = S.FAM_CD 
		     AND  T.SDATE = S.SDATE 
		) 
		WHEN MATCHED THEN 
		   UPDATE SET T.CHKDATE	= sysdate 
		            , T.CHKID	= #{ssnSabun} 
		            , T.EDATE = S.EDATE 
		            , T.EMP_YEAR_MON = S.EMP_YEAR_MON 
		            , T.STD_MON = S.STD_MON 
		            , T.WORK_YEAR = S.WORK_YEAR 
		            , T.YEAREND_YN = S.YEAREND_YN 
		            , T.NOTE = S.NOTE 
		WHEN NOT MATCHED THEN 
		   INSERT 
		   ( 
		              T.ENTER_CD
		            , T.FAM_CD
		            , T.SDATE
		            , T.EDATE
		            , T.EMP_YEAR_MON
		            , T.STD_MON
		            , T.WORK_YEAR
		            , T.YEAREND_YN
		            , T.NOTE
		            , T.CHKDATE
		            , T.CHKID
		   ) 
		   VALUES 
		   ( 
		              S.ENTER_CD
		            , S.FAM_CD
		            , S.SDATE
		            , S.EDATE
		            , S.EMP_YEAR_MON
		            , S.STD_MON
		            , S.WORK_YEAR
		            , S.YEAREND_YN
		            , S.NOTE
		            , sysdate
		            , #{ssnSabun}
		   )
	]]>
	</update>

	<delete id="deleteMedStd" parameterType="map">
	<![CDATA[
		DELETE FROM TBEN702
		 WHERE ENTER_CD = TRIM(#{ssnEnterCd}) 
		   AND ( FAM_CD,SDATE ) IN ( ( NULL,NULL) ]]>
		<foreach item="rm" collection="deleteRows">
			<if test="rm.famCd != null and rm.famCd neq '' and rm.sdate != null and rm.sdate neq ''">
				, ( TRIM( #{rm.famCd} ),TRIM( #{rm.sdate} ) ) 
			</if>
		</foreach>
    		)
	</delete>
	
</mapper>