<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ben.benefitBasis.soclnsMultiMgr">

	<!-- 사회보험통합관리 좌측 다건  조회-->
	<select id="getSocInsMultiMgrListLeft" parameterType="map" resultType="cMap">
	<![CDATA[
			SELECT	T1.ENTER_CD																		/*	회사구분(TORG900)	*/
				,	T1.SABUN																		/*	사원번호			*/
				,	T1.NAME																			/*	성명				*/
				,	T2.ORG_CD																		/*	조직코드			*/
				,	F_COM_GET_ORG_NM	(T2.ENTER_CD,	T2.ORG_CD,	T2.SDATE	)	AS	ORG_NM		/*	조직명				*/
				,	T2.JIKGUB_CD																	/*	직급코드			*/
				,	F_COM_GET_GRCODE_NAME(T2.ENTER_CD,	'H20010',	T2.JIKGUB_CD)	AS	JIKGUB_NM	/*	직급명				*/
				,	T1.EMP_YMD																		/*	입사일				*/
				,	T1.GEMP_YMD																		/*	그룹입사일			*/
				,	T1.RET_YMD																		/*	퇴직일자			*/
			FROM	THRM100	T1
				,	THRM151	T2
			WHERE	T1.ENTER_CD		=	T2.ENTER_CD
			AND		T1.SABUN		=	T2.SABUN
			AND		TO_CHAR(SYSDATE,'YYYYMMDD')	BETWEEN	T2.SDATE	AND	NVL(T2.EDATE,'99991231')
			AND		T1.ENTER_CD		=	#{ssnEnterCd}
			AND		(
							T1.SABUN	=	#{searchNm}
						OR	T1.NAME		LIKE	'%'||TRIM(#{searchNm})||'%'
					) ]]>
			<if test="searchSEmptYmd != null and searchSEmptYmd neq ''">
			<![CDATA[
			AND		T1.EMP_YMD		>=	REPLACE(#{searchSEmptYmd},'-','')
			]]>
			</if>
			<if test="searchEEmptYmd != null and searchEEmptYmd neq ''">
			<![CDATA[
			AND		T1.EMP_YMD		<=	REPLACE(#{searchEEmptYmd},'-','')
			]]>
			</if>
			<if test="searchSRetYmd != null and searchSRetYmd neq ''">
			<![CDATA[
			AND		T1.RET_YMD		>=	REPLACE(#{searchSRetYmd},'-','')
			]]>
			</if>
			<if test="searchERetYmd != null and searchERetYmd neq ''">
			<![CDATA[
			AND		T1.RET_YMD		<=	REPLACE(#{searchERetYmd},'-','')
			]]>
			</if>
			<if test="searchOrgCd != null and searchOrgCd neq ''">
			AND		T2.ORG_CD		=	#{searchOrgCd}
			</if>
			<if test="searchStatusCd != null and searchStatusCd neq ''">
			AND		T2.STATUS_CD	=	#{searchStatusCd}
			</if>
			ORDER BY T1.EMP_YMD DESC, T1.NAME
	</select>
	
	<!-- 사회보험통합관리 우측 국민연금 다건 조회 -->
	<select id="getSocInsMultiMgrListRightTop" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT	A.SABUN
			,	A.SEQ
			,	A.SDATE
			,	A.EDATE
			,	A.SOC_CHANGE_CD
			,	A.SOC_STATE_CD
			,	A.GRADE
			,	DECODE(A.REWARD_TOT_MON,0,'',A.REWARD_TOT_MON)						AS	REWARD_TOT_MON
			,	NVL(MON1,F_CPN_GET_UPDOWN_MON('3', '-1', A.REWARD_TOT_MON * F_BEN_INSURENCE_RATE( #{ssnEnterCd}, '10', TO_CHAR(SYSDATE, 'YYYYMMDD')))) AS SELF_MON
		FROM	TBEN103 A
		WHERE	A.ENTER_CD	=	#{ssnEnterCd}
		AND		A.SABUN		=	#{searchLeftSabun}
		ORDER	BY
				A.SDATE DESC
	]]>
	</select>
		
	<!-- 사회보험통합관리 우측 국민연금 저장 -->
	<update id="saveSocInsMultiMgrRightTop" parameterType="map">
	<![CDATA[
		MERGE INTO TBEN103 T
		USING	(
				SELECT A.SABUN
					 , A.SEQ
					 , A.SDATE
					 , A.EDATE
					 , A.SOC_CHANGE_CD
					 , A.SOC_STATE_CD
					 , A.GRADE
					 , A.REWARD_TOT_MON
					 , A.MON1
				  FROM (
						SELECT NULL	AS SABUN
							 , NULL	AS SEQ
							 , NULL	AS SDATE
							 , NULL	AS EDATE
							 , NULL	AS SOC_CHANGE_CD
							 , NULL	AS SOC_STATE_CD
							 , NULL	AS GRADE
							 , NULL	AS REWARD_TOT_MON
							 , NULL	AS MON1
						  FROM DUAL ]]>
		<foreach item="rm" collection="mergeRows" index="idx">
						UNION ALL
						SELECT TRIM(#{rm.sabun})					AS SABUN
							 , CASE WHEN TRIM(#{rm.seq}) IS NULL OR TRIM(#{rm.seq}) = '0' THEN
							 			(SELECT (NVL(MAX(SEQ),0) + (#{idx} + 1)) FROM TBEN103 WHERE ENTER_CD = #{ssnEnterCd} AND SABUN = TRIM(#{rm.sabun}))
							 		ELSE TO_NUMBER(#{rm.seq}) END 	SEQ
							 , TRIM(#{rm.sdate})					AS SDATE
							 , TRIM(#{rm.edate})					AS EDATE
							 , TRIM(#{rm.socChangeCd})				AS SOC_CHANGE_CD
							 , TRIM(#{rm.socStateCd})				AS SOC_STATE_CD
							 , TRIM(#{rm.grade})					AS GRADE
							 , TO_NUMBER(TRIM(#{rm.rewardTotMon}))	AS REWARD_TOT_MON
							 , TO_NUMBER(TRIM(#{rm.selfMon}))		AS MON1
						  FROM DUAL
		</foreach>
		<![CDATA[ ) A
				WHERE A.SABUN IS NOT NULL
				  AND A.SEQ IS NOT NULL
				  AND A.SDATE IS NOT NULL
				) S
		ON	(	T.ENTER_CD	= #{ssnEnterCd}
			AND	T.SABUN		= S.SABUN
			AND	T.SEQ		= S.SEQ
			AND	T.SDATE		= S.SDATE
			)
		WHEN MATCHED THEN
			UPDATE SET T.EDATE				= S.EDATE
					 , T.SOC_CHANGE_CD		= S.SOC_CHANGE_CD
					 , T.SOC_STATE_CD		= S.SOC_STATE_CD
					 , T.GRADE				= S.GRADE
					 , T.REWARD_TOT_MON		= S.REWARD_TOT_MON
					 , T.MON1				= S.MON1
					 , T.CHKDATE			= SYSDATE
					 , T.CHKID				= #{ssnSabun}
		WHEN NOT MATCHED THEN
			INSERT
			(
			  T.ENTER_CD
			, T.SABUN
			, T.SEQ
			, T.SDATE
			, T.EDATE
			, T.SOC_CHANGE_CD
			, T.SOC_STATE_CD
			, T.GRADE
			, T.REWARD_TOT_MON
			, T.MON1
			, T.CHKDATE
			, T.CHKID
			)
			VALUES
			(
			  #{ssnEnterCd}
			, S.SABUN
			, S.SEQ
			, S.SDATE
			, S.EDATE
			, S.SOC_CHANGE_CD
			, S.SOC_STATE_CD
			, S.GRADE
			, S.REWARD_TOT_MON
			, S.MON1
			, SYSDATE
			, #{ssnSabun}
			)
	]]>
	</update>
		
	<!-- 사회보험통합관리 우측 국민연금 삭제 -->
	<delete id="deleteSocInsMultiMgrRightTop" parameterType="map">
	<![CDATA[
			DELETE FROM TBEN103
			 WHERE ENTER_CD||'_'||SABUN||'_'||SDATE||'_'||TO_CHAR(SEQ) IN ( NULL ]]>
		<foreach item="rm" collection="deleteRows">
			,
				<if test="ssnEnterCd != null and ssnEnterCd neq '' and rm.sabun != null and rm.sabun neq '' 
					and rm.sdate != null and rm.sdate neq '' and rm.seq != null and rm.seq neq ''">
					TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.sabun})||'_'||TRIM(#{rm.sdate})||'_'||TRIM(#{rm.seq})
				</if>
		</foreach>
			)
	</delete>
		
	<!-- 사회보험통합관리 우측 건강보험 다건 조회 -->
	<select id="getSocInsMultiMgrListRightMiddle" parameterType="map" resultType="cMap">
	<![CDATA[
			SELECT A.SABUN
				 , A.SEQ
				 , A.SDATE
				 , A.EDATE
				 , A.SOC_CHANGE_CD
				 , A.SOC_STATE_CD
				 , A.GRADE
				 , A.REDUCTION_RATE
				 , A.REDUCTION_CD
				 , A.REWARD_TOT_MON
				 , A.REDUCTION_RATE2
				 , A.MEMO
				 , A.MON1
				 , A.MON2
				 , NVL(A.MON1,0)+NVL(A.MON2,0) AS MON3
				 , A.MON4
				 , A.MON5
				 , NVL(A.MON4,0)+NVL(A.MON5,0) AS TOTAL_MON
			  FROM TBEN203 A
			 WHERE A.ENTER_CD	= #{ssnEnterCd}
			   AND A.SABUN		= #{searchLeftSabun}
			ORDER BY A.SEQ DESC
	]]>
	</select>
		
	<!-- 사회보험통합관리 우측 건강보험 저장 -->
	<update id="saveSocInsMultiMgrRightMiddle" parameterType="map">
	<![CDATA[
			MERGE INTO TBEN203 T
			USING	(
					SELECT A.SABUN
						 , A.SEQ
						 , A.SDATE
						 , A.SOC_CHANGE_CD
						 , A.SOC_STATE_CD
						 , A.GRADE
						 , A.EDATE
						 , A.REDUCTION_RATE
						 , A.REWARD_TOT_MON
						 , A.REDUCTION_RATE2
						 , A.MEMO
						 , A.MON1
						 , A.MON2
						 , A.MON3
						 , A.MON4
						 , A.MON5
					  FROM (
							SELECT NULL	AS SABUN
								 , NULL	AS SEQ
								 , NULL	AS SDATE
								 , NULL	AS SOC_CHANGE_CD
								 , NULL	AS SOC_STATE_CD
								 , NULL	AS GRADE
								 , NULL	AS EDATE
								 , NULL	AS REDUCTION_RATE
								 , NULL	AS REWARD_TOT_MON
								 , NULL	AS REDUCTION_RATE2
								 , NULL	AS MEMO
								 , NULL	AS MON1
								 , NULL	AS MON2
								 , NULL	AS MON3
								 , NULL	AS MON4
								 , NULL	AS MON5
							  FROM DUAL ]]>
			<foreach item="rm" collection="mergeRows" index="idx">
							 UNION ALL
								SELECT TRIM(#{rm.sabun})			AS SABUN
									 , CASE WHEN TRIM(#{rm.seq}) IS NULL OR TRIM(#{rm.seq}) = '0' THEN
									 			(SELECT (NVL(MAX(SEQ),0) + (#{idx} + 1)) FROM TBEN203 WHERE ENTER_CD = #{ssnEnterCd} AND SABUN = TRIM(#{rm.sabun}))
									 		ELSE TO_NUMBER(#{rm.seq}) END SEQ
									 , TRIM(#{rm.sdate})			AS SDATE
									 , TRIM(#{rm.socChangeCd})		AS SOC_CHANGE_CD
									 , TRIM(#{rm.socStateCd})		AS SOC_STATE_CD
									 , TRIM(#{rm.grade})			AS GRADE
									 , TRIM(#{rm.edate})			AS EDATE
									 , TRIM(#{rm.reductionRate})	AS REDUCTION_RATE
									 , TRIM(#{rm.rewardTotMon})		AS REWARD_TOT_MON
									 , TRIM(#{rm.reductionRate2})	AS REDUCTION_RATE2
									 , TRIM(#{rm.memo})				AS MEMO
									 , TRIM(#{rm.mon1})				AS MON1
									 , TRIM(#{rm.mon2})				AS MON2
									 , NVL(TO_NUMBER(TRIM(#{rm.mon1})),0)+NVL(TO_NUMBER(TRIM(#{rm.mon2})),0)	AS MON3
									 , TRIM(#{rm.mon4})				AS MON4
									 , TRIM(#{rm.mon5})				AS MON5
								  FROM DUAL
			</foreach>
		<![CDATA[							) A
					WHERE A.SABUN IS NOT NULL
					  AND A.SEQ IS NOT NULL
					  AND A.SDATE IS NOT NULL
					) S
			ON	(	T.ENTER_CD	= #{ssnEnterCd}
				AND	T.SABUN		= S.SABUN
				AND	T.SEQ		= S.SEQ
				AND	T.SDATE		= S.SDATE
				)
			WHEN MATCHED THEN
				UPDATE SET T.SOC_CHANGE_CD		= S.SOC_CHANGE_CD
						 , T.SOC_STATE_CD		= S.SOC_STATE_CD
						 , T.GRADE				= S.GRADE
						 , T.EDATE				= S.EDATE
						 , T.REDUCTION_RATE		= S.REDUCTION_RATE
						 , T.REWARD_TOT_MON		= S.REWARD_TOT_MON
						 , T.REDUCTION_RATE2	= S.REDUCTION_RATE2
						 , T.MEMO				= S.MEMO
						 , T.MON1				= S.MON1
						 , T.MON2				= S.MON2
						 , T.MON3				= S.MON3
						 , T.MON4				= S.MON4
						 , T.MON5				= S.MON5
						 , T.CHKDATE			= SYSDATE
						 , T.CHKID				= #{ssnSabun}
			WHEN NOT MATCHED THEN
				INSERT
				(
					T.ENTER_CD
				  , T.SABUN
				  , T.SEQ
				  , T.SDATE
				  , T.SOC_CHANGE_CD
				  , T.SOC_STATE_CD
				  , T.GRADE
				  , T.EDATE
				  , T.REDUCTION_RATE
				  , T.REWARD_TOT_MON
				  , T.REDUCTION_RATE2
				  , T.MEMO
				  , T.MON1
				  , T.MON2
				  , T.MON3
				  , T.MON4
				  , T.MON5
				  , T.CHKDATE
				  , T.CHKID
				)
				VALUES
				(
					#{ssnEnterCd}
				  , S.SABUN
				  , S.SEQ
				  , S.SDATE
				  , S.SOC_CHANGE_CD
				  , S.SOC_STATE_CD
				  , S.GRADE
				  , S.EDATE
				  , S.REDUCTION_RATE
				  , S.REWARD_TOT_MON
				  , S.REDUCTION_RATE2
				  , S.MEMO
				  , S.MON1
				  , S.MON2
				  , S.MON3
				  , S.MON4
				  , S.MON5
				  , SYSDATE
				  , #{ssnSabun}
				)
	]]>
	</update>
		
	<!-- 사회보험통합관리 우측 건강보험 삭제 -->
	<delete id="deleteSocInsMultiMgrRightMiddle">
	<![CDATA[
			DELETE FROM TBEN203
			 WHERE ENTER_CD||'_'||SABUN||'_'||TO_CHAR(SEQ)||'_'||SDATE IN ( NULL ]]>
		<foreach item="rm" collection="deleteRows">
			,
			<if test="ssnEnterCd != null and ssnEnterCd neq '' and rm.sabun != null and rm.sabun neq '' 
					and rm.seq != null and rm.seq neq '' and rm.sdate != null and rm.sdate neq ''">
				TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.sabun})||'_'||TRIM(#{rm.seq})||'_'||TRIM(#{rm.sdate})
			</if>		
		</foreach>
			)
	</delete>
		
	<!-- 사회보험통합관리 우측 고용보험 다건 조회 -->
	<select id="getSocInsMultiMgrListRightBottom" parameterType="map" resultType="cMap">
	<![CDATA[
			SELECT A.SABUN
				 , A.SEQ
				 , A.SDATE
				 , A.EDATE
				 , A.SOC_CHANGE_CD
				 , A.SOC_STATE_CD
				 , A.REWARD_TOT_MON
				 , A.EMP_MON 
			  FROM TBEN303 A
			 WHERE A.ENTER_CD	= #{ssnEnterCd}
			   AND A.SABUN		= #{searchLeftSabun}
			ORDER BY A.SDATE DESC
	]]>
	</select>
		
	<!-- 사회보험통합관리 우측 고용보험 저장 -->
	<update id="saveSocInsMultiMgrRightBottom" parameterType="map">
	<![CDATA[
			MERGE INTO TBEN303 T
			USING	(
					SELECT A.SABUN
						 , A.SEQ
						 , A.SDATE
						 , A.EDATE
						 , A.SOC_CHANGE_CD
						 , A.SOC_STATE_CD
						 , A.REWARD_TOT_MON
						 , A.EMP_MON
					  FROM (
							SELECT NULL	AS SABUN
								 , NULL	AS SEQ
								 , NULL	AS SDATE
								 , NULL	AS EDATE
								 , NULL	AS SOC_CHANGE_CD
								 , NULL	AS SOC_STATE_CD
								 , NULL	AS REWARD_TOT_MON
								 , NULL	AS EMP_MON
							  FROM DUAL ]]>
		<foreach item="rm" collection="mergeRows" index="idx">
							  UNION ALL
								SELECT TRIM(#{rm.sabun})					AS SABUN
									 , CASE WHEN TRIM(#{rm.seq}) IS NULL OR TRIM(#{rm.seq}) = '0' THEN
									 			(SELECT (NVL(MAX(SEQ),0) + (#{idx} + 1)) FROM TBEN303 WHERE ENTER_CD = #{ssnEnterCd} AND SABUN = TRIM(#{rm.sabun}))
									 		ELSE TO_NUMBER(#{rm.seq}) END 	SEQ
									 , TRIM(#{rm.sdate})					AS SDATE
									 , TRIM(#{rm.edate})					AS EDATE
									 , TRIM(#{rm.socChangeCd})				AS SOC_CHANGE_CD
									 , TRIM(#{rm.socStateCd})				AS SOC_STATE_CD
									 , TRIM(#{rm.rewardTotMon})				AS REWARD_TOT_MON
									 , TRIM(#{rm.empMon})					AS EMP_MON
								  FROM DUAL
		</foreach>
		<![CDATA[
							) A
					WHERE A.SABUN IS NOT NULL
					  AND A.SEQ IS NOT NULL
					  AND A.SDATE IS NOT NULL
					) S
			ON	(	T.ENTER_CD	= #{ssnEnterCd}
				AND	T.SABUN		= S.SABUN
				AND	T.SEQ		= S.SEQ
				AND	T.SDATE		= S.SDATE
				)
			WHEN MATCHED THEN
				UPDATE SET T.EDATE			= S.EDATE
						 , T.SOC_CHANGE_CD	= S.SOC_CHANGE_CD
						 , T.SOC_STATE_CD	= S.SOC_STATE_CD
						 , T.REWARD_TOT_MON	= S.REWARD_TOT_MON
						 , T.EMP_MON		= S.EMP_MON
						 , T.CHKDATE		= SYSDATE
						 , T.CHKID			= #{ssnSabun}
			WHEN NOT MATCHED THEN
				INSERT
				(
					T.ENTER_CD
				  , T.SABUN
				  , T.SEQ
				  , T.SDATE
				  , T.EDATE
				  , T.SOC_CHANGE_CD
				  , T.SOC_STATE_CD
				  , T.REWARD_TOT_MON
				  , T.EMP_MON
				  , T.CHKDATE
				  , T.CHKID
				)
				VALUES
				(
					#{ssnEnterCd}
				  , S.SABUN
				  , S.SEQ
				  , S.SDATE
				  , S.EDATE
				  , S.SOC_CHANGE_CD
				  , S.SOC_STATE_CD
				  , S.REWARD_TOT_MON
				  , S.EMP_MON
				  , SYSDATE
				  , #{ssnSabun}
				)
	]]>
	</update>
		
	<!-- 사회보험통합관리 우측 고용보험 삭제 -->
	<delete id="deleteSocInsMultiMgrRightBottom" parameterType="map">
	<![CDATA[
			DELETE FROM TBEN303
			 WHERE ENTER_CD||'_'||SABUN||'_'||SDATE||'_'||TO_CHAR(SEQ) IN ( NULL ]]>
			<foreach item="rm" collection="deleteRows">
				,
				<if test="ssnEnterCd != null and ssnEnterCd neq '' and rm.sabun != null and rm.sabun neq '' 
					  and rm.sdate != null and rm.sdate neq '' and rm.seq != null and rm.seq neq ''">
					TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.sabun})||'_'||TRIM(#{rm.sdate})||'_'||TRIM(#{rm.seq})
				</if>
			</foreach>
			)
	</delete>

	<!-- 사회보험 통합 취득신고 조회 -->
	<select id="getSocInsMultiAcqMgr" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT CRYPTIT.DECRYPT(HRM.RES_NO, HRM.ENTER_CD) AS RES_NO
		     , HRM.SABUN
		     , F_COM_GET_NAMES(HRM.ENTER_CD, HRM.SABUN, #{ssnLocaleCd}) AS NAME
		     , HRM.EMP_YMD    -- 입사일
		     , CASE WHEN NPS.REPORT_ACQ_YMD IS NOT NULL THEN 'Y'
		            ELSE 'N' END AS REPORT_ACQ_YN    -- 신고여부
		     , NPS.REPORT_ACQ_YMD    -- 신고일자
		     , F_BEN_GET_REWARD_TOT_MON(HRM.ENTER_CD, HRM.SABUN, NVL(NPS.ACQ_YMD, HRM.EMP_YMD), 'NPS') AS NPS_REWARD_TOT_MON    -- 소득월액
		     , NPS.ACQ_YMD AS NSP_ACQ_YMD    -- 자격취득일
		     , CASE WHEN TO_CHAR(TO_DATE(HRM.EMP_YMD, 'YYYY-MM-DD'), 'DD') = '01' THEN 'Y'
		            ELSE 'N' END AS ACQ_YN    -- 취득월 납부여부
		     , NPS.ACQ_REASON_CD AS NSP_ACQ_REASON_CD   -- 자격취득부호
		     , NPS.ACQ_REASON_CD AS NSP_ACQ_REASON_CD_EXCEL
		     , F_COM_GET_GRCODE_NAME(HRM.ENTER_CD, 'B10030', NPS.ACQ_REASON_CD, #{ssnLocaleCd}) AS NSP_ACQ_REASON_NM    -- 자격취득부호명
		     , F_BEN_GET_REWARD_TOT_MON(HRM.ENTER_CD, HRM.SABUN, NVL(NPS.ACQ_YMD, HRM.EMP_YMD), 'NHS') AS NHS_REWARD_TOT_MON    -- 보수월액
		     , NHS.ACQ_YMD AS NHS_ACQ_YMD    -- 자격취득일
		     , NHS.ACQ_REASON_CD AS NHS_ACQ_REASON_CD    -- 자격취득부호
		     , NHS.ACQ_REASON_CD AS NHS_ACQ_REASON_CD_EXCEL
		     , F_COM_GET_GRCODE_NAME(HRM.ENTER_CD, 'B10010', NHS.ACQ_REASON_CD, #{ssnLocaleCd}) AS NHS_ACQ_REASON_NM    -- 자격취득부호명
		     , F_BEN_GET_REWARD_TOT_MON(HRM.ENTER_CD, HRM.SABUN, NVL(NPS.ACQ_YMD, HRM.EMP_YMD), 'NHS') AS IEI_REWARD_TOT_MON    -- 월평균보수(건강보험 보수월액으로 사용)
		     , HRM.EMP_YMD AS IEI_ACQ_YMD    -- 자격취득일
		     , IEI.JIKJONG_CD    -- 직종코드(B10330)
		     , IEI.JIKJONG_CD AS JIKJONG_CD_EXCEL
		     , F_COM_GET_GRCODE_NAME(HRM.ENTER_CD, 'B10330', IEI.JIKJONG_CD, #{ssnLocaleCd}) AS JIKJONG_NM    -- 직종명
		     , IEI.FIX_TIME      -- 주소정근로시간
		  FROM THRM100 HRM
		 INNER JOIN (SELECT X.ENTER_CD
		                  , X.STATUS_CD
		                  , X.SABUN
		               FROM THRM151 X
		              WHERE X.ENTER_CD = #{ssnEnterCd}
		                AND X.SDATE = (SELECT MAX(B.SDATE)
		                                 FROM THRM151 B
		                                WHERE B.ENTER_CD = X.ENTER_CD
		                                  AND B.SABUN    = X.SABUN
		                                  AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN B.SDATE AND NVL(EDATE, '99991231'))
		           ) STA
		          ON STA.ENTER_CD = HRM.ENTER_CD
		         AND STA.SABUN    = HRM.SABUN
		  LEFT OUTER JOIN TBEN101 NPS    -- 국민연금 기본사항
		               ON NPS.ENTER_CD = HRM.ENTER_CD
		              AND NPS.SABUN    = HRM.SABUN
		  LEFT OUTER JOIN TBEN201 NHS    -- 건강보험
		               ON NHS.ENTER_CD = HRM.ENTER_CD
		              AND NHS.SABUN    = HRM.SABUN
		  LEFT OUTER JOIN TBEN301 IEI    -- 고용보험
		               ON IEI.ENTER_CD = HRM.ENTER_CD
		              AND IEI.SABUN    = HRM.SABUN
		 WHERE HRM.ENTER_CD = #{ssnEnterCd} ]]>
		<if test="searchUserId != null and searchUserId neq ''">
		   AND HRM.SABUN = #{searchUserId}
		</if>
		<if test='"N" eq searchAcqYn'>
		   AND NPS.REPORT_ACQ_YMD IS NULL
		</if>
		<if test='"Y" eq searchAcqYn'>
		   AND NPS.REPORT_ACQ_YMD IS NOT NULL
		   AND NPS.REPORT_ACQ_YMD BETWEEN REPLACE(#{searchStaYmd}, '-', '') AND REPLACE(#{searchEndYmd}, '-', '')
		</if>
		 ORDER BY HRM.EMP_YMD DESC
		        , F_COM_JIKJE_SORT(HRM.ENTER_CD, HRM.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD'))
	</select>

	<!-- 국민연금 기본사항 저장(취득신고 저장 시) -->
	<update id="saveNspStaPenMgrBasic" parameterType="map">
	<![CDATA[
		MERGE INTO TBEN101 T
		USING (
		       SELECT A.SABUN
		            , A.ACQ_YMD
		            , A.ACQ_REASON_CD
		            , A.REPORT_ACQ_YMD
		         FROM (
		                SELECT NULL AS SABUN
		                     , NULL AS ACQ_YMD
		                     , NULL AS ACQ_REASON_CD
		                     , NULL AS REPORT_ACQ_YMD
		                  FROM DUAL ]]>
		    <foreach item="rm" collection="mergeRows">
		    			UNION ALL
		                SELECT TRIM(#{rm.sabun}) AS SABUN
		                     , TRIM(REPLACE(#{rm.nspAcqYmd}, '-', '')) AS ACQ_YMD
		                     , TRIM(#{rm.nspAcqReasonCd}) AS ACQ_REASON_CD
		                     , TRIM(REPLACE(#{rm.reportAcqYmd}, '-', '')) AS REPORT_ACQ_YMD
		                  FROM DUAL
		    </foreach>
		            ) A
		        WHERE A.SABUN IS NOT NULL
		    ) S
		   ON (     T.ENTER_CD = #{ssnEnterCd}
		        AND T.SABUN    = S.SABUN
		      )
		 WHEN MATCHED THEN
		      UPDATE SET T.ACQ_YMD        = S.ACQ_YMD
		               , T.ACQ_REASON_CD  = S.ACQ_REASON_CD
		               , T.REPORT_ACQ_YMD = S.REPORT_ACQ_YMD
		               , T.CHKDATE        = SYSDATE
		               , T.CHKID          = #{ssnSabun}
		 WHEN NOT MATCHED THEN
		      INSERT (
		             T.ENTER_CD
		           , T.SABUN
		           , T.ACQ_YMD
		           , T.ACQ_REASON_CD
		           , T.REPORT_ACQ_YMD
		           , T.CHKDATE
		           , T.CHKID
		    ) VALUES (
		             #{ssnEnterCd}
		           , S.SABUN
		           , S.ACQ_YMD
		           , S.ACQ_REASON_CD
		           , S.REPORT_ACQ_YMD
		           , SYSDATE
		           , #{ssnSabun}
		    )
	</update>

	<!-- 건강보험 기본사항 저장(취득신고 저장 시) -->
	<update id="saveNhsHealthInsMgrBasic" parameterType="map">
	<![CDATA[
		MERGE INTO TBEN201 T
		USING (
		        SELECT A.SABUN
		             , A.ACQ_YMD
		             , A.ACQ_REASON_CD
		             , A.REPORT_ACQ_YMD
		          FROM (
		                SELECT NULL AS SABUN
		                     , NULL AS ACQ_YMD
		                     , NULL AS ACQ_REASON_CD
		                     , NULL AS REPORT_ACQ_YMD
		                  FROM DUAL ]]>
		    <foreach item="rm" collection="mergeRows">
		    			  UNION ALL
			                SELECT TRIM(#{rm.sabun}) AS SABUN
			                     , TRIM(REPLACE(#{rm.nhsAcqYmd}, '-', '')) AS ACQ_YMD
			                     , TRIM(#{rm.nhsAcqReasonCd}) AS ACQ_REASON_CD
			                     , TRIM(REPLACE(#{rm.reportAcqYmd}, '-', '')) AS REPORT_ACQ_YMD
			                  FROM DUAL
		    </foreach>
		             ) A
		         WHERE A.SABUN IS NOT NULL
		    ) S
		   ON (     T.ENTER_CD = #{ssnEnterCd}
		        AND T.SABUN    = S.SABUN
		      )
		 WHEN MATCHED THEN
		      UPDATE SET T.ACQ_YMD        = S.ACQ_YMD
		               , T.ACQ_REASON_CD  = S.ACQ_REASON_CD
		               , T.REPORT_ACQ_YMD = S.REPORT_ACQ_YMD
		               , T.CHKDATE        = SYSDATE
		               , T.CHKID          = #{ssnSabun}
		 WHEN NOT MATCHED THEN
		      INSERT (
		             T.ENTER_CD
		           , T.SABUN
		           , T.ACQ_YMD
		           , T.ACQ_REASON_CD
		           , T.REPORT_ACQ_YMD
		           , T.CHKDATE
		           , T.CHKID
		    ) VALUES (
		             #{ssnEnterCd}
		           , S.SABUN
		           , S.ACQ_YMD
		           , S.ACQ_REASON_CD
		           , S.REPORT_ACQ_YMD
		           , SYSDATE
		           , #{ssnSabun}
		    )
	</update>

	<!-- 고용보험 기본사항 저장(취득신고 저장 시) -->
	<update id="saveIeiEmpInsMgrBasic" parameterType="map">
	<![CDATA[
		MERGE INTO TBEN301 T
		USING (
		       SELECT A.SABUN
		            , A.ACQ_YMD
		            , A.REPORT_ACQ_YMD
		            , A.JIKJONG_CD
		            , A.FIX_TIME
		         FROM (
		               SELECT NULL AS SABUN
		                    , NULL AS ACQ_YMD
		                    , NULL AS REPORT_ACQ_YMD
		                    , NULL AS JIKJONG_CD
		                    , NULL AS FIX_TIME
		                 FROM DUAL ]]>
		    <foreach item="rm" collection="mergeRows">
		    			UNION ALL
		               SELECT TRIM(#{rm.sabun}) AS SABUN
		                    , TRIM(REPLACE(#{rm.ieiAcqYmd}, '-', '')) AS ACQ_YMD
		                    , TRIM(REPLACE(#{rm.reportAcqYmd}, '-', '')) AS REPORT_ACQ_YMD
		                    , TRIM(#{rm.jikjongCd}) AS JIKJONG_CD
		                    , TRIM(#{rm.fixTime})   AS FIX_TIME
		                 FROM DUAL
		    </foreach>
		<![CDATA[
		            ) A
		        WHERE A.SABUN IS NOT NULL
		    ) S
		   ON (     T.ENTER_CD = #{ssnEnterCd}
		         AND T.SABUN    = S.SABUN
		      )
		 WHEN MATCHED THEN
		      UPDATE SET T.ACQ_YMD  = S.ACQ_YMD
		               , T.REPORT_ACQ_YMD = S.REPORT_ACQ_YMD
		               , T.JIKJONG_CD = S.JIKJONG_CD
		               , T.FIX_TIME = S.FIX_TIME
		               , T.CHKDATE  = SYSDATE
		               , T.CHKID    = #{ssnSabun}
		 WHEN NOT MATCHED THEN
		      INSERT (
		             T.ENTER_CD
		           , T.SABUN
		           , T.ACQ_YMD
		           , T.REPORT_ACQ_YMD
		           , T.JIKJONG_CD
		           , T.FIX_TIME
		           , T.CHKDATE
		           , T.CHKID
		    ) VALUES (
		             #{ssnEnterCd}
		           , S.SABUN
		           , S.ACQ_YMD
		           , S.REPORT_ACQ_YMD
		           , S.JIKJONG_CD
		           , S.FIX_TIME
		           , SYSDATE
		           , #{ssnSabun}
		    )
	]]>
	</update>
	
</mapper>