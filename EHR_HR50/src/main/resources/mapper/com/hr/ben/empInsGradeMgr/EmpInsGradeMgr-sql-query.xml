<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ben.empInsGradeMgr">

	<select id="getEmpInsGradeMgrList" parameterType="map" resultType="cMap">
	<![CDATA[
			SELECT	A.ENTER_CD			/*회사구분(TORG900)*/
				,	A.BENEFIT_BIZ_CD	/*	복리후생업무구분코드(B10230)		*/
				,	A.RES_NO			AS ORG_RES_NO /*	주민번호			*/
				,	A.SDATE				/*	시작일자			*/
				,	A.GRADE				/*	등급				*/
				,	A.MON1				/*	국민:기준소득월액		*/
				,	A.MON2				/*	국민:본인부담금		*/
				,	A.MON3				/*	건강:건강보험료		*/
				,	A.MON4				/*	건강:장기요양보험료	*/
				,	A.MON5				/*	금액5				*/
				,	A.TEXT1				/*	TEXT1			*/
				,	A.TEXT2				/*	TEXT2			*/
				,	A.TEXT3				/*	TEXT3			*/
				,	A.TEXT4				/*	TEXT4			*/
				,	A.TEXT5				/*	TEXT5			*/
				,	B.RES_NO
				,	B.ORG_NM
				,	B.WORK_TYPE
				,	B.JIKCHAK_CD
				,	B.JIKWEE_CD
				,	B.SABUN
				,	B.NAME
				,	B.MANAGE_CD
				,	B.STATUS_CD
				,	B.EMP_YMD
				,	B.GEMP_YMD
				,	A.MON6				/*	고용:본인부담금		*/
				,	A.MON6	AS	ETC6
				,	A.TEXT6				/*	TEXT6			*/
			FROM	TBEN011	A
				,	(
						SELECT	X.ENTER_CD
							,	Y.ORG_CD
							,	TRIM(F_COM_GET_ORG_NM(Y.ENTER_CD,Y.ORG_CD,Y.SDATE)) AS ORG_NM
							,	Y.WORK_TYPE
							,	Y.JIKCHAK_CD
							,	Y.JIKWEE_CD
							,	Y.MANAGE_CD
							,	Y.STATUS_CD
							,	X.SABUN
							,	TRIM(X.NAME) AS NAME
							,	X.EMP_YMD
							,	X.GEMP_YMD
							,	CRYPTIT.DECRYPT (X.RES_NO, X.ENTER_CD) AS RES_NO
							,	X.RES_NO AS ORG_RES_NO
							,	X.RET_YMD
						FROM	THRM100 X
							,	THRM151 Y
						WHERE	X.ENTER_CD	= Y.ENTER_CD
						AND		X.SABUN		= Y.SABUN
						AND		X.ENTER_CD	= #{ssnEnterCd} ]]>
					<if test="searchManageCd != null and searchManageCd neq ''">
						AND		Y.MANAGE_CD	=	#{searchManageCd}
					</if>
					<if test="multiStatusCd != null and multiStatusCd neq ''">
						AND Y.STATUS_CD	IN <foreach collection="multiStatusCd" item="item" index="index" open="(" close=")" separator=",">
				#{item}
		</foreach>
					</if>
					<if test="searchNm != null and searchNm neq ''">
						AND	X.SABUN||X.NAME LIKE '%'||TRIM(#{searchNm})||'%'
					</if>
		<![CDATA[
						AND		Y.SDATE 		=	(
						   							SELECT	MAX(SDATE)
													FROM	THRM151
													WHERE	ENTER_CD	=	Y.ENTER_CD
													AND		SABUN		=	Y.SABUN
													AND		TO_CHAR(SYSDATE,'YYYYMMDD')
																						BETWEEN	SDATE
																						AND		NVL(EDATE,'99991231')
												)
					) B
		WHERE	A.ENTER_CD			=	#{ssnEnterCd}
		AND		A.BENEFIT_BIZ_CD	=	'20'
		AND		A.SDATE				=	REPLACE(#{searchSdate}, '-', '')
		AND		A.ENTER_CD			=	B.ENTER_CD
		AND		A.RES_NO			=	B.ORG_RES_NO
		ORDER	BY
				B.ORG_NM
			,	B.WORK_TYPE
			,	B.JIKCHAK_CD
			,	B.JIKWEE_CD
			,	B.NAME
	]]>
	</select>

	<update id="saveEmpInsGradeMgr" parameterType="map">
	<![CDATA[
			MERGE INTO TBEN011	T
			USING
			(
						SELECT	ENTER_CD
							,	BENEFIT_BIZ_CD
							,	RES_NO
							,	SDATE
							,	MON1
							,	MON6
				FROM	(
						SELECT	NULL		AS	ENTER_CD
							,	NULL		AS	BENEFIT_BIZ_CD
							,	NULL		AS	RES_NO
							,	NULL		AS	SDATE
							,	NULL		AS	MON1
							,	NULL		AS	MON6
						FROM	DUAL ]]>
		<foreach item="rm" collection="mergeRows">
						UNION ALL
						SELECT	TRIM(#{ssnEnterCd})				AS	ENTER_CD
							,	TRIM(#{rm.benefitBizCd})		AS	BENEFIT_BIZ_CD
							,	CRYPTIT.ENCRYPT(TRIM(#{rm.resNo}), #{ssnEnterCd})				AS	RES_NO
							,	TRIM(#{rm.sdate})				AS	SDATE
							,	TRIM(#{rm.mon1})				AS	MON1
							,	TRIM(#{rm.mon6})				AS	MON6
						FROM	DUAL
		</foreach>
		<![CDATA[
							)	WHERE	ENTER_CD IS NOT NULL
								AND		BENEFIT_BIZ_CD IS NOT NULL
								AND		RES_NO IS NOT NULL
								AND		SDATE IS NOT NULL
				) S
			ON	(
						T.ENTER_CD				=		S.ENTER_CD
					AND	T.BENEFIT_BIZ_CD		=		S.BENEFIT_BIZ_CD
					AND	T.RES_NO				=		S.RES_NO
					AND	T.SDATE					=		S.SDATE
				)
			WHEN MATCHED THEN
			UPDATE SET
					T.MON1			=	S.MON1
				,	T.CHKDATE		=	SYSDATE
				,	T.CHKID			=	#{ssnSabun}
				,	T.MON6			=	S.MON6
			WHEN NOT MATCHED THEN
			INSERT
			(
					T.ENTER_CD
				,	T.BENEFIT_BIZ_CD
				,	T.RES_NO
				,	T.SDATE
				,	T.MON1
				,	T.CHKDATE
				,	T.CHKID
				,	T.MON6
			)
			VALUES
			(
					S.ENTER_CD
				,	S.BENEFIT_BIZ_CD
				,	S.RES_NO
				,	S.SDATE
				,	S.MON1
				,	SYSDATE
				,	#{ssnSabun}
				,	S.MON6
			)
	]]>
	</update>

	<delete id="deleteEmpInsGradeMgr" parameterType="map">
	<![CDATA[
		DELETE	FROM TBEN011
		WHERE	(ENTER_CD, BENEFIT_BIZ_CD, RES_NO, SDATE) IN ((NULL, NULL, NULL, NULL) ]]>
		<foreach item="rm" collection="deleteRows">
			,
			<if test="ssnEnterCd != null and ssnEnterCd neq '' and rm.benefitBizCd != null and rm.benefitBizCd neq ''
					and rm.resNo != null and rm.resNo neq '' and rm.sdate != null and rm.sdate neq ''">
				( TRIM( #{ssnEnterCd} ) , TRIM( #{rm.benefitBizCd} ) , CRYPTIT.ENCRYPT(TRIM(#{rm.resNo}), #{ssnEnterCd}) , TRIM( #{rm.sdate} ) )
			</if>
		</foreach>
			)
	</delete>

	<update id="EmpInsGradeMgrP_BEN_NP_UPD" parameterType="map" statementType="CALLABLE">
	<![CDATA[
		{CALL P_BEN_EI_UPD(
			#{sqlcode,mode=OUT,jdbcType=VARCHAR},
			#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
			#{cnt,mode=OUT,jdbcType=VARCHAR},
			#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
			#{benefitBizCd,mode=IN,jdbcType=VARCHAR},
			#{sdate,mode=IN,jdbcType=VARCHAR},
			#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
	]]>
	</update>
</mapper>