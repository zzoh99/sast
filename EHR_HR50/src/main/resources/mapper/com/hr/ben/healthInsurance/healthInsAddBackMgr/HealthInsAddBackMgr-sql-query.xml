<?xml version="1.0" encoding="UTF-8"?>
<!--
 * 건강보험추가/환급액관리
 * @author JM
-->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ben.healthInsurance.healthInsAddBackMgr">

	<select id="getHealthInsAddBackMgrList" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT A.ENTER_CD
			 , A.BENEFIT_BIZ_CD
			 , A.SABUN
			 , A.PAY_ACTION_CD
			 , B.ORG_NM
			 , B.WORK_TYPE
			 , B.JIKCHAK_CD
			 , B.JIKGUB_CD
			 , B.JIKWEE_CD
			 , F_COM_GET_NAMES(A.ENTER_CD,A.SABUN) AS NAME
			 , F_COM_GET_NAMES(A.ENTER_CD,A.SABUN,'ALIAS') AS ALIAS
			 , B.MANAGE_CD
			 , B.STATUS_CD
			 , B.EMP_YMD
			 , B.GEMP_YMD
			 , B.RES_NO
			 , A.MON5
			 , A.ADD_SELF_MON
			 , A.MON1
			 , A.MON3
			 , A.MON6
			 , A.ADD_SELF_MON2
			 , A.MON2
			 , A.MON4
			 , A.ADD_REASON_CD
		  FROM TBEN009 A
			 , (
				SELECT X.ENTER_CD
					 , Y.ORG_CD
					 , TRIM(F_COM_GET_ORG_NM(Y.ENTER_CD,Y.ORG_CD,Y.SDATE)) AS ORG_NM
					 , Y.WORK_TYPE
					 , Y.JIKCHAK_CD
					 , Y.JIKGUB_CD
					 , Y.JIKWEE_CD
					 , Y.MANAGE_CD
					 , Y.STATUS_CD
					 , X.SABUN
					 , F_COM_GET_NAMES(X.ENTER_CD,X.SABUN) AS NAME
					 , X.EMP_YMD
					 , X.GEMP_YMD
					 , CRYPTIT.DECRYPT (X.RES_NO, X.ENTER_CD) AS RES_NO
					 , X.RET_YMD
				  FROM THRM100 X
					 , THRM151 Y
				 WHERE X.ENTER_CD 	= Y.ENTER_CD
				   AND X.SABUN 		= Y.SABUN
				   AND X.ENTER_CD 	= #{ssnEnterCd} ]]>
				<if test="multiManageCd != null and multiManageCd neq ''">
				   AND Y.MANAGE_CD	IN <foreach collection="multiManageCd" item="item" index="index" open="(" close=")" separator=",">
				#{item}
		</foreach>
				</if>
				<if test="multiStatusCd != null and multiStatusCd neq ''">
				   AND Y.STATUS_CD	IN <foreach collection="multiStatusCd" item="item" index="index" open="(" close=")" separator=",">
				#{item}
		</foreach>
				</if>
				<if test="sabunName != null and sabunName neq ''">
				   AND X.SABUN||F_COM_GET_NAMES(X.ENTER_CD,X.SABUN) LIKE '%'||trim(#{sabunName})||'%'
				</if>
				   AND Y.SDATE		= (	SELECT MAX(SDATE)
										  FROM THRM151
										 WHERE ENTER_CD	= Y.ENTER_CD
										   AND SABUN	= Y.SABUN
										   AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SDATE AND NVL(EDATE,'99991231'))
			   ) B
		 WHERE A.ENTER_CD		= #{ssnEnterCd}
		   AND A.BENEFIT_BIZ_CD	= '15'
		   AND A.PAY_ACTION_CD	= #{payActionCd}
		   AND A.ENTER_CD		= B.ENTER_CD
		   AND A.SABUN			= B.SABUN
		ORDER BY B.ORG_NM,B.WORK_TYPE,B.JIKCHAK_CD,B.JIKWEE_CD,B.NAME
	</select>
		
	<update id="saveHealthInsAddBackMgr" parameterType="map">
	<![CDATA[
		MERGE INTO TBEN009 T
		USING	(
				SELECT A.BENEFIT_BIZ_CD
					 , A.SABUN
					 , A.PAY_ACTION_CD
					 , A.MON5
					 , A.ADD_SELF_MON
					 , A.MON1
					 , A.MON3
					 , A.MON6
					 , A.ADD_SELF_MON2
					 , A.MON2
					 , A.MON4
					 , A.ADD_REASON_CD
				  FROM (
						SELECT NULL	AS BENEFIT_BIZ_CD
							 , NULL	AS SABUN
							 , NULL	AS PAY_ACTION_CD
							 , NULL	AS MON5
							 , NULL	AS ADD_SELF_MON
							 , NULL	AS MON1
							 , NULL	AS MON3
							 , NULL	AS MON6
							 , NULL	AS ADD_SELF_MON2
							 , NULL	AS MON2
							 , NULL	AS MON4
							 , NULL	AS ADD_REASON_CD
						  FROM DUAL ]]>
				<foreach item="rm" collection="mergeRows">
						UNION ALL
						SELECT NVL(TRIM(#{rm.benefitBizCd}), '15')			AS BENEFIT_BIZ_CD
							 , TRIM(#{rm.sabun})			AS SABUN
							 , NVL(TRIM(#{rm.payActionCd}), #{searchPayActionCd})	AS PAY_ACTION_CD
							 , TRIM(#{rm.mon5})				AS MON5
							 , TRIM(#{rm.addSelfMon})		AS ADD_SELF_MON
							 , TRIM(#{rm.mon1})				AS MON1
							 , TRIM(#{rm.mon3})				AS MON3
							 , TRIM(#{rm.mon6})				AS MON6
							 , TRIM(#{rm.addSelfMon2})		AS ADD_SELF_MON2
							 , TRIM(#{rm.mon2})				AS MON2
							 , TRIM(#{rm.mon4})				AS MON4
							 , TRIM(#{rm.addReasonCd})		AS ADD_REASON_CD
						  FROM DUAL
				</foreach>
	<![CDATA[
						) A
				WHERE A.BENEFIT_BIZ_CD IS NOT NULL
				  AND A.SABUN IS NOT NULL
				  AND A.PAY_ACTION_CD IS NOT NULL
				) S
		ON	(	T.ENTER_CD			= #{ssnEnterCd}
			AND	T.BENEFIT_BIZ_CD	= S.BENEFIT_BIZ_CD
			AND	T.SABUN				= S.SABUN
			AND	T.PAY_ACTION_CD		= S.PAY_ACTION_CD
			)
		WHEN MATCHED THEN
			UPDATE SET T.MON5				= S.MON5
					 , T.ADD_SELF_MON		= S.ADD_SELF_MON
					 , T.MON1				= S.MON1
					 , T.MON3				= S.MON3
					 , T.MON6				= S.MON6
					 , T.ADD_SELF_MON2		= S.ADD_SELF_MON2
					 , T.MON2				= S.MON2
					 , T.MON4				= S.MON4
					 , T.ADD_REASON_CD		= S.ADD_REASON_CD
					 , T.CHKDATE			= SYSDATE
					 , T.CHKID				= #{ssnSabun}
		WHEN NOT MATCHED THEN
			INSERT
			(
				T.ENTER_CD
			  , T.BENEFIT_BIZ_CD
			  , T.SABUN
			  , T.PAY_ACTION_CD
			  , T.MON5
			  , T.ADD_SELF_MON
			  , T.MON1
			  , T.MON3
			  , T.MON6
			  , T.ADD_SELF_MON2
			  , T.MON2
			  , T.MON4
			  , T.ADD_REASON_CD
			  , T.CHKDATE
			  , T.CHKID
			)
			VALUES
			(
				#{ssnEnterCd}
			  , S.BENEFIT_BIZ_CD
			  , S.SABUN
			  , S.PAY_ACTION_CD
			  , S.MON5
			  , S.ADD_SELF_MON
			  , S.MON1
			  , S.MON3
			  , S.MON6
			  , S.ADD_SELF_MON2
			  , S.MON2
			  , S.MON4
			  , S.ADD_REASON_CD
			  , SYSDATE
			  , #{ssnSabun}
			)
	]]>
	</update>
		
	<delete id="deleteHealthInsAddBackMgr" parameterType="map">
	<![CDATA[
		DELETE FROM TBEN009
		 WHERE ENTER_CD||'_'||BENEFIT_BIZ_CD||'_'||SABUN||'_'||PAY_ACTION_CD IN ( NULL ]]>
		 	<foreach item="rm" collection="deleteRows">
		 		,
		 		<if test="ssnEnterCd != null and ssnEnterCd neq '' and rm.benefitBizCd != null and rm.benefitBizCd neq ''
		 			 and rm.sabun != null and rm.sabun neq '' and rm.payActionCd != null and rm.payActionCd neq ''">
		 		TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.benefitBizCd})||'_'||TRIM(#{rm.sabun})||'_'||TRIM(#{rm.payActionCd})
		 		</if>
		 	</foreach>
			)
	</delete>
		
</mapper>