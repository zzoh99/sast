<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ben.scholarship.schAppDet">

	<!-- 대상자 콤보 리스트 -->
	<select id="getSchAppDetFamList" parameterType="map" resultType="cMap">
	<![CDATA[
		WITH DATA AS (
                         SELECT A.RES_NO AS CODE
				     , A.NAME 	AS CODE_NM
				     , A.NAME 	AS FAM_NM, '10' AS FAM_CD, BIR_YMD AS FAM_YMD
				     , F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'H00010', A.SEX_TYPE) AS SEX_TYPE
				     , A.SABUN
				FROM THRM100 A
				WHERE ENTER_CD = #{ssnEnterCd}
				AND SABUN = TRIM(#{searchApplSabun})
				AND EXISTS ( SELECT 1
				                FROM TBEN750 X
				               WHERE X.ENTER_CD = #{ssnEnterCd}
				                 AND X.SCH_TYPE_CD = TRIM(#{schTypeCd})
				                 AND X.SCH_SUP_TYPE_CD = TRIM(#{schSupTypeCd})
				                 AND TO_CHAR(SYSDATE, 'yyyymmdd') BETWEEN X.SDATE AND NVL(X.EDATE, '99991231')
				                 AND X.FAM_CD = '10' )
				
				UNION ALL
				SELECT A.FAMRES AS CODE
				     , A.FAM_NM AS CODE_NM
				     , A.FAM_NM
				     , X.FAM_CD
                              , CASE WHEN A.FAM_YMD IS NOT NULL THEN A.FAM_YMD
                                     ELSE (CASE WHEN SUBSTR(CRYPTIT.DECRYPT(A.FAMRES, A.ENTER_CD), 7, 1) IN ('1', '2') 
                                                THEN '19' ELSE '20' END)
                                         || SUBSTR(CRYPTIT.DECRYPT(A.FAMRES, A.ENTER_CD), 1, 6) END AS FAM_YMD 
				     , CASE WHEN A.SEX_TYPE IS NOT NULL THEN F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'H00010' , A.SEX_TYPE)
				            WHEN A.FAMRES IS NULL THEN NULL
				            WHEN SUBSTR(CRYPTIT.DECRYPT(A.FAMRES, A.ENTER_CD), 7, 1) IN ('1', '3', '5') THEN '남'
				            ELSE '여' END AS SEX_TYPE
				     , A.SABUN
				  FROM THRM111 A, TBEN750 X, TSYS005 Y
				 WHERE A.ENTER_CD    = #{ssnEnterCd}
				   AND A.SABUN       = TRIM(#{searchApplSabun})
				   AND A.ENTER_CD    = X.ENTER_CD
				   AND X.SCH_TYPE_CD = TRIM(#{schTypeCd})
				   AND X.SCH_SUP_TYPE_CD = TRIM(#{schSupTypeCd})
				   AND TO_CHAR(SYSDATE, 'yyyymmdd') BETWEEN X.SDATE AND NVL(X.EDATE, '99991231')
				   AND X.ENTER_CD   = Y.ENTER_CD
				   AND Y.GRCODE_CD  = 'B60030'
				   AND X.FAM_CD     = Y.CODE 
				   AND ( TRIM(NVL(Y.NOTE1,'xxx')) = A.FAM_CD OR TRIM(NVL(Y.NOTE2,'xxx')) = A.FAM_CD ) 
				   AND A.FAMRES IS NOT NULL
				   AND X.FAM_CD <> '10'
                     )
                     SELECT CODE
                          , CODE_NM
                          , FAM_YMD
                          , FAM_NM
                          , SEX_TYPE
                          , FAM_CD
                          , SABUN
				 , F_COM_GET_GRCODE_NAME(#{ssnEnterCd}, 'B60030', FAM_CD) AS FAM_CD_NM
                       FROM DATA
	]]>
	</select>
		
	<!-- 신청내역 조회 -->
	<select id="getSchAppDetMap" parameterType="map" resultType="cMap">
	<![CDATA[
		    SELECT A.ENTER_CD
			     , A.APPL_SEQ
			     , A.SABUN
			     , A.SCH_TYPE_CD
			     , A.FAM_CD
				 , F_COM_GET_GRCODE_NAME(A.ENTER_CD, 'B60030', A.FAM_CD) AS FAM_CD_NM
			     , A.FAM_NM
			     , A.FAM_YMD
			     , A.FAM_RES_NO
		    	 , CASE WHEN SUBSTR(CRYPTIT.DECRYPT(A.FAM_RES_NO, A.ENTER_CD), 7, 1) IN ('1', '3', '5') THEN '남'
				        ELSE '여' END AS SEX_TYPE
			     , A.APP_YEAR
			     , A.DIV_CD
			     , A.SCH_LOC_CD
			     , A.SCH_NAME
			     , A.SCH_YEAR
			     , A.SCH_DEPT
			     , A.SCH_ENT_YM
			     , A.SCH_PAY_YN
			     , A.EXC_RATE
			     , A.EXT_MON
			     , A.APPL_MON
			     , A.NOTE
			     , A.PAY_MON
			     , A.PAY_YM
			     , A.PAY_NOTE
			     , NVL(A.CLOSE_YN, 'N') AS CLOSE_YN
			     , A.SCH_SUP_TYPE_CD
			  FROM TBEN751 A
			 WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
		       AND A.APPL_SEQ = TRIM( #{searchApplSeq} )
	]]>
	</select>
		
	<!-- 신청내역 조회 -->
	<select id="getSchAppDetList" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT A.ENTER_CD
		     , A.SCH_TYPE_CD
		     , A.SCH_SUP_TYPE_CD
		     , A.FAM_CD
		     , A.FAM_NM
		     , A.FAM_YMD
		     , A.APP_YEAR
		     , A.DIV_CD
		     , A.SCH_NAME
		     , A.APPL_MON
		     , A.PAY_MON
		     , A.PAY_YM
		     , A.PAY_NOTE
		     , B.APPL_YMD
		     , B.APPL_STATUS_CD
		     , CASE WHEN A.APPL_SEQ = TRIM(#{searchApplSeq}) THEN '#BFE1FD' ELSE '#FFFFFF' END AS ROW_BACK_COLOR
		  FROM TBEN751 A
		  , THRI103 B
		 WHERE A.ENTER_CD        = #{ssnEnterCd}
		   AND A.SABUN           = TRiM( #{searchApplSabun} )
		   AND A.SCH_TYPE_CD     = TRiM( #{schTypeCd} )
		   AND A.SCH_SUP_TYPE_CD = TRiM( #{schSupTypeCd} )
		   AND ( A.FAM_RES_NO = TRiM( #{famResNo} ) OR ( A.FAM_NM = TRIM(#{famNm}) AND A.FAM_YMD = REPLACE(TRIM(#{famYmd}),'-','')) )  -- 주민번호가 없을수 있으니 이름이랑 생년월일로 비교
		   AND A.ENTER_CD = B.ENTER_CD
		   AND A.APPL_SEQ = B.APPL_SEQ
		   AND B.APPL_STATUS_CD IN ('21', '31', '99') 
		 ORDER BY B.APPL_YMD DESC, B.APPL_SEQ DESC
	]]>
	</select>
		
		
	<!-- 중복신청 조회 -->
	<select id="getSchAppDupChk" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT F_BEN_SCH_DET_CHECK(
		             #{ssnEnterCd}
		           , TRiM(#{searchGubun})
		           , TRIM( #{searchApplSeq} )
		           , TRIM( #{searchApplSabun} )
		           , TRIM( #{schTypeCd} )
		           , TRIM( #{schSupTypeCd} )
		           , TRIM( #{famCd} )
		           , TRIM( #{famYmd} )
		           , TRIM( #{famResNo} )
		           , TRIM( #{appYear} )
		           , TRIM( #{divCd} )
		           , REPLACE(TRIM( #{applMon} ),',','')
		       ) AS MSG
		  FROM DUAL
	]]>
	</select>
		
		
	<!--  세부내역 저장(관리자) -->
	<update id="saveSchAppDetAdmin" parameterType="map" >
	<![CDATA[
		MERGE INTO TBEN751 T
		USING  ( ]]>
	<foreach item="rm" collection="mergeRows" separator=" UNION ALL ">								
				 SELECT   TRIM( #{ssnEnterCd} )					AS ENTER_CD
				   	 	, TRIM( #{rm.searchApplSeq} )			AS APPL_SEQ
						, TRIM( #{rm.searchApplSabun} )			AS SABUN
						, REPLACE(TRIM(#{rm.payMon}),',','') 	AS PAY_MON
						, REPLACE(TRIM(#{rm.payYm}),'-','') 	AS PAY_YM
						, TRIM( #{rm.payNote} ) 				AS PAY_NOTE
					FROM DUAL
	</foreach>
	<![CDATA[										
				) S
		ON (      T.ENTER_CD = S.ENTER_CD
		      AND T.APPL_SEQ = S.APPL_SEQ
		   )
		WHEN MATCHED THEN
			UPDATE SET	  T.PAY_MON     	= S.PAY_MON
						, T.PAY_YM     		= S.PAY_YM
						, T.PAY_NOTE    	= S.PAY_NOTE
						, T.CHKDATE			= SYSDATE
						, T.CHKID			= #{ssnSabun}
	]]>
	</update>
		
	<!--  세부내역 저장(관리자) -->
	<update id="saveSchAppDet" parameterType="map">
	<![CDATA[
			 MERGE INTO TBEN751 T 	
			 USING ( ]]> 	
				<foreach item="rm" collection="mergeRows" separator=" UNION ALL ">		
					 SELECT   TRIM( #{ssnEnterCd} )				AS ENTER_CD 	 
				            , TRIM(#{rm.searchApplSeq})  		AS  APPL_SEQ	
				            , TRIM(#{rm.searchApplSabun})  		AS  SABUN	
				            , TRIM(#{rm.schTypeCd})  			AS  SCH_TYPE_CD
				            , TRIM(#{rm.schSupTypeCd})  		AS  SCH_SUP_TYPE_CD
				            , TRIM(#{rm.famCd})  				AS  FAM_CD	
				            , TRIM(#{rm.famNm})  				AS  FAM_NM
				            , TRIM(#{rm.famYmd})  				AS  FAM_YMD
				            , TRIM(#{rm.famResNo})  			AS  FAM_RES_NO	
				            , TRIM(#{rm.appYear})  				AS  APP_YEAR	
				            , TRIM(#{rm.divCd})  				AS  DIV_CD
				            , TRIM(#{rm.schLocCd})  			AS  SCH_LOC_CD
				            , TRIM(#{rm.schName})  				AS  SCH_NAME
				            , TRIM(#{rm.schYear})  				AS  SCH_YEAR
				            , TRIM(#{rm.schDept})  				AS  SCH_DEPT	
				            , REPLACE(TRIM(#{rm.schEntYm}),'-')  	AS  SCH_ENT_YM
				            , TRIM(#{rm.schPayYnVal})  				AS  SCH_PAY_YN
				            , REPLACE(TRIM(#{rm.excRate}),',')  	AS  EXC_RATE
				            , REPLACE(TRIM(#{rm.extMon}),',')  		AS  EXT_MON
				            , REPLACE(TRIM(#{rm.applMon}),',')  	AS  APPL_MON
				            , TRIM(#{rm.note})  AS  NOTE
			        	FROM DUAL	
				</foreach>
		<![CDATA[			
				) S 	
				ON ( 	
				          T.ENTER_CD 	= S.ENTER_CD 	
				     AND  T.APPL_SEQ 	= S.APPL_SEQ 	
				     AND  T.SABUN 		= S.SABUN 	
				) 	
				WHEN MATCHED THEN 	
				   UPDATE SET T.CHKDATE		= SYSDATE
				            , T.CHKID		= #{ssnSabun} 
				            , T.SCH_TYPE_CD = S.SCH_TYPE_CD 	
				            , T.FAM_CD 		= S.FAM_CD 	
				            , T.FAM_NM 		= S.FAM_NM 	
				            , T.FAM_YMD 	= S.FAM_YMD 	
				            , T.FAM_RES_NO 	= S.FAM_RES_NO 	
				            , T.APP_YEAR 	= S.APP_YEAR 	
				            , T.DIV_CD 		= S.DIV_CD 	
				            , T.SCH_LOC_CD 	= S.SCH_LOC_CD 	
				            , T.SCH_NAME 	= S.SCH_NAME 	
				            , T.SCH_YEAR 	= S.SCH_YEAR 	
				            , T.SCH_DEPT 	= S.SCH_DEPT 	
				            , T.SCH_ENT_YM 	= S.SCH_ENT_YM 	
				            , T.SCH_PAY_YN 	= S.SCH_PAY_YN 	
				            , T.EXC_RATE 	= S.EXC_RATE 	
				            , T.EXT_MON 	= S.EXT_MON 	
				            , T.APPL_MON 	= S.APPL_MON 	
				            , T.NOTE 		= S.NOTE 	
				WHEN NOT MATCHED THEN 	
				   INSERT 	
				   ( 	
				              T.ENTER_CD	
				            , T.APPL_SEQ	
				            , T.SABUN	
				            , T.SCH_TYPE_CD	
				            , T.SCH_SUP_TYPE_CD
				            , T.FAM_CD	
				            , T.FAM_NM	
				            , T.FAM_YMD
				            , T.FAM_RES_NO	
				            , T.APP_YEAR	
				            , T.DIV_CD	
				            , T.SCH_LOC_CD	
				            , T.SCH_NAME	
				            , T.SCH_YEAR	
				            , T.SCH_DEPT	
				            , T.SCH_ENT_YM	
				            , T.SCH_PAY_YN	
				            , T.EXC_RATE	
				            , T.EXT_MON	
				            , T.APPL_MON	
				            , T.NOTE	
				            , T.CHKDATE	
				            , T.CHKID	
				   ) 	
				   VALUES 	
				   ( 	
				              S.ENTER_CD	
				            , S.APPL_SEQ	
				            , S.SABUN	
				            , S.SCH_TYPE_CD	
				            , S.SCH_SUP_TYPE_CD
				            , S.FAM_CD	
				            , S.FAM_NM	
				            , S.FAM_YMD
				            , S.FAM_RES_NO	
				            , S.APP_YEAR	
				            , S.DIV_CD	
				            , S.SCH_LOC_CD	
				            , S.SCH_NAME	
				            , S.SCH_YEAR	
				            , S.SCH_DEPT	
				            , S.SCH_ENT_YM	
				            , S.SCH_PAY_YN	
				            , S.EXC_RATE	
				            , S.EXT_MON	
				            , S.APPL_MON	
				            , S.NOTE	
				            , SYSDATE	
				            , #{ssnSabun}	
				   ) 	
	]]>
	</update>
		
	<!-- 학자금지원구분코드 조회 -->
	<select id="getSchAppDetTypeList" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT C.CODE
		     , C.CODE_NM
		  FROM TSYS005 C
		 WHERE C.ENTER_CD  = #{ssnEnterCd}
		   AND C.GRCODE_CD = 'B60050'
		   AND C.CODE IN (
		            SELECT B.SCH_TYPE_CD
		              FROM TBEN750 B
		             WHERE B.ENTER_CD = C.ENTER_CD
		             GROUP BY B.SCH_TYPE_CD
		       )
	]]>
	</select>
		
	<!-- 학자금지원구분코드 조회 -->
	<select id="getSchAppDetSupTypeList" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT
			B.SEQ 
			, B.CODE 
		    , B.CODE_NM
		  FROM TBEN750 A
		     , TSYS005 B
		 WHERE A.ENTER_CD    = B.ENTER_CD
		   AND B.GRCODE_CD   = 'B60051'
		   AND B.CODE        = A.SCH_SUP_TYPE_CD
		   AND A.ENTER_CD    = #{ssnEnterCd}
		   AND A.SCH_TYPE_CD = #{schTypeCd}
		 GROUP BY
		 	B.SEQ
		 	, B.CODE
		 	, B.CODE_NM
		 ORDER BY B.SEQ
	]]>
	</select>
		
	<!-- 신청기준 목록 조회 -->
	<select id="getSchAppDetStdDataList" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT ENTER_CD
		     , SCH_TYPE_CD || '_' || SCH_SUP_TYPE_CD || '_' || FAM_CD AS SCH_CD
		     , SCH_TYPE_CD
		     , SCH_SUP_TYPE_CD
		     , FAM_CD
		     , SDATE
		     , EDATE
		     , WORK_YEAR
		     , LMT_APP_CNT
		     , LMT_YEAR_MON
		     , ST_AGE
		     , ED_AGE
		     , NVL((SELECT X.APPL_MON
		              FROM TBEN752 X
		             WHERE X.ENTER_CD        = A.ENTER_CD
		               AND X.SCH_TYPE_CD     = A.SCH_TYPE_CD
		               AND X.SCH_SUP_TYPE_CD = A.SCH_SUP_TYPE_CD
		               AND X.FAM_CD          = A.FAM_CD
		               AND X.SDATE           = A.SDATE
		               AND X.JIKCHAK_CD      = F_COM_GET_JIKCHAK_CD(A.ENTER_CD, #{searchApplSabun}, TO_CHAR(SYSDATE, 'YYYYMMDD'))
		               AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN NVL(X.USE_S_YMD, '19000101') AND NVL(X.USE_E_YMD, '99991231')
					   AND NVL(X.USE_YN, 'N') = 'Y'
		           )
		         , A.APPL_MON
		       ) AS APPL_MON
		     , PAY_RATE
		     , NOTE
		     , EVIDENCE_DOC
		  FROM TBEN750 A
		 WHERE ENTER_CD        = TRIM(#{ssnEnterCd})
		   AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN NVL(SDATE, '19000101') AND NVL(EDATE, '99991231')
	]]>
	</select>
</mapper>