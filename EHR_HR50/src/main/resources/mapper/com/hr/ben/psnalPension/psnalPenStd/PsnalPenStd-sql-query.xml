<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ben.psnalPension.psnalPenStd">

	<select id="getPsnalPenStdList" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT A.ENTER_CD
		     , A.JIKGUB_CD
		     , A.SDATE
		     , A.EDATE
		     , A.COMP_MON
		     , A.SEARCH_SEQ
		     , A.NOTE
			 , ( SELECT B.SEARCH_DESC
			       FROM THRI201 B
			      WHERE B.ENTER_CD   = A.ENTER_CD
			        AND B.SEARCH_SEQ = A.SEARCH_SEQ
			        AND ROWNUM = 1
			    ) AS SEARCH_DESC
		  FROM TBEN650 A 
		 WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})	]]>
		<if test="searchYmd != null and searchYmd neq ''">
		   AND REPLACE( #{searchYmd},'-','') BETWEEN A.SDATE AND NVL(A.EDATE, '29991231')
		</if>
	     ORDER BY F_COM_GET_GRCODE_SEQ( A.ENTER_CD, 'H20010', A.JIKGUB_CD)
	</select>
	
	<select id="getPsnalPenStdList2" parameterType="map" resultType="cMap" >
	<![CDATA[
		SELECT A.ENTER_CD
		     , A.CODE
		     , A.NOTE1 AS ELEMENT_CD1
		     , A.NOTE2 AS ELEMENT_CD2
		     , A.NOTE3
			 , ( SELECT MAX(X.ELEMENT_NM) KEEP(DENSE_RANK FIRST ORDER BY X.SDATE DESC)
			       FROM TCPN011 X
			      WHERE X.ENTER_CD   = A.ENTER_CD
			 	    AND X.ELEMENT_CD = A.NOTE1 ]]>
			<choose>
				<when test="searchYmd != null and searchYmd neq ''">
					AND REPLACE(#{searchYmd},'-','') BETWEEN X.SDATE AND NVL(X.EDATE,'99991231')
				</when>
				<otherwise>
					AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN X.SDATE AND NVL(X.EDATE,'99991231')
				</otherwise>
			</choose>
			   ) AS ELEMENT_NM1
			 , ( SELECT MAX(X.ELEMENT_NM) KEEP(DENSE_RANK FIRST ORDER BY X.SDATE DESC)
			       FROM TCPN011 X
			      WHERE X.ENTER_CD   = A.ENTER_CD
			 	    AND X.ELEMENT_CD = A.NOTE2
			<choose>
				<when test="searchYmd != null and searchYmd neq ''">
					AND REPLACE(#{searchYmd},'-','') BETWEEN X.SDATE AND NVL(X.EDATE,'99991231')
				</when>
				<otherwise>
					AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN X.SDATE AND NVL(X.EDATE,'99991231')
				</otherwise>
			</choose>					 		    
			   ) AS ELEMENT_NM2
		  FROM TSYS005 A 
		 WHERE A.ENTER_CD  = TRIM(#{ssnEnterCd})
		   AND A.GRCODE_CD = 'B65110'
		   AND A.USE_YN    = 'Y' 	
	     ORDER BY SEQ
	</select>

	<update id="savePsnalPenStd" parameterType="map">
	<![CDATA[			
		 MERGE INTO TBEN650 T 
		 USING ( ]]>
		<foreach item="rm" collection="mergeRows" separator=" UNION ALL " >
		       SELECT TRIM(#{ssnEnterCd})  		AS  ENTER_CD 
		            --, TRIM('B65110')  			AS  JIKGUB_CD
		            , TRIM(#{rm.jikgubCd})  	AS  JIKGUB_CD
		            , TRIM(#{rm.sdate})  		AS  SDATE
		            , TRIM(#{rm.edate})  		AS  EDATE
		            , TRIM(#{rm.compMon})  		AS  COMP_MON
		            , TRIM(#{rm.searchSeq})  	AS  SEARCH_SEQ
		            , TRIM(#{rm.note})  		AS  NOTE
		        FROM DUAL
		</foreach>
	<![CDATA[
		) S 
		ON ( 
		          T.ENTER_CD 	= S.ENTER_CD 
		     AND  T.JIKGUB_CD 	= S.JIKGUB_CD 
		     AND  T.SDATE 		= S.SDATE 
		) 
		WHEN MATCHED THEN 
		   UPDATE SET T.CHKDATE		= sysdate 
		            , T.CHKID		= #{ssnSabun} 
		            , T.EDATE 		= S.EDATE 
		            , T.COMP_MON 	= S.COMP_MON 
		            , T.SEARCH_SEQ 	= S.SEARCH_SEQ 
		            , T.NOTE 		= S.NOTE 
		WHEN NOT MATCHED THEN 
		   INSERT 
		   ( 
		              T.ENTER_CD
		            , T.JIKGUB_CD
		            , T.SDATE
		            , T.EDATE
		            , T.COMP_MON
		            , T.SEARCH_SEQ
		            , T.NOTE
		            , T.CHKDATE
		            , T.CHKID
		   ) 
		   VALUES 
		   ( 
		              S.ENTER_CD
		            , S.JIKGUB_CD
		            , S.SDATE
		            , S.EDATE
		            , S.COMP_MON
		            , S.SEARCH_SEQ
		            , S.NOTE
		            , sysdate
		            , #{ssnSabun}
		   ) 

	]]>
	</update>

	<update id="savePsnalPenStd2" parameterType="map">
	<![CDATA[			
		 MERGE INTO TSYS005 T 
		 USING ( ]]>
		<foreach item="rm" collection="mergeRows" separator=" UNION ALL ">
		       SELECT TRIM(#{ssnEnterCd})  		AS  ENTER_CD 
		            , TRIM('B65110')  			AS  GRCODE_CD 
		            , TRIM(#{rm.code})  		AS  CODE
		            , TRIM(#{rm.elementCd1})	AS  NOTE1
		            , TRIM(#{rm.elementCd2})	AS  NOTE2
		            , TRIM(#{rm.note3})  		AS  NOTE3
		        FROM DUAL
		</foreach>
	<![CDATA[
		) S 
		ON ( 
		          T.ENTER_CD 	= S.ENTER_CD 
		     AND  T.GRCODE_CD 	= S.GRCODE_CD 
		     AND  T.CODE 		= S.CODE 
		) 
		WHEN MATCHED THEN 
		   UPDATE SET T.CHKDATE	= sysdate 
		            , T.CHKID	= #{ssnSabun} 
		            , T.NOTE1 	= S.NOTE1 
		            , T.NOTE2 	= S.NOTE2 
		            , T.NOTE3 	= S.NOTE3 
		WHEN NOT MATCHED THEN 
		   INSERT 
		   ( 
		              T.ENTER_CD
		            , T.GRCODE_CD
		            , T.CODE
		            , T.NOTE1
		            , T.NOTE2
		            , T.NOTE3
		            , T.CHKDATE
		            , T.CHKID
		   ) 
		   VALUES 
		   ( 
		              S.ENTER_CD
		            , S.GRCODE_CD
		            , S.CODE
		            , S.NOTE1
		            , S.NOTE2
		            , S.NOTE3
		            , sysdate
		            , #{ssnSabun}
		   ) 
	]]>
	</update>
		
	<delete id="deletePsnalPenStd" parameterType="map">
	<![CDATA[
		DELETE FROM TBEN650
		 WHERE ENTER_CD = TRIM(#{ssnEnterCd}) 
		   AND ( JIKGUB_CD,SDATE ) IN ( ( NULL,NULL) ]]> 
		<foreach item="rm" collection="deleteRows"> 
			<if test="rm.jikgubCd != null and rm.jikgubCd neq '' and rm.sdate != null and rm.sdate neq ''">
				, ( TRIM( #{rm.jikgubCd} ),TRIM( #{rm.sdate} ) ) 
			</if>
		</foreach>
		       )
	</delete>
</mapper>