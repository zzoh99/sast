<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ben.resort.resortApr">

	<select id="getResortAprList" parameterType="map" resultType="cMap">
	<![CDATA[
           SELECT A.ENTER_CD
				, A.APPL_SEQ
				, A.SABUN
				, F_COM_GET_NAMES(A.ENTER_CD, A.SABUN, #{ssnLocaleCd} ) AS NAME -- 성명
				, F_COM_GET_ORG_NM2(A.ENTER_CD, A.SABUN, B.APPL_YMD, #{ssnLocaleCd}) AS ORG_NM
				, F_COM_GET_JIKCHAK_NM(A.ENTER_CD, A.SABUN, B.APPL_YMD, #{ssnLocaleCd}) AS JIKCHAK_NM
				, F_COM_GET_JIKWEE_NM(A.ENTER_CD, A.SABUN, B.APPL_YMD, #{ssnLocaleCd}) AS JIKWEE_NM
				, F_COM_GET_JIKGUB_NM(A.ENTER_CD, A.SABUN, B.APPL_YMD, #{ssnLocaleCd}) AS JIKGUB_NM
				, F_COM_GET_WORKTYPE_NM(A.ENTER_CD, A.SABUN, B.APPL_YMD, #{ssnLocaleCd}) AS WORKTYPE_NM
				, A.COMPANY_CD
				, A.RESORT_NM
				, A.ROOM_TYPE
				, A.SDATE
				, A.EDATE
				, A.DAYS
				, A.WAIT_YN
				, A.CNT
				, A.PHONE_NO
				, A.MAIL_ID
				, A.COM_MON_YN
				, A.NOTE
				, A.STATUS_CD
				, A.PLAN_SEQ
				, A.RESORT_SEQ
				, A.HOPE_CD
				, A.RSV_NO1
				, A.RSV_NO2
				, A.RESORT_MON
				, A.COM_MON
				, A.PSNAL_MON
				, B.APPL_YMD
				, B.APPL_SABUN
				, B.APPL_IN_SABUN
				, B.APPL_STATUS_CD
				, B.FILE_SEQ
				, ( SELECT MAX(Z.SEASON_CD) FROM TBEN492 Z WHERE Z.ENTER_CD = A.ENTER_CD AND Z.PLAN_SEQ = A.PLAN_SEQ ) AS SEASON_CD
				, '0' AS DETAIL
				, CASE WHEN A.PLAN_SEQ IS NOT NULL THEN '0' ELSE '1' END AS SHTCOL_EDIT
				, (
					SELECT 
						COUNT(1) 
					  FROM TBEN496 Z 
					 WHERE Z.ENTER_CD =	A.ENTER_CD
				       AND Z.YEAR 	  = SUBSTR(REPLACE(TRIM( A.SDATE ), '-', ''),1,4)
				       AND Z.SABUN	  = A.SABUN
				   ) AS TARGET_YN
				, (
					SELECT 
						SUM(Z.COM_MON) 
					  FROM TBEN491 Z
					 WHERE Z.ENTER_CD	 =	A.ENTER_CD
				       AND Z.SABUN	  	 = A.SABUN
				       AND Z.STATUS_CD	 = 'Y'
				       AND NVL(Z.COM_MON, 0) > 0
				       AND SUBSTR(REPLACE(TRIM( Z.SDATE ), '-', ''),1,4) = SUBSTR(REPLACE(TRIM( A.SDATE ), '-', ''),1,4)
				   ) AS COM_MON_SUM
                      FROM TBEN491 A, THRI103 B
                     WHERE A.ENTER_CD   = #{ssnEnterCd}
                       AND A.ENTER_CD   = B.ENTER_CD
                       AND A.APPL_SEQ   = B.APPL_SEQ
		      AND B.APPL_STATUS_CD NOT IN ('11') ]]> 
		<if test="searchFrom != null and searchFrom neq '' and searchTo != null and searchTo neq ''">
			  AND B.APPL_YMD BETWEEN REPLACE(#{searchFrom}, '-','') AND REPLACE(#{searchTo}, '-','')
		</if>
		<if test="searchApplStatusCd != null and searchApplStatusCd neq ''">
		      AND B.APPL_STATUS_CD IN ( #{searchApplStatusCd} )
		</if>
		<if test="searchSabunName != null and searchSabunName neq ''">
			AND (A.SABUN LIKE '%'||TRIM( #{searchSabunName} )||'%' OR UPPER(F_COM_GET_NAMES(A.ENTER_CD, A.SABUN, #{ssnLocaleCd})) LIKE '%'||UPPER(TRIM( #{searchSabunName} ))||'%')
		</if>
		<if test="searchOrgNm != null and searchOrgNm neq ''">
			AND UPPER(F_COM_GET_ORG_NM2(A.ENTER_CD, A.SABUN, B.APPL_YMD, #{ssnLocaleCd}))  LIKE '%'||UPPER(TRIM( #{searchOrgNm} ))||'%'
		</if>
		<if test="searchSeasonCd != null and searchSeasonCd neq ''">
			AND (SELECT Z.SEASON_CD FROM TBEN492 Z WHERE Z.ENTER_CD = A.ENTER_CD AND Z.PLAN_SEQ = A.PLAN_SEQ) IN ( #{searchSeasonCd} )
		</if>  
		<if test="searchCompanyCd != null and searchCompanyCd neq ''">
		    AND A.COMPANY_CD IN ( #{searchCompanyCd} ) 
		</if>
		<if test="searchStatusCd != null and searchStatusCd neq ''">
			AND A.STATUS_CD IN ( #{searchStatusCd} )
		</if>
        ORDER BY B.APPL_YMD DESC, B.APPL_SEQ DESC
	</select>
		
	<update id="saveResortApr" parameterType="map">
	<![CDATA[
		MERGE INTO TBEN491 T
		USING	(
				SELECT
						A.ENTER_CD
						, A.APPL_SEQ
						, A.SABUN
						, A.STATUS_CD
						, A.RSV_NO1
						, A.COM_MON
						, A.PSNAL_MON
						, A.NOTE
				FROM (
						SELECT
								NULL		AS ENTER_CD
								, NULL		AS APPL_SEQ
								, NULL		AS SABUN
								, NULL		AS STATUS_CD
								, NULL		AS RSV_NO1
								, NULL		AS COM_MON
								, NULL		AS PSNAL_MON
								, NULL		AS NOTE
						FROM DUAL ]]>
		<foreach item="rm" collection="mergeRows">
						UNION ALL
						SELECT TRIM(#{ssnEnterCd})			AS	ENTER_CD
					         , TRIM(#{rm.applSeq})			AS	APPL_SEQ
					         , TRIM(#{rm.sabun})			AS	SABUN
                             , TRIM(#{rm.statusCd})			AS	STATUS_CD
                             , TRIM(#{rm.rsvNo1})			AS	RSV_NO1
                             , TRIM(#{rm.comMon})			AS	COM_MON
                             , TRIM(#{rm.psnalMon})			AS	PSNAL_MON
                             , TRIM(#{rm.note})				AS	NOTE
					      FROM DUAL
		</foreach>
	<![CDATA[
				) A
				WHERE	A.ENTER_CD IS NOT NULL
				  AND	A.SABUN IS NOT NULL
				  AND	A.APPL_SEQ IS NOT NULL
		) S
		ON (
					T.ENTER_CD	= S.ENTER_CD
				AND	T.APPL_SEQ	= S.APPL_SEQ
		)
		WHEN MATCHED
		THEN
			UPDATE SET T.STATUS_CD		= S.STATUS_CD
				     , T.RSV_NO1		= S.RSV_NO1
				     , T.COM_MON		= S.COM_MON
				     , T.PSNAL_MON		= S.PSNAL_MON
				     , T.NOTE			= S.NOTE
				     , T.CHKDATE		= sysdate
				     , T.CHKID			= #{ssnSabun}
	]]>
	</update>
</mapper>