<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ben.resort.resortTargetMgr">

	<select id="getResortTargetMgrList" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT A.ENTER_CD
		     , A.YEAR
		     , A.SABUN
		     , A.NOTE
		     , F_COM_GET_NAMES(A.ENTER_CD, A.SABUN, #{ssnLocaleCd} ) AS NAME -- 성명
			 , F_COM_GET_ORG_NM2(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE,'YYYYMMDD'), #{ssnLocaleCd}) AS ORG_NM
			 , F_COM_GET_JIKCHAK_NM(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE,'YYYYMMDD'), #{ssnLocaleCd}) AS JIKCHAK_NM
			 , F_COM_GET_JIKWEE_NM(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE,'YYYYMMDD'), #{ssnLocaleCd}) AS JIKWEE_NM
			 , F_COM_GET_JIKGUB_NM(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE,'YYYYMMDD'), #{ssnLocaleCd}) AS JIKGUB_NM
			 , F_COM_GET_WORKTYPE_NM(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE,'YYYYMMDD'), #{ssnLocaleCd}) AS WORKTYPE_NM
			 , B.COMPANY_CD
			 , B.RESORT_NM
			 , B.ROOM_TYPE
			 , B.SDATE
			 , B.EDATE
			 , B.COM_MON 
		  FROM TBEN496 A LEFT OUTER JOIN (
										    SELECT 
										    	Z.ENTER_CD AS ENTER_CD 
										    	, Z.SABUN AS SABUN
										  		, SUBSTR (NVL(Z.SDATE,'0000'),1,4 ) AS YEAR
										  		, MAX(Z.COMPANY_CD ) KEEP ( DENSE_RANK LAST  ORDER BY Z.SDATE ) AS COMPANY_CD
											 	, MAX(Z.RESORT_NM ) KEEP ( DENSE_RANK LAST  ORDER BY Z.SDATE ) AS RESORT_NM
											 	, MAX(Z.ROOM_TYPE ) KEEP ( DENSE_RANK LAST  ORDER BY Z.SDATE ) AS ROOM_TYPE
											 	, MAX(Z.SDATE ) KEEP ( DENSE_RANK LAST  ORDER BY Z.SDATE ) AS SDATE
											 	, MAX(Z.EDATE ) KEEP ( DENSE_RANK LAST  ORDER BY Z.SDATE ) AS EDATE
											 	, MAX(Z.COM_MON ) KEEP ( DENSE_RANK LAST  ORDER BY Z.SDATE ) AS COM_MON 
										  	FROM TBEN491 Z
										  	WHERE 1=1
											  AND Z.SDATE IS NOT NULL
											  AND Z.STATUS_CD = 'Y'
											  AND NVL(Z.COM_MON, 0) > 0
											  AND EXISTS ( SELECT 1
															   FROM THRI103 X
															  WHERE X.ENTER_CD = Z.ENTER_CD 
															    AND X.APPL_SEQ = Z.APPL_SEQ
															    AND X.APPL_STATUS_CD = '99'
															)
										  	GROUP BY Z.ENTER_CD, Z.SABUN, SUBSTR (NVL(Z.SDATE,'0000'),1,4 )
		  ) B
			ON (A.ENTER_CD = B.ENTER_CD 
				AND A.SABUN = B.SABUN
				AND A.YEAR = B.YEAR)
			WHERE A.ENTER_CD =	#{ssnEnterCd} ]]>
		<if test="searchYear != null and searchYear neq ''">
			  AND A.YEAR = TRIM( #{searchYear} )
		</if>
		<if test="searchSabunName != null and searchSabunName neq ''">
			  AND (A.SABUN LIKE '%'||TRIM( #{searchSabunName} )||'%' OR F_COM_GET_NAMES(A.ENTER_CD, A.SABUN, #{ssnLocaleCd}) LIKE '%'||TRIM( #{searchSabunName} )||'%')
		</if>
	     ORDER BY A.YEAR DESC, A.SABUN
	</select>

	<update id="saveResortTargetMgr" parameterType="map">
	<![CDATA[			
		MERGE INTO TBEN496 T 
		USING ( ]]>
		<foreach item="rm" collection="mergeRows" separator=" UNION ALL ">
		SELECT TRIM(#{ssnEnterCd}) AS	ENTER_CD 
		     , TRIM(#{rm.year})  AS  YEAR
		     , TRIM(#{rm.sabun}) AS  SABUN
		     , TRIM(#{rm.note})  AS  NOTE
		  FROM DUAL
		</foreach>
	<![CDATA[
		) S 
		ON ( 
		          T.ENTER_CD = S.ENTER_CD 
		     AND  T.YEAR = S.YEAR 
		     AND  T.SABUN = S.SABUN 
		) 
		WHEN MATCHED THEN 
		   UPDATE SET T.CHKDATE	= sysdate 
		            , T.CHKID	= #{ssnSabun} 
		            , T.NOTE = S.NOTE 
		WHEN NOT MATCHED THEN 
		   INSERT 
		   ( 
		              T.ENTER_CD
		            , T.YEAR
		            , T.SABUN
		            , T.NOTE
		            , T.CHKDATE
		            , T.CHKID
		   ) 
		   VALUES 
		   ( 
		              S.ENTER_CD
		            , S.YEAR
		            , S.SABUN
		            , S.NOTE
		            , sysdate
		            , #{ssnSabun}
		   ) 
	]]>
	</update>

	<delete id="deleteResortTargetMgr" parameterType="map">
	<![CDATA[
		DELETE FROM TBEN496
		 WHERE ENTER_CD = TRIM(#{ssnEnterCd}) 
		   AND ( YEAR, SABUN ) IN ( ( NULL, NULL) ]]>
		<foreach item="rm" collection="deleteRows">
			<if test="rm.year != null and rm.year neq '' and rm.sabun != null and rm.sabun neq ''">
				, ( TRIM( #{rm.year} ) , TRIM( #{rm.sabun} ) ) 
			</if> 
		</foreach>
    		)
	</delete>
</mapper>