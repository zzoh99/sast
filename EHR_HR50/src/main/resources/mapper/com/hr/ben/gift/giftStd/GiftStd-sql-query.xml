<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ben.gift.giftStd">
	
	<!-- 조회  -->
	<select id="getGiftStdList" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT A.ENTER_CD
		     , A.GIFT_SEQ
		     , A.GIFT_TYPE_CD
		     , A.SDATE
		     , A.EDATE
		     , A.ADDR_GUBUN
		     , A.TITLE
		     , A.SEARCH_SEQ
		     , A.NOTE
			 , ( SELECT B.SEARCH_DESC 
			       FROM THRI201 B
			      WHERE B.ENTER_CD   = A.ENTER_CD
			        AND B.SEARCH_SEQ = A.SEARCH_SEQ
			        AND ROWNUM = 1
			    ) AS SEARCH_DESC
		  FROM TBEN765 A  
		 WHERE A.ENTER_CD =	#{ssnEnterCd} ]]>
		<if test="searchYmd != null and searchYmd neq ''">
		   AND REPLACE( #{searchYmd}, '-', '') BETWEEN A.SDATE AND NVL(A.EDATE, '29991231')
		</if>
	     ORDER BY A.SDATE DESC, A.TITLE
	</select>
		
	<!-- 조회  -->
	<select id="getGiftStdDtlList" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT A.ENTER_CD
		     , A.GIFT_SEQ
		     , A.GIFT_CD
		     , A.GIFT_NM
		     , A.GIFT_DESC
		     , A.GIFT_IMG_SEQ
		     , '<a class="btn filled">등록</a>' AS BTN_ADD
		     , '/SignPhotoOut.do' || chr(63) || 'enterCd=' || #{ssnEnterCd} || chr(38) || 'fileSeq=' || A.GIFT_IMG_SEQ AS GIFT_IMG 
		     , ( SELECT COUNT(1)
		           FROM TBEN767 X
		          WHERE X.GIFT_SEQ = A.GIFT_SEQ
		            AND X.GIFT_CD  = A.GIFT_CD ) AS CNT  
		  FROM TBEN766 A 
		 WHERE A.ENTER_CD =	#{ssnEnterCd}
	       AND A.GIFT_SEQ  = TRIM(#{searchGiftSeq})
	     ORDER BY A.GIFT_CD, A.GIFT_NM
	]]>
	</select>
		
	<!-- 저장  -->
	<update id="saveGiftStd" parameterType="map">
	<![CDATA[			
		 MERGE INTO TBEN765 T 
		 USING ( ]]>
			<foreach item="rm" collection="mergeRows" separator=" UNION ALL ">
				SELECT TRIM(#{ssnEnterCd})  		AS  ENTER_CD 
		            , TRIM(#{rm.giftSeq})  		AS  GIFT_SEQ
		            , TRIM(#{rm.giftTypeCd})  	AS  GIFT_TYPE_CD
		            , TRIM(#{rm.sdate})  		AS  SDATE
		            , TRIM(#{rm.edate})  		AS  EDATE
		            , TRIM(#{rm.addrGubun})  	AS  ADDR_GUBUN
		            , TRIM(#{rm.title})  		AS  TITLE
		            , TRIM(#{rm.searchSeq})  	AS  SEARCH_SEQ
		            , TRIM(#{rm.note})  		AS  NOTE
		        FROM DUAL
			</foreach>
	<![CDATA[
		) S 
		ON ( 
		          T.ENTER_CD = S.ENTER_CD 
		     AND  T.GIFT_SEQ = S.GIFT_SEQ 
		) 
		WHEN MATCHED THEN 
		   UPDATE SET T.CHKDATE			= sysdate 
		            , T.CHKID			= #{ssnSabun} 
		            , T.GIFT_TYPE_CD 	= S.GIFT_TYPE_CD 
		            , T.SDATE 			= S.SDATE 
		            , T.EDATE 			= S.EDATE 
		            , T.ADDR_GUBUN 		= S.ADDR_GUBUN
		            , T.TITLE 			= S.TITLE 
		            , T.SEARCH_SEQ 		= S.SEARCH_SEQ 
		            , T.NOTE 			= S.NOTE 
		WHEN NOT MATCHED THEN 
		   INSERT 
		   ( 
		              T.ENTER_CD
		            , T.GIFT_SEQ
		            , T.GIFT_TYPE_CD
		            , T.SDATE
		            , T.EDATE
		            , T.ADDR_GUBUN
		            , T.TITLE
		            , T.SEARCH_SEQ
		            , T.NOTE
		            , T.CHKDATE
		            , T.CHKID
		   ) 
		   VALUES 
		   ( 
		              S.ENTER_CD
		            , S_TBEN765.NEXTVAL
		            , S.GIFT_TYPE_CD
		            , S.SDATE
		            , S.EDATE
		            , S.ADDR_GUBUN
		            , S.TITLE
		            , S.SEARCH_SEQ
		            , S.NOTE
		            , sysdate
		            , #{ssnSabun}
		   ) 
	]]>
	</update>
		
	<!-- 저장  -->
	<update id="saveGiftStdDtl" parameterType="map">
	<![CDATA[			
		 MERGE INTO TBEN766 T 
		 USING ( ]]>
		 <foreach item="rm" collection="mergeRows" separator=" UNION ALL ">
		 	SELECT TRIM(#{ssnEnterCd})  		AS  ENTER_CD 
	             , TRIM(#{searchGiftSeq})  	AS  GIFT_SEQ
	             , TRIM(#{rm.giftCd})  		AS  GIFT_CD
	             , TRIM(#{rm.giftNm})  		AS  GIFT_NM
	             , TRIM(#{rm.giftDesc})  	AS  GIFT_DESC
	             , TRIM(#{rm.giftImgSeq})  	AS  GIFT_IMG_SEQ
	          FROM DUAL
		 </foreach>
	<![CDATA[
		) S 
		ON ( 
		          T.ENTER_CD 	= S.ENTER_CD 
		     AND  T.GIFT_SEQ 	= S.GIFT_SEQ 
		     AND  T.GIFT_CD 	= S.GIFT_CD 
		) 
		  WHEN MATCHED THEN 
		   UPDATE SET T.CHKDATE			= sysdate 
		            , T.CHKID			= #{ssnSabun} 
		            , T.GIFT_NM 		= S.GIFT_NM 
		            , T.GIFT_DESC 		= S.GIFT_DESC 
		            , T.GIFT_IMG_SEQ 	= S.GIFT_IMG_SEQ 
		  WHEN NOT MATCHED THEN 
		   INSERT 
		   ( 
		              T.ENTER_CD
		            , T.GIFT_SEQ
		            , T.GIFT_CD
		            , T.GIFT_NM
		            , T.GIFT_DESC
		            , T.GIFT_IMG_SEQ
		            , T.CHKDATE
		            , T.CHKID
		   ) 
		   VALUES 
		   ( 
		              S.ENTER_CD
		            , S.GIFT_SEQ
		            , S.GIFT_CD
		            , S.GIFT_NM
		            , S.GIFT_DESC
		            , S.GIFT_IMG_SEQ
		            , sysdate
		            , #{ssnSabun}
		   ) 
	]]>
	</update>
		
	<!-- 삭제  -->
	<delete id="deleteGiftStd" parameterType="map">
	<![CDATA[
		DELETE FROM TBEN765
		 WHERE ENTER_CD = TRIM(#{ssnEnterCd})  
		   AND ( GIFT_SEQ ) IN ( ( NULL ) ]]>
		<foreach item="rm" collection="deleteRows">
			<if test="rm.giftSeq != null and rm.giftSeq neq ''">
				, ( TRIM( #{rm.giftSeq} ) )	
			</if>
		</foreach>
			)
	</delete>
		
	<!-- 삭제  -->
	<delete id="deleteGiftStdDtl" parameterType="map">
	<![CDATA[
		DELETE FROM TBEN766
		 WHERE ENTER_CD = TRIM(#{ssnEnterCd}) 
		   AND ( GIFT_SEQ,GIFT_CD ) IN ( ( NULL,NULL) ]]>
		<foreach item="rm" collection="deleteRows">
			<if test="rm.giftSeq != null and rm.giftSeq neq '' and rm.giftCd != null and rm.giftCd neq ''">
				, ( TRIM( #{rm.giftSeq} ), TRIM( #{rm.giftCd} ) ) 
			</if>
		</foreach>
			)		    
	</delete>
</mapper>