<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ben.loan.loanPersonalInterest">
	
	<!-- 조회 -->
	<select id="getLoanPersonalInterest" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT	  Z.SABUN
				, Z.NAME
				, Z.ORG_NM
				, Z.SDATE
				, Z.EDATE
				, Z.INTEREST_RATE
				, Z.MEMO
				, Z.LOAN_CD
				, Z.LOAN_NM
				, Z.ENTER_CD
				, Z.LOAN_S_YMD
				, Z.APPL_SEQ
		FROM	(
				SELECT	  A.SABUN
						, F_COM_GET_NAMES(TRIM(#{ssnEnterCd}), A.SABUN) AS NAME
						, F_COM_GET_ORG_NM21(A.ENTER_CD, A.SABUN, B.LOAN_REQ_YMD) AS ORG_NM
						, A.SDATE
						, A.EDATE
						, A.INTEREST_RATE
						, A.MEMO
						, D.LOAN_CD
						, D.LOAN_NM
						, A.ENTER_CD
						, B.LOAN_S_YMD
						, A.APPL_SEQ
				FROM	TBEN615 A, TBEN623 B, THRI103 C, TBEN621 D
				WHERE	A.ENTER_CD = B.ENTER_CD
				  AND	A.SABUN = B.SABUN
				  AND	A.ENTER_CD = TRIM(#{ssnEnterCd})
				  AND	A.ENTER_CD = C.ENTER_CD
				  AND	B.APPL_SEQ = C.APPL_SEQ
				  AND	C.APPL_STATUS_CD = '99'
				  AND	B.ENTER_CD = D.ENTER_CD
				  AND	B.LOAN_CD = D.LOAN_CD ]]>
				<if test="searchStdDate != null and searchStdDate neq ''">
				  AND	REPLACE(#{searchStdDate}, '-', '') BETWEEN D.SDATE AND NVL(D.EDATE, '99991231')
				</if>
				ORDER BY B.LOAN_REQ_YMD DESC
				) Z
		WHERE	1=1
		<if test="searchOrgNm != null and searchOrgNm neq ''">
		  AND	Z.ORG_NM LIKE '%'|| TRIM(#{searchOrgNm}) ||'%'
		</if>
		<if test="searchName != null and searchName neq ''">
		  AND	( Z.NAME LIKE '%'|| TRIM(#{searchName}) ||'%' or Z.SABUN LIKE TRIM(#{searchName})||'%' )
		</if>
		<if test="searchLoanCd != null and searchLoanCd neq ''">
		  AND	Z.LOAN_CD = #{searchLoanCd}
		</if>
		ORDER BY Z.EDATE DESC, Z.SDATE DESC
	</select>

	<update id="saveLoanPersonalInterest" parameterType="map">
	<![CDATA[
		MERGE INTO TBEN615 T
		USING	(
				SELECT	
						A.ENTER_CD
						, A.APPL_SEQ
						, A.SABUN
						, A.SDATE
						, A.EDATE
						, A.INTEREST_RATE
						, A.MEMO
				FROM	(
						SELECT	 
							  NULL		AS ENTER_CD
							, NULL		AS APPL_SEQ
							, NULL		AS SABUN
							, NULL		AS SDATE
							, NULL		AS EDATE
							, NULL		AS INTEREST_RATE
							, NULL		AS MEMO
						FROM	DUAL ]]>
			<foreach item="rm" collection="mergeRows">
						UNION ALL
						SELECT	#{ssnEnterCd}                 	AS ENTER_CD
								,TRIM( #{rm.applSeq})			AS APPL_SEQ
								,TRIM( #{rm.sabun})				AS SABUN
								,TRIM( #{rm.sdate})				AS SDATE
								,TRIM( #{rm.edate})				AS EDATE
								,TRIM( #{rm.interestRate})		AS INTEREST_RATE
								,TRIM( #{rm.memo})				AS MEMO
						FROM   DUAL
			</foreach>
	<![CDATA[
						) A WHERE 
						A.ENTER_CD IS NOT NULL
						AND A.APPL_SEQ IS NOT NULL
						AND A.SABUN IS NOT NULL
						AND A.SDATE IS NOT NULL
				) S
		ON ( 
						T.ENTER_CD				= S.ENTER_CD
						AND T.APPL_SEQ			= S.APPL_SEQ
						AND	T.SABUN				= S.SABUN
						AND	T.SDATE				= S.SDATE
		 )
		WHEN MATCHED THEN
			UPDATE SET	  
						T.EDATE					= S.EDATE
						, T.INTEREST_RATE		= S.INTEREST_RATE
						, T.MEMO				= S.MEMO
						, T.CHKDATE				= SYSDATE
						, T.CHKID				= #{ssnSabun}
		WHEN NOT MATCHED THEN
			INSERT
			(
						T.ENTER_CD
						, T.APPL_SEQ
						, T.SABUN
						, T.SDATE
						, T.EDATE
						, T.INTEREST_RATE
						, T.MEMO
						, T.CHKDATE
						, T.CHKID
			)
			VALUES
			(
						S.ENTER_CD
						, S.APPL_SEQ
						, S.SABUN
						, S.SDATE
						, S.EDATE
						, S.INTEREST_RATE
						, S.MEMO
						, SYSDATE
						, #{ssnSabun}
			)
	]]>
	</update>

	<delete id="deleteLoanPersonalInterest" parameterType="map">
	<![CDATA[
		DELETE FROM TBEN615
		WHERE 	(ENTER_CD, SABUN, SDATE ) IN 	(  (NULL,NULL,NULL) ]]>
		<foreach item="rm" collection="deleteRows">
			,				(
							  #{ssnEnterCd}
							, TRIM( #{rm.sabun} )
							, TRIM( #{rm.sdate} )
							)
		</foreach>
				)
	</delete>
	
</mapper>