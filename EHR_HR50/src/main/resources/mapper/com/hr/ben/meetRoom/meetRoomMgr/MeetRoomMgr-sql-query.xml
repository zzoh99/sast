<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ben.meetRoom.meetRoomMgr">
	
	<!-- 회의실 관리 조회 -->
	<select id="getMeetRoomMgrList" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT ENTER_CD
		     , MEET_ROOM_NO
		     , MEET_ROOM_NM
		     , MEET_USE
		     , USE_YN
		     , BUSINESS_PLACE_CD
		     , CHARGE_ORG_CD
		     , CHARGE_ORG_NM
		     , CHARGE_SABUN
		     , CHARGE_NAME
		     , NOTE
		     , ORDER_SEQ
		  FROM TBEN894
		 WHERE ENTER_CD = #{ssnEnterCd} ]]>
		<if test="businessPlaceCd != null and businessPlaceCd neq ''">
		   AND BUSINESS_PLACE_CD IN
		<foreach collection="businessPlaceCd" item="item" index="index" open="(" close=")" separator=",">
				#{item}
		</foreach>
		</if>
		<if test="searchMeetRoomNm != null and searchMeetRoomNm neq ''">
		   AND UPPER(MEET_ROOM_NM) LIKE '%'||UPPER(#{searchMeetRoomNm})||'%'
		</if>
		ORDER BY ORDER_SEQ, MEET_ROOM_NO
	</select>

	<!-- 회의실 관리 저장 -->
	<update id="saveMeetRoomMgr" parameterType="map">
	<![CDATA[
		MERGE INTO TBEN894 T
		USING (
				SELECT ENTER_CD
				     , MEET_ROOM_NO
				     , MEET_ROOM_NM
				     , MEET_USE
				     , USE_YN
				     , BUSINESS_PLACE_CD
				     , CHARGE_ORG_CD
				     , CHARGE_ORG_NM
				     , CHARGE_SABUN
				     , CHARGE_NAME
				     , NOTE
				     , ORDER_SEQ
				     , CHKID
				     , CHKDATE
				  FROM (
						SELECT NULL    AS ENTER_CD
						     , NULL    AS MEET_ROOM_NO
						     , NULL    AS MEET_ROOM_NM
						     , NULL    AS MEET_USE
						     , NULL    AS USE_YN
						     , NULL    AS BUSINESS_PLACE_CD
						     , NULL    AS CHARGE_ORG_CD
						     , NULL    AS CHARGE_ORG_NM
						     , NULL    AS CHARGE_SABUN
						     , NULL    AS CHARGE_NAME
						     , NULL    AS NOTE
						     , NULL    AS ORDER_SEQ
						     , NULL    AS CHKID
						     , NULL    AS CHKDATE
						  FROM DUAL ]]>
					<bind name="idx" value="1" />
					<foreach item="rm" collection="mergeRows">
						  UNION ALL
						SELECT #{ssnEnterCd} AS ENTER_CD
						<choose>
							<when test="rm.meetRoomNo != null and rm.meetRoomNo neq ''">
							 , TRIM( #{rm.meetRoomNo} ) AS MEET_ROOM_NO
							</when>
							<when test="rm.meetRoomNo != null and rm.meetRoomNo eq ''">
							 , TO_CHAR( (	SELECT (NVL(MAX(TO_NUMBER(MEET_ROOM_NO)), 0) + #{idx})
											  FROM TBEN894
											 WHERE ENTER_CD = #{ssnEnterCd} ) ) AS MEET_ROOM_NO
								<bind name="idx" value="idx + 1" />
							</when>
						</choose>
						     , TRIM( #{rm.meetRoomNm} ) AS MEET_ROOM_NM
						     , TRIM( #{rm.meetUse} ) AS MEET_USE
						     , TRIM( #{rm.useYn} ) AS USE_YN
						     , TRIM( #{rm.businessPlaceCd}) AS BUSINESS_PLACE_CD
						     , TRIM( #{rm.chargeOrgCd} ) AS CHARGE_ORG_CD
						     , TRIM( #{rm.chargeOrgNm} ) AS CHARGE_ORG_NM
						     , TRIM( #{rm.chargeSabun} ) AS CHARGE_SABUN
						     , TRIM( #{rm.chargeName} ) AS CHARGE_NAME
						     , TRIM( #{rm.note} ) AS NOTE
						     , TRIM( #{rm.orderSeq} ) AS ORDER_SEQ
						     , #{ssnSabun} AS CHKID
						     , SYSDATE AS CHKDATE
						  FROM DUAL
					</foreach>
	<![CDATA[  ) WHERE ENTER_CD IS NOT NULL
				    AND MEET_ROOM_NO IS NOT NULL
			) S
		ON ( T.ENTER_CD = S.ENTER_CD
		AND T.MEET_ROOM_NO = S.MEET_ROOM_NO
		)
		WHEN MATCHED THEN
		UPDATE SET T.MEET_ROOM_NM = S.MEET_ROOM_NM
				 , T.MEET_USE = S.MEET_USE
				 , T.USE_YN = S.USE_YN
				 , T.BUSINESS_PLACE_CD = S.BUSINESS_PLACE_CD
				 , T.CHARGE_ORG_CD = S.CHARGE_ORG_CD
				 , T.CHARGE_ORG_NM = S.CHARGE_ORG_NM
				 , T.CHARGE_SABUN = S.CHARGE_SABUN
				 , T.CHARGE_NAME = S.CHARGE_NAME
				 , T.NOTE = S.NOTE
				 , T.ORDER_SEQ = S.ORDER_SEQ
				 , T.CHKDATE = S.CHKDATE
				 , T.CHKID = S.CHKID
		WHEN NOT MATCHED THEN
			INSERT
			(
				  T.ENTER_CD
				, T.MEET_ROOM_NO
				, T.MEET_ROOM_NM
				, T.MEET_USE
				, T.USE_YN
				, T.BUSINESS_PLACE_CD
				, T.CHARGE_ORG_CD
				, T.CHARGE_ORG_NM
				, T.CHARGE_SABUN
				, T.CHARGE_NAME
				, T.NOTE
				, T.ORDER_SEQ
				, T.CHKDATE
				, T.CHKID
			)
			VALUES
			(
				  S.ENTER_CD
				, S.MEET_ROOM_NO
				, S.MEET_ROOM_NM
				, S.MEET_USE
				, S.USE_YN
				, S.BUSINESS_PLACE_CD
				, S.CHARGE_ORG_CD
				, S.CHARGE_ORG_NM
				, S.CHARGE_SABUN
				, S.CHARGE_NAME
				, S.NOTE
				, S.ORDER_SEQ
				, S.CHKDATE
				, S.CHKID
			)
	]]>
	</update>

	<!-- 회의실 관리 삭제 -->
	<delete id="deleteMeetRoomMgr" parameterType="map">
	<![CDATA[
		DELETE FROM TBEN894
		WHERE 	(ENTER_CD, MEET_ROOM_NO) IN 	(  (NULL,NULL) ]]>
		<foreach item="rm" collection="deleteRows">
			,
			<if test="ssnEnterCd != null and ssnEnterCd neq '' and rm.meetRoomNo != null and rm.meetRoomNo neq ''">
			(#{ssnEnterCd}, TRIM( #{rm.meetRoomNo} ))
			</if>
		</foreach>
		)
	</delete>

	<!-- 테이블에서 새로운 회의실번호 가져오기 -->
	<select id="getMaxSeqMeetStd" parameterType="map" resultType="cMap">
	<![CDATA[
		SELECT NVL(MAX(TO_NUMBER(MEET_ROOM_NO)),0) AS MAX_SEQ
		  FROM TBEN894
		 WHERE ENTER_CD = #{ssnEnterCd}
	]]>
	</select>
	
</mapper>