<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="org.competency.competencySchemeMgr">
<!-- 		역량분류표 조회 -->
		<select parameterType="map" resultType="cMap" id="getCompetencySchemeMgrList">

				<![CDATA[
						SELECT '0' AS DETAIL,
								0 AS "_level",
					     	    0 AS PRIOR_COMPETENCY_CD,
							    0 AS COMPETENCY_CD,
						        '' AS SDATE,
						        '' AS EDATE,
						        '역량분류표' AS COMPETENCY_NM,
						        '' AS MAIN_APP_TYPE,
						        '' AS COMPETENCY_TYPE,
						        '' AS MEMO,
						        '' AS GMEASURE_CD,
						       	'' AS GMEASURE_NM,
						        0 AS SEQ,
						        '' AS MEASURE_TYPE
						  FROM DUAL
						UNION ALL
						SELECT *
						  FROM (
								SELECT '0' AS DETAIL,
									   LEVEL AS "_level",
									   A.PRIOR_COMPETENCY_CD,
									   A.COMPETENCY_CD,
								       B.SDATE,
								       B.EDATE,
								       B.COMPETENCY_NM,
								       B.MAIN_APP_TYPE,
								       A.COMPETENCY_TYPE,
								       B.MEMO,
								       B.GMEASURE_CD,
						       		   C.GMEASURE_NM,
								       A.SEQ,
								       B.MEASURE_TYPE
								 FROM  TORG055 A, TORG051 B, TSYS021 C
								WHERE A.ENTER_CD = B.ENTER_CD
								  AND A.COMPETENCY_CD = B.COMPETENCY_CD
								  AND B.ENTER_CD = C.ENTER_CD(+)
						  		  AND B.GMEASURE_CD = C.GMEASURE_CD(+)
								  AND A.ENTER_CD = TRIM(#{ssnEnterCd})
								          ]]>
							<if test='searchSdate != null and !searchSdate.equals("")'>
								  AND REPLACE(TRIM(#{searchSdate}),'-','') BETWEEN B.SDATE AND NVL(B.EDATE, '99991231')
							</if>
								 START WITH A.PRIOR_COMPETENCY_CD = '0'
								 CONNECT BY PRIOR A.ENTER_CD = A.ENTER_CD
								    AND PRIOR A.COMPETENCY_CD = A.PRIOR_COMPETENCY_CD
								 ORDER SIBLINGS BY A.PRIOR_COMPETENCY_CD, A.SEQ
								 )


		</select>

<!-- 		역량분류표 저장 -->
		<update parameterType="map" id="saveCompetencySchemeMgr">

					MERGE INTO TORG055 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.COMPETENCY_CD
									, A.PRIOR_COMPETENCY_CD
									, A.COMPETENCY_NM
									, A.COMPETENCY_TYPE
									, A.MEMO
									, A.SEQ
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS COMPETENCY_CD
											, NULL		AS PRIOR_COMPETENCY_CD
											, NULL		AS COMPETENCY_NM
											, NULL		AS COMPETENCY_TYPE
											, NULL		AS MEMO
											, NULL		AS SEQ
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											  TRIM( #{ssnEnterCd} )	AS ENTER_CD
											, TRIM( #{rm.competencyCd} )	AS COMPETENCY_CD
											, TRIM( #{rm.priorCompetencyCd} )	AS PRIOR_COMPETENCY_CD
											, TRIM( #{rm.competencyNm} )	AS COMPETENCY_NM
											, TRIM( #{rm.competencyType} ) AS COMPETENCY_TYPE
											, TRIM( #{rm.memo} ) AS MEMO
											, TRIM( #{rm.seq} ) AS SEQ
											FROM   DUAL
</foreach>
									) A WHERE A.COMPETENCY_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD = S.ENTER_CD AND T.COMPETENCY_CD = S.COMPETENCY_CD AND T.PRIOR_COMPETENCY_CD = S.PRIOR_COMPETENCY_CD )
					WHEN MATCHED THEN
						UPDATE SET	  T.COMPETENCY_NM	= S.COMPETENCY_NM
									, T.COMPETENCY_TYPE = S.COMPETENCY_TYPE
									, T.MEMO = S.MEMO
									, T.SEQ = S.SEQ
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
						      T.ENTER_CD
							, T.COMPETENCY_CD
							, T.PRIOR_COMPETENCY_CD
							, T.COMPETENCY_NM
							, T.COMPETENCY_TYPE
							, T.MEMO
							, T.SEQ
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.COMPETENCY_CD
							, S.PRIOR_COMPETENCY_CD
							, S.COMPETENCY_NM
							, S.COMPETENCY_TYPE
							, S.MEMO
							, S.SEQ
							, SYSDATE
							, #{ssnSabun}
						)
		</update>
<!-- 		역량분류표 삭제 -->
		<delete parameterType="map" id="deleteCompetencySchemeMgr">

					DELETE FROM TORG055
					WHERE ENTER_CD = #{ssnEnterCd}
					  AND ENTER_CD||'_'||COMPETENCY_CD||'_'||PRIOR_COMPETENCY_CD IN 	(  NULL
<foreach item="rm" collection="deleteRows" >
						,
										<if test='rm.competencyCd != null and !rm.competencyCd.equals("")'>
											TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.competencyCd})||'_'||TRIM(#{rm.priorCompetencyCd})
										</if>
</foreach>
										)
		</delete>


</mapper>