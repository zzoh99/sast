<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="org.job.orgKnowledgeReg">
	
		<!-- 직무콤보 조회 -->
		<select parameterType="map" resultType="cMap" id="getJobCdList2">

				<![CDATA[
					SELECT A.CODE
					     , MAX(A.CODE_NM) AS CODE_NM
					  FROM (
					            SELECT B.JOB_CD AS CODE, 
					                   C.JOB_NM AS CODE_NM
					            FROM THRM171 A, 
					                 THRM173 B, 
					                 TORG201 C
					            WHERE A.ENTER_CD = B.ENTER_CD
					              AND A.APPL_SEQ = B.APPL_SEQ
					              AND B.ENTER_CD = C.ENTER_CD
					              AND B.JOB_CD = C.JOB_CD
					              AND A.ENTER_CD = TRIM(#{ssnEnterCd})
					              AND A.ORG_CD = #{orgCd}
					              AND A.APPL_YN = 'Y'
					  ) A
					GROUP BY A.CODE
				]]>


		</select>
		
		<!-- 조직의지식등록 조회 -->
		<select parameterType="map" resultType="cMap" id="getOrgKnowledgeRegList">

				<![CDATA[
					SELECT A.ENTER_CD
                         , A.JOB_CD
                         , A.ORG_CD
                         , A.SEQ
                         , A.KNOWLEDGE
                         , A.DOC_INFO
                         , A.STORAGE_TYPE
                         , A.ACCESS_AUTH_ALL
                         , A.ACCESS_AUTH_COMP
                         , A.ACCESS_AUTH_HQ
                         , A.ACCESS_AUTH_TEAM
                         , A.ACCESS_AUTH_RELATE
                         , A.ACCESS_AUTH_CHARGE
                         , A.INFO_PLAN
                         , A.FILE_SEQ
                         , A.SDATE
                         , A.UDATE
                         , A.EDATE
					     , CASE WHEN A.FILE_SEQ IS NULL THEN '<a class=sbasic>첨부</a>'
                            ELSE '<a class=sbasic>다운로드</a>' END AS BTN_FILE
					]]>
                      FROM TORG217 A
                     WHERE 1=1
                       AND A.ENTER_CD = TRIM(#{ssnEnterCd})
					   AND A.ORG_CD = #{orgCd}
				   <if test='searchApplYmd != null and !searchApplYmd.equals("")'>
                       AND REPLACE(#{searchApplYmd},'-') BETWEEN A.SDATE AND NVL(A.EDATE, '99991231')
				   </if>
				   <if test='jobCd != null and !jobCd.equals("")'>
                       AND REGEXP_LIKE (A.JOB_CD, REPLACE(#{jobCd},',','|'))
				   </if>
                   ORDER BY A.JOB_CD, NVL(A.UDATE, A.SDATE) DESC


		</select>
		
		<!-- 조직의지식등록 저장 -->
		<update parameterType="map" id="saveOrgKnowledgeReg">

			 MERGE INTO TORG217 T 	
			 USING 	
			( 	
	<bind name="icnt" value="1" />
	<foreach item="rm" collection="mergeRows" separator=" UNION ALL " >
			       SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD
	<choose><when test=' rm.seq != null and !rm.seq.equals("") '>
	               , TRIM(#{rm.seq})  AS SEQ
	</when><otherwise>
	       		   , TO_CHAR( (
							SELECT (NVL(MAX(TO_NUMBER(SEQ)),0) + ${icnt})
							  FROM TORG217
							 WHERE ENTER_CD = TRIM( #{ssnEnterCd} )
							   AND ORG_CD = TRIM(#{rm.orgCd})
					) )	AS SEQ
	<bind name="icnt" value="icnt + 1" />
	</otherwise>
	</choose>
                        , TRIM(#{rm.jobCd}) AS JOB_CD
			            , TRIM(#{rm.orgCd}) AS ORG_CD
			            , TRIM(#{rm.knowledge}) AS KNOWLEDGE
			            , TRIM(#{rm.docInfo}) AS DOC_INFO
			            , TRIM(#{rm.storageType}) AS STORAGE_TYPE
			            , TRIM(#{rm.accessAuthAll}) AS ACCESS_AUTH_ALL
			            , TRIM(#{rm.accessAuthComp}) AS ACCESS_AUTH_COMP
			            , TRIM(#{rm.accessAuthHq}) AS ACCESS_AUTH_HQ
			            , TRIM(#{rm.accessAuthTeam}) AS ACCESS_AUTH_TEAM
			            , TRIM(#{rm.accessAuthRelate}) AS ACCESS_AUTH_RELATE
			            , TRIM(#{rm.accessAuthCharge}) AS ACCESS_AUTH_CHARGE
			            , TRIM(#{rm.infoPlan}) AS INFO_PLAN
			            , TRIM(#{rm.fileSeq}) AS FILE_SEQ
			            , REPLACE(TRIM(#{rm.sdate}),'-') AS SDATE
			            , TO_CHAR(sysdate,'YYYYMMDD') AS UDATE	
			            , REPLACE(TRIM(#{rm.edate}),'-') AS EDATE
			        FROM DUAL	
	</foreach>
			) S 	
			ON ( 	
			          T.ENTER_CD = S.ENTER_CD 	
                  AND T.JOB_CD = S.JOB_CD 	
                  AND T.KNOWLEDGE = S.KNOWLEDGE
                  AND T.ORG_CD = S.ORG_CD
                  AND T.SDATE = S.SDATE
			) 	
			WHEN MATCHED THEN
			   UPDATE SET T.CHKDATE	= sysdate
			            , T.CHKID = #{ssnSabun}
			            , T.DOC_INFO = S.DOC_INFO 	
			            , T.STORAGE_TYPE = S.STORAGE_TYPE 	
			            , T.ACCESS_AUTH_ALL = S.ACCESS_AUTH_ALL 	
			            , T.ACCESS_AUTH_COMP = S.ACCESS_AUTH_COMP 	
			            , T.ACCESS_AUTH_HQ = S.ACCESS_AUTH_HQ 	
			            , T.ACCESS_AUTH_TEAM = S.ACCESS_AUTH_TEAM 	
			            , T.ACCESS_AUTH_RELATE = S.ACCESS_AUTH_RELATE 	
			            , T.ACCESS_AUTH_CHARGE = S.ACCESS_AUTH_CHARGE 	
			            , T.INFO_PLAN = S.INFO_PLAN 	
			            , T.FILE_SEQ = S.FILE_SEQ
			            , T.UDATE = S.UDATE 	
			            , T.EDATE = S.EDATE 	
			WHEN NOT MATCHED THEN 	
			   INSERT 	
			   ( 	
			              T.ENTER_CD	
			            , T.JOB_CD	
			            , T.ORG_CD	
			            , T.SEQ	
			            , T.KNOWLEDGE	
			            , T.DOC_INFO	
			            , T.STORAGE_TYPE	
			            , T.ACCESS_AUTH_ALL	
			            , T.ACCESS_AUTH_COMP	
			            , T.ACCESS_AUTH_HQ	
			            , T.ACCESS_AUTH_TEAM	
			            , T.ACCESS_AUTH_RELATE	
			            , T.ACCESS_AUTH_CHARGE	
			            , T.INFO_PLAN	
			            , T.FILE_SEQ
			            , T.SDATE	
			            , T.UDATE
			            , T.CHKDATE	
			            , T.CHKID
			   ) 	
			   VALUES 	
			   ( 	
			              S.ENTER_CD	
			            , S.JOB_CD	
			            , S.ORG_CD	
			            , S.SEQ	
			            , S.KNOWLEDGE	
			            , S.DOC_INFO	
			            , S.STORAGE_TYPE	
			            , S.ACCESS_AUTH_ALL	
			            , S.ACCESS_AUTH_COMP	
			            , S.ACCESS_AUTH_HQ	
			            , S.ACCESS_AUTH_TEAM	
			            , S.ACCESS_AUTH_RELATE	
			            , S.ACCESS_AUTH_CHARGE	
			            , S.INFO_PLAN	
			            , S.FILE_SEQ
			            , S.SDATE	
			            , TO_CHAR(sysdate,'YYYYMMDD')	
			            , sysdate	
			            , #{ssnSabun}
			   ) 	
		</update>
		
		<!-- 조직의지식등록 삭제 -->
		<delete parameterType="map" id="deleteOrgKnowledgeReg">

					DELETE 
                      FROM TORG217
					 WHERE ENTER_CD = #{ssnEnterCd}
					   AND (ORG_CD, SEQ)	IN (  (NULL, NULL)
<foreach item="rm" collection="deleteRows" >
						,
                        <if test='rm.seq != null and !rm.seq.equals("")'>
                            (TRIM(#{rm.orgCd}), TRIM(#{rm.seq}))
						</if>
</foreach>
                        )
		</delete>
		

</mapper>