<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="tim.request.bizTripExpenStd">
<!-- 출장비기준관리 - 유류비 조회 -->
		<select parameterType="map" resultType="cMap" id="getBizTripExpenStdOilList">

				<![CDATA[
					SELECT A.ENTER_CD
					     , A.GUBUN_CD
					     , A.SDATE
					     , A.EDATE
					     , A.UNIT_PRICE
					     , A.LMT_DIST_DRIV
					     , A.NOTE
					  FROM TTIM856 A 
                     WHERE A.ENTER_CD =	#{ssnEnterCd}
                               ]]>
<if test='searchYmd != null and !searchYmd.equals("")'>
				       AND REPLACE(TRIM(#{searchYmd}),'-','') BETWEEN A.SDATE AND NVL(A.EDATE, '99991231')
</if>
				     ORDER BY F_COM_GET_GRCODE_SEQ( A.ENTER_CD, 'T85200', A.GUBUN_CD)
					        , A.SDATE DESC

		</select>


<!-- 출장비기준관리 - 환율 조회 -->
		<select parameterType="map" resultType="cMap" id="getBizTripExpenStdExcList">

				<![CDATA[
					SELECT A.ENTER_CD
					     , A.GUBUN_CD
					     , A.SDATE
					     , A.EDATE
					     , A.EXCHG_RATE
					     , A.NOTE
					  FROM TTIM857 A 
                     WHERE A.ENTER_CD =	#{ssnEnterCd}
                               ]]>
<if test='searchYmd != null and !searchYmd.equals("")'>
				       AND REPLACE(TRIM(#{searchYmd}),'-','') BETWEEN A.SDATE AND NVL(A.EDATE, '99991231')
</if>
				     ORDER BY F_COM_GET_GRCODE_SEQ( A.ENTER_CD, 'S10030', A.GUBUN_CD)
					        , A.SDATE DESC

		</select>
		
<!-- 출장비기준관리 - 출장비여비 조회 -->
		<select parameterType="map" resultType="cMap" id="getBizTripExpenStdLmtList">

				<![CDATA[
					SELECT A.ENTER_CD
					     , A.BIZ_CD
					     , A.GUBUN_CD
					     , A.SEQ
					     , A.SDATE
					     , A.EDATE
					     , A.ORDER_SEQ
					     , A.JIKGUB_CD
					     , A.JIKGUB_NM
					     , A.JIKCHAK_CD
					     , A.JIKCHAK_NM
					     , A.JIKWEE_CD
					     , A.JIKWEE_NM
					     , A.CURRENCY_CD
					     , A.LMT_PAY_MON
					     , A.NOTE
					  FROM TTIM858 A 
                     WHERE A.ENTER_CD =	#{ssnEnterCd}
                               ]]>
<if test='searchYmd != null and !searchYmd.equals("")'>
				       AND REPLACE(TRIM(#{searchYmd}),'-','') BETWEEN A.SDATE AND NVL(A.EDATE, '99991231')
</if>
				     ORDER BY F_COM_GET_GRCODE_SEQ( A.ENTER_CD, 'T00862', A.BIZ_CD)
					        , F_COM_GET_GRCODE_SEQ( A.ENTER_CD, 'T85101', A.GUBUN_CD)
					        , A.ORDER_SEQ
					        , A.SDATE DESC


		</select>
		
		
<!-- 출장비기준관리 - 유류비 저장 -->
		<update parameterType="map" id="saveBizTripExpenStdOil">

				 MERGE INTO TTIM856 T 
				 USING 
				( 
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" separator=" UNION ALL ">
				       SELECT TRIM(#{ssnEnterCd}) 		AS ENTER_CD
				            , TRIM(#{rm.gubunCd}) 		AS GUBUN_CD
				            , TRIM(#{rm.sdate}) 		AS SDATE
				            , TRIM(#{rm.edate}) 		AS EDATE
				            , TRIM(#{rm.unitPrice}) 	AS UNIT_PRICE
				            , TRIM(#{rm.lmtDistDriv}) 	AS LMT_DIST_DRIV
				            , TRIM(#{rm.note}) 			AS NOTE
				        FROM DUAL
</foreach>
				) S 
				ON ( 
				          T.ENTER_CD 	= S.ENTER_CD 
				     AND  T.GUBUN_CD 	= S.GUBUN_CD 
				     AND  T.SDATE 		= S.SDATE 
				) 
				WHEN MATCHED THEN 
				   UPDATE SET T.CHKDATE			= sysdate 
				            , T.CHKID	    	= #{ssnSabun}
				            , T.EDATE 			= S.EDATE 
				            , T.UNIT_PRICE 		= S.UNIT_PRICE 
				            , T.LMT_DIST_DRIV 	= S.LMT_DIST_DRIV 
				            , T.NOTE 			= S.NOTE 
				WHEN NOT MATCHED THEN 
				   INSERT 
				   ( 
				              T.ENTER_CD
				            , T.GUBUN_CD
				            , T.SDATE
				            , T.EDATE
				            , T.UNIT_PRICE
				            , T.LMT_DIST_DRIV
				            , T.NOTE
				            , T.CHKDATE
				            , T.CHKID
				   ) 
				   VALUES 
				   ( 
				              S.ENTER_CD
				            , S.GUBUN_CD
				            , S.SDATE
				            , S.EDATE
				            , S.UNIT_PRICE
				            , S.LMT_DIST_DRIV
				            , S.NOTE
				            , sysdate
				            , #{ssnSabun}
				   ) 

		</update>

<!-- 출장비기준관리 - 환율 저장 -->
		<update parameterType="map" id="saveBizTripExpenStdExc">

				 MERGE INTO TTIM857 T 
				 USING 
				( 
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" separator=" UNION ALL ">
				       SELECT TRIM(#{ssnEnterCd}) 		AS ENTER_CD
				            , TRIM(#{rm.gubunCd}) 		AS GUBUN_CD
				            , TRIM(#{rm.sdate}) 		AS SDATE
				            , TRIM(#{rm.edate}) 		AS EDATE
				            , TRIM(#{rm.exchgRate}) 	AS EXCHG_RATE
				            , TRIM(#{rm.note}) 			AS NOTE
				        FROM DUAL
</foreach>
				) S 
				ON ( 
				          T.ENTER_CD 	= S.ENTER_CD 
				     AND  T.GUBUN_CD 	= S.GUBUN_CD 
				     AND  T.SDATE 		= S.SDATE 
				) 
				WHEN MATCHED THEN 
				   UPDATE SET T.CHKDATE		= sysdate 
				            , T.CHKID	    = #{ssnSabun}
				            , T.EDATE 		= S.EDATE 
				            , T.EXCHG_RATE 	= S.EXCHG_RATE 
				            , T.NOTE 		= S.NOTE 
				WHEN NOT MATCHED THEN 
				   INSERT 
				   ( 
				              T.ENTER_CD
				            , T.GUBUN_CD
				            , T.SDATE
				            , T.EDATE
				            , T.EXCHG_RATE
				            , T.NOTE
				            , T.CHKDATE
				            , T.CHKID
				   ) 
				   VALUES 
				   ( 
				              S.ENTER_CD
				            , S.GUBUN_CD
				            , S.SDATE
				            , S.EDATE
				            , S.EXCHG_RATE
				            , S.NOTE
				            , sysdate
				            , #{ssnSabun}
				   ) 


		</update>

<!-- 출장비기준관리 - 출장비여비 저장 저장  -->
		<update parameterType="map" id="saveBizTripExpenStdLmt">

				 MERGE INTO TTIM858 T 
				 USING 
				( 
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" separator=" UNION ALL " >
				       SELECT TRIM(#{ssnEnterCd}) 		AS ENTER_CD
				            , TRIM(#{rm.bizCd}) 		AS BIZ_CD
				            , TRIM(#{rm.gubunCd}) 		AS GUBUN_CD

	<choose><when test='rm.seq != null and !rm.seq.equals("") '>
               				, TRIM(#{rm.seq})  AS SEQ
	</when><otherwise>
               				, TO_CHAR( (SELECT (NVL(MAX(SEQ),0) + ${icnt}) FROM TTIM858 WHERE ENTER_CD = #{ssnEnterCd} AND BIZ_CD = TRIM(#{rm.bizCd})  AND GUBUN_CD = TRIM(#{rm.gubunCd})))  AS SEQ
	<bind name="icnt" value="icnt + 1" />
	</otherwise>
	</choose>
				            
				            , TRIM(#{rm.sdate}) 		AS SDATE
				            , TRIM(#{rm.edate}) 		AS EDATE
				            , TRIM(#{rm.orderSeq}) 		AS ORDER_SEQ
				            , TRIM(#{rm.jikchakCd}) 	AS JIKCHAK_CD
				            , TRIM(#{rm.jikchakNm}) 	AS JIKCHAK_NM
				            , TRIM(#{rm.jikweeCd}) 		AS JIKWEE_CD
				            , TRIM(#{rm.jikweeNm}) 		AS JIKWEE_NM
				            , TRIM(#{rm.jikgubCd}) 		AS JIKGUB_CD
				            , TRIM(#{rm.jikgubNm}) 		AS JIKGUB_NM
				            , TRIM(#{rm.currencyCd}) 	AS CURRENCY_CD
				            , TRIM(#{rm.lmtPayMon}) 	AS LMT_PAY_MON
				            , TRIM(#{rm.note}) 		AS NOTE
				        FROM DUAL
</foreach>
				) S 
				ON ( 
				          T.ENTER_CD 	= S.ENTER_CD 
				     AND  T.BIZ_CD 		= S.BIZ_CD 
				     AND  T.GUBUN_CD 	= S.GUBUN_CD 
				     AND  T.SEQ 		= S.SEQ 
				     AND  T.SDATE 		= S.SDATE 
				) 
				WHEN MATCHED THEN 
				   UPDATE SET T.CHKDATE		= sysdate 
				            , T.CHKID	    = #{ssnSabun}
				            , T.ORDER_SEQ 	= S.ORDER_SEQ 
				            , T.EDATE   	= S.EDATE 
				            , T.JIKCHAK_CD 	= S.JIKCHAK_CD 
				            , T.JIKCHAK_NM 	= S.JIKCHAK_NM 
				            , T.JIKWEE_CD 	= S.JIKWEE_CD 
				            , T.JIKWEE_NM 	= S.JIKWEE_NM 
				            , T.JIKGUB_CD 	= S.JIKGUB_CD 
				            , T.JIKGUB_NM 	= S.JIKGUB_NM 
				            , T.CURRENCY_CD = S.CURRENCY_CD 
				            , T.LMT_PAY_MON = S.LMT_PAY_MON 
				            , T.NOTE 		= S.NOTE 
				WHEN NOT MATCHED THEN 
				   INSERT 
				   ( 
				              T.ENTER_CD
				            , T.BIZ_CD
				            , T.GUBUN_CD
				            , T.SEQ
				            , T.SDATE
				            , T.EDATE
				            , T.ORDER_SEQ
				            , T.JIKCHAK_CD
				            , T.JIKCHAK_NM
				            , T.JIKWEE_CD
				            , T.JIKWEE_NM
				            , T.JIKGUB_CD
				            , T.JIKGUB_NM
				            , T.CURRENCY_CD
				            , T.LMT_PAY_MON
				            , T.NOTE
				            , T.CHKDATE
				            , T.CHKID
				   ) 
				   VALUES 
				   ( 
				              S.ENTER_CD
				            , S.BIZ_CD
				            , S.GUBUN_CD
				            , S.SEQ
				            , S.SDATE
				            , S.EDATE
				            , S.ORDER_SEQ
				            , S.JIKCHAK_CD
				            , S.JIKCHAK_NM
				            , S.JIKWEE_CD
				            , S.JIKWEE_NM
				            , S.JIKGUB_CD
				            , S.JIKGUB_NM
				            , S.CURRENCY_CD
				            , S.LMT_PAY_MON
				            , S.NOTE
				            , sysdate
				            , #{ssnSabun}
				   ) 

		</update>


<!-- 출장비기준관리 - 유류비 삭제 -->				
		<delete parameterType="map" id="deleteBizTripExpenStdOil">

					DELETE FROM TTIM856
					 WHERE ENTER_CD = TRIM(#{ssnEnterCd})
					   AND ( GUBUN_CD,SDATE ) IN ( ( NULL,NULL) 
<foreach item="rm" collection="deleteRows" >
    <if test='rm.gubunCd != null and !rm.gubunCd.equals("") and rm.sdate != null and !rm.sdate.equals("") '>
					     , ( TRIM( #{rm.gubunCd} ),TRIM( #{rm.sdate} ) )
	</if>
</foreach>
					       )

		</delete>
				       

<!-- 출장비기준관리 - 유류비 삭제 -->				
		<delete parameterType="map" id="deleteBizTripExpenStdExc">

				DELETE FROM TTIM857
				 WHERE ENTER_CD = TRIM(#{ssnEnterCd})
				   AND ( GUBUN_CD,SDATE ) IN ( ( NULL,NULL) 
<foreach item="rm" collection="deleteRows" >
    <if test='rm.gubunCd != null and !rm.gubunCd.equals("") and rm.sdate != null and !rm.sdate.equals("") '>
				     , ( TRIM( #{rm.gubunCd} ),TRIM( #{rm.sdate} ) )
	</if>
</foreach>
				       )
		</delete>
		
		

<!-- 출장비기준관리 - 출장비여비 삭제 -->				
		<delete parameterType="map" id="deleteBizTripExpenStdLmt">

				DELETE FROM TTIM858
				 WHERE ENTER_CD = TRIM(#{ssnEnterCd})
				   AND ( BIZ_CD,GUBUN_CD,SEQ ) IN ( ( NULL,NULL,NULL) 
<foreach item="rm" collection="deleteRows" >
    <if test='rm.bizCd != null and !rm.bizCd.equals("") and rm.gubunCd != null and !rm.gubunCd.equals("") and rm.seq != null and !rm.seq.equals("") '>
				     , ( TRIM( #{rm.bizCd} ),TRIM( #{rm.gubunCd} ),TRIM( #{rm.seq} ) )
	</if>
</foreach>

				       )

		</delete>
		

</mapper>