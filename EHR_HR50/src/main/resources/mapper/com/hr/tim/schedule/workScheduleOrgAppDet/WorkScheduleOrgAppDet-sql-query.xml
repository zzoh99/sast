<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="tim.schedule.workScheduleOrgAppDet">
	
<!-- 대상부서 조회  -->
		<select parameterType="map" resultType="cMap" id="getWorkScheduleOrgAppDetOrgList">

				<![CDATA[
					SELECT A.ORG_CD AS CODE
					     , F_COM_GET_ORG_NM(A.ENTER_CD, A.ORG_CD, A.SDATE ) || DECODE(ORG_AUTH, 0,'(개인)','') AS CODE_NM
					     , ORG_AUTH
					  FROM TORG105 A 
					     , (
					         -- ORG_AUTH( 0:개인신청, 1:부서신청)   중복 시 부서 권한을 줌. 
					     	 SELECT ORG_CD, ORG_AUTH
					     	   FROM (
							         SELECT ORG_CD, 0 AS ORG_AUTH
							           FROM THRM151
							          WHERE ENTER_CD =  #{ssnEnterCd}
							            AND SABUN    = #{searchApplSabun}
							            AND REPLACE( #{searchYmd} ,'-','') BETWEEN SDATE AND NVL(EDATE, '29991231')
							          UNION 
							  		 SELECT ORG_CD, 1 AS ORG_AUTH 
							           FROM TTIM117  --조직별 근무담당자
							          WHERE ENTER_CD = #{ssnEnterCd}
							            AND SABUN    = #{searchApplSabun}
							            AND REPLACE( #{searchYmd} ,'-','') BETWEEN SDATE AND NVL(EDATE, '29991231')
							          UNION 
							  		 SELECT ORG_CD, 1 AS ORG_AUTH 
							           FROM TORG111  --조직장
							          WHERE ENTER_CD = #{ssnEnterCd}
							            AND SABUN    = #{searchApplSabun}
							            AND REPLACE( #{searchYmd} ,'-','') BETWEEN SDATE AND NVL(EDATE, '29991231')
							          UNION 
							         SELECT ORG_CD, 1 AS ORG_AUTH
									   FROM THRM151
								   	  WHERE ENTER_CD = #{ssnEnterCd}
							            AND SABUN    = #{searchApplSabun}
										AND JIKCHAK_CD = 'F320' -- 반장
										AND REPLACE( #{searchYmd} ,'-','')  BETWEEN SDATE AND NVL(EDATE, '99991231')
								   )
							  GROUP BY ORG_CD, ORG_AUTH	   		  
						   ) B
					  WHERE A.ENTER_CD = #{ssnEnterCd}
					    AND A.SDATE    = ( SELECT MAX(SDATE) 
					                         FROM TORG103 
					                        WHERE ENTER_CD = #{ssnEnterCd}
					                          AND REPLACE( #{searchYmd} ,'-','') BETWEEN SDATE AND NVL(EDATE, '29991231') )
					    AND A.ORG_CD   = B.ORG_CD
					  ORDER BY B.ORG_AUTH, A.ORDER_SEQ 
				]]>


		</select>
		
<!--  근무한도 조회 -->
		<select parameterType="map" resultType="cMap" id="getWorkScheduleOrgAppDetLimit">

				<![CDATA[
					SELECT A.SUM_DAY_WK_LMT
					     , A.SUM_DAY_OT_LMT
					     , A.SUM_WEEK_WK_LMT
					     , A.SUM_WEEK_OT_LMT
					     , A.AVG_DAY_WK_LMT
					     , A.AVG_DAY_OT_LMT
					     , A.AVG_WEEK_WK_LMT
					     , A.AVG_WEEK_OT_LMT
					     , A.GUBUN

						 -- 주 근무시간 합계  FLOOR(A.INTERVAL_CD/7) 
						 , CASE WHEN A.WORK_GRP_CD = 'A1' THEN NULL    -- 선택근무제는 잔여시간을 알수가 없음.
						        WHEN GUBUN = 'W' AND NVL(A.SUM_WEEK_WK_LMT,0) > 0 THEN A.SUM_WEEK_WK_LMT
						        WHEN GUBUN = 'W' AND NVL(A.AVG_WEEK_WK_LMT,0) > 0 THEN A.AVG_WEEK_WK_LMT
						        ELSE NULL -- 월단위 일때는 근무일수 * AVG_DAY_WK_LMT 구해야 하므로 별도 처리
						        END AS WEEK_WORK_TOTAL
						       
						 -- 단위기간 근무시간 합계
						 , CASE WHEN A.WORK_GRP_CD = 'A1' THEN NULL    -- 선택근무제는 잔여시간을 알수가 없음.
						        WHEN GUBUN = 'W' AND NVL(A.AVG_WEEK_WK_LMT,0) > 0 THEN A.AVG_WEEK_WK_LMT * FLOOR(A.INTERVAL_CD/7)  
						        WHEN GUBUN = 'W' AND NVL(A.SUM_WEEK_WK_LMT,0) > 0 THEN A.SUM_WEEK_WK_LMT * FLOOR(A.INTERVAL_CD/7)  
						        ELSE NULL -- 월단위 일때는 근무일수 * AVG_WEEK_WK_LMT 구해야 하므로 별도 처리
						        END AS UNIT_WORK_TOTAL					     
					 FROM (    
							SELECT A.WORK_GRP_CD
							     , A.SUM_DAY_WK_LMT
							     , A.SUM_DAY_OT_LMT
							     , A.SUM_WEEK_WK_LMT
							     , A.SUM_WEEK_OT_LMT
							     , A.AVG_DAY_WK_LMT
							     , A.AVG_DAY_OT_LMT
							     , A.AVG_WEEK_WK_LMT
							     , A.AVG_WEEK_OT_LMT
							     , TO_NUMBER(A.INTERVAL_CD) AS INTERVAL_CD
		                         , DECODE( MOD(A.INTERVAL_CD, 7), 0, 'W', 'M') AS GUBUN
							  FROM TTIM115 A
							 WHERE A.ENTER_CD 		= #{ssnEnterCd}
							   AND A.WORK_GRP_CD    = #{workGrpCd}
						  )	A   
				]]>


		</select>

	
<!--  근무조 조회 -->
		<select parameterType="map" resultType="cMap" id="getWorkScheduleOrgAppDetWorkOrg">

				<![CDATA[
					SELECT A.WORK_ORG_CD AS CODE
					     , B.MAP_NM      AS CODE_NM
					     , A.WORK_ORG_CD 
					     , A.WORK_GRP_CD
					     , B.MAP_NM AS WORK_ORG_NM
					     , C.INTERVAL_CD
					     , F_COM_GET_GRCODE_NOTE_VAL( C.ENTER_CD, 'T90200', C.INTERVAL_CD, 1 ) AS DAY_GRCODE_CD  --신청단위
					     , F_COM_GET_GRCODE_NOTE_VAL( C.ENTER_CD, 'T90200', C.INTERVAL_CD, 2 ) AS TERM_GUBUN     --월단위/주단위
					     , A.SABUN -- 조직대표자 사번
					     
					  FROM (
		                       SELECT B.ENTER_CD, B.WORK_ORG_CD, B.WORK_GRP_CD, MAX(A.SABUN) KEEP(DENSE_RANK FIRST ORDER BY A.SDATE ) AS SABUN  -- 해당부서에 가장 오래 있었던 사람으로 가져와야함.(중도입사자 등)
		                         FROM THRM151 A, TTIM120_V B
		                        WHERE A.ENTER_CD = #{ssnEnterCd}
		                          AND A.ORG_CD   = TRIM(#{searchOrgCd})
		                          AND REPLACE(TRIM( #{searchYmd} ), '-', '') BETWEEN A.SDATE AND NVL(A.EDATE, '99991231')
		                          AND A.ENTER_CD = B.ENTER_CD
		                          AND A.SABUN    = B.SABUN
		                                  ]]>
<if test='searchOrgAuth != null and searchOrgAuth == "0"'>
                                  AND A.SABUN    = TRIM( #{searchSabun} )
</if>
                                  AND A.STATUS_CD = 'AA'
		                          AND B.YMD      = REPLACE(TRIM( #{searchYmd} ), '-', '')
		                        GROUP BY B.ENTER_CD, B.WORK_ORG_CD, B.WORK_GRP_CD   					  
					       ) A
					     , TORG109 B, TTIM115 C
					 WHERE A.ENTER_CD    = B.ENTER_CD
					   AND A.WORK_ORG_CD = B.MAP_CD
					   AND B.MAP_TYPE_CD = '500'
					   AND A.ENTER_CD    = C.ENTER_CD
					   AND A.WORK_GRP_CD = C.WORK_GRP_CD
					 ORDER BY B.MAP_NM

		</select>
		
<!-- 		조회 (메인)-->
		<select parameterType="map" resultType="cMap" id="getWorkScheduleOrgAppDet">

				<![CDATA[
					SELECT A.ENTER_CD
						 , A.APPL_SEQ
						 , A.SABUN
						 
						 , A.ORG_CD 
                         , F_COM_GET_ORG_NM(A.ENTER_CD, A.ORG_CD, TRIM(#{searchApplYmd})) || DECODE(A.ORG_AUTH, 0,'(개인)','')  AS ORG_NM
						 , A.WORK_GRP_CD
						 , A.WORK_ORG_CD
						 , (SELECT MAP_NM
						      FROM TORG109 X
						     WHERE X.ENTER_CD = A.ENTER_CD
						       AND X.MAP_TYPE_CD = '500'
						       AND X.MAP_CD      = A.WORK_ORG_CD
						       AND A.YMD BETWEEN X.SDATE AND NVL( X.EDATE, '29991231' ) ) AS WORK_ORG_NM
						 , A.INTERVAL_CD
					     , F_COM_GET_GRCODE_NOTE_VAL( A.ENTER_CD, 'T90200', A.INTERVAL_CD, 1 ) AS DAY_GRCODE_CD 
					     , F_COM_GET_GRCODE_NOTE_VAL( A.ENTER_CD, 'T90200', A.INTERVAL_CD, 2 ) AS TERM_GUBUN     --월단위/주단위
						 , A.DAY_GUBUN_CD
						 , A.YMD
						 , A.SDATE
						 , A.EDATE
					     , TO_CHAR(TO_DATE(A.SDATE,'YYYYMMDD'),'YYYY-MM-DD') || ' ~ ' || TO_CHAR(TO_DATE(A.EDATE,'YYYYMMDD'),'YYYY-MM-DD') AS WORK_TERM
						 , A.NOTE
						 , A.ORG_AUTH
						 
					  FROM TTIM811 A, TTIM118 C
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND A.APPL_SEQ = #{searchApplSeq}
					   AND A.ENTER_CD = C.ENTER_CD
					   AND A.WORK_ORG_CD = C.WORK_ORG_CD
					   AND A.YMD BETWEEN C.SDATE AND NVL( C.EDATE, '29991231' )
					   AND ROWNUM = 1
					   
				]]>


		</select>


<!-- 	근무스케쥴 헤더 조회 -->
		<select parameterType="map" resultType="cMap" id="getWorkScheduleOrgAppDetHeaderList">

				<![CDATA[
					SELECT TO_CHAR(TO_DATE(A.YMD, 'YYYYMMDD'), 'MM/DD') || ' (' || to_char(TO_DATE(A.YMD, 'YYYYMMDD'), 'dy') || ')' AS TITLE
					     , TO_CHAR(TO_DATE(A.YMD, 'YYYYMMDD'), 'MM/DD') AS MD
					     , CASE WHEN to_char(TO_DATE(A.YMD, 'YYYYMMDD') + 1, 'd') = F_COM_GET_STD_CD_VALUE(#{ssnEnterCd}, 'TIM_STD_START_WEEK') THEN 'Y'
					            WHEN A.YMD = TRIM(#{searchEYmd}) THEN 'Y'
					            ELSE 'N' END AS WEEK_YN
					     , '(' || to_char(TO_DATE(A.YMD, 'YYYYMMDD'), 'dy') || ')' AS WK
					     , 'td' || A.YMD AS SAVE_NAME
					     , CASE WHEN A.YMD <= TO_CHAR(SYSDATE, 'YYYYMMDD') THEN '0'
					            ELSE '1' END AS COL_EDIT 
					     , WORK_YN        -- 공휴일 포함 휴일여부  
					     , PLAN_WORK_YN   -- 스케쥴상의 휴일여부
					     , HOLIDAY_YN     -- 공휴일 여부 
                         , CASE WHEN TRIM(#{termGubun}) = 'M' AND A.YMD = TO_CHAR( ADD_MONTHS( TO_DATE(TRIM(#{searchSYmd}), 'YYYYMMDD')-1, TO_NUMBER(TRIM(#{intervalCd}))/30 ) , 'YYYYMMDD') THEN 'Y'
                                WHEN TRIM(#{termGubun}) = 'W' AND A.YMD = TO_CHAR( TO_DATE(TRIM(#{searchSYmd}), 'YYYYMMDD')+ TO_NUMBER(TRIM(#{intervalCd})) -1 , 'YYYYMMDD') THEN 'Y'
                                ELSE 'N' END AS TERM_YN
					  FROM TTIM120_V A
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND A.SABUN    = #{searchSabun}
					   AND A.YMD BETWEEN TRIM(#{searchSYmd}) AND TRIM(#{searchEYmd})
					 ORDER BY A.YMD 
				]]>


		</select>
		
<!-- 	근무스케쥴 조회 -->
		<select parameterType="map" resultType="cMap" id="getWorkScheduleOrgAppDetList">

				<![CDATA[
					WITH WORK_LIST AS (
										SELECT A.ENTER_CD
                                             , A.SABUN
                                             , 'td' || A.YMD AS YMD
                                             , JIKWEE_CD
										     , A.YMD AS SUN_DATE
											 , B.TIME_CD AS VAL
                                             , C.BF_TIME_CD 
                                             , C.AF_TIME_CD
                                             , B.RGB_COLOR AS BG_COLOR 
                                             , D.RGB_COLOR AS AF_BG_COLOR 
										  FROM (
                                                   SELECT B.*
                                                        , A.JIKWEE_CD
                                                     FROM THRM151 A, TTIM120_V B
                                                    WHERE A.ENTER_CD = TRIM( #{ssnEnterCd} )
                                                      AND A.ORG_CD   = TRIM( #{searchOrgCd} )
                                                              ]]>
<if test='searchOrgAuth != null and searchOrgAuth == "0"'>
                                                      AND A.SABUN    = TRIM( #{searchSabun} )
</if>
                                                      AND B.YMD BETWEEN A.SDATE AND NVL(A.EDATE, '99991231')
                                                      AND A.ENTER_CD = B.ENTER_CD
                                                      AND A.SABUN    = B.SABUN
                                                      AND A.STATUS_CD = 'AA'
<if test='searchWorkOrgCd != null and !searchWorkOrgCd.equals("")'>
                                                      AND B.WORK_ORG_CD = #{searchWorkOrgCd}
</if>
                                                      AND B.YMD BETWEEN TRIM(#{searchSYmd}) AND TRIM(#{searchEYmd})
                                               )  A
                                             , TTIM017 B, TTIM812 C, TTIM017 D
                                             
										 WHERE A.ENTER_CD             = B.ENTER_CD
										   AND A.TIME_CD              = B.TIME_CD
                                           AND A.ENTER_CD             = C.ENTER_CD(+)
                                           AND A.YMD                  = C.WORK_YMD(+)
                                           AND TRIM( #{searchApplSeq} ) = C.APPL_SEQ(+)
                                           AND A.SABUN                = C.SABUN(+)
                                           AND C.ENTER_CD             = D.ENTER_CD(+)
                                           AND C.AF_TIME_CD           = D.TIME_CD(+)
                                           
					)
					SELECT F_COM_GET_NAMES(ENTER_CD, SABUN) AS NAME
					     , F_COM_GET_GRCODE_NAME(ENTER_CD, 'H20030' , JIKWEE_CD) AS JIKWEE_NM
					     , A.*			
					  FROM (  
						     SELECT YMD, ENTER_CD, SABUN, JIKWEE_CD, NVL(AF_TIME_CD, VAL) AS VAL, NVL(AF_BG_COLOR, BG_COLOR) AS BG_COLOR
						       FROM WORK_LIST
					       ) PIVOT (  MAX(VAL), MAX(BG_COLOR) AS BACK_COLOR 
					                 FOR YMD IN (
<foreach item="tit" collection="titles" separator=" , " >
					        						'${tit.saveName}' AS ${tit.saveName}
</foreach>
												)
					                ) A
					ORDER BY F_COM_JIKJE_SORT(A.ENTER_CD, A.SABUN, TRIM(#{searchSYmd}))

</select>
		

<!-- 기 신청 건 체크   -->
		<select parameterType="map" resultType="cMap" id="getWorkScheduleOrgAppDetDupCnt">

				<![CDATA[
					SELECT COUNT(1) AS DUP_CNT
					     , LISTAGG(F_COM_GET_NAMES(A.ENTER_CD, A.SABUN)||'('||A.SABUN||')', ', ') WITHIN GROUP (ORDER BY A.SABUN) AS MSG
					  FROM TTIM811 A, THRI103 B
					 WHERE A.ENTER_CD     = #{ssnEnterCd}
					   AND A.APPL_SEQ    != #{searchApplSeq}
					   AND A.SABUN        IN ( NULL
					     ]]>
<foreach item="rm" collection="sabuns" >
									          , TRIM(#{rm.sabun})
</foreach>
					                         )
					   AND A.SDATE        = TRIM( #{searchSYmd} )
					   AND A.ENTER_CD     = B.ENTER_CD
					   AND A.APPL_SEQ     = B.APPL_SEQ
					   AND B.APPL_STATUS_CD IN ( '21', '31' )

		</select>
		
		
<!-- 근무스케쥴신청 세부내역 저장 -->		
		<update parameterType="map" id="saveWorkScheduleOrgAppDet">

						 MERGE INTO TTIM811 T 
						 USING 
						( 
							SELECT  #{ssnEnterCd} 					AS ENTER_CD
									, TRIM(#{searchApplSeq})     		AS APPL_SEQ
									, A.SABUN    				    AS SABUN
						            , TRIM(#{workGrpCd})  			AS WORK_GRP_CD
						            , TRIM(#{searchWorkOrgCd})  		AS WORK_ORG_CD
						            , TRIM(#{intervalCd})  			AS INTERVAL_CD
						            , TRIM(#{dayGubunCd})  			AS DAY_GUBUN_CD
						            , REPLACE(TRIM(#{searchYmd}), '-', '')  AS YMD
						            , TRIM( #{searchSYmd} )  			AS SDATE
						            , TRIM( #{searchEYmd} )  			AS EDATE
						            , TRIM(#{note})  					AS  NOTE
						            , TRIM(#{searchOrgCd})  			AS ORG_CD
						            , TRIM(#{searchOrgAuth})  		AS ORG_AUTH
						        FROM (
<foreach item="rm" collection="sabuns" separator=" UNION ALL " >
								       SELECT TRIM(#{rm.sabun}) AS  SABUN FROM DUAL
</foreach>
						             ) A
						) S 
						ON ( 
						          T.ENTER_CD = S.ENTER_CD 
						     AND  T.APPL_SEQ = S.APPL_SEQ 
						     AND  T.SABUN    = S.SABUN 
						) 
						WHEN MATCHED THEN 
						   UPDATE SET T.CHKDATE			= sysdate 
						            , T.CHKID			= #{ssnSabun}
						            , T.WORK_GRP_CD 	= S.WORK_GRP_CD
						            , T.WORK_ORG_CD 	= S.WORK_ORG_CD 
						            , T.INTERVAL_CD 	= S.INTERVAL_CD 
						            , T.DAY_GUBUN_CD 	= S.DAY_GUBUN_CD 
						            , T.YMD 			= S.YMD 
						            , T.SDATE 			= S.SDATE 
						            , T.EDATE 			= S.EDATE 
						            , T.NOTE 			= S.NOTE 
						            , T.ORG_CD 			= S.ORG_CD
						            , T.ORG_AUTH 		= S.ORG_AUTH
						WHEN NOT MATCHED THEN 
						   INSERT 
						   ( 
						              T.ENTER_CD
						            , T.APPL_SEQ
						            , T.SABUN
						            , T.WORK_GRP_CD
						            , T.WORK_ORG_CD
						            , T.INTERVAL_CD
						            , T.DAY_GUBUN_CD
						            , T.YMD
						            , T.SDATE
						            , T.EDATE
						            , T.NOTE
						            , T.ORG_CD
						            , T.ORG_AUTH
						            , T.CHKDATE
						            , T.CHKID
						   ) 
						   VALUES 
						   ( 
						              S.ENTER_CD
						            , S.APPL_SEQ
						            , S.SABUN
						            , S.WORK_GRP_CD
						            , S.WORK_ORG_CD
						            , S.INTERVAL_CD
						            , S.DAY_GUBUN_CD
						            , S.YMD
						            , S.SDATE
						            , S.EDATE
						            , S.NOTE
						            , S.ORG_CD
						            , S.ORG_AUTH
						            , sysdate
						            , #{ssnSabun}
						   ) 
		</update>
		
		
<!-- 근무스케쥴신청 상세 저장 -->		
		<update parameterType="map" id="saveWorkScheduleOrgAppDetList">

				<![CDATA[
						 MERGE INTO TTIM812 T 
						 USING 
						( 
						
							SELECT  #{ssnEnterCd} 					AS ENTER_CD
									, TRIM(#{searchApplSeq})     		AS APPL_SEQ
									, TRIM(#{workSabun})    			AS SABUN
						            , TRIM(#{workYmd})  				AS WORK_YMD
						            , TRIM(#{workOrgCd})  			AS WORK_ORG_CD
						            , TRIM(#{timeCd})  				AS AF_TIME_CD
						        FROM DUAL
						) S 
						ON ( 
						          T.ENTER_CD 	= S.ENTER_CD 
						     AND  T.APPL_SEQ 	= S.APPL_SEQ 
						     AND  T.SABUN 		= S.SABUN 
						     AND  T.WORK_YMD 	= S.WORK_YMD 
						) 

						WHEN MATCHED THEN 
						   UPDATE SET T.CHKDATE		= sysdate 
						            , T.CHKID		= #{ssnSabun}
						            , T.WORK_ORG_CD = S.WORK_ORG_CD 
						            , T.AF_TIME_CD 	= S.AF_TIME_CD
						WHEN NOT MATCHED THEN 
						   INSERT 
						   ( 
						              T.ENTER_CD
						            , T.APPL_SEQ
						            , T.SABUN
						            , T.WORK_YMD
						            , T.WORK_ORG_CD
						            , T.AF_TIME_CD
						            , T.CHKDATE
						            , T.CHKID
						   ) 
						   VALUES 
						   ( 
						              S.ENTER_CD
						            , S.APPL_SEQ
						            , S.SABUN
						            , S.WORK_YMD
						            , S.WORK_ORG_CD
						            , S.AF_TIME_CD
						            , sysdate
						            , #{ssnSabun}
						   ) 

				]]>

		</update>
		
<!-- 근무스케쥴신청 상세 삭제  -->
		<delete parameterType="map" id="deleteWorkScheduleOrgAppDetList">

				<![CDATA[
					DELETE FROM TTIM812
					 WHERE ENTER_CD = #{ssnEnterCd}
					   AND APPL_SEQ = TRIM( #{searchApplSeq} )
				]]>

		</delete>
		

</mapper>