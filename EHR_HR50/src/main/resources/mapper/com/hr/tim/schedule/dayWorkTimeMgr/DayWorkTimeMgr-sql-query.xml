<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="tim.schedule.dayWorkTimeMgr">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getDayWorkTimeMgrList">

				<![CDATA[
					SELECT ENTER_CD
						 , TIME_CD
						 , WORK_CD
						 , SHM
						 , EHM
						 , STD_MIN
						 , UNIT
						 , APPLY_YN
						 , SEQ
					FROM    TTIM018
					WHERE   ENTER_CD = #{ssnEnterCd}
					AND     TIME_CD  = TRIM( #{searchTimeCd} )
					ORDER BY SEQ
				]]>


		</select>


<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getDayWorkTimeMgrTempList">

				<![CDATA[
					SELECT ENTER_CD
						 , TIME_CD
						 , WORK_CD
						 , SHM
						 , EHM
						 , STD_MIN
						 , UNIT
						 , APPLY_YN
						 , SEQ
						 , 'I' AS S_STATUS
					FROM    TTIM018
					WHERE   ENTER_CD = #{ssnEnterCd}
					AND     TIME_CD  = TRIM( #{tempTimeCd} )
					ORDER BY SEQ
				]]>


		</select>

<!-- 	근무시간 콤보 조회 -->
		<select parameterType="map" resultType="cMap" id="getDayWorkTimeMgrTimeCombo">

				<![CDATA[
					SELECT TIME_CD AS CODE
						 , TIME_NM AS CODE_NM
					FROM    TTIM017
					WHERE   ENTER_CD = #{ssnEnterCd}
					ORDER BY SEQ
				]]>


		</select>
		
<!-- 근무종류별 시간 합산 조회 -->
		<select parameterType="map" resultType="cMap" id="getDayWorkTimeMgrTimeMap">

				<![CDATA[
					SELECT LISTAGG(NOTE2|| ' : '|| CASE WHEN SUM(TM) > 0 AND SUM(TM) < 1 THEN '0' || TO_CHAR(SUM(TM)) ELSE TO_CHAR(SUM(TM)) END, ', ') WITHIN GROUP (ORDER BY SEQ) AS INFO
					  FROM (
							SELECT C.CODE, C.NOTE2, C.SEQ
								 , ( CASE WHEN A.SHM > A.EHM THEN ROUND(((TO_DATE('20190102'||A.EHM, 'yyyymmddhh24mi') - TO_DATE('20190101'||A.SHM, 'yyyymmddhh24mi'))*24),1)
								             ELSE ROUND(((TO_DATE(A.EHM, 'hh24mi') - TO_DATE(A.SHM, 'hh24mi'))*24),1) END ) AS TM
							  FROM TTIM018 A, TTIM015 B, TSYS005 C
							 WHERE A.ENTER_CD  = #{ssnEnterCd}
							   AND A.TIME_CD   = TRIM( #{searchTimeCd} )
							   AND A.ENTER_CD  = B.ENTER_CD
							   AND A.WORK_CD   = B.WORK_CD
							   AND B.ENTER_CD  = C.ENTER_CD
							   AND C.GRCODE_CD = 'T10017'
							   AND B.DAY_TYPE  = C.CODE
						   )
				       GROUP BY NOTE2, SEQ
				]]>


		</select>


<!-- 		저장 -->
		<update parameterType="map" id="saveDayWorkTimeMgr">

					MERGE INTO TTIM018 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.TIME_CD
									, A.WORK_CD
									, A.SHM
									, A.EHM
									, A.STD_MIN
									, A.UNIT
									, A.APPLY_YN
									, A.SEQ
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS TIME_CD
											, NULL		AS WORK_CD
											, NULL		AS SHM
											, NULL		AS EHM
											, NULL		AS STD_MIN
											, NULL		AS UNIT
											, NULL		AS APPLY_YN
											, NULL		AS SEQ
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT    #{ssnEnterCd}             AS ENTER_CD
											, TRIM( #{searchTimeCd} )	  AS TIME_CD
											, TRIM( #{rm.workCd} )	  AS WORK_CD
											, TRIM( #{rm.shm})		  AS SHM
											, TRIM( #{rm.ehm})		  AS EHM
											, TRIM( #{rm.stdMin})    AS STD_MIN
											, TRIM( #{rm.unit})      AS UNIT
											, TRIM( #{rm.applyYn})   AS APPLY_YN
											, TRIM( #{rm.seq} )       AS SEQ
									FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
										AND   A.TIME_CD  IS NOT NULL
										AND   A.WORK_CD  IS NOT NULL
							) S
					ON ( T.ENTER_CD		= S.ENTER_CD
					AND  T.TIME_CD      = S.TIME_CD
					AND  T.WORK_CD      = S.WORK_CD
					AND  T.SEQ			= S.SEQ
					)
					WHEN MATCHED THEN
						UPDATE SET	  T.SHM			= S.SHM
									, T.EHM			= S.EHM
									, T.STD_MIN		= S.STD_MIN
									, T.UNIT		= S.UNIT
									, T.APPLY_YN	= S.APPLY_YN
									, T.CHKDATE		= SYSDATE
									, T.CHKID		= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.TIME_CD
							, T.WORK_CD
							, T.SHM
							, T.EHM
							, T.STD_MIN
							, T.UNIT
							, T.APPLY_YN
							, T.SEQ
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.TIME_CD
							, S.WORK_CD
							, S.SHM
							, S.EHM
							, S.STD_MIN
							, S.UNIT
							, S.APPLY_YN
							, S.SEQ
							, SYSDATE
							, #{ssnSabun}
						)
		</update>
<!-- 		삭제 -->
		<delete parameterType="map" id="deleteDayWorkTimeMgr">

					DELETE FROM TTIM018
					WHERE 	(ENTER_CD, TIME_CD, WORK_CD, SEQ) IN (  (NULL, NULL, NULL, NULL)
<foreach item="rm" collection="deleteRows" >
						, (	  #{ssnEnterCd}, TRIM( #{rm.timeCd} ), TRIM( #{rm.workCd} ), TRIM( #{rm.seq} ) )
</foreach>
										)
		</delete>

<!-- 		전체 삭제 -->
		<delete parameterType="map" id="deleteDayWorkTimeMgrAll">

				<![CDATA[
					DELETE FROM TTIM018
					 WHERE ENTER_CD	= #{ssnEnterCd}
					   AND TIME_CD  = TRIM( #{searchTimeCd} )
				]]>

		</delete>

</mapper>