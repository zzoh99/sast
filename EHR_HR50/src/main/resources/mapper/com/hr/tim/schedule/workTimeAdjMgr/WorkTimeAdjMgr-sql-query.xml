<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="tim.schedule.workTimeAdjMgr">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getWorkTimeAdjMgrList">

				<![CDATA[
				SELECT AA.ENTER_CD
			          , AA.SABUN
			          , AA.ALIAS
			          , AA.SDATE
			          , AA.EDATE
			          , AA.TIME_CD
			          , AA.REASON_CD
			          , AA.MEMO
			          , AA.ORG_NM
			          , AA.NAME
			          , AA.JIKWEE_NM
			          , AA.JIKCHAK_NM
			          , AA.JIKGUB_NM
			          , AA.MANAGE_NM
			          , AA.STATUS_NM
                      , AA.WORK_TYPE_NM
                      , AA.PAY_TYPE_NM
                      , AA.LOCATION_CD
				  FROM
			    	(
		                 SELECT Z.ENTER_CD
		                      , F_COM_GET_ORG_NM(B.ENTER_CD,B.ORG_CD, REPLACE( #{searchYmd},'-','')) AS ORG_NM
		                      , Z.SABUN
		                      , F_COM_GET_NAMES(B.ENTER_CD,Z.SABUN,'ALIAS') AS ALIAS
		                      , Z.SDATE
		                      , Z.EDATE
		                      , Z.TIME_CD
		                      , Z.REASON_CD
		                      , Z.MEMO
		                      , (SELECT F_COM_GET_NAMES(A.ENTER_CD, A.SABUN, #{ssnLocaleCd}) FROM DUAL) AS NAME
		                      , A.EMP_YMD
		                      , B.JIKWEE_NM
		                      , B.JIKCHAK_NM
		                      , B.JIKGUB_NM
		                      , B.MANAGE_NM
		                      , B.STATUS_NM
		                      , B.WORK_TYPE_NM
		                      , B.PAY_TYPE_NM
		                      , B.LOCATION_CD
		                  FROM  TTIM325 Z
		                      , THRM100 A
		                      , (SELECT *
		                           FROM THRM151
		                          WHERE ENTER_CD = TRIM( #{ssnEnterCd} )
		                            AND REPLACE( #{searchYmd},'-','') BETWEEN SDATE AND NVL(EDATE, '99991231')
		                         ) B
		                         ]]>
						<if test='searchBizPlaceCd != null and !searchBizPlaceCd.equals("")'>
		                      , BP_V E
						</if>
		                 WHERE Z.ENTER_CD = TRIM( #{ssnEnterCd} )
		                   AND REPLACE( #{searchYmd},'-','') BETWEEN NVL(Z.SDATE,' ') AND NVL(Z.EDATE, '99991231')
		                   AND Z.ENTER_CD = A.ENTER_CD
		                   AND Z.SABUN    = A.SABUN
		                   AND A.ENTER_CD = B.ENTER_CD
		                   AND A.SABUN    = B.SABUN
						<if test='searchBizPlaceCd != null and !searchBizPlaceCd.equals("")'>
                           AND A.ENTER_CD = E.ENTER_CD
                           AND A.SABUN    = E.SABUN
                           AND REPLACE(#{searchYmd},'-','') BETWEEN  E.SDATE AND NVL(E.EDATE, '99991231')
                           AND E.BUSINESS_PLACE_CD = #{searchBizPlaceCd}
						</if>
<if test=' searchLocationCd != null and !searchLocationCd.equals("")'>
						AND B.LOCATION_CD = #{searchLocationCd}
</if>
						<if test='searchReasonCd != null and !searchReasonCd.equals("")'>
						   AND Z.REASON_CD = #{searchReasonCd}
						</if>
						<if test='searchOrgCd != null and !searchOrgCd.equals("")'>
		                   AND B.ORG_CD IN (SELECT #{searchOrgCd}
                                              FROM DUAL

							<if test='searchOrgType and searchOrgType.equals("Y")'>
                              /*하위조직포함일때 Y , 아닐때 N */
                                              <![CDATA[
                                            UNION
                                            SELECT ORG_CD
                                              FROM TORG105
                                             WHERE ENTER_CD = TRIM( #{ssnEnterCd} )
                                               AND SDATE    = (SELECT MAX(SDATE) FROM TORG105 WHERE ENTER_CD = TRIM( #{ssnEnterCd} ) AND SDATE <= REPLACE( #{searchYmd},'-','') )
                                             START WITH PRIOR_ORG_CD   =  #{searchOrgCd}
                                             CONNECT BY PRIOR ENTER_CD = ENTER_CD
                                                    AND PRIOR SDATE    = SDATE
                                                    AND PRIOR ORG_CD   = PRIOR_ORG_CD
                                                      ]]>
							</if>
                                           )

						</if>
						<if test='searchSabun != null and !searchSabun.equals("")'>
						   AND (UPPER(A.SABUN) LIKE '%' || UPPER(TRIM(#{searchSabun})) || '%' OR UPPER((SELECT F_COM_GET_NAMES(A.ENTER_CD, A.SABUN, #{ssnLocaleCd}) FROM DUAL)) LIKE '%' || UPPER(TRIM(#{searchSabun})) || '%')
						</if>

					) AA
				 WHERE AA.ENTER_CD       = #{ssnEnterCd}

				 ORDER BY F_COM_JIKJE_SORT(AA.ENTER_CD, AA.SABUN, REPLACE( #{searchYmd},'-','') ), SDATE


		</select>



<!-- 		저장 -->
		<update parameterType="map" id="saveWorkTimeAdjMgr">

					MERGE INTO TTIM325 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.SABUN
									, A.SDATE
									, A.EDATE
									, A.TIME_CD
									, A.REASON_CD
									, A.MEMO
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS SABUN
											, NULL		AS SDATE
											, NULL      AS EDATE
											, NULL      AS TIME_CD
											, NULL      AS REASON_CD
											, NULL      AS MEMO
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT    #{ssnEnterCd}           		AS ENTER_CD
											, TRIM( #{rm.sabun} )			AS SABUN
											, TRIM( #{rm.sdate} )			AS SDATE
											, TRIM( #{rm.edate} )			AS EDATE
											, TRIM( #{rm.timeCd} )			AS TIME_CD
											, TRIM( #{rm.reasonCd} )		AS REASON_CD
											, TRIM( #{rm.memo} )			AS MEMO
									FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD		= S.ENTER_CD
					AND  T.SABUN        = S.SABUN
					AND  T.SDATE        = S.SDATE
					 )
					WHEN MATCHED THEN
						UPDATE SET	  T.EDATE     =  S.EDATE
									, T.TIME_CD   =  S.TIME_CD
									, T.REASON_CD =  S.REASON_CD
									, T.MEMO      =  S.MEMO
									, T.CHKDATE	  = SYSDATE
									, T.CHKID	  = #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.SABUN
							, T.SDATE
							, T.EDATE
							, T.TIME_CD
							, T.REASON_CD
							, T.MEMO
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.SABUN
							, S.SDATE
							, S.EDATE
							, S.TIME_CD
							, S.REASON_CD
							, S.MEMO
							, SYSDATE
							, #{ssnSabun}
						)
		</update>
<!-- 		삭제 -->
		<delete parameterType="map" id="deleteWorkTimeAdjMgr">

					DELETE FROM TTIM325
					WHERE 	(ENTER_CD, SABUN, SDATE) IN 	(  (NULL,NULL,NULL)
<foreach item="rm" collection="deleteRows" >
						,				(
											#{ssnEnterCd}
											, TRIM( #{rm.sabun} )
											, TRIM( #{rm.sdate} )
										)
</foreach>
										)
		</delete>






</mapper>