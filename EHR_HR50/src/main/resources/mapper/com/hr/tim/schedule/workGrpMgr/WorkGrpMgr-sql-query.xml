<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="tim.schedule.workGrpMgr">
<!-- 근무조그룹 조회 -->
		<select parameterType="map" resultType="cMap" id="getWorkPattenMgrGrpList">

				<![CDATA[
					    SELECT A.SEQ AS NO
					         , A.CODE AS WORK_GRP_CD
					         , B.WORK_ORG_TYPE_CD
					         , B.INTERVAL_CD
					         , B.SDATE
                             , TO_CHAR(TO_DATE(SDATE, 'YYYYMMDD'), 'd')  AS SDATE_WEEK  /*(1:일, 2:월, 3:화, 4:수, 5:목, 6:금, 7:토)*/
                             , B.SUM_DAY_WK_LMT
						     , B.SUM_DAY_OT_LMT
						     , B.SUM_WEEK_WK_LMT
						     , B.SUM_WEEK_OT_LMT
						     , B.AVG_DAY_WK_LMT
						     , B.AVG_DAY_OT_LMT
						     , B.AVG_WEEK_WK_LMT
						     , B.AVG_WEEK_OT_LMT
					         , B.FIX_ST_TIME_YN
					         , B.FIX_ED_TIME_YN
					         
					         , B.MEMO
					         , DECODE(B.WORK_GRP_CD, NULL, 'I', 'R') AS S_STATUS
					         
					         , CASE WHEN C.NOTE2 = 'W' THEN '1' ELSE '0' END AS SUM_WEEK_WK_LMT_EDIT 
					         , CASE WHEN C.NOTE2 = 'W' THEN '1' ELSE '0' END AS SUM_WEEK_OT_LMT_EDIT
					         
					         , CASE WHEN C.NOTE2 = 'W' THEN '0' ELSE '1' END AS AVG_DAY_WK_LMT_EDIT 
					         , CASE WHEN C.NOTE2 = 'W' THEN '0' ELSE '1' END AS AVG_DAY_OT_LMT_EDIT
					         , CASE WHEN C.NOTE2 = 'W' THEN '1' ELSE '0' END AS AVG_WEEK_WK_LMT_EDIT 
					         , CASE WHEN C.NOTE2 = 'W' THEN '1' ELSE '0' END AS AVG_WEEK_OT_LMT_EDIT
					         
					         
					      FROM TSYS005 A, TTIM115 B, TSYS005 C
					     WHERE A.ENTER_CD  = #{ssnEnterCd}
					       AND A.GRCODE_CD = 'T11020'
					       AND A.CODE      = B.WORK_GRP_CD(+)
					       AND A.ENTER_CD  = B.ENTER_CD(+)
					       AND A.USE_YN    = 'Y'
					       AND B.ENTER_CD = C.ENTER_CD(+)
					       AND 'T90200'   = C.GRCODE_CD(+) 
					       AND B.INTERVAL_CD = C.CODE(+)
	 				    ORDER BY A.SEQ
				]]>


		</select>
		
		

<!-- 근무시간조회 조회 -->
		<select parameterType="map" resultType="cMap" id="getWorkPattenMgrTimeGrp">

				<![CDATA[
				SELECT A.WORK_GRP_CD
				      ,A.TIME_CD
				      ,A.TIME_CD AS TIME_CD_SHORT
				 FROM TTIM116 A
				WHERE A.ENTER_CD    = #{ssnEnterCd}
				  AND A.WORK_GRP_CD = TRIM(#{searchWorkGrpCd})
				ORDER BY A.TIME_CD
				]]>


		</select>
		
		
<!-- 근무조그룹 저장 -->
		<update parameterType="map" id="saveWorkPattenMgrGrp">


					 MERGE INTO TTIM115 T 
					 USING 
					( 
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" separator=" UNION ALL " >
					       SELECT TRIM(#{ssnEnterCd})  			AS  ENTER_CD
					            , TRIM(#{rm.workGrpCd})  		AS  WORK_GRP_CD
					            , TRIM(#{rm.workOrgTypeCd})  	AS  WORK_ORG_TYPE_CD
					            , TRIM(#{rm.intervalCd})  		AS  INTERVAL_CD
					            , TRIM(#{rm.sdate})  			AS  SDATE
					            , TRIM(#{rm.sumDayWkLmt})  		AS  SUM_DAY_WK_LMT
					            , TRIM(#{rm.sumDayOtLmt})  		AS  SUM_DAY_OT_LMT
					            , TRIM(#{rm.sumWeekWkLmt})  	AS  SUM_WEEK_WK_LMT
					            , TRIM(#{rm.sumWeekOtLmt})  	AS  SUM_WEEK_OT_LMT
					            , TRIM(#{rm.avgDayWkLmt})  		AS  AVG_DAY_WK_LMT
					            , TRIM(#{rm.avgDayOtLmt}) 		AS  AVG_DAY_OT_LMT
					            , TRIM(#{rm.avgWeekWkLmt})  	AS  AVG_WEEK_WK_LMT
					            , TRIM(#{rm.avgWeekOtLmt})  	AS  AVG_WEEK_OT_LMT
					            , TRIM(#{rm.fixStTimeYn})  		AS  FIX_ST_TIME_YN
					            , TRIM(#{rm.fixEdTimeYn})  		AS  FIX_ED_TIME_YN
					            , TRIM(#{rm.memo})  			AS  MEMO
					        FROM DUAL
</foreach>
					) S 
					ON ( 
					          T.ENTER_CD 		= S.ENTER_CD 
					     AND  T.WORK_GRP_CD 	= S.WORK_GRP_CD 
					) 
					WHEN MATCHED THEN 
					   UPDATE SET T.CHKDATE				= sysdate 
					            , T.CHKID				= #{ssnSabun}
					            , T.WORK_ORG_TYPE_CD 	= S.WORK_ORG_TYPE_CD 
					            , T.INTERVAL_CD 		= S.INTERVAL_CD 
					            , T.SDATE 				= S.SDATE 
					            , T.SUM_DAY_WK_LMT 		= S.SUM_DAY_WK_LMT 
					            , T.SUM_DAY_OT_LMT 		= S.SUM_DAY_OT_LMT 
					            , T.SUM_WEEK_WK_LMT 	= S.SUM_WEEK_WK_LMT 
					            , T.SUM_WEEK_OT_LMT 	= S.SUM_WEEK_OT_LMT 
					            , T.AVG_DAY_WK_LMT 		= S.AVG_DAY_WK_LMT 
					            , T.AVG_DAY_OT_LMT 		= S.AVG_DAY_OT_LMT 
					            , T.AVG_WEEK_WK_LMT 	= S.AVG_WEEK_WK_LMT 
					            , T.AVG_WEEK_OT_LMT	 	= S.AVG_WEEK_OT_LMT 
					            , T.FIX_ST_TIME_YN 	    = S.FIX_ST_TIME_YN 
					            , T.FIX_ED_TIME_YN 	    = S.FIX_ED_TIME_YN 
					            , T.MEMO = S.MEMO 
					WHEN NOT MATCHED THEN 
					   INSERT 
					   ( 
					              T.ENTER_CD
					            , T.WORK_GRP_CD
					            , T.WORK_ORG_TYPE_CD
					            , T.INTERVAL_CD
					            , T.SDATE
					            , T.SUM_DAY_WK_LMT
					            , T.SUM_DAY_OT_LMT
					            , T.SUM_WEEK_WK_LMT
					            , T.SUM_WEEK_OT_LMT
					            , T.AVG_DAY_WK_LMT
					            , T.AVG_DAY_OT_LMT
					            , T.AVG_WEEK_WK_LMT
					            , T.AVG_WEEK_OT_LMT
					            , T.FIX_ST_TIME_YN
					            , T.FIX_ED_TIME_YN
					            , T.MEMO
					            , T.CHKDATE
					            , T.CHKID
					   ) 
					   VALUES 
					   ( 
					              S.ENTER_CD
					            , S.WORK_GRP_CD
					            , S.WORK_ORG_TYPE_CD
					            , S.INTERVAL_CD
					            , S.SDATE
					            , S.SUM_DAY_WK_LMT
					            , S.SUM_DAY_OT_LMT
					            , S.SUM_WEEK_WK_LMT
					            , S.SUM_WEEK_OT_LMT
					            , S.AVG_DAY_WK_LMT
					            , S.AVG_DAY_OT_LMT
					            , S.AVG_WEEK_WK_LMT
					            , S.AVG_WEEK_OT_LMT
					            , S.FIX_ST_TIME_YN
					            , S.FIX_ED_TIME_YN
					            , S.MEMO
					            , sysdate
					            , #{ssnSabun}
					   ) 
			


		</update>


<!-- 근무시간 그룹 저장 -->
		<update parameterType="map" id="saveWorkPattenMgrTimeGrp">

					MERGE INTO TTIM116 T
					USING	(
<foreach item="rm" collection="mergeRows" separator=" UNION ALL " >
								SELECT    TRIM( #{ssnEnterCd} )		AS ENTER_CD
										, TRIM( #{searchWorkGrpCd} )	AS WORK_GRP_CD
										, TRIM( #{rm.timeCd} )		AS TIME_CD
								FROM   DUAL
</foreach>
					) S
					ON (     T.ENTER_CD		= S.ENTER_CD
					     AND T.WORK_GRP_CD 	= S.WORK_GRP_CD
					     AND T.TIME_CD 		= S.TIME_CD)
					WHEN MATCHED THEN
						UPDATE SET	  T.CHKDATE			= SYSDATE
									, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.WORK_GRP_CD
							, T.TIME_CD
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  #{ssnEnterCd}
							, S.WORK_GRP_CD
							, S.TIME_CD
							, SYSDATE
							, #{ssnSabun}
						)
		</update>


<!-- 근무시간 삭제 -->
		<delete parameterType="map" id="deleteWorkPattenMgrTimeGrp">

					DELETE FROM TTIM116
					 WHERE (ENTER_CD, WORK_GRP_CD, TIME_CD) IN (  (NULL, NULL, NULL)
<foreach item="rm" collection="deleteRows" >
						, (TRIM(#{ssnEnterCd}), TRIM( #{searchWorkGrpCd} ), TRIM(#{rm.timeCd}))
</foreach>
										)
		</delete>




	<!-- 근무시간표 조건 조회 -->
	<select id="getWorkTimeOrgTimeCdList" parameterType="map" resultType="cMap">
		<![CDATA[
		SELECT A.TIME_CD ]]>
				, A.SHORT_TERM
				, A.TIME_NM
		<![CDATA[
		  FROM TTIM017 A
		 WHERE A.ENTER_CD = #{ssnEnterCd} ]]>
		 <if test="workTimeNm != null and workTimeNm neq ''">
	     	AND A.TIME_NM LIKE '%'||#{workTimeNm}||'%'
		 </if>
		<if test="dayOff != null and dayOff neq ''">
			AND A.WORK_YN = #{dayOff}
		</if>
		 ORDER BY SEQ

	</select>
				

</mapper>