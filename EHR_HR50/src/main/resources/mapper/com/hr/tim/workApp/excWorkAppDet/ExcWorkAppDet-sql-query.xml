<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="tim.workApp.excWorkAppDet">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getExcWorkAppDet">

				<![CDATA[
				    SELECT ENTER_CD
						, APPL_SEQ
						, SABUN
						, YMD
						, SUBSTR(REQ_S_HM, 1, 2) AS REQ_SH
						, SUBSTR(REQ_S_HM, 3, 4) AS REQ_SM
						, SUBSTR(REQ_E_HM, 1, 2) AS REQ_EH
						, SUBSTR(REQ_E_HM, 3, 4) AS REQ_EM
						, REQUEST_HOUR
						, NOTE					     
				     FROM TTIM621 A
				    WHERE ENTER_CD = TRIM(#{ssnEnterCd})
				      AND SABUN    = TRIM(#{searchApplSabun})
				      AND APPL_SEQ = TRIM(#{searchApplSeq})
				]]>


		</select>


<!-- 근무시간 계산 ( 12시~1시 근무시간 제외) : 당직 시간코드 ('10021') 고정 -->
		<select parameterType="map" resultType="cMap" id="getExcWorkAppDetHour">

				<![CDATA[

        SELECT SUM(HH) + TRUNC(TRUNC(SUM(MM)/60)+MOD(SUM(MM),60)/60,1)  AS TIME
          FROM (SELECT TRUNC(CASE WHEN STD_MIN IS NOT NULL AND STD_MIN > MM THEN 0
                                  WHEN UNIT IS NOT NULL THEN MM-MOD(MM, UNIT)
                                  ELSE MM END / 60) AS HH
                     , MOD(CASE WHEN STD_MIN IS NOT NULL AND STD_MIN > MM THEN 0
                                WHEN UNIT IS NOT NULL THEN MM-MOD(MM, UNIT)
                                ELSE MM END , 60) AS MM
                     , WORK_CD
                     , MM AS WORK_HOUR
                  FROM (
                        SELECT STD_MIN
                             , UNIT
                             , WORK_CD
                             , CASE WHEN S_TIME >  E_TIME THEN NULL ELSE F_COM_GET_HH24MI_GAP(S_TIME, E_TIME) END AS MM
                          FROM (
                                SELECT STD_MIN
                                     , UNIT
                                     , WORK_CD
                                     , CASE WHEN EHM < IN_HM THEN ''
                                            WHEN SHM > OUT_HM THEN ''
                                            WHEN SHM > IN_HM THEN SHM
                                            ELSE IN_HM END AS S_TIME
                                     , CASE WHEN EHM < IN_HM THEN ''
                                            WHEN SHM > OUT_HM THEN ''
                                            WHEN EHM > OUT_HM THEN OUT_HM
                                            ELSE EHM END AS E_TIME
                                  FROM (
                                            SELECT A.STD_MIN, A.UNIT, A.WORK_CD
                                                 , CASE WHEN A.SHM    >= D.BEGIN_SHM THEN C.YMD ELSE TO_CHAR(TO_DATE(C.YMD, 'yyyymmdd')+1, 'yyyymmdd') END || A.SHM     AS SHM
                                                 , CASE WHEN A.EHM    >  D.BEGIN_SHM THEN C.YMD ELSE TO_CHAR(TO_DATE(C.YMD, 'yyyymmdd')+1, 'yyyymmdd') END || A.EHM     AS EHM
                                                 , CASE WHEN C.IN_HM  >= D.BEGIN_SHM THEN C.YMD ELSE TO_CHAR(TO_DATE(C.YMD, 'yyyymmdd')+1, 'yyyymmdd') END || C.IN_HM   AS IN_HM
                                                 , CASE WHEN C.OUT_HM >  D.BEGIN_SHM THEN C.YMD ELSE TO_CHAR(TO_DATE(C.YMD, 'yyyymmdd')+1, 'yyyymmdd') END || C.OUT_HM  AS OUT_HM
                                              FROM TTIM018 A
                                                 , (SELECT TRIM(#{ssnEnterCd})  AS ENTER_CD
                                                         , '20200101'         AS YMD
                                                         , TRIM( #{shm} )       AS IN_HM
                                                         , TRIM( #{ehm} )       AS OUT_HM
                                                         , '10021'            AS TIME_CD  --당직시간코드(고정)
                                                      FROM DUAL
                                                 ) C
                                                 , TTIM017 D
                                             WHERE A.ENTER_CD = C.ENTER_CD
                                               AND A.TIME_CD  = C.TIME_CD
                                               AND A.WORK_CD  = '0010'   --기본근무시간
                                               AND A.ENTER_CD = D.ENTER_CD
                                               AND A.TIME_CD  = D.TIME_CD
                                       )
                               )
                        )
               )				
				]]>


		</select>

<!-- 기 신청 건 체크   -->
		<select parameterType="map" resultType="cMap" id="getExcWorkAppDetDupCnt">

				<![CDATA[
					SELECT COUNT(1) AS DUP_CNT
					  FROM TTIM621 A, THRI103 B
					 WHERE A.ENTER_CD     = #{ssnEnterCd}
					   AND A.SABUN        = #{searchApplSabun}
					   AND A.APPL_SEQ    != #{searchApplSeq}
					   AND A.YMD          = REPLACE( #{searchYmd} ,'-','')
					   AND A.ENTER_CD = B.ENTER_CD
					   AND A.APPL_SEQ = B.APPL_SEQ
					   AND B.APPL_STATUS_CD NOT IN ( '11', '23', '33', 'ZZ' )   -- 11:임시저장, 23:결재반려, 33:수신반려, ZZ:취소완료
				]]>


		</select>

<!-- 연장근무추가신청 세부내역 저장 -->
		<update parameterType="map" id="saveExcWorkAppDet">

					MERGE INTO TTIM621 T
					USING	
					(   
<foreach item="rm" collection="mergeRows" separator=" UNION ALL " >
					       SELECT TRIM(#{ssnEnterCd})  						AS ENTER_CD
					            , TRIM(#{rm.searchApplSeq})  				AS APPL_SEQ
					            , TRIM(#{rm.searchApplSabun})				AS SABUN
					            , REPLACE(TRIM(#{rm.searchYmd}),'-','')		AS YMD
					            , TRIM(#{rm.reqSh})||TRIM(#{rm.reqSm})		AS REQ_S_HM
					            , TRIM(#{rm.reqEh})||TRIM(#{rm.reqEm})  	AS REQ_E_HM
					            , TRIM(#{rm.requestHour})  					AS REQUEST_HOUR
					            , TRIM(#{rm.note})  						AS NOTE
					        FROM DUAL
</foreach>
						  
					) S
					ON ( 
					          T.ENTER_CD = S.ENTER_CD 
					     AND  T.APPL_SEQ = S.APPL_SEQ 
					     AND  T.SABUN    = S.SABUN 
					) 
					WHEN MATCHED THEN 
					   UPDATE SET T.CHKDATE			= sysdate 
					            , T.CHKID			= #{ssnSabun}
						        , T.YMD				= S.YMD
								, T.REQ_S_HM		= S.REQ_S_HM
								, T.REQ_E_HM		= S.REQ_E_HM
								, T.REQUEST_HOUR	= S.REQUEST_HOUR
								, T.NOTE			= S.NOTE
					WHEN NOT MATCHED THEN 
					   INSERT 
					   ( 
					              T.ENTER_CD
					            , T.APPL_SEQ
					            , T.SABUN
								, T.YMD
								, T.REQ_S_HM
								, T.REQ_E_HM
								, T.REQUEST_HOUR
								, T.NOTE
								, T.CHKDATE
					            , T.CHKID
					   ) 
					   VALUES 
					   ( 
					              S.ENTER_CD
					            , S.APPL_SEQ
					            , S.SABUN
								, S.YMD
								, S.REQ_S_HM
								, S.REQ_E_HM
								, S.REQUEST_HOUR
								, S.NOTE
								, SYSDATE
								, #{ssnSabun}
						)
		</update>


</mapper>