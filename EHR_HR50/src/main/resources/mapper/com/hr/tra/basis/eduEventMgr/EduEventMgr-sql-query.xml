<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tra.basis.eduEventMgr">
<!-- 		교육회차관리 조회 -->
		<select parameterType="map" resultType="cMap" id="getEduEventMgrList">
			
				<![CDATA[
			       SELECT 0 AS SELECT_IMG
						, CASE WHEN (SELECT COUNT(1) 
									   FROM TTRA150 G 
									  WHERE G.ENTER_CD = A.ENTER_CD 
									    AND G.EDU_SEQ = A.EDU_SEQ 
									    AND G.EDU_EVENT_SEQ = A.EDU_EVENT_SEQ) >= 1 
							   		THEN 1
							   	ELSE 2
						  END AS TEMP1
						, '0' AS LECTURER_DETAIL
						, A.ENTER_CD
						, A.EDU_SEQ
						, A.EDU_EVENT_SEQ
						, A.EDU_EVENT_NM
						, A.EDU_STATUS_CD AS EDU_EVT_STATUS_CD
						, A.EDU_PLACE
						, A.EDU_S_YMD
						, A.EDU_E_YMD
						, A.EDU_S_HM
						, A.EDU_E_HM
						, A.EDU_DAY
						, A.EDU_HOUR
						, A.APPL_S_YMD
						, A.APPL_E_YMD
						, A.CURRENCY_CD
						, A.PER_EXPENSE_MON
						, A.REAL_EXPENSE_MON
						, A.LABOR_APPLY_YN
						, A.LABOR_MON
						, A.MAX_PERSON
						, A.EDU_SATI_SKIP_YN
						, A.NOTE 				AS EVT_NOTE
						, A.EDU_REWARD_CD
						, A.EDU_REWARD_CNT
						, A.RESULT_APP_SKIP_YN
						
						, C.EDU_COURSE_NM
						, C.IN_OUT_TYPE
						, C.EDU_BRANCH_CD
						, C.EDU_M_BRANCH_CD
						, C.EDU_METHOD_CD
						, C.EDU_STATUS_CD
						, C.EDU_ORG_CD
						, C.MANDATORY_YN
					    , C.JOB_CD
					    , C.EDU_LEVEL
					    , C.EDU_MEMO
					    , (SELECT X.JOB_NM
					         FROM TORG201 X
					        WHERE X.ENTER_CD = C.ENTER_CD
					          AND X.JOB_CD   = C.JOB_CD
					          AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN X.SDATE AND NVL( X.EDATE, '99991231' ) ) AS JOB_NM 
					    
					    , (SELECT X.EDU_ORG_NM
					         FROM TTRA001 X
					        WHERE X.ENTER_CD   = C.ENTER_CD
					          AND X.EDU_ORG_CD = C.EDU_ORG_CD ) AS EDU_ORG_NM
					           
					    , C.FILE_SEQ      
					    , C.MNG_SABUN 
					 	, C.MNG_TEL_NO
						, F_COM_GET_NAMES(C.ENTER_CD, C.MNG_SABUN ) AS MNG_NAME -- 성명       
						, F_COM_GET_ORG_NM2(C.ENTER_CD, C.MNG_SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD')) AS MNG_ORG_NM
						
			         FROM TTRA121 A, TTRA101 C
			        WHERE A.ENTER_CD   = #{ssnEnterCd}
			          AND A.ENTER_CD   = C.ENTER_CD
			          AND A.EDU_SEQ    = C.EDU_SEQ
			          AND C.IN_OUT_TYPE !=  'ZZ' ]]>
<!--  			          
<if test="ssnGrpCd and ssnGrpCd neq '10' and ssnGrpCd neq '15'">
				      AND C.MNG_SABUN = TRIM(#{ssnSabun})			   
</if>
-->
<if test='searchDtl != null and searchDtl eq "Y"'>			     
				      AND A.EDU_SEQ 	  = TRIM(#{searchEduSeq})
				      AND A.EDU_EVENT_SEQ = TRIM(#{searchEduEventSeq})
</if>
<if test="searchEduSeq != null and searchEduSeq neq ''">
				      AND A.EDU_SEQ 	  = TRIM(#{searchEduSeq})
</if>
<if test="searchEduCourseNm != null and searchEduCourseNm neq ''">
				      AND C.EDU_COURSE_NM LIKE '%' || #{searchEduCourseNm} || '%'
</if>
<if test="searchEduEventNm != null and searchEduEventNm neq ''">
				      AND A.EDU_EVENT_NM LIKE '%' || #{searchEduEventNm} || '%'
</if>
<if test="searchEduEventStatus != null and searchEduEventStatus neq ''">
				      AND A.EDU_STATUS_CD LIKE '%' || #{searchEduEventStatus} || '%'
</if>
<if test="searchEduMBranchNm != null and searchEduMBranchNm neq ''">
				      AND F_COM_GET_GRCODE_NAME(#{ssnEnterCd},'L10015',C.EDU_M_BRANCH_CD) LIKE '%' || #{searchEduMBranchNm} || '%'
</if>
<if test="searchEduOrgNm != null and searchEduOrgNm neq ''">
				      AND NVL(B.EDU_ORG_NM,' ') LIKE '%' || #{searchEduOrgNm} || '%'
</if>
<if test="searchEduSYmd != null and searchEduSYmd neq ''">
				      AND A.EDU_S_YMD BETWEEN REPLACE(#{searchEduSYmd}, '-', '') AND REPLACE(#{searchEduEYmd}, '-', '')
</if>
<if test="searchInOutType != null and searchInOutType neq ''">
				      AND C.IN_OUT_TYPE LIKE '%' || #{searchInOutType} || '%'
</if>
<if test="searchEduMBranchCd != null and searchEduMBranchCd neq ''">
				      AND C.EDU_M_BRANCH_CD = #{searchEduMBranchCd}
</if>
<if test="searchEduBranchCd != null and searchEduBranchCd neq ''">
				      AND C.EDU_BRANCH_CD = #{searchEduBranchCd}
</if>
<if test="searchEduMethodCd != null and searchEduMethodCd neq ''">
				      AND C.EDU_METHOD_CD = #{searchEduMethodCd}
</if>
<if test="searchYear != null and searchYear neq ''">
				      AND A.EDU_S_YMD LIKE #{searchYear} || '%'
</if>
<if test="searchEduYm != null and searchEduYm neq ''">
				      AND A.EDU_S_YMD LIKE REPLACE(#{searchEduYm}, '-','') || '%'
</if>
				    ORDER BY C.EDU_COURSE_NM, A.EDU_S_YMD DESC
		</select>

<!-- 		교육회차관리 SEQ 조회 -->
		<select parameterType="map" resultType="cMap" id="getEduEventMgrSeq">
			
				<![CDATA[
					SELECT NVL(MAX(EDU_EVENT_SEQ),0) + 1  AS EDU_EVENT_SEQ
					  FROM TTRA121 
					 WHERE ENTER_CD = #{ssnEnterCd}
                       AND EDU_SEQ  =  TRIM(#{eduSeq})
				]]>
			
			
		</select>
				
				
<!-- 		중복회차 체크 -->
		<select parameterType="map" resultType="cMap" id="getEduEventMgrDupChk">
			
				<![CDATA[
				      SELECT COUNT(1) AS CNT
				        FROM TTRA101 A, TTRA121 B
				       WHERE A.ENTER_CD  = TRIM(#{ssnEnterCd})
				         AND A.ENTER_CD  = B.ENTER_CD
				         AND A.EDU_SEQ   = B.EDU_SEQ
				         AND A.EDU_SEQ   = TRIM(#{eduSeq})
				         AND B.EDU_S_YMD = REPLACE(TRIM(#{eduSYmd}),'-','')
				         AND B.EDU_E_YMD = REPLACE(TRIM(#{eduEYmd}),'-','')
				]]>
			
			
		</select>

	<!-- 		교육회차관리 저장 (단건)-->
	<update parameterType="map" id="saveEduEventMgr">

				<![CDATA[
		MERGE INTO TTRA121 T
			USING
				(
					SELECT TRIM(#{ssnEnterCd})  		AS  ENTER_CD
						 , TRIM(#{eduSeq})  			AS  EDU_SEQ
						 , TRIM(#{eduEventSeq})  		AS  EDU_EVENT_SEQ
						 , TRIM(#{eduEventNm}) 	 	AS  EDU_EVENT_NM
						 , TRIM(#{eduEvtStatusCd})  	AS  EDU_STATUS_CD
						 , TRIM(#{eduOrgCd})  			AS  EDU_ORG_CD
						 , TRIM(#{eduPlace})  			AS  EDU_PLACE
						 , REPLACE(TRIM(#{eduSYmd}),'-','')  			AS  EDU_S_YMD
						 , REPLACE(TRIM(#{eduEYmd}),'-','')  			AS  EDU_E_YMD
						 , REPLACE(TRIM(#{eduSHm}),':','')  			AS  EDU_S_HM
						 , REPLACE(TRIM(#{eduEHm}),':','')  			AS  EDU_E_HM
						 , TRIM(#{eduDay})  			AS  EDU_DAY
						 , TRIM(#{eduHour})  			AS  EDU_HOUR
						 , REPLACE(TRIM(#{applSYmd}),'-','')  			AS  APPL_S_YMD
						 , REPLACE(TRIM(#{applEYmd}),'-','')  			AS  APPL_E_YMD
						 , TRIM(#{currencyCd})  		AS  CURRENCY_CD
						 , REPLACE(TRIM(#{perExpenseMon}),',','')  	AS  PER_EXPENSE_MON
						 , REPLACE(TRIM(#{realExpenseMon}),',','')  	AS  REAL_EXPENSE_MON
						 , TRIM(#{laborApplyYn})  		AS  LABOR_APPLY_YN
						 , REPLACE(TRIM(#{laborMon}),',','')  			AS  LABOR_MON
						 , TRIM(#{eduSatiSkipYn})  	AS  EDU_SATI_SKIP_YN
						 , TRIM(#{maxPerson})  		AS  MAX_PERSON
						 , TRIM(#{eduRewardCd})  		AS  EDU_REWARD_CD
						 , TRIM(#{eduRewardCnt})  		AS  EDU_REWARD_CNT
						 , TRIM(#{resultAppSkipYn})  	AS  RESULT_APP_SKIP_YN
						 , TRIM(#{evtNote})  			AS  NOTE
					FROM DUAL
				) S
			ON (
				T.ENTER_CD 		= S.ENTER_CD
					AND  T.EDU_SEQ 		= S.EDU_SEQ
					AND  T.EDU_EVENT_SEQ 	= S.EDU_EVENT_SEQ
				)
			WHEN MATCHED THEN
				UPDATE SET T.CHKDATE				= sysdate
					, T.CHKID				= #{ssnSabun}
					, T.EDU_EVENT_NM 		= S.EDU_EVENT_NM
					, T.EDU_STATUS_CD 		= S.EDU_STATUS_CD
					, T.EDU_ORG_CD 			= S.EDU_ORG_CD
					, T.EDU_PLACE 			= S.EDU_PLACE
					, T.EDU_S_YMD 			= S.EDU_S_YMD
					, T.EDU_E_YMD 			= S.EDU_E_YMD
					, T.EDU_S_HM 			= S.EDU_S_HM
					, T.EDU_E_HM 			= S.EDU_E_HM
					, T.EDU_DAY 			= S.EDU_DAY
					, T.EDU_HOUR 			= S.EDU_HOUR
					, T.APPL_S_YMD 			= S.APPL_S_YMD
					, T.APPL_E_YMD 			= S.APPL_E_YMD
					, T.CURRENCY_CD 		= S.CURRENCY_CD
					, T.PER_EXPENSE_MON 	= S.PER_EXPENSE_MON
					, T.REAL_EXPENSE_MON 	= S.REAL_EXPENSE_MON
					, T.LABOR_APPLY_YN 		= S.LABOR_APPLY_YN
					, T.LABOR_MON 			= S.LABOR_MON
					, T.EDU_SATI_SKIP_YN 	= S.EDU_SATI_SKIP_YN
					, T.MAX_PERSON 			= S.MAX_PERSON
					, T.EDU_REWARD_CD 		= S.EDU_REWARD_CD
					, T.EDU_REWARD_CNT 		= S.EDU_REWARD_CNT
					, T.RESULT_APP_SKIP_YN 	= S.RESULT_APP_SKIP_YN
					, T.NOTE 				= S.NOTE
			WHEN NOT MATCHED THEN
				INSERT
					(
					 T.ENTER_CD
						, T.EDU_SEQ
						, T.EDU_EVENT_SEQ
						, T.EDU_EVENT_NM
						, T.EDU_STATUS_CD
						, T.EDU_ORG_CD
						, T.EDU_PLACE
						, T.EDU_S_YMD
						, T.EDU_E_YMD
						, T.EDU_S_HM
						, T.EDU_E_HM
						, T.EDU_DAY
						, T.EDU_HOUR
						, T.APPL_S_YMD
						, T.APPL_E_YMD
						, T.CURRENCY_CD
						, T.PER_EXPENSE_MON
						, T.REAL_EXPENSE_MON
						, T.LABOR_APPLY_YN
						, T.LABOR_MON
						, T.EDU_SATI_SKIP_YN
						, T.MAX_PERSON
						, T.EDU_REWARD_CD
						, T.EDU_REWARD_CNT
						, T.RESULT_APP_SKIP_YN
						, T.NOTE
						, T.CHKDATE
						, T.CHKID
						)
					VALUES
						(
						  S.ENTER_CD
						, S.EDU_SEQ
						, NVL(S.EDU_EVENT_SEQ, F_COM_GET_SEQ('EDU') )
						, S.EDU_EVENT_NM
						, S.EDU_STATUS_CD
						, S.EDU_ORG_CD
						, S.EDU_PLACE
						, S.EDU_S_YMD
						, S.EDU_E_YMD
						, S.EDU_S_HM
						, S.EDU_E_HM
						, S.EDU_DAY
						, S.EDU_HOUR
						, S.APPL_S_YMD
						, S.APPL_E_YMD
						, S.CURRENCY_CD
						, S.PER_EXPENSE_MON
						, S.REAL_EXPENSE_MON
						, S.LABOR_APPLY_YN
						, S.LABOR_MON
						, S.EDU_SATI_SKIP_YN
						, S.MAX_PERSON
						, S.EDU_REWARD_CD
						, S.EDU_REWARD_CNT
						, S.RESULT_APP_SKIP_YN
						, S.NOTE
						, sysdate
						, #{ssnSabun}
						)

		]]>
		</update>

	<!-- 		교육회차관리 삭제(단건) -->
	<delete parameterType="map" id="deleteEduEventMgr">
		<![CDATA[
		DELETE FROM TTRA121
		WHERE ENTER_CD = TRIM(#{ssnEnterCd})
		  AND EDU_SEQ  = TRIM( #{eduSeq} )
		  AND EDU_EVENT_SEQ = TRIM( #{eduEventSeq} )
		]]>
	</delete>

<!-- 		교육회차관리 저장(다건) -->
		<update parameterType="map" id="saveEduEventMgrSheet">
			
				<![CDATA[
					 MERGE INTO TTRA121 T 
					 USING ]]>
					(
						SELECT      ENTER_CD
							 ,   EDU_SEQ
							 ,   EDU_EVENT_SEQ
							 ,   EDU_EVENT_NM
							 ,   EDU_STATUS_CD
							 ,   EDU_ORG_CD
							 ,   EDU_PLACE
							 ,   EDU_S_YMD
							 ,   EDU_E_YMD
							 ,   EDU_S_HM
							 ,   EDU_E_HM
							 ,   EDU_DAY
							 ,   EDU_HOUR
							 ,   APPL_S_YMD
							 ,   APPL_E_YMD
							 ,	 CURRENCY_CD
							 ,	 PER_EXPENSE_MON
							 ,	 REAL_EXPENSE_MON
							 ,	 LABOR_APPLY_YN
							 ,	 LABOR_MON
						     ,   EDU_SATI_SKIP_YN
						     ,   MAX_PERSON
						     ,	 EDU_REWARD_CD
						     ,	 EDU_REWARD_CNT
							 ,	 RESULT_APP_SKIP_YN
							 , 	 NOTE
						FROM (
							SELECT NULL AS ENTER_CD
								 , NULL AS EDU_SEQ
								 , NULL AS EDU_EVENT_SEQ
								 , NULL AS EDU_EVENT_NM
								 , NULL AS EDU_STATUS_CD
								 , NULL AS EDU_ORG_CD
								 , NULL AS EDU_PLACE
								 , NULL AS EDU_S_YMD
								 , NULL AS EDU_E_YMD
								 , NULL AS EDU_S_HM
								 , NULL AS EDU_E_HM
								 , NULL AS EDU_DAY
								 , NULL AS EDU_HOUR
								 , NULL AS APPL_S_YMD
								 , NULL AS APPL_E_YMD
								 , NULL AS CURRENCY_CD
								 , NULL AS PER_EXPENSE_MON
								 , NULL AS REAL_EXPENSE_MON
								 , NULL AS LABOR_APPLY_YN
								 , NULL AS LABOR_MON
								 , NULL AS EDU_SATI_SKIP_YN
								 , NULL AS MAX_PERSON
								 , NULL AS EDU_REWARD_CD
								 , NULL AS EDU_REWARD_CNT
								 , NULL AS RESULT_APP_SKIP_YN
								 , NULL AS NOTE
							  FROM DUAL
<foreach item="rm" collection="mergeRows">
							 UNION ALL
							SELECT TRIM(#{ssnEnterCd})  		AS  ENTER_CD
								, TRIM(#{rm.eduSeq})  			AS  EDU_SEQ
								, TRIM(#{rm.eduEventSeq})  		AS  EDU_EVENT_SEQ
								, TRIM(#{rm.eduEventNm}) 	 	AS  EDU_EVENT_NM
								, TRIM(#{rm.eduEvtStatusCd})  	AS  EDU_STATUS_CD
								, TRIM(#{rm.eduOrgCd})  			AS  EDU_ORG_CD
								, TRIM(#{rm.eduPlace})  			AS  EDU_PLACE
								, REPLACE(TRIM(#{rm.eduSYmd}),'-','')  			AS  EDU_S_YMD
								, REPLACE(TRIM(#{rm.eduEYmd}),'-','')  			AS  EDU_E_YMD
								, REPLACE(TRIM(#{rm.eduSHm}),':','')  			AS  EDU_S_HM
								, REPLACE(TRIM(#{rm.eduEHm}),':','')  			AS  EDU_E_HM
								, TRIM(#{rm.eduDay})  			AS  EDU_DAY
								, TRIM(#{rm.eduHour})  			AS  EDU_HOUR
								, REPLACE(TRIM(#{rm.applSYmd}),'-','')  			AS  APPL_S_YMD
								, REPLACE(TRIM(#{rm.applEYmd}),'-','')  			AS  APPL_E_YMD
								, TRIM(#{rm.currencyCd})  		AS  CURRENCY_CD
								, REPLACE(TRIM(#{rm.perExpenseMon}),',','')  	AS  PER_EXPENSE_MON
								, REPLACE(TRIM(#{rm.realExpenseMon}),',','')  	AS  REAL_EXPENSE_MON
								, TRIM(#{rm.laborApplyYn})  		AS  LABOR_APPLY_YN
								, REPLACE(TRIM(#{rm.laborMon}),',','')  			AS  LABOR_MON
								, TRIM(#{rm.eduSatiSkipYn})  	AS  EDU_SATI_SKIP_YN
								, TRIM(#{rm.maxPerson})  		AS  MAX_PERSON
								, TRIM(#{rm.eduRewardCd})  		AS  EDU_REWARD_CD
								, TRIM(#{rm.eduRewardCnt})  		AS  EDU_REWARD_CNT
								, TRIM(#{rm.resultAppSkipYn})  	AS  RESULT_APP_SKIP_YN
								, TRIM(#{rm.evtNote})  			AS  NOTE
							FROM DUAL
</foreach>
							 ) WHERE	ENTER_CD IS NOT NULL
								AND		EDU_SEQ IS NOT NULL

					) S 
					ON ( 
					          T.ENTER_CD 		= S.ENTER_CD 
					     AND  T.EDU_SEQ 		= S.EDU_SEQ 
					     AND  T.EDU_EVENT_SEQ 	= S.EDU_EVENT_SEQ 
					) 
					WHEN MATCHED THEN 
					   UPDATE SET T.CHKDATE				= sysdate 
					            , T.CHKID				= #{ssnSabun} 
					            , T.EDU_EVENT_NM 		= S.EDU_EVENT_NM 
					            , T.EDU_STATUS_CD 		= S.EDU_STATUS_CD 
					            , T.EDU_ORG_CD 			= S.EDU_ORG_CD 
					            , T.EDU_PLACE 			= S.EDU_PLACE 
					            , T.EDU_S_YMD 			= S.EDU_S_YMD 
					            , T.EDU_E_YMD 			= S.EDU_E_YMD 
					            , T.EDU_S_HM 			= S.EDU_S_HM 
					            , T.EDU_E_HM 			= S.EDU_E_HM 
					            , T.EDU_DAY 			= S.EDU_DAY 
					            , T.EDU_HOUR 			= S.EDU_HOUR 
					            , T.APPL_S_YMD 			= S.APPL_S_YMD 
					            , T.APPL_E_YMD 			= S.APPL_E_YMD 
					            , T.CURRENCY_CD 		= S.CURRENCY_CD 
					            , T.PER_EXPENSE_MON 	= S.PER_EXPENSE_MON 
					            , T.REAL_EXPENSE_MON 	= S.REAL_EXPENSE_MON 
					            , T.LABOR_APPLY_YN 		= S.LABOR_APPLY_YN 
					            , T.LABOR_MON 			= S.LABOR_MON 
					            , T.EDU_SATI_SKIP_YN 	= S.EDU_SATI_SKIP_YN 
					            , T.MAX_PERSON 			= S.MAX_PERSON 
					            , T.EDU_REWARD_CD 		= S.EDU_REWARD_CD 
					            , T.EDU_REWARD_CNT 		= S.EDU_REWARD_CNT
					            , T.RESULT_APP_SKIP_YN 	= S.RESULT_APP_SKIP_YN 
					            , T.NOTE 				= S.NOTE 
					WHEN NOT MATCHED THEN 
					   INSERT 
					   ( 
					              T.ENTER_CD
					            , T.EDU_SEQ
					            , T.EDU_EVENT_SEQ
					            , T.EDU_EVENT_NM
					            , T.EDU_STATUS_CD
					            , T.EDU_ORG_CD
					            , T.EDU_PLACE
					            , T.EDU_S_YMD
					            , T.EDU_E_YMD
					            , T.EDU_S_HM
					            , T.EDU_E_HM
					            , T.EDU_DAY
					            , T.EDU_HOUR
					            , T.APPL_S_YMD
					            , T.APPL_E_YMD
					            , T.CURRENCY_CD
					            , T.PER_EXPENSE_MON
					            , T.REAL_EXPENSE_MON
					            , T.LABOR_APPLY_YN
					            , T.LABOR_MON
					            , T.EDU_SATI_SKIP_YN
					            , T.MAX_PERSON
					            , T.EDU_REWARD_CD 
					            , T.EDU_REWARD_CNT
					            , T.RESULT_APP_SKIP_YN 
					            , T.NOTE
					            , T.CHKDATE
					            , T.CHKID
					   ) 
					   VALUES 
					   ( 
					              S.ENTER_CD
					            , S.EDU_SEQ
					            , NVL(S.EDU_EVENT_SEQ, F_COM_GET_SEQ('EDU') )
					            , S.EDU_EVENT_NM
					            , S.EDU_STATUS_CD
					            , S.EDU_ORG_CD
					            , S.EDU_PLACE
					            , S.EDU_S_YMD
					            , S.EDU_E_YMD
					            , S.EDU_S_HM
					            , S.EDU_E_HM
					            , S.EDU_DAY
					            , S.EDU_HOUR
					            , S.APPL_S_YMD
					            , S.APPL_E_YMD
					            , S.CURRENCY_CD
					            , S.PER_EXPENSE_MON
					            , S.REAL_EXPENSE_MON
					            , S.LABOR_APPLY_YN
					            , S.LABOR_MON
					            , S.EDU_SATI_SKIP_YN
					            , S.MAX_PERSON
					            , S.EDU_REWARD_CD 
					            , S.EDU_REWARD_CNT
					            , S.RESULT_APP_SKIP_YN
					            , S.NOTE
					            , sysdate
					            , #{ssnSabun}
					   )
		</update>
<!-- 		교육회차관리 삭제 (다건)-->
		<delete parameterType="map" id="deleteEduEventMgrSheet">
			DELETE FROM TTRA121
			WHERE ENTER_CD = TRIM(#{ssnEnterCd})
			AND ( EDU_SEQ, EDU_EVENT_SEQ) IN ( ( NULL, NULL )
			<foreach item="rm" collection="deleteRows" >
				<if test='   rm.eduSeq != null and !rm.eduSeq.equals("")
						 and rm.eduEventSeq != null and !rm.eduEventSeq.equals("")'>
					, ( TRIM( #{rm.eduSeq} ), TRIM( #{rm.eduEventSeq} ) )
				</if>
			</foreach>
			)
		</delete>

<!-- 		교육회차관리 강사내역 조회 -->
		<select parameterType="map" resultType="cMap" id="getEduEventLecturerPopupList">
			
				<![CDATA[
					SELECT	  A.ENTER_CD
							, A.EDU_SEQ
							, A.EDU_EVENT_SEQ
							, A.SEQ
							, A.TEACHER_SEQ
							, NVL( A.TEL_NO, B.TEL_NO) AS TEL_NO
							, A.SUBJECT_LECTURE
							, A.LECTURE_FEE
							, A.NOTE
							, A.CHKDATE
							, A.CHKID
							, B.TEACHER_NM
					FROM	TTRA122 A, TTRA002 B
					WHERE	A.ENTER_CD      = B.ENTER_CD
					  AND	A.TEACHER_SEQ   = B.TEACHER_SEQ
					  AND	A.ENTER_CD      = #{ssnEnterCd}
					  AND	A.EDU_SEQ       = #{eduSeq}
					  AND	A.EDU_EVENT_SEQ = #{eduEventSeq}
					ORDER BY B.TEACHER_NM
				]]>
			
			
		</select>

<!-- 		교육회차관리 강사내역 저장 -->
		<update parameterType="map" id="saveEduEventLecturerPopup">
			
				<![CDATA[
					 MERGE INTO TTRA122 T 
					 USING ( ]]> 
<bind name="idx" value="1" />
<foreach item="rm" collection="mergeRows" separator=" UNION ALL ">
					       SELECT TRIM(#{ssnEnterCd})  			AS  ENTER_CD 
					            , TRIM(#{eduSeq})  				AS  EDU_SEQ
					            , TRIM(#{eduEventSeq})  			AS  EDU_EVENT_SEQ
	<choose>
		<when test="rm.seq != null and rm.seq neq ''">
								, TRIM(#{rm.seq})     			AS SEQ
		</when>
		<otherwise>
								, TO_CHAR( (SELECT (NVL(MAX(SEQ),0) + #{idx}) 
			               		              FROM TTRA122 
			               		             WHERE ENTER_CD      = #{ssnEnterCd}
			               		               AND EDU_SEQ       = TRIM(#{eduSeq})
			               		               AND EDU_EVENT_SEQ = TRIM(#{eduEventSeq})
			               		          ) )  AS SEQ
			               	<bind name="idx" value="idx + 1" />
		</otherwise>
	</choose>
					            , TRIM(#{rm.teacherSeq})  		AS  TEACHER_SEQ
					            , TRIM(#{rm.telNo})  			AS  TEL_NO
					            , TRIM(#{rm.subjectLecture})  	AS  SUBJECT_LECTURE
					            , TRIM(#{rm.lectureFee})  		AS  LECTURE_FEE
					            , TRIM(#{rm.note})  			AS  NOTE
					        FROM DUAL
</foreach> <![CDATA[
					) S 
					ON ( 
					          T.ENTER_CD 		= S.ENTER_CD 
					     AND  T.EDU_SEQ 		= S.EDU_SEQ 
					     AND  T.EDU_EVENT_SEQ 	= S.EDU_EVENT_SEQ 
					     AND  T.SEQ = S.SEQ 
					) 
					WHEN MATCHED THEN 
					   UPDATE SET T.CHKDATE			= sysdate 
					            , T.CHKID			= #{ssnSabun} 
					            , T.TEACHER_SEQ 	= S.TEACHER_SEQ 
					            , T.TEL_NO 			= S.TEL_NO 
					            , T.SUBJECT_LECTURE = S.SUBJECT_LECTURE 
					            , T.LECTURE_FEE 	= S.LECTURE_FEE 
					            , T.NOTE 			= S.NOTE 
					WHEN NOT MATCHED THEN 
					   INSERT 
					   ( 
					              T.ENTER_CD
					            , T.EDU_SEQ
					            , T.EDU_EVENT_SEQ
					            , T.SEQ
					            , T.TEACHER_SEQ
					            , T.TEL_NO
					            , T.SUBJECT_LECTURE
					            , T.LECTURE_FEE
					            , T.NOTE
					            , T.CHKDATE
					            , T.CHKID
					   ) 
					   VALUES 
					   ( 
					              S.ENTER_CD
					            , S.EDU_SEQ
					            , S.EDU_EVENT_SEQ
					            , S.SEQ
					            , S.TEACHER_SEQ
					            , S.TEL_NO
					            , S.SUBJECT_LECTURE
					            , S.LECTURE_FEE
					            , S.NOTE
					            , sysdate
					            , #{ssnSabun}
					   ) 

				]]>
			
			
		</update>
		
<!-- 		교육회차관리 강사내역 저장 -->
		<update parameterType="map" id="saveEduEventLecturerPopupTTRA150INSERT">
			
				<![CDATA[
						MERGE INTO TTRA150	T
						USING
						(
									SELECT	ENTER_CD
										,	EDU_SEQ
										,	EDU_EVENT_SEQ
										,	SURVEY_ITEM_CD
										,	SURVEY_ITEM_NM
										,	SURVEY_ITEM_DESC
										,	SEQ
										,	SURVEY_ITEM_TYPE
										,	CHKDATE
										,	CHKID
										,	SURVEY_ITEM_TYPE2
							FROM	(
									SELECT	NULL		AS	ENTER_CD
										,	NULL		AS	EDU_SEQ
										,	NULL		AS	EDU_EVENT_SEQ
										,	NULL		AS	SURVEY_ITEM_CD
										,	NULL		AS	SURVEY_ITEM_NM
										,	NULL		AS	SURVEY_ITEM_DESC
										,	NULL		AS	SEQ
										,	NULL		AS	SURVEY_ITEM_TYPE
										,	NULL		AS	CHKDATE
										,	NULL		AS	CHKID
										,	NULL		AS	SURVEY_ITEM_TYPE2
									FROM	DUAL ]]>
<foreach item="rm" collection="insertRows" index="idx">
								UNION ALL
										SELECT	ENTER_CD, TRIM(#{rm.eduSeq}), TO_CHAR( (SELECT (NVL(MAX(TO_NUMBER(SEQ)),0) + 1) FROM TTRA122) ), SURVEY_ITEM_CD, SURVEY_ITEM_NM, SURVEY_ITEM_DESC, SEQ, SURVEY_ITEM_TYPE, SYSDATE, #{ssnSabun}, '50'
										FROM	TTRA005
										WHERE	ENTER_CD = #{ssnEnterCd}
										AND		TO_CHAR(SYSDATE, 'YYYYMMDD}) BETWEEN START_YMD AND END_YMD
</foreach> <![CDATA[
									)	WHERE	ENTER_CD IS NOT NULL
										AND	EDU_SEQ IS NOT NULL
										AND	EDU_EVENT_SEQ IS NOT NULL
										AND	SURVEY_ITEM_CD IS NOT NULL
						) S
					ON	(
								T.ENTER_CD			=		S.ENTER_CD
							AND	T.EDU_SEQ			=		S.EDU_SEQ
							AND	T.EDU_EVENT_SEQ		=		S.EDU_EVENT_SEQ
							AND	T.SURVEY_ITEM_CD	=		S.SURVEY_ITEM_CD
						)
					WHEN MATCHED THEN
					UPDATE SET
							T.SURVEY_ITEM_NM		=	S.SURVEY_ITEM_NM
						,	T.SURVEY_ITEM_DESC		=	S.SURVEY_ITEM_DESC
						,	T.SEQ					=	S.SEQ
						,	T.SURVEY_ITEM_TYPE		=	S.SURVEY_ITEM_TYPE
						,	T.CHKDATE				=	S.CHKDATE
						,	T.CHKID					=	S.CHKID
						,	T.SURVEY_ITEM_TYPE2		=	S.SURVEY_ITEM_TYPE2
					WHEN NOT MATCHED THEN
					INSERT
					(
							T.ENTER_CD
						,	T.EDU_SEQ
						,	T.EDU_EVENT_SEQ
						,	T.SURVEY_ITEM_CD
						,	T.SURVEY_ITEM_NM
						,	T.SURVEY_ITEM_DESC
						,	T.SEQ
						,	T.SURVEY_ITEM_TYPE
						,	T.CHKDATE
						,	T.CHKID
						,	T.SURVEY_ITEM_TYPE2
					)
					VALUES
					(
							S.ENTER_CD
						,	S.EDU_SEQ
						,	S.EDU_EVENT_SEQ
						,	S.SURVEY_ITEM_CD
						,	S.SURVEY_ITEM_NM
						,	S.SURVEY_ITEM_DESC
						,	S.SEQ
						,	S.SURVEY_ITEM_TYPE
						,	S.CHKDATE
						,	S.CHKID
						,	S.SURVEY_ITEM_TYPE2
					)
				]]>
			
			
		</update>

		<!-- 		교육회차관리 강사내역 삭제 -->
		<delete parameterType="map" id="deleteEduEventLecturerPopup">
				<![CDATA[
					DELETE FROM TTRA122
					 WHERE ENTER_CD       = TRIM(#{ssnEnterCd}) 
					   AND EDU_SEQ        = TRIM(#{eduSeq}) 
					   AND EDU_EVENT_SEQ  = TRIM(#{eduEventSeq}) 
					   AND ( SEQ,TEACHER_SEQ ) IN ( ( NULL,NULL) ]]> 
<foreach item="rm" collection="deleteRows"> 
	<if test="rm.seq != null and rm.seq neq '' and rm.teacherSeq != null and rm.teacherSeq neq ''">
					     , ( TRIM( #{rm.seq} ),TRIM( #{rm.teacherSeq} ) ) 
    </if>
</foreach>
					       )
		</delete>

<!-- 		교육회차관리 강사선택팝업 조회 -->
		<select parameterType="map" resultType="cMap" id="getEduEventLecturerNmPopupList">
				<![CDATA[
					SELECT	/*	EduEventMgr-mapping-query.getEduEventLecturerNmPopupList	*/
							ENTER_CD
						 ,	TEACHER_GB /*강사구분*/
						 ,	TEACHER_NO /*강사번호*/
						 ,	TEACHER_NM /*강사이름*/
						 ,	ORG_NM /*소속명*/
					  FROM	TTRA002
					 WHERE	ENTER_CD	=	#{ssnEnterCd} ]]>
					 <if test='searchTeacherGb != null and searchTeacherGb eq "Y"'>
					   AND	TEACHER_GB	IN	( 'IN', 'OUT' )
					 </if>
					 <if test='searchTeacherGb != null and searchTeacherGb neq "Y"'>
					   AND	TEACHER_GB	NOT IN	( 'IN', 'OUT' )
					 </if>
					 <if test='searchTeacherNm != null and searchTeacherNm neq "Y"'>
					   AND	TEACHER_NM LIKE '%'||(#{searchTeacherNm})||'%'
					 </if>
			
		</select>
</mapper>