<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tra.basis.eduLecturerMgr">

		<select parameterType="map" resultType="cMap" id="getEduLecturerMgrList">
				<![CDATA[
				SELECT	  A.ENTER_CD												/* 회사구분(TORG900) */
						, A.TEACHER_SEQ												/* 강사순번 */
						, A.TEACHER_GB												/* 강사구분(L20020) */
						, DECODE ( A.TEACHER_GB, 'IN', A.TEACHER_NO, 'OUT', A.TEACHER_SEQ )	AS	TEACHER_NO			/* 강사번호 */
						, A.TEACHER_NM												/* 강사명 */
						, A.ENTER_NM												/* 회사 */
						, A.ORG_NM													/* 소속 */
						, A.JIKWEE_NM												/* 직위 */
						, A.JIKCHAK_NM												/* 직책 */
						, A.TEL_NO													/* 전화번호 */
						, A.HOME_TEL_NO												/* 자택연락처 */
						, A.ZIP														/* 우편번호 */
						, A.ADDR													/* 주소 */
						, A.CAREER													/* 경력 */
						, A.SUBJECT_LECTURE											/* 강의과목 */
						, A.LECTURE_FEE												/* 강의료 */
						, A.MEMO													/* 특이사항 */
						, A.BANK_CD													/* 은행구분 */
						, CRYPTIT.DECRYPT(A.ACC_HOLDER,A.ENTER_CD) AS ACC_HOLDER	/* 계좌번호 */
						, A.ACC_NO													/* 계좌명 */
						, A.NOTE													/* 비고 */
						, A.CHKDATE													/* 최종수정시각 */
						, A.CHKID													/* 최종수정자 */
				FROM	TTRA002	A
				WHERE	A.ENTER_CD			=	#{ssnEnterCd} ]]>
				<if test="searchTeacherGb != null and searchTeacherGb neq ''">
				  AND	A.TEACHER_GB		=	#{searchTeacherGb}
				</if>
				<if test="searchTeacherNm != null and searchTeacherNm neq ''">
				  AND	A.TEACHER_NM		LIKE	'%' || #{searchTeacherNm} || '%'
				</if>
				<if test="searchSubjectLecture != null and searchSubjectLecture neq ''">
				  AND	A.SUBJECT_LECTURE	LIKE	'%' || #{searchSubjectLecture} || '%'
				</if>
		</select>

		<update parameterType="map" id="saveEduLecturerMgr">
			
				<![CDATA[
						MERGE INTO TTRA002	T
						USING ]]>
						(
									SELECT	ENTER_CD
										,	TEACHER_SEQ
										,	TEACHER_GB
										,	TEACHER_NO
										,	TEACHER_NM
										,	ENTER_NM
										,	ORG_NM
										,	JIKWEE_NM
										,	JIKCHAK_NM
										,	TEL_NO
										,	HOME_TEL_NO
										,	ZIP
										,	ADDR
										,	CAREER
										,	SUBJECT_LECTURE
										,	LECTURE_FEE
										,	MEMO
										,	BANK_CD
										,	ACC_HOLDER
										,	ACC_NO
										,	NOTE
										,	CHKDATE
										,	CHKID
							FROM	(
									SELECT	NULL		AS	ENTER_CD
										,	NULL		AS	TEACHER_SEQ
										,	NULL		AS	TEACHER_GB
										,	NULL		AS	TEACHER_NO
										,	NULL		AS	TEACHER_NM
										,	NULL		AS	ENTER_NM
										,	NULL		AS	ORG_NM
										,	NULL		AS	JIKWEE_NM
										,	NULL		AS	JIKCHAK_NM
										,	NULL		AS	TEL_NO
										,	NULL		AS	HOME_TEL_NO
										,	NULL		AS	ZIP
										,	NULL		AS	ADDR
										,	NULL		AS	CAREER
										,	NULL		AS	SUBJECT_LECTURE
										,	NULL		AS	LECTURE_FEE
										,	NULL		AS	MEMO
										,	NULL		AS	BANK_CD
										,	NULL		AS	ACC_HOLDER
										,	NULL		AS	ACC_NO
										,	NULL		AS	NOTE
										,	NULL		AS	CHKDATE
										,	NULL		AS	CHKID
									FROM	DUAL
<foreach item="rm" collection="mergeRows" index="idx">
								UNION ALL
									SELECT	TRIM(#{ssnEnterCd})				AS	ENTER_CD
										<choose>
											<when test="rm.teacherSeq != null and rm.teacherSeq neq ''">
										  ,	TRIM(#{rm.teacherSeq})			AS	TEACHER_SEQ
											</when>
											<otherwise>
										  ,	TO_CHAR( (SELECT (NVL(MAX(TO_NUMBER(TEACHER_SEQ)),0) + #{idx}) FROM TTRA002) )	AS TEACHER_SEQ
											</otherwise>
										</choose>
										,	TRIM(#{rm.teacherGb})			AS	TEACHER_GB
										,	TRIM(#{rm.teacherNo})			AS	TEACHER_NO
										,	TRIM(#{rm.teacherNm})			AS	TEACHER_NM
										,	TRIM(#{rm.enterNm})				AS	ENTER_NM
										,	TRIM(#{rm.orgNm})				AS	ORG_NM
										,	TRIM(#{rm.jikweeNm})			AS	JIKWEE_NM
										,	TRIM(#{rm.jikchakNm})			AS	JIKCHAK_NM
										,	TRIM(#{rm.telNo})				AS	TEL_NO
										,	TRIM(#{rm.homeTelNo})			AS	HOME_TEL_NO
										,	TRIM(#{rm.zip})					AS	ZIP
										,	TRIM(#{rm.addr})				AS	ADDR
										,	TRIM(#{rm.career})				AS	CAREER
										,	TRIM(#{rm.subjectLecture})		AS	SUBJECT_LECTURE
										,	TRIM(#{rm.lectureFee})			AS	LECTURE_FEE
										,	TRIM(#{rm.memo})				AS	MEMO
										,	TRIM(#{rm.bankCd})				AS	BANK_CD
										,	TRIM(#{rm.accHolder})			AS	ACC_HOLDER
										,	TRIM(#{rm.accNo})				AS	ACC_NO
										,	TRIM(#{rm.note})				AS	NOTE
										,	SYSDATE							AS	CHKDATE
										,	#{ssnSabun}						AS	CHKID
									FROM	DUAL
</foreach>
									)	WHERE	ENTER_CD IS NOT NULL
										AND		TEACHER_SEQ IS NOT NULL
						) S
					ON	(
								T.ENTER_CD				=		S.ENTER_CD
							AND	T.TEACHER_SEQ			=		S.TEACHER_SEQ
						)
					WHEN MATCHED THEN
					UPDATE SET
							T.TEACHER_GB			=	S.TEACHER_GB
						,	T.TEACHER_NO			=	S.TEACHER_NO
						,	T.TEACHER_NM			=	S.TEACHER_NM
						,	T.ENTER_NM				=	S.ENTER_NM
						,	T.ORG_NM				=	S.ORG_NM
						,	T.JIKWEE_NM				=	S.JIKWEE_NM
						,	T.JIKCHAK_NM			=	S.JIKCHAK_NM
						,	T.TEL_NO				=	S.TEL_NO
						,	T.HOME_TEL_NO			=	S.HOME_TEL_NO
						,	T.ZIP					=	S.ZIP
						,	T.ADDR					=	S.ADDR
						,	T.CAREER				=	S.CAREER
						,	T.SUBJECT_LECTURE		=	S.SUBJECT_LECTURE
						,	T.LECTURE_FEE			=	S.LECTURE_FEE
						,	T.MEMO					=	S.MEMO
						,	T.BANK_CD				=	S.BANK_CD
						, 	T.ACC_HOLDER	= CRYPTIT.encrypt(S.ACC_HOLDER, #{ssnEnterCd})
						,	T.ACC_NO				=	S.ACC_NO
						,	T.NOTE					=	S.NOTE
						,	T.CHKDATE				=	S.CHKDATE
						,	T.CHKID					=	S.CHKID
					WHEN NOT MATCHED THEN
					INSERT
					(
							T.ENTER_CD
						,	T.TEACHER_SEQ
						,	T.TEACHER_GB
						,	T.TEACHER_NO
						,	T.TEACHER_NM
						,	T.ENTER_NM
						,	T.ORG_NM
						,	T.JIKWEE_NM
						,	T.JIKCHAK_NM
						,	T.TEL_NO
						,	T.HOME_TEL_NO
						,	T.ZIP
						,	T.ADDR
						,	T.CAREER
						,	T.SUBJECT_LECTURE
						,	T.LECTURE_FEE
						,	T.MEMO
						,	T.BANK_CD
						,	T.ACC_HOLDER
						,	T.ACC_NO
						,	T.NOTE
						,	T.CHKDATE
						,	T.CHKID
					)
					VALUES
					(
							S.ENTER_CD
						,	S.TEACHER_SEQ
						,	S.TEACHER_GB
						,	S.TEACHER_NO
						,	S.TEACHER_NM
						,	S.ENTER_NM
						,	S.ORG_NM
						,	S.JIKWEE_NM
						,	S.JIKCHAK_NM
						,	S.TEL_NO
						,	S.HOME_TEL_NO
						,	S.ZIP
						,	S.ADDR
						,	S.CAREER
						,	S.SUBJECT_LECTURE
						,	S.LECTURE_FEE
						,	S.MEMO
						,	S.BANK_CD
						, 	CRYPTIT.encrypt(S.ACC_HOLDER, #{ssnEnterCd})
						,	S.ACC_NO
						,	S.NOTE
						,	S.CHKDATE
						,	S.CHKID
					)
		</update>

		<delete parameterType="map" id="deleteEduLecturerMgr">
			
				<![CDATA[
					DELETE	FROM TTRA002
					WHERE	(ENTER_CD, TEACHER_SEQ) IN ((NULL, NULL) ]]>
<foreach item="rm" collection="deleteRows">
						,
						<if test="ssnEnterCd != null and ssnEnterCd neq '' and rm.teacherSeq != null and rm.teacherSeq neq ''">
												( TRIM( #{ssnEnterCd} ) , TRIM( #{rm.teacherSeq} ) )
						</if>
</foreach>
										)
		</delete>
</mapper>