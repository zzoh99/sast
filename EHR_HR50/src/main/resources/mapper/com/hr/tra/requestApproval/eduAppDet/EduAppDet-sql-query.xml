<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tra.requestApproval.eduAppDet">
<!-- 신청 세부내역 조회 -->
		<select parameterType="map" resultType="cMap" id="getEduAppDetMap">
			
				<![CDATA[
					SELECT A.ENTER_CD
					     , A.APPL_SEQ
					     , A.SABUN
					     , A.EDU_SEQ
					     , A.EDU_EVENT_SEQ
					     , A.IN_OUT_TYPE
					     , A.JOB_CD
					     , ( SELECT MAX(JOB_NM) KEEP(DENSE_RANK FIRST ORDER BY X.SDATE DESC)
					           FROM TORG201 X
					          WHERE X.ENTER_CD  = A.ENTER_CD
					            AND X.JOB_CD    = A.JOB_CD
					            AND TRIM(#{searchApplYmd}) BETWEEN X.SDATE AND NVL(X.EDATE, '99991231')
					       ) AS JOB_NM     
					     , A.YEAR_PLAN_YN
					     , A.EDU_MEMO
					     , A.NOTE
					     
					     , B.EDU_COURSE_NM
						 , B.EDU_BRANCH_CD
						 , B.EDU_M_BRANCH_CD
						 , B.EDU_ORG_CD
						 , ( SELECT X.EDU_ORG_NM
						       FROM TTRA001 X
						      WHERE X.ENTER_CD   = B.ENTER_CD
						        AND X.EDU_ORG_CD = B.EDU_ORG_CD ) AS EDU_ORG_NM
						 , B.EDU_MEMO        
						 , C.EDU_S_YMD
						 , C.EDU_E_YMD
						 , C.REAL_EXPENSE_MON
						 , C.EDU_PLACE
						 , CASE WHEN A.APPL_SEQ = B.APPL_SEQ THEN 'Y' ELSE 'N' END AS EDU_EDIT_YN
						 , CASE WHEN A.APPL_SEQ = C.APPL_SEQ THEN 'Y' ELSE 'N' END AS EVT_EDIT_YN
					  FROM TTRA201 A, TTRA101 B, TTRA121 C
					 WHERE A.ENTER_CD      = TRIM(#{ssnEnterCd})
					   AND A.APPL_SEQ      = TRIM( #{searchApplSeq} )
					   AND A.ENTER_CD      = B.ENTER_CD
					   AND A.EDU_SEQ       = B.EDU_SEQ
					   AND A.ENTER_CD      = C.ENTER_CD
					   AND A.EDU_SEQ       = C.EDU_SEQ
					   AND A.EDU_EVENT_SEQ = C.EDU_EVENT_SEQ
				]]>
			
			
		</select>
		
<!-- 교육과정선택 리스트 -->
		<select parameterType="map" resultType="cMap" id="getEduAppDetSelList">
			
				<![CDATA[
				WITH  EDU_LIST AS (
			       SELECT /* 교육회차 */
						  A.EDU_EVENT_SEQ
						, A.EDU_EVENT_NM
						, A.EDU_STATUS_CD AS EDU_EVT_STATUS_CD
						, A.EDU_PLACE
						, A.EDU_S_YMD
						, A.EDU_E_YMD
						, A.EDU_S_HM
						, A.EDU_E_HM
						, A.EDU_DAY
						, A.EDU_HOUR
						, A.APPL_S_YMD
						, A.APPL_E_YMD
						, A.CURRENCY_CD
						, A.PER_EXPENSE_MON
						, A.REAL_EXPENSE_MON
						, A.LABOR_APPLY_YN
						, A.LABOR_MON
						, A.MAX_PERSON
						, A.FILE_SEQ
						, A.EDU_SATI_SKIP_YN
						, A.NOTE
						, A.MNG_SABUN
						, A.MNG_TEL_NO
						, A.EDU_REWARD_CD
						, A.EDU_REWARD_CNT
						, A.RESULT_APP_SKIP_YN
						, F_COM_GET_NAMES( A.ENTER_CD, A.MNG_SABUN ) AS MNG_NAME
						, F_COM_GET_ORG_NM2( A.ENTER_CD, A.MNG_SABUN, TO_CHAR(SYSDATE, 'yyyymmdd') ) AS MNG_ORG_NM
						  /* 교육과정 */
						, C.EDU_SEQ
						, C.EDU_COURSE_NM
						, C.IN_OUT_TYPE
						, C.EDU_BRANCH_CD
						, C.EDU_M_BRANCH_CD
						, C.EDU_METHOD_CD
						, C.EDU_STATUS_CD
						, C.EDU_ORG_CD
						, C.MANDATORY_YN
					    , C.JOB_CD
					    , C.EDU_LEVEL
					    , C.EDU_MEMO
					    , (SELECT X.JOB_NM
					         FROM TORG201 X
					        WHERE X.ENTER_CD = C.ENTER_CD
					          AND X.JOB_CD   = C.JOB_CD
					          AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN X.SDATE AND NVL( X.EDATE, '99991231' ) ) AS JOB_NM 
					    
					    , (SELECT X.EDU_ORG_NM
					         FROM TTRA001 X
					        WHERE X.ENTER_CD   = C.ENTER_CD
					          AND X.EDU_ORG_CD = C.EDU_ORG_CD ) AS EDU_ORG_NM
					    , ( SELECT MAX(X.EDU_EVENT_SEQ) KEEP(DENSE_RANK FIRST ORDER BY X.EDU_E_YMD DESC)
					          FROM TTRA121 X
					         WHERE X.ENTER_CD = C.ENTER_CD
					           AND X.EDU_SEQ  = C.EDU_SEQ ) AS LAST_EDU_EVENT_SEQ          
					    , '<a class="sbasic">선택</a>' AS SEL_BTN            
					    , '0' AS DETAIL     
			         FROM TTRA121 A, TTRA101 C
			        WHERE A.ENTER_CD   = #{ssnEnterCd}
			          AND A.ENTER_CD   = C.ENTER_CD
			          AND A.EDU_SEQ    = C.EDU_SEQ
			    --      AND C.EDU_METHOD_CD != 'A'  -- 필수교육제외
				]]>
<if test="searchEduCourseNm != null and searchEduCourseNm neq ''">
				      AND C.EDU_COURSE_NM LIKE '%' || #{searchEduCourseNm} || '%'
</if>
<if test="searchEduSYmd != null and searchEduSYmd neq ''">
				      AND A.EDU_S_YMD BETWEEN REPLACE(#{searchEduSYmd}, '-', '') AND REPLACE(#{searchEduEYmd}, '-', '')
</if>
	<![CDATA[
				)
				SELECT * 
				  FROM (
						SELECT *
						  FROM EDU_LIST A
						 WHERE A.EDU_STATUS_CD = '10030'  -- 운영
		                   AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN A.APPL_S_YMD AND A.APPL_E_YMD  -- 신청기간
						/*
						   AND A.IN_OUT_TYPE = 'IN'       --사내
		                 UNION ALL
						SELECT *
						  FROM EDU_LIST A
						 WHERE A.IN_OUT_TYPE = 'OUT'       --사외
						   AND A.EDU_S_YMD > TO_CHAR(SYSDATE, 'YYYYMMDD') -- 교육시작 전
		                 UNION ALL
						SELECT *
						  FROM EDU_LIST A
						 WHERE A.IN_OUT_TYPE = 'OUT'       --사외
						   AND A.EDU_S_YMD <= TO_CHAR(SYSDATE, 'YYYYMMDD')  -- 과거 교육에서 
						   AND A.EDU_EVENT_SEQ = A.LAST_EDU_EVENT_SEQ  -- 마지막 시행한 날짜로 가져옴.
						 */
                      )
                 ORDER BY EDU_COURSE_NM, EDU_S_YMD     
                   				      				
				]]>
			
			
		</select>
		
		
<!-- 교육회차 중복 체크  -->
		<select parameterType="map" resultType="cMap" id="getEduAppDetEduEvtDup">
			
				<![CDATA[
					SELECT MAX(EDU_EVENT_SEQ) AS EDU_EVENT_SEQ
					     , MAX(REAL_EXPENSE_MON) KEEP(DENSE_RANK FIRST ORDER BY EDU_EVENT_SEQ DESC) AS REAL_EXPENSE_MON
					     , MAX(LABOR_APPLY_YN) KEEP(DENSE_RANK FIRST ORDER BY EDU_EVENT_SEQ DESC) AS LABOR_APPLY_YN
					  FROM TTRA121
					 WHERE ENTER_CD   = #{ssnEnterCd}
					   AND EDU_SEQ    = TRIM(#{eduSeq})
					   AND EDU_S_YMD  = REPLACE(TRIM(#{eduSYmd}), '-', '')
					   AND EDU_E_YMD  = REPLACE(TRIM(#{eduEYmd}), '-', '')
				]]>
			
			
		</select>


<!-- 교육신청 중복 체크  -->
		<select parameterType="map" resultType="cMap" id="getEduAppDetDupChk">
			
				<![CDATA[

				   SELECT COUNT(1) AS CNT
				     FROM TTRA201 A
				    WHERE A.ENTER_CD    = #{ssnEnterCd}   
				      AND A.APPL_SEQ    <> TRIM( #{searchApplSeq} )   	
				      AND A.SABUN   	= TRIM( #{searchApplSabun} )   
				   	  AND EDU_SEQ    	= TRIM(#{eduSeq})             
				   	  AND EDU_EVENT_SEQ = TRIM(#{eduEventSeq})                
                      AND EXISTS ( SELECT 1
                                     FROM THRI103 X
                                    WHERE X.ENTER_CD = A.ENTER_Cd
                                       AND X.APPL_SEQ = A.APPL_SEQ
                                       AND X.APPL_STATUS_CD IN ( '21', '31', '99' )
                                  )            
				]]>
			
			
		</select>

<!-- 		교육기관관리 저장 -->
		<insert parameterType="map" id="insertEduAppDetEduOrg">
			
				<![CDATA[
					INSERT INTO TTRA101 T 
			   	 	(         
			              T.ENTER_CD
			            , T.EDU_ORG_CD  
			            , T.EDU_ORG_NM
					    , T.APPL_SEQ
			            , T.CHKDATE
			            , T.CHKID
			   		) 
			       SELECT TRIM(#{ssnEnterCd})  	AS  ENTER_CD
			            , TRIM(#{eduOrgCd})       AS  EDU_ORG_CD
			            , TRIM(#{eduOrgNm})       AS  EDU_ORG_NM
			            , TRIM(#{searchApplSeq})  AS  APPL_SEQ
			            , sysdate
			            , #{ssnSabun}
					 FROM DUAL
				]]>
			
			
		</insert>
		
<!-- 		교육과정 등록 저장 -->
		<insert parameterType="map" id="insertEduAppDetEdu">
			
				<![CDATA[
				   INSERT INTO TTRA101 
			   	   (         
			              ENTER_CD
			            , EDU_SEQ
			            , EDU_COURSE_NM
			            , IN_OUT_TYPE
			            , EDU_BRANCH_CD
			            , EDU_M_BRANCH_CD
			            , EDU_METHOD_CD
			            , EDU_STATUS_CD
			            , EDU_ORG_CD
			            , FOREIGN_CD
			            , MANDATORY_YN
			            , JOB_CD
			            , EDU_LEVEL
			            , EDU_MEMO
			            , NOTE
			            , APPL_SEQ
			            , CHKDATE
			            , CHKID
			   	   ) 
			       SELECT TRIM(#{ssnEnterCd})  	AS  ENTER_CD
			            , TRIM(#{eduSeq})  		AS  EDU_SEQ
			            , TRIM(#{eduCourseNm}) 	AS  EDU_COURSE_NM
			            , TRIM(#{inOutType})  	AS  IN_OUT_TYPE
			            , TRIM(#{eduBranchCd})  	AS  EDU_BRANCH_CD
			            , TRIM(#{eduMBranchCd})  	AS  EDU_M_BRANCH_CD
			            , '9'  					AS  EDU_METHOD_CD     --시행방법 : 기타교육 
			            , '10030'  				AS  EDU_STATUS_CD     --과정상태 : 운영
			            , TRIM(#{eduOrgCd})  		AS  EDU_ORG_CD
			            , 'ko'  				AS  FOREIGN_CD        --사용언어 : 한국어
			            , 'N' 					AS  MANDATORY_YN      --필수여부 : N
			            , TRIM(#{jobCd})  		AS  JOB_CD
			            , NULL  				AS  EDU_LEVEL
			            , TRIM(#{eduMemo})  		AS  EDU_MEMO
			            , NULL  				AS  NOTE
			            , TRIM(#{searchApplSeq})	AS  APPL_SEQ
			            , sysdate
			            , #{ssnSabun}
			        FROM DUAL
				]]>
			
			
		</insert>
		
<!-- 		교육회차관리 등록 저장 -->
		<insert parameterType="map" id="insertEduAppDetEduEvt">
			
				<![CDATA[
				   INSERT INTO TTRA121 
				   ( 
				              ENTER_CD
				            , EDU_SEQ
				            , EDU_EVENT_SEQ
				            , EDU_EVENT_NM
				            , EDU_STATUS_CD
				            , EDU_ORG_CD
				            , EDU_PLACE
				            , EDU_S_YMD
				            , EDU_E_YMD
				            , EDU_S_HM
				            , EDU_E_HM
				            , EDU_DAY
				            , EDU_HOUR
				            , APPL_S_YMD
				            , APPL_E_YMD
				            , CURRENCY_CD
				            , PER_EXPENSE_MON
				            , REAL_EXPENSE_MON
				            , LABOR_APPLY_YN
				            , LABOR_MON
				            , FILE_SEQ
				            , EDU_SATI_SKIP_YN
				            , MAX_PERSON
				            , MNG_SABUN 
				            , MNG_TEL_NO 
				            , EDU_REWARD_CD 
				            , EDU_REWARD_CNT
				            , RESULT_APP_SKIP_YN 
				            , NOTE
				            , APPL_SEQ
				            , CHKDATE
				            , CHKID
				   ) 
			       SELECT TRIM(#{ssnEnterCd})  		AS  ENTER_CD 
			            , TRIM(#{eduSeq})  			AS  EDU_SEQ
			            , TRIM(#{eduEventSeq})  		AS  EDU_EVENT_SEQ
			            , '(' || REPLACE(TRIM(#{eduSYmd}),'-','') || ')' || TRIM(#{eduCourseNm}) AS  EDU_EVENT_NM
			            , '10030'  					AS  EDU_STATUS_CD
			            , TRIM(#{eduOrgCd})  			AS  EDU_ORG_CD
			            , TRIM(#{eduPlace})			AS  EDU_PLACE
			            , REPLACE(TRIM(#{eduSYmd}),'-','')  			AS  EDU_S_YMD
			            , REPLACE(TRIM(#{eduEYmd}),'-','')  			AS  EDU_E_YMD
			            , NULL 						AS  EDU_S_HM
			            , NULL  					AS  EDU_E_HM
			            , NULL 						AS  EDU_DAY
			            , NULL  					AS  EDU_HOUR
			            , TO_CHAR(SYSDATE, 'YYYYMMDD')  			AS  APPL_S_YMD
			            , REPLACE(TRIM(#{eduSYmd}),'-','')  			AS  APPL_E_YMD
			            , '100'  					AS  CURRENCY_CD
			            , REPLACE(TRIM(#{realExpenseMon}),',','')  	AS  PER_EXPENSE_MON
			            , REPLACE(TRIM(#{realExpenseMon}),',','')  	AS  REAL_EXPENSE_MON
			            , TRIM(#{laborApplyYn})  		AS  LABOR_APPLY_YN
			            , NULL  					AS  LABOR_MON
			            , NULL  					AS  FILE_SEQ
			            , 'N'  						AS  EDU_SATI_SKIP_YN
			            , NULL  					AS  MAX_PERSON
			            , NULL  					AS  MNG_SABUN
			            , NULL  					AS  MNG_TEL_NO
			            , NULL  					AS  EDU_REWARD_CD
			            , NULL  					AS  EDU_REWARD_CNT
			            , 'N'  						AS  RESULT_APP_SKIP_YN
			            , NULL 						AS  NOTE
			            , TRIM( #{searchApplSeq} )	AS  APPL_SEQ
			            , sysdate
			            , #{ssnSabun}
					 FROM DUAL
				]]>
		</insert>
		
<!-- 		교육신청 저장 -->
		<update parameterType="map" id="saveEduAppDet">
			
				<![CDATA[
				 MERGE INTO TTRA201 T 
				 USING 
				( 
				       SELECT TRIM(#{ssnEnterCd})  		AS  ENTER_CD 
				            , TRIM(#{searchApplSeq})  	AS  APPL_SEQ
				            , TRIM(#{searchApplSabun})  	AS  SABUN
				            
				            , EDU_SEQ  					AS  EDU_SEQ
				            , EDU_EVENT_SEQ  			AS  EDU_EVENT_SEQ
				            
				            , TRIM(#{inOutType})  		AS  IN_OUT_TYPE
				            , TRIM(#{jobCd})  			AS  JOB_CD
				            , TRIM(#{yearPlanYn})  		AS  YEAR_PLAN_YN
				         	, TRIM(#{eduMemo})			AS EDU_MEMO
				            , TRIM(#{note}) 	 			AS  NOTE
				            , 'N'  						AS  EDU_SURVEY_YN
				        FROM TTRA121
				       WHERE ENTER_CD      = TRIM(#{ssnEnterCd})
					     AND EDU_SEQ       = TRIM(#{eduSeq})  
					     AND EDU_EVENT_SEQ = TRIM(#{eduEventSeq})  
				) S 
				ON ( 
				          T.ENTER_CD 	= S.ENTER_CD 
				     AND  T.APPL_SEQ 	= S.APPL_SEQ 
				     AND  T.SABUN 		= S.SABUN 
				) 
				WHEN MATCHED THEN 
				   UPDATE SET T.CHKDATE			= sysdate 
				            , T.CHKID			= #{ssnSabun} 
				            , T.EDU_SEQ 		= S.EDU_SEQ 
				            , T.EDU_EVENT_SEQ 	= S.EDU_EVENT_SEQ 
				            , T.IN_OUT_TYPE 	= S.IN_OUT_TYPE 
				            , T.JOB_CD 			= S.JOB_CD 
				            , T.YEAR_PLAN_YN 	= S.YEAR_PLAN_YN 
				            , T.EDU_MEMO 		= S.EDU_MEMO 
				            , T.NOTE 			= S.NOTE 
				            , T.EDU_SURVEY_YN 	= S.EDU_SURVEY_YN 
				WHEN NOT MATCHED THEN 
				   INSERT 
				   ( 
				              T.ENTER_CD
				            , T.APPL_SEQ
				            , T.SABUN
				            , T.EDU_SEQ
				            , T.EDU_EVENT_SEQ
				            , T.IN_OUT_TYPE
				            , T.JOB_CD
				            , T.YEAR_PLAN_YN
				            , T.EDU_MEMO
				            , T.NOTE
				            , T.EDU_SURVEY_YN
				            , T.CHKDATE
				            , T.CHKID
				   ) 
				   VALUES 
				   ( 
				              S.ENTER_CD
				            , S.APPL_SEQ
				            , S.SABUN
				            , S.EDU_SEQ
				            , S.EDU_EVENT_SEQ
				            , S.IN_OUT_TYPE
				            , S.JOB_CD
				            , S.YEAR_PLAN_YN
				            , S.EDU_MEMO
				            , S.NOTE
				            , S.EDU_SURVEY_YN
				            , sysdate
				            , #{ssnSabun}
				   ) 

				]]>
			
			
		</update>
				
</mapper>