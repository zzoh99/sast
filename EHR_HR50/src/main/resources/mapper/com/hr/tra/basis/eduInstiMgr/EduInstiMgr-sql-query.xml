<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tra.basis.eduInstiMgr">
<!-- 		교육기관관리 조회 -->
		<select parameterType="map" resultType="cMap" id="getEduInstiMgrList">
			
				<![CDATA[
				SELECT	  '0' AS DETAIL
						, A.EDU_ORG_CD
						, A.EDU_ORG_NM
						, A.MAIN_EDU_ORG_YN
						, A.NATIONAL_CD
						, A.ZIP
						, A.CUR_ADDR1
						, A.CUR_ADDR2
						, A.BIGO
						, A.CHARGE_NAME
						, A.ORG_NM
						, A.JIKWEE_NM
						, A.TEL_NO
						, A.TEL_HP
						, A.FAX_NO
						, A.EMAIL
						, A.COMPANY_NUM
						, CRYPTIT.DECRYPT(A.BANK_NUM,A.ENTER_CD) AS BANK_NUM
						, A.BANK_CD
						, A.COMPANY_HEAD
						, A.BUSINESS_PART
						, A.BUSINESS_TYPE
						, A.FILE_SEQ
						, DECODE( (	SELECT	COUNT(*)
									FROM	TSYS972
									WHERE	ENTER_CD = A.ENTER_CD
									  AND	FILE_SEQ = A.FILE_SEQ), 0, '', 0) AS  FILE_CNT
				FROM	TTRA001 A
				WHERE	A.ENTER_CD = TRIM(#{ssnEnterCd})
				  AND	A.EDU_ORG_CD LIKE '%' || TRIM(#{searchEduEnterCd}) || '%'
				  AND	A.EDU_ORG_NM LIKE '%' || TRIM(#{searchEduOrgNm}) || '%'
				ORDER BY A.MAIN_EDU_ORG_YN DESC, A.EDU_ORG_CD
				]]>
			
			
		</select>
		
<!-- 		교육기관관리 저장 -->
		<update parameterType="map" id="saveEduInstiMgr">
			
				<![CDATA[
					MERGE INTO TTRA001 T
					USING	( ]]>
<foreach item="rm" collection="mergeRows" separator=" UNION ALL ">
									SELECT
											  TRIM( #{ssnEnterCd} )	AS ENTER_CD
											, TRIM( #{rm.eduOrgCd} )		AS EDU_ORG_CD
											, TRIM( #{rm.eduOrgNm} )		AS EDU_ORG_NM
											, TRIM( #{rm.zip} )				AS ZIP
											, TRIM( #{rm.curAddr1} )		AS CUR_ADDR1
											, TRIM( #{rm.curAddr2} )		AS CUR_ADDR2
											, TRIM( #{rm.bigo} )			AS BIGO
											, TRIM( #{rm.nationalCd} )		AS NATIONAL_CD
											, TRIM( #{rm.chargeName} )		AS CHARGE_NAME
											, TRIM( #{rm.orgNm} )			AS ORG_NM
											, TRIM( #{rm.jikweeNm} )		AS JIKWEE_NM
											, TRIM( #{rm.telNo} )			AS TEL_NO
											, TRIM( #{rm.telHp} )			AS TEL_HP
											, TRIM( #{rm.faxNo} )			AS FAX_NO
											, TRIM( #{rm.email} )			AS EMAIL
											, TRIM( #{rm.companyNum} )		AS COMPANY_NUM
											, TRIM( #{rm.companyHead} )		AS COMPANY_HEAD
											, TRIM( #{rm.businessPart} )	AS BUSINESS_PART
											, TRIM( #{rm.businessType} )	AS BUSINESS_TYPE
											, TRIM( #{rm.bankNum} )			AS BANK_NUM
											, TRIM( #{rm.bankCd} )			AS BANK_CD
											, TRIM( #{rm.fileSeq} )			AS FILE_SEQ
									  FROM   DUAL
</foreach>										
							) S
					ON (     T.ENTER_CD    = S.ENTER_CD 
					     AND T.EDU_ORG_CD = S.EDU_ORG_CD )
					WHEN MATCHED THEN
						UPDATE SET
									T.EDU_ORG_NM     	= S.EDU_ORG_NM
									, T.ZIP            	= S.ZIP
									, T.CUR_ADDR1      	= S.CUR_ADDR1
									, T.CUR_ADDR2      	= S.CUR_ADDR2
									, T.BIGO           	= S.BIGO
									, T.NATIONAL_CD    	= S.NATIONAL_CD
									, T.CHARGE_NAME    	= S.CHARGE_NAME
									, T.ORG_NM         	= S.ORG_NM
									, T.JIKWEE_NM      	= S.JIKWEE_NM
									, T.TEL_NO         	= S.TEL_NO
									, T.TEL_HP         	= S.TEL_HP
									, T.FAX_NO         	= S.FAX_NO
									, T.EMAIL          	= S.EMAIL
									, T.COMPANY_HEAD   	= S.COMPANY_HEAD
									, T.BUSINESS_PART  	= S.BUSINESS_PART
									, T.BUSINESS_TYPE  	= S.BUSINESS_TYPE
									, T.BANK_NUM		= CRYPTIT.encrypt(S.BANK_NUM, #{ssnEnterCd})
									, T.BANK_CD        	= S.BANK_CD
									, T.FILE_SEQ        = S.FILE_SEQ
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
						      T.ENTER_CD
							, T.EDU_ORG_CD
							, T.EDU_ORG_NM
							, T.ZIP
							, T.CUR_ADDR1
							, T.CUR_ADDR2
							, T.BIGO
							, T.NATIONAL_CD
							, T.CHARGE_NAME
							, T.ORG_NM
							, T.JIKWEE_NM
							, T.TEL_NO
							, T.TEL_HP
							, T.FAX_NO
							, T.EMAIL
							, T.COMPANY_NUM
							, T.COMPANY_HEAD
							, T.BUSINESS_PART
							, T.BUSINESS_TYPE
							, T.BANK_NUM
							, T.BANK_CD
							, T.FILE_SEQ
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, F_COM_GET_SEQ('EDUORG')
							, S.EDU_ORG_NM
							, S.ZIP
							, S.CUR_ADDR1
							, S.CUR_ADDR2
							, S.BIGO
							, S.NATIONAL_CD
							, S.CHARGE_NAME
							, S.ORG_NM
							, S.JIKWEE_NM
							, S.TEL_NO
							, S.TEL_HP
							, S.FAX_NO
							, S.EMAIL
							, S.COMPANY_NUM
							, S.COMPANY_HEAD
							, S.BUSINESS_PART
							, S.BUSINESS_TYPE
							, CRYPTIT.encrypt(S.BANK_NUM, #{ssnEnterCd})
							, S.BANK_CD
							, S.FILE_SEQ
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

<!-- 		교육기관관리 저장 -->
		<update parameterType="map" id="saveEduInstiMgrDet">
			
				<![CDATA[
					MERGE INTO TTRA001 T
					USING	( ]]>
								SELECT
									  TRIM( #{ssnEnterCd} )	AS ENTER_CD
<choose><when test="eduOrgCd != null and eduOrgCd neq ''">
									, TRIM( #{eduOrgCd}' )		AS EDU_ORG_CD
</when>
<otherwise>
									, F_COM_GET_SEQ('EDUORG')	AS EDU_ORG_CD
									</otherwise>
</choose>
									, TRIM( #{eduOrgNm} )		AS EDU_ORG_NM
									, TRIM( #{zip} )			AS ZIP
									, TRIM( #{curAddr1} )		AS CUR_ADDR1
									, TRIM( #{curAddr2} )		AS CUR_ADDR2
									, TRIM( #{bigo} )			AS BIGO
									, TRIM( #{nationalCd} )	AS NATIONAL_CD
									, TRIM( #{chargeName} )	AS CHARGE_NAME
									, TRIM( #{orgNm} )		AS ORG_NM
									, TRIM( #{jikweeNm} )		AS JIKWEE_NM
									, TRIM( #{telNo} )		AS TEL_NO
									, TRIM( #{telHp} )		AS TEL_HP
									, TRIM( #{faxNo} )		AS FAX_NO
									, TRIM( #{email} )		AS EMAIL
									, TRIM( #{companyNum} )	AS COMPANY_NUM
									, TRIM( #{companyHead} )	AS COMPANY_HEAD
									, TRIM( #{businessPart} )	AS BUSINESS_PART
									, TRIM( #{businessType} )	AS BUSINESS_TYPE
									, TRIM( #{bankNum} )		AS BANK_NUM
									, TRIM( #{bankCd} )		AS BANK_CD
									, TRIM( #{fileSeq} )		AS FILE_SEQ
								FROM   DUAL
							) S
					ON ( T.ENTER_CD = S.ENTER_CD AND T.EDU_ORG_CD = S.EDU_ORG_CD )
					WHEN MATCHED THEN
						UPDATE SET
									  T.EDU_ORG_NM     	= S.EDU_ORG_NM
									, T.ZIP            	= S.ZIP
									, T.CUR_ADDR1      	= S.CUR_ADDR1
									, T.CUR_ADDR2      	= S.CUR_ADDR2
									, T.BIGO           	= S.BIGO
									, T.NATIONAL_CD    	= S.NATIONAL_CD
									, T.CHARGE_NAME    	= S.CHARGE_NAME
									, T.ORG_NM         	= S.ORG_NM
									, T.JIKWEE_NM      	= S.JIKWEE_NM
									, T.TEL_NO         	= S.TEL_NO
									, T.TEL_HP         	= S.TEL_HP
									, T.FAX_NO         	= S.FAX_NO
									, T.EMAIL          	= S.EMAIL
									, T.COMPANY_HEAD   	= S.COMPANY_HEAD
									, T.BUSINESS_PART  	= S.BUSINESS_PART
									, T.BUSINESS_TYPE  	= S.BUSINESS_TYPE
									, T.BANK_NUM		= CRYPTIT.encrypt(S.BANK_NUM, #{ssnEnterCd})
									, T.BANK_CD        	= S.BANK_CD
									, T.FILE_SEQ        = S.FILE_SEQ
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
						      T.ENTER_CD
							, T.EDU_ORG_CD
							, T.EDU_ORG_NM
							, T.ZIP
							, T.CUR_ADDR1
							, T.CUR_ADDR2
							, T.BIGO
							, T.NATIONAL_CD
							, T.CHARGE_NAME
							, T.ORG_NM
							, T.JIKWEE_NM
							, T.TEL_NO
							, T.TEL_HP
							, T.FAX_NO
							, T.EMAIL
							, T.COMPANY_NUM
							, T.COMPANY_HEAD
							, T.BUSINESS_PART
							, T.BUSINESS_TYPE
							, T.BANK_NUM
							, T.BANK_CD
							, T.FILE_SEQ
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.EDU_ORG_CD
							, S.EDU_ORG_NM
							, S.ZIP
							, S.CUR_ADDR1
							, S.CUR_ADDR2
							, S.BIGO
							, S.NATIONAL_CD
							, S.CHARGE_NAME
							, S.ORG_NM
							, S.JIKWEE_NM
							, S.TEL_NO
							, S.TEL_HP
							, S.FAX_NO
							, S.EMAIL
							, S.COMPANY_NUM
							, S.COMPANY_HEAD
							, S.BUSINESS_PART
							, S.BUSINESS_TYPE
							, CRYPTIT.encrypt(S.BANK_NUM, #{ssnEnterCd})
							, S.BANK_CD
							, S.FILE_SEQ
							, SYSDATE
							, #{ssnSabun}
						)
		</update>
		
		<!-- 교육기관관리 삭제 -->
		<delete parameterType="map" id="deleteEduInstiMgr">
			
				<![CDATA[
					DELETE FROM TTRA001
					WHERE ENTER_CD = #{ssnEnterCd}
					  AND ENTER_CD||'_'||EDU_ORG_CD IN 	(  NULL ]]>
<foreach item="rm" collection="deleteRows">
						,
						<if test="rm.eduOrgCd != null and rm.eduOrgCd neq ''">
											TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.eduOrgCd})
						</if>
</foreach>
										)
		</delete>

</mapper>