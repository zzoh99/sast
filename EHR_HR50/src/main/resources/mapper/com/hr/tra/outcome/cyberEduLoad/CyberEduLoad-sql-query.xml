<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tra.outcome.cyberEduLoad">
<!-- 		사이버교육Load 조회 -->
		<select parameterType="map" resultType="cMap" id="getCyberEduLoadList">
			
				<![CDATA[
					SELECT A.SABUN
						,F_COM_GET_NAMES(A.ENTER_CD,A.SABUN) AS NAME
						,F_COM_GET_NAMES(A.ENTER_CD,A.SABUN,'ALIAS') AS ALIAS
						,F_COM_GET_JIKWEE_NM (A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE,'YYYYMMDD')) AS JIKWEE_NM
             		    ,F_COM_GET_JIKGUB_NM (A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE,'YYYYMMDD')) AS JIKGUB_NM
						,A.EDU_COURSE_NM
						,A.EDU_S_YMD
						,A.EDU_E_YMD
						,A.EDU_ORG_NM
						,A.COMPANY_NUM
						,A.EDU_BRANCH_CD
						,A.EDU_M_BRANCH_CD
						,A.EDU_METHOD_CD
						,A.EDU_REWARD_CNT
						,A.EDU_HOUR
						,A.LABOR_APPLY_YN
						,A.LABOR_MON
						,A.PER_EXPENSE_MON
						,A.EDU_REWARD_CNT
						,A.EDU_CONFIRM_TYPE
						,A.CLOSE_YN
						, A.EDU_M_BRANCH_CD AS T_EDU_M_BRANCH_CD
						, (SELECT SUBSTR(XMLAGG(XMLELEMENT(x,'|',CODE) ORDER BY SEQ, CODE_NM).EXTRACT('//text()'), 2)
							FROM TSYS005
							WHERE ENTER_CD = A.ENTER_CD
							AND GRCODE_CD = 'L10015'
							AND USE_YN = 'Y'
							AND NOTE1 = A.EDU_BRANCH_CD
						) AS COMBO_BRANCD_M_CD
						, (SELECT SUBSTR(XMLAGG(XMLELEMENT(x,'|',CODE_NM) ORDER BY SEQ, CODE_NM).EXTRACT('//text()'), 2)
							FROM TSYS005
							WHERE ENTER_CD = A.ENTER_CD
							AND GRCODE_CD = 'L10015'
							AND USE_YN = 'Y'
							AND NOTE1 = A.EDU_BRANCH_CD
						) AS COMBO_BRANCD_M_NM
						, A.MANDATORY_YN
						, A.IN_OUT_TYPE
						, A.UNCONFIRM_REASON
						, A.REAL_EXPENSE_MON
						, A.NOTE
						, A.EDU_EVENT_SEQ
						, A.EDU_SEQ
						, A.EDU_PLACE
						, A.UPLOAD_YM
					FROM TTRA401 A
						,THRM100 B
					WHERE A.ENTER_CD = B.ENTER_CD
						AND A.SABUN	= B.SABUN
						AND A.ENTER_CD = #{ssnEnterCd}
						AND A.UPLOAD_YM like REPLACE(#{searchYm}, '-', '') || '%'
				]]>
		</select>

<!-- 		사이버교육Load 저장 -->
		<update parameterType="map" id="saveCyberEduLoad">
					MERGE INTO TTRA401 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.SABUN
									, A.EDU_COURSE_NM
									, A.EDU_S_YMD
									, A.EDU_E_YMD
									, A.EDU_BRANCH_CD
									, A.EDU_M_BRANCH_CD
									, A.EDU_METHOD_CD
									, A.EDU_REWARD_CNT
									, A.EDU_HOUR
									, A.LABOR_APPLY_YN
									, A.LABOR_MON
									, A.PER_EXPENSE_MON
									, A.EDU_CONFIRM_TYPE
									, A.CLOSE_YN
									, A.EDU_ORG_NM
									, A.MANDATORY_YN
									, A.IN_OUT_TYPE
									, A.UNCONFIRM_REASON
									, A.REAL_EXPENSE_MON
									, A.NOTE
									, A.EDU_PLACE
									, REPLACE(#{searchYm}, '-', '') AS UPLOAD_YM
									, A.COMPANY_NUM
							FROM	(
									SELECT	  NULL		AS ENTER_CD
										, NULL AS SABUN
										, NULL AS EDU_COURSE_NM
										, NULL AS EDU_S_YMD
										, NULL AS EDU_E_YMD
										, NULL AS EDU_BRANCH_CD
										, NULL AS EDU_M_BRANCH_CD
										, NULL AS EDU_METHOD_CD
										, NULL AS EDU_REWARD_CNT
										, NULL AS EDU_HOUR
										, NULL AS LABOR_APPLY_YN
										, NULL AS LABOR_MON
										, NULL AS PER_EXPENSE_MON
										, NULL AS EDU_CONFIRM_TYPE
										, NULL AS CLOSE_YN
										, NULL AS EDU_ORG_NM
										, NULL AS MANDATORY_YN
										, NULL AS IN_OUT_TYPE
										, NULL AS UNCONFIRM_REASON
										, NULL AS REAL_EXPENSE_MON
										, NULL AS NOTE
										, NULL AS EDU_PLACE
										, NULL AS COMPANY_NUM
									FROM	DUAL
<foreach item="rm" collection="mergeRows">
							UNION ALL
									SELECT
											  TRIM( #{ssnEnterCd} )	AS ENTER_CD
											, TRIM( #{rm.sabun} ) AS SABUN
											, TRIM( #{rm.eduCourseNm} ) AS EDU_COURSE_NM
											, TRIM( #{rm.eduSYmd} ) AS EDU_S_YMD
											, TRIM( #{rm.eduEYmd} ) AS EDU_E_YMD
											, TRIM( #{rm.eduBranchCd} ) AS EDU_BRANCH_CD
											, TRIM( #{rm.eduMBranchCd} ) AS EDU_M_BRANCH_CD
											, TRIM( #{rm.eduMethodCd} ) AS EDU_METHOD_CD
											, TRIM( #{rm.eduRewardCnt} ) AS EDU_REWARD_CNT
											, TRIM( #{rm.eduHour} ) AS EDU_HOUR
											, TRIM( #{rm.laborApplyYn} ) AS LABOR_APPLY_YN
											, TRIM( #{rm.laborMon} ) AS LABOR_MON
											, TRIM( #{rm.perExpenseMon} ) AS PER_EXPENSE_MON
											, TRIM( #{rm.eduConfirmType} ) AS EDU_CONFIRM_TYPE
											, TRIM( #{rm.closeYn} ) AS CLOSE_YN
											, TRIM( #{rm.eduOrgNm} ) AS EDU_ORG_NM
											, TRIM( #{rm.mandatoryYn} ) AS MANDATORY_YN
											, TRIM( #{rm.inOutType} ) AS IN_OUT_TYPE
											, TRIM( #{rm.unconfirmReason} ) AS UNCONFIRM_REASON
											, TRIM( #{rm.realExpenseMon} ) AS REAL_EXPENSE_MON
											, TRIM( #{rm.note} ) AS NOTE
											, TRIM( #{rm.eduPlace}) AS EDU_PLACE
											, TRIM( #{rm.companyNum}) AS COMPANY_NUM
											FROM   DUAL
</foreach>
									) A WHERE A.ENTER_CD IS NOT NULL
							) S
					ON ( T.ENTER_CD = S.ENTER_CD AND T.SABUN = S.SABUN AND T.EDU_COURSE_NM = S.EDU_COURSE_NM AND T.EDU_S_YMD = S.EDU_S_YMD AND T.COMPANY_NUM = S.COMPANY_NUM)
					WHEN MATCHED THEN
						UPDATE SET	  T.EDU_E_YMD        = S.EDU_E_YMD
									, T.EDU_BRANCH_CD    = S.EDU_BRANCH_CD
									, T.EDU_M_BRANCH_CD  = S.EDU_M_BRANCH_CD
									, T.EDU_METHOD_CD    = S.EDU_METHOD_CD
									, T.EDU_REWARD_CNT   = S.EDU_REWARD_CNT
									, T.EDU_HOUR         = S.EDU_HOUR
									, T.LABOR_APPLY_YN   = S.LABOR_APPLY_YN
									, T.LABOR_MON        = S.LABOR_MON
									, T.PER_EXPENSE_MON  = S.PER_EXPENSE_MON
									, T.EDU_CONFIRM_TYPE = S.EDU_CONFIRM_TYPE
									-- , T.CLOSE_YN         = S.CLOSE_YN
									, T.EDU_ORG_NM       = S.EDU_ORG_NM
									, T.MANDATORY_YN     = S.MANDATORY_YN
									, T.IN_OUT_TYPE      = S.IN_OUT_TYPE
									, T.UNCONFIRM_REASON = S.UNCONFIRM_REASON
									, T.REAL_EXPENSE_MON = S.REAL_EXPENSE_MON
									, T.NOTE             = S.NOTE
									, T.EDU_PLACE		 = S.EDU_PLACE
									, T.CHKDATE			 = SYSDATE
									, T.CHKID			 = #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
						      T.ENTER_CD
							, T.SABUN
							, T.EDU_COURSE_NM
							, T.EDU_S_YMD
							, T.EDU_E_YMD
							, T.EDU_BRANCH_CD
							, T.EDU_M_BRANCH_CD
							, T.EDU_METHOD_CD
							, T.EDU_REWARD_CNT
							, T.EDU_HOUR
							, T.LABOR_APPLY_YN
							, T.LABOR_MON
							, T.PER_EXPENSE_MON
							, T.EDU_CONFIRM_TYPE
							-- , T.CLOSE_YN
							, T.EDU_ORG_NM
							, T.MANDATORY_YN
							, T.IN_OUT_TYPE
							, T.UNCONFIRM_REASON
							, T.REAL_EXPENSE_MON
							, T.NOTE
							, T.EDU_PLACE
							, T.UPLOAD_YM
							, T.CHKDATE
							, T.CHKID
							, T.COMPANY_NUM
						)
						VALUES
						(
						      S.ENTER_CD
							, S.SABUN
							, S.EDU_COURSE_NM
							, S.EDU_S_YMD
							, S.EDU_E_YMD
							, S.EDU_BRANCH_CD
							, S.EDU_M_BRANCH_CD
							, S.EDU_METHOD_CD
							, S.EDU_REWARD_CNT
							, S.EDU_HOUR
							, S.LABOR_APPLY_YN
							, S.LABOR_MON
							, S.PER_EXPENSE_MON
							, S.EDU_CONFIRM_TYPE
							-- , S.CLOSE_YN
							, S.EDU_ORG_NM
							, S.MANDATORY_YN
							, S.IN_OUT_TYPE
							, S.UNCONFIRM_REASON
							, S.REAL_EXPENSE_MON
							, S.NOTE
							, S.EDU_PLACE
							, S.UPLOAD_YM
							, SYSDATE
							, #{ssnSabun}
							, S.COMPANY_NUM
						)
		</update>

<!-- 		사이버교육Load 삭제 -->
		<delete parameterType="map" id="deleteCyberEduLoad">
			
				<![CDATA[
					DELETE FROM TTRA401
					WHERE (ENTER_CD, SABUN, EDU_COURSE_NM, COMPANY_NUM, EDU_S_YMD) IN 	(  (NULL, NULL, NULL, NULL, NULL) ]]>
<foreach item="rm" collection="deleteRows">
							, (#{ssnEnterCd}, #{rm.sabun}, #{rm.eduCourseNm}, #{rm.companyNum}, #{rm.eduSYmd})
</foreach>
						)
			
		</delete>

<!-- 		교육이력 삭제 -->
		<delete parameterType="map" id="deleteCyberEduLoad301">
			
					DELETE FROM TTRA301
					WHERE (ENTER_CD, EDU_SEQ, EDU_EVENT_SEQ, SABUN) IN 	(  (NULL, NULL, NULL, NULL)
<foreach item="rm" collection="deleteRows">
							, (#{ssnEnterCd}, #{rm.eduSeq}, #{rm.eduEventSeq}, #{rm.sabun})
</foreach>
						)
			
			
		</delete>

<!-- 프로시저 -->
		<update id="prcCyberEduLoad" parameterType="map" statementType="CALLABLE">
		<![CDATA[
			{CALL P_TRA_CYBER_EDU_INS(
				#{sqlcode,mode=OUT,jdbcType=VARCHAR},
				#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{searchYm,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

</mapper>