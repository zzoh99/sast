<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="eis.statsSrch.statsPresetMng">

<!-- 권한그룹 통계 구성 목록 조회 -->
		<select parameterType="map" resultType="cMap" id="getStatsPresetMngGrpList">
			
				<![CDATA[
					SELECT ENTER_CD
					     , PRESET_TYPE_CD
					     , PRESET_OWNER
					     , PRESET_ID
					     , PRESET_NM
					     , GRP_CD
					     , SABUN
					     , CRE_YMD
					     , USE_YN
					     , MEMO
					     , SEQ
					     , '0' AS LAYOUT_DETAIL
					     , '1' AS PREVIEW_DETAIL
					  FROM TEIS911
					 WHERE ENTER_CD = TRIM(#{ssnEnterCd}) ]]>
<if test="searchGrpCd != null and searchGrpCd neq ''">
					   AND GRP_CD =  #{searchGrpCd}
</if>
<if test="searchPresetId != null and searchPresetId neq ''">
					   AND INSTR(UPPER(PRESET_ID), UPPER(#{searchPresetId})) > 0
</if>
<if test="searchPresetNm != null and searchPresetNm neq ''">
					   AND INSTR(UPPER(PRESET_NM), UPPER(#{searchPresetNm})) > 0
</if>
					 ORDER BY SEQ, PRESET_ID
		</select>

<!-- 개인 통계 구성 목록 조회 -->
		<select parameterType="map" resultType="cMap" id="getStatsPresetMngEmpList">
			
				<![CDATA[
					SELECT ENTER_CD
					     , PRESET_TYPE_CD
					     , PRESET_OWNER
					     , PRESET_ID
					     , PRESET_NM
					     , GRP_CD
					     , SABUN
					     , CRE_YMD
					     , USE_YN
					     , MEMO
					     , SEQ
					     , '0' AS LAYOUT_DETAIL
					     , '1' AS PREVIEW_DETAIL
					  FROM TEIS911
					 WHERE ENTER_CD = TRIM(#{ssnEnterCd})
					   AND SABUN =  TRIM(#{ssnSabun}) ]]>
<if test="searchPresetNm != null and searchPresetNm neq ''">
					   AND INSTR(PRESET_NM, #{searchPresetNm}) > 0
</if>
					 ORDER BY SEQ, PRESET_ID
			
		</select>

<!-- 사용 통계 목록 조회 -->
		<select parameterType="map" resultType="cMap" id="getStatsPresetMngUseItemList">
			
				<![CDATA[
					SELECT A.ENTER_CD
					     , A.PRESET_TYPE_CD
					     , A.PRESET_OWNER
					     , A.PRESET_ID
					     , A.WIDGET_ID
					     , A.DUMMY_YN
					     , A.SEQ
					     , A.CHART_POSITION_X
					     , A.CHART_POSITION_Y
					     , A.CHART_SIZE_W
					     , A.CHART_SIZE_H
					     , A.STATS_CD
					     , B.STATS_NM
					  FROM TEIS913 A
					     , TEIS905 B
					 WHERE 1 = 1
					   AND A.ENTER_CD         = B.ENTER_CD(+)
					   AND A.STATS_CD         = B.STATS_CD(+)
					   AND A.ENTER_CD         = TRIM(#{ssnEnterCd})
					   AND A.PRESET_TYPE_CD   = TRIM(#{searchPresetTypeCd})
					   AND A.PRESET_OWNER     = TRIM(DECODE(#{searchPresetOwner}, NULL, DECODE(#{searchPresetTypeCd}, 'G', #{ssnGrpCd}, #{ssnSabun}), #{searchPresetOwner}))
					   AND A.PRESET_ID        = TRIM(#{searchPresetId})
					   AND NVL(B.USE_YN, 'Y') = 'Y'
					 ORDER BY A.SEQ
				]]>
			
			
		</select>

<!-- 저장-->
		<update parameterType="map" id="saveStatsPresetMng">
			
				<![CDATA[
					MERGE INTO TEIS911 T
					USING (
					       SELECT A.ENTER_CD
					            , A.PRESET_TYPE_CD
					            , A.PRESET_OWNER
					            , A.PRESET_ID
					            , A.PRESET_NM
					            , A.GRP_CD
					            , A.SABUN
					            , A.USE_YN
					            , A.MEMO
					            , A.SEQ
					        FROM (
					              SELECT NULL AS ENTER_CD
					                   , NULL AS PRESET_TYPE_CD
					                   , NULL AS PRESET_OWNER
					                   , NULL AS PRESET_ID
					                   , NULL AS PRESET_NM
					                   , NULL AS GRP_CD
					                   , NULL AS SABUN
					                   , NULL AS USE_YN
					                   , NULL AS MEMO
					                   , NULL AS SEQ 
					               FROM DUAL ]]>
<foreach item="rm" collection="mergeRows">
					              UNION ALL
					             SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD
					                  , TRIM( #{rm.presetTypeCd} ) AS PRESET_TYPE_CD
					                  , TRIM(DECODE( #{rm.grpCd}, NULL, DECODE(#{rm.sabun}, NULL, #{ssnSabun}, #{rm.sabun}), #{rm.grpCd} )) AS PRESET_OWNER
					                  , TRIM( #{rm.presetId} ) AS PRESET_ID
					                  , TRIM( #{rm.presetNm} ) AS PRESET_NM
					                  , TRIM( #{rm.grpCd} ) AS GRP_CD
					                  , TRIM(DECODE( #{rm.grpCd}, NULL, DECODE(#{rm.sabun}, NULL, #{ssnSabun}, #{rm.sabun}), NULL )) AS SABUN
					                  , TRIM( #{rm.useYn} ) AS USE_YN
					                  , TRIM( #{rm.memo} ) AS MEMO
					                  , TRIM( #{rm.seq} ) AS SEQ
					              FROM  DUAL
</foreach>
					             ) A
					       WHERE A.ENTER_CD IS NOT NULL
					         AND A.PRESET_ID IS NOT NULL
					) S
					ON (
					            T.ENTER_CD       = S.ENTER_CD
					        AND T.PRESET_TYPE_CD = S.PRESET_TYPE_CD
					        AND T.PRESET_OWNER   = S.PRESET_OWNER
					        AND T.PRESET_ID      = S.PRESET_ID
					)
					WHEN MATCHED THEN
					     UPDATE
					        SET T.CHKDATE       = SYSDATE
					          , T.CHKID         = #{ssnSabun}
					          , T.PRESET_NM     = S.PRESET_NM
					          , T.USE_YN        = S.USE_YN
					          , T.MEMO          = S.MEMO
					          , T.SEQ           = S.SEQ
					WHEN NOT MATCHED THEN
					     INSERT (
					            T.ENTER_CD
					          , T.PRESET_TYPE_CD
					          , T.PRESET_OWNER
					          , T.PRESET_ID
					          , T.PRESET_NM
					          , T.GRP_CD
					          , T.SABUN
					          , T.CRE_YMD
					          , T.USE_YN
					          , T.MEMO
					          , T.SEQ
					          , T.CHKDATE
					          , T.CHKID
					     ) VALUES (
					            S.ENTER_CD
					          , S.PRESET_TYPE_CD
					          , S.PRESET_OWNER
					          , S.PRESET_ID
					          , S.PRESET_NM
					          , S.GRP_CD
					          , S.SABUN
					          , TO_CHAR(SYSDATE, 'YYYYMMDD')
					          , S.USE_YN
					          , S.MEMO
					          , S.SEQ
					          , SYSDATE
					          , #{ssnSabun}
					     )
		</update>

<!-- 삭제 -->
		<delete parameterType="map" id="deleteStatsPresetMng">
			
				<![CDATA[
					DELETE FROM TEIS911
					 WHERE ENTER_CD = TRIM(#{ssnEnterCd}) 
					   AND ( PRESET_TYPE_CD, PRESET_OWNER, PRESET_ID ) IN ( ( NULL, NULL, NULL ) ]]>
					   
<foreach item="rm" collection="deleteRows">
				<if test="rm.presetTypeCd != null and rm.presetTypeCd neq '' and rm.presetOwner != null and rm.presetOwner neq ''
					and rm.presetId != null and rm.presetId neq ''">
					     , ( TRIM( #{rm.presetTypeCd} ), TRIM( #{rm.presetOwner} ), TRIM( #{rm.presetId} ) ) 
				</if>
</foreach>
					       )
		</delete>

<!-- 사용 통계 삭제 -->
		<delete parameterType="map" id="deleteStatsPresetMngUseList">
			
				<![CDATA[
					DELETE FROM TEIS913
					 WHERE ENTER_CD = TRIM(#{ssnEnterCd}) 
					   AND ( PRESET_TYPE_CD, PRESET_OWNER, PRESET_ID ) IN ( ( NULL, NULL, NULL ) ]]>
<foreach item="rm" collection="deleteRows">
				<if test="rm.presetTypeCd != null and rm.presetTypeCd neq '' and rm.presetOwner != null and rm.presetOwner neq ''
					and rm.presetId != null and rm.presetId neq ''">
					     , ( TRIM( #{rm.presetTypeCd} ), TRIM( #{rm.presetOwner} ), TRIM( #{rm.presetId} ) ) 
				</if>
</foreach>
					       )
		</delete>
		
<!-- 사용 통계 목록 저장 -->
		<update parameterType="map" id="saveStatsPresetMngUseItem">
			
				<![CDATA[
					MERGE INTO TEIS913 T 
					USING (
					       SELECT A.ENTER_CD
					            , A.PRESET_TYPE_CD
					            , DECODE(A.PRESET_OWNER, NULL, DECODE(A.PRESET_TYPE_CD, 'G', #{ssnGrpCd}, #{ssnSabun}), A.PRESET_OWNER) AS PRESET_OWNER
					            , A.PRESET_ID
					            , A.WIDGET_ID
					            , A.SEQ
					            , A.DUMMY_YN
					            , A.CHART_POSITION_X
					            , A.CHART_POSITION_Y
					            , A.CHART_SIZE_W
					            , A.CHART_SIZE_H
					            , A.STATS_CD
					         FROM ( ]]>
<foreach item="rm" collection="mergeRows" separator=" UNION ALL ">
					               SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD 
					                    , TRIM(#{rm.presetTypeCd}) AS PRESET_TYPE_CD
					                    , TRIM(#{rm.presetOwner}) AS PRESET_OWNER
					                    , TRIM(#{rm.presetId}) AS PRESET_ID
					                    , TRIM(#{rm.widgetId}) AS WIDGET_ID
					                    , TRIM(#{rm.seq}) AS SEQ
					                    , TRIM(#{rm.dummyYn}) AS DUMMY_YN
					                    , TRIM(#{rm.chartPositionX}) AS CHART_POSITION_X
					                    , TRIM(#{rm.chartPositionY}) AS CHART_POSITION_Y
					                    , TRIM(#{rm.chartSizeW}) AS CHART_SIZE_W
					                    , TRIM(#{rm.chartSizeH}) AS CHART_SIZE_H
					                    , TRIM(#{rm.statsCd}) AS STATS_CD
					        FROM DUAL
</foreach>
					              ) A
					        WHERE A.ENTER_CD IS NOT NULL
					          AND A.PRESET_ID IS NOT NULL
					) S 
					ON ( 
					              T.ENTER_CD       = S.ENTER_CD 
					          AND T.PRESET_TYPE_CD = S.PRESET_TYPE_CD 
					          AND T.PRESET_OWNER   = S.PRESET_OWNER
					          AND T.PRESET_ID      = S.PRESET_ID
					          AND T.WIDGET_ID      = S.WIDGET_ID
					) 
					WHEN MATCHED THEN 
					   UPDATE SET T.CHKDATE = SYSDATE 
					            , T.CHKID = #{ssnSabun} 
					            , T.SEQ = S.SEQ 
					            , T.CHART_POSITION_X = S.CHART_POSITION_X 
					            , T.CHART_POSITION_Y = S.CHART_POSITION_Y 
					            , T.CHART_SIZE_W = S.CHART_SIZE_W 
					            , T.CHART_SIZE_H = S.CHART_SIZE_H 
					            , T.DUMMY_YN = S.DUMMY_YN
					            , T.STATS_CD = S.STATS_CD
					WHEN NOT MATCHED THEN 
					   INSERT 
					   ( 
					              T.ENTER_CD
					            , T.PRESET_TYPE_CD
					            , T.PRESET_OWNER
					            , T.PRESET_ID
					            , T.WIDGET_ID
					            , T.SEQ
					            , T.DUMMY_YN
					            , T.CHART_POSITION_X
					            , T.CHART_POSITION_Y
					            , T.CHART_SIZE_W
					            , T.CHART_SIZE_H
					            , T.STATS_CD
					            , T.CHKDATE
					            , T.CHKID
					   ) 
					   VALUES 
					   ( 
					              S.ENTER_CD
					            , S.PRESET_TYPE_CD
					            , S.PRESET_OWNER
					            , S.PRESET_ID
					            , S.WIDGET_ID
					            , S.SEQ
					            , s.DUMMY_YN
					            , S.CHART_POSITION_X
					            , S.CHART_POSITION_Y
					            , S.CHART_SIZE_W
					            , S.CHART_SIZE_H
					            , S.STATS_CD
					            , sysdate
					            , #{ssnSabun}
					   ) 
		</update>

<!-- 사용 통계 목록 삭제-->
		<delete parameterType="map" id="deleteStatsPresetMngUseItemAll">
			
				<![CDATA[
					DELETE FROM TEIS913
					 WHERE ENTER_CD = TRIM(#{ssnEnterCd})
					   AND PRESET_TYPE_CD = TRIM(#{searchPresetTypeCd})
					   AND PRESET_OWNER = DECODE(#{searchPresetOwner}
					                           , NULL, DECODE(#{searchPresetTypeCd}, 'G', #{ssnGrpCd}, #{ssnSabun})
					                           , #{searchPresetOwner})
					   AND PRESET_ID = TRIM(#{searchPresetId})
				]]>
		</delete>

<!-- 사용 통계 차트 상세 목록 조회-->
		<select parameterType="map" resultType="cMap" id="getStatsPresetMngUseItemDtlDataList">
			
				<![CDATA[
					SELECT A.ENTER_CD
					     , A.PRESET_TYPE_CD
					     , A.PRESET_OWNER
					     , A.PRESET_ID
					     , A.WIDGET_ID
					     , A.SEQ
					     , A.DUMMY_YN
					     , A.CHART_POSITION_X
					     , A.CHART_POSITION_Y
					     , A.CHART_SIZE_W
					     , A.CHART_SIZE_H
					     , B.STATS_CD
					     , B.STATS_NM
					     , B.CHART_SIZE_W AS DEFAULT_CHART_SIZE_W
					     , B.CHART_SIZE_H AS DEFAULT_CHART_SIZE_H
					     , B.CHART_OPT
					     , B.SQL_SYNTAX
					     , DECODE(LENGTH(B.SQL_SYNTAX), NULL, 'N', 'Y') AS EXISTS_SQL
					     , NVL(B.USE_YN, 'Y') AS USE_YN
					     , C.CHART_CD
					     , C.CHART_NM
					     , C.PLUGIN_OBJ_NM
					  FROM TEIS913 A
					     , TEIS905 B
					     , TEIS901 C
					 WHERE 1 = 1
					   AND A.ENTER_CD       = B.ENTER_CD(+)
					   AND A.STATS_CD       = B.STATS_CD(+)
					   AND B.ENTER_CD       = C.ENTER_CD(+)
					   AND B.CHART_CD       = C.CHART_CD(+)
					   AND A.ENTER_CD       = #{ssnEnterCd}
					   AND A.PRESET_TYPE_CD = #{searchPresetTypeCd}
					   AND A.PRESET_OWNER   = DECODE(#{searchPresetOwner}
					                               , NULL, DECODE(#{searchPresetTypeCd}, 'G', #{ssnGrpCd}, #{ssnSabun})
					                               , #{searchPresetOwner})
					   AND A.PRESET_ID      = #{searchPresetId}
					 ORDER BY A.SEQ
				]]>
			
			
		</select>

<!-- 사용자의 권한그룹이 조회가능한 통계 목록 조회-->
		<select parameterType="map" resultType="cMap" id="getStatsPresetMngAllowStatsList">
			
				<![CDATA[
					SELECT S.ENTER_CD, S.STATS_CD, S.STATS_NM, S.CHART_SIZE_W, S.CHART_SIZE_H, S.USE_YN
					  FROM TEIS913 W
					     , TEIS911 P
					     , TEIS905 S
					 WHERE W.ENTER_CD = P.ENTER_CD
					   AND W.PRESET_TYPE_CD = P.PRESET_TYPE_CD
					   AND W.PRESET_OWNER = P.PRESET_OWNER
					   AND W.PRESET_ID = P.PRESET_ID
					   AND W.ENTER_CD = S.ENTER_CD
					   AND W.STATS_CD = S.STATS_CD
					   AND W.ENTER_CD = TRIM(#{ssnEnterCd})
					   AND W.PRESET_TYPE_CD = 'G'
					   AND S.USE_YN = 'Y'
					   AND P.GRP_CD IN (SELECT GRP_CD
					                      FROM TSYS313
					                     WHERE ENTER_CD = W.ENTER_CD
					                       AND SABUN = TRIM(#{ssnSabun}))
					 GROUP BY S.ENTER_CD, S.STATS_CD, S.STATS_NM, S.CHART_SIZE_W, S.CHART_SIZE_H, S.USE_YN
					 ORDER BY S.ENTER_CD, S.STATS_CD
				]]>
			
			
		</select>
		
</mapper>