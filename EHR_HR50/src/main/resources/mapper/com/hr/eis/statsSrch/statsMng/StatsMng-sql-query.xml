<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="eis.statsSrch.statsMng">

<!-- 조회 -->
		<select parameterType="map" resultType="cMap" id="getStatsMngList">
			
				<![CDATA[
					SELECT ENTER_CD
					     , STATS_CD
					     , STATS_NM
					     , CHART_CD
					     , CHART_SIZE_W
					     , CHART_SIZE_H
					     , USE_YN
					     , MEMO
					     , '0' AS MANAGE_DETAIL
					     , '0' AS CHART_OPT_DETAIL
					     , '0' AS SQL_SYNTAX_DETAIL
					     , '1' AS PREVIEW_DETAIL
					  FROM TEIS905
					 WHERE ENTER_CD = TRIM(#{ssnEnterCd}) ]]>
<if test="searchStatsCd != null and searchStatsCd neq ''">
					   AND INSTR(UPPER(STATS_CD), UPPER(#{searchStatsCd})) > 0
</if>
<if test="searchStatsNm != null and searchStatsNm neq ''">
					   AND INSTR(UPPER(STATS_NM), UPPER(#{searchStatsNm})) > 0
</if>
<if test="searchChartCd != null and searchChartCd neq ''">
					   AND CHART_CD =  #{searchChartCd}
</if>
					 ORDER BY STATS_CD
		</select>

<!-- 단건 조회 -->
		<select parameterType="map" resultType="cMap" id="getStatsMngMap">
			
				<![CDATA[
					SELECT A.ENTER_CD
					     , A.STATS_CD
					     , A.STATS_NM
					     , A.CHART_CD
					     , A.CHART_SIZE_W
					     , A.CHART_SIZE_H
					     , A.CHART_OPT
					     , A.SQL_SYNTAX
					     , A.USE_YN
					     , A.MEMO
					     , B.CHART_NM
					     , B.PLUGIN_OBJ_NM
					  FROM TEIS905 A
					     , TEIS901 B
					 WHERE A.ENTER_CD = B.ENTER_CD
					   AND A.CHART_CD = B.CHART_CD
					   AND A.ENTER_CD = #{ssnEnterCd}
					   AND A.STATS_CD = #{searchStatsCd}
				]]>
			
			
		</select>

<!-- 저장-->
		<update parameterType="map" id="saveStatsMng">
			
				<![CDATA[
					MERGE INTO TEIS905 T
					USING (
					       SELECT A.ENTER_CD
					            , A.STATS_CD
					            , A.STATS_NM
					            , A.CHART_CD
					            , A.CHART_SIZE_W
					            , A.CHART_SIZE_H
					            , A.USE_YN
					            , A.MEMO
					        FROM (
					              SELECT NULL AS ENTER_CD
					                   , NULL AS STATS_CD
					                   , NULL AS STATS_NM
					                   , NULL AS CHART_CD
					                   , NULL AS CHART_SIZE_W
					                   , NULL AS CHART_SIZE_H
					                   , NULL AS USE_YN
					                   , NULL AS MEMO
					               FROM DUAL ]]>
<foreach item="rm" collection="mergeRows">
					              UNION ALL
					             SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD
					                  , TRIM( #{rm.statsCd} ) AS STATS_CD
					                  , TRIM( #{rm.statsNm} ) AS STATS_NM
					                  , TRIM( #{rm.chartCd} ) AS CHART_CD
					                  , TRIM( #{rm.chartSizeW} ) AS CHART_SIZE_W
					                  , TRIM( #{rm.chartSizeH} ) AS CHART_SIZE_H
					                  , TRIM( #{rm.useYn} ) AS USE_YN
					                  , TRIM( #{rm.memo} ) AS MEMO
					              FROM  DUAL
</foreach> <![CDATA[
					             ) A
					       WHERE A.ENTER_CD IS NOT NULL
					         AND A.STATS_CD IS NOT NULL
					) S
					ON (
					            T.ENTER_CD = S.ENTER_CD
					        AND T.STATS_CD = S.STATS_CD
					)
					WHEN MATCHED THEN
					     UPDATE
					        SET T.CHKDATE       = SYSDATE
					          , T.CHKID         = #{ssnSabun}
					          , T.STATS_NM      = S.STATS_NM
					          , T.CHART_CD      = S.CHART_CD
					          , T.CHART_SIZE_W  = S.CHART_SIZE_W
					          , T.CHART_SIZE_H  = S.CHART_SIZE_H
					          , T.USE_YN        = S.USE_YN
					          , T.MEMO          = S.MEMO
					WHEN NOT MATCHED THEN
					     INSERT (
					            T.ENTER_CD
					          , T.STATS_CD
					          , T.STATS_NM
					          , T.CHART_CD
					          , T.CHART_SIZE_W
					          , T.CHART_SIZE_H
					          , T.USE_YN
					          , T.MEMO
					          , T.SQL_SYNTAX
					          , T.CHKDATE
					          , T.CHKID
					     ) VALUES (
					            S.ENTER_CD
					          , S.STATS_CD
					          , S.STATS_NM
					          , S.CHART_CD
					          , S.CHART_SIZE_W
					          , S.CHART_SIZE_H
					          , S.USE_YN
					          , S.MEMO
					          , EMPTY_CLOB()
					          , SYSDATE
					          , #{ssnSabun}
					     )
				]]>
			
			
		</update>

<!-- 삭제 -->
		<delete parameterType="map" id="deleteStatsMng">
			
				<![CDATA[
					DELETE FROM TEIS905
					 WHERE ENTER_CD = TRIM(#{ssnEnterCd}) 
					   AND ( STATS_CD ) IN ( ( NULL) ]]>
					<foreach item="rm" collection="deleteRows"> 
						<if test="rm.statsCd != null and rm.statsCd neq ''">
					     , ( TRIM( #{rm.statsCd} ) ) 
						</if>
					</foreach>		
					       )
		</delete>

<!-- 단건 조회 -->
		<select parameterType="map" resultType="cMap" id="getStatsMngChartOptMap">
			
				<![CDATA[
					SELECT CHART_OPT
					  FROM TEIS905
					 WHERE ENTER_CD = #{ssnEnterCd}
					   AND STATS_CD = #{searchStatsCd}
				]]>
			
			
		</select>

<!-- 저장 -->
		<update parameterType="map" id="saveStatsMngChartOpt">
			
				<![CDATA[
					UPDATE TEIS905 SET
					       CHART_OPT = #{chartOpt}
					 WHERE ENTER_CD  = #{ssnEnterCd}
					   AND STATS_CD  = #{searchStatsCd}
				]]>
			
			
		</update>

<!-- 단건 조회 -->
		<select parameterType="map" resultType="cMap" id="getStatsMngSQLSyntaxMap">
			
				<![CDATA[
					SELECT A.SQL_SYNTAX
					     , B.PLUGIN_OBJ_NM
					  FROM TEIS905 A
					     , TEIS901 B
					 WHERE A.ENTER_CD = B.ENTER_CD
					   AND A.CHART_CD = B.CHART_CD
					   AND A.ENTER_CD = #{ssnEnterCd}
					   AND A.STATS_CD = #{searchStatsCd}
				]]>
			
			
		</select>

<!-- 저장 -->
		<update parameterType="map" id="saveStatsMngSQLSyntax">
			
				<![CDATA[
					UPDATE TEIS905 SET
					       SQL_SYNTAX = #{sqlSyntax}
					 WHERE ENTER_CD   = #{ssnEnterCd}
					   AND STATS_CD   = #{searchStatsCd}
				]]>
		</update>

<!-- 설정 저장 -->
		<update parameterType="map" id="saveStatsMngSetting">
			
				<![CDATA[
					UPDATE TEIS905 SET
					       CHART_OPT    = #{chartOpt}
					     , CHART_CD     = #{chartCd}
					     , CHART_SIZE_W = #{chartSizeW}
					     , CHART_SIZE_H = #{chartSizeH}
					 WHERE ENTER_CD     = #{ssnEnterCd}
					   AND STATS_CD     = #{searchStatsCd}
				]]>
			
			
		</update>
		
<!-- 차트 데이터 목록 조회 -->
		<select parameterType="map" resultType="cMap" id="getStatsMngChartDataList">
			<choose>
				<when test="executeSQL != null and executeSQL neq ''">
					${executeSQL}
				</when>
				<otherwise>
					SELECT '0' AS SERIES_IDX
					     , 'NO_NAME' AS SERIES_NAME
					     , 0 AS SERIES_DATA
					     , NULL AS SERIES_CHART_TYPE
					     , 'NONE' AS CATEGORY_LABEL
					     , NULL AS CATEGORY_COLOR
					  FROM DAUL
				</otherwise>
			</choose>
		</select>
</mapper>