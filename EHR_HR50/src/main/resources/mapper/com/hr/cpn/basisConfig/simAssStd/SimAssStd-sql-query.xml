<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="cpn.basisConfig.simAssStd">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getSimAssStdList">

				<![CDATA[
				SELECT ENTER_CD
				     , SDATE
				     , F_MON
				     , T_MON
				     , EDATE
				     , PER_MON_1
				     , PER_MON_2
				     , PER_MON_3
				     , MUL_MON_3
				     , PER_MON_4
				     , MUL_MON_4
				     , PER_MON_5
				     , MUL_MON_5
				     , PER_MON_6
				     , MUL_MON_6
				     , PER_MON_7
				     , MUL_MON_7
				     , PER_MON_8
				     , MUL_MON_8
				     , PER_MON_9
				     , MUL_MON_9
				     , PER_MON_10
				     , MUL_MON_10
				     , PER_MON_11
				     , MUL_MON_11 
				FROM TCPN013
				WHERE ENTER_CD = #{ssnEnterCd}
				          ]]>
				<if test='searchDate != null and !searchDate.equals("")'>
					AND REPLACE(#{searchDate}, '-', '') BETWEEN SDATE AND NVL (EDATE, '99991231')
				</if>
			<if test='searchMon != null and searchMon neq ""'>
				<![CDATA[
				AND TO_NUMBER(REPLACE(#{searchMon}, ',', '')) >= F_MON
				AND TO_NUMBER(REPLACE(#{searchMon}, ',', '')) < T_MON
				]]>
			</if>
				ORDER BY SDATE DESC, F_MON

		</select>
		
<!-- 		저장 -->	
		<update parameterType="map" id="saveSimAssStd">


					MERGE INTO TCPN013 T
					USING	(
							SELECT     A.T_MON
                                    ,  A.F_MON
                                    ,  A.SDATE
                                    ,  A.EDATE
									,  A.PER_MON_1
									,  A.PER_MON_2
									,  A.PER_MON_3
									,  A.MUL_MON_3
									,  A.PER_MON_4
									,  A.MUL_MON_4
									,  A.PER_MON_5
									,  A.MUL_MON_5
									,  A.PER_MON_6
									,  A.MUL_MON_6
									,  A.PER_MON_7
									,  A.MUL_MON_7
									,  A.PER_MON_8
									,  A.MUL_MON_8
									,  A.PER_MON_9
									,  A.MUL_MON_9
									,  A.PER_MON_10
									,  A.MUL_MON_10
									,  A.PER_MON_11
									,  A.MUL_MON_11
							FROM	(
									SELECT	   NULL AS T_MON
                                            ,  NULL AS F_MON
                                            ,  NULL AS SDATE
                                            ,  NULL AS EDATE
											,  NULL AS PER_MON_1
											,  NULL AS PER_MON_2
											,  NULL AS PER_MON_3
											,  NULL AS MUL_MON_3
											,  NULL AS PER_MON_4
											,  NULL AS MUL_MON_4
											,  NULL AS PER_MON_5
											,  NULL AS MUL_MON_5
											,  NULL AS PER_MON_6
											,  NULL AS MUL_MON_6
											,  NULL AS PER_MON_7
											,  NULL AS MUL_MON_7
											,  NULL AS PER_MON_8
											,  NULL AS MUL_MON_8
											,  NULL AS PER_MON_9
											,  NULL AS MUL_MON_9
											,  NULL AS PER_MON_10
											,  NULL AS MUL_MON_10
											,  NULL AS PER_MON_11
											,  NULL AS MUL_MON_11
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT    TRIM(#{rm.tMon})     AS T_MON
											, TRIM(#{rm.fMon})     AS F_MON
                                            , TRIM(#{rm.sdate})    AS SDATE
                                            , TRIM(#{rm.edate})    AS EDATE
											, TRIM(#{rm.perMon1})  AS PER_MON_1
											, TRIM(#{rm.perMon2})  AS PER_MON_2
											, TRIM(#{rm.perMon3})  AS PER_MON_3
											, TRIM(#{rm.mulMon3})  AS MUL_MON_3
											, TRIM(#{rm.perMon4})  AS PER_MON_4
											, TRIM(#{rm.mulMon4})  AS MUL_MON_4
											, TRIM(#{rm.perMon5})  AS PER_MON_5
											, TRIM(#{rm.mulMon5})  AS MUL_MON_5
											, TRIM(#{rm.perMon6})  AS PER_MON_6
											, TRIM(#{rm.mulMon6})  AS MUL_MON_6
											, TRIM(#{rm.perMon7})  AS PER_MON_7
											, TRIM(#{rm.mulMon7})  AS MUL_MON_7
											, TRIM(#{rm.perMon8})  AS PER_MON_8
											, TRIM(#{rm.mulMon8})  AS MUL_MON_8
											, TRIM(#{rm.perMon9})  AS PER_MON_9
											, TRIM(#{rm.mulMon9})  AS MUL_MON_9
											, TRIM(#{rm.perMon10}) AS PER_MON_10
											, TRIM(#{rm.mulMon10}) AS MUL_MON_10
											, TRIM(#{rm.perMon11}) AS PER_MON_11
											, TRIM(#{rm.mulMon11}) AS MUL_MON_11
									FROM   DUAL
</foreach>
									) A WHERE A.T_MON IS NOT NULL
							) S
					ON (    T.ENTER_CD = #{ssnEnterCd}
					    AND T.SDATE    = S.SDATE
					    AND T.F_MON    = S.F_MON
                    )
					WHEN MATCHED THEN
						UPDATE SET	 T.T_MON      = S.T_MON        
									,T.EDATE      = S.EDATE        
									,T.PER_MON_1  = S.PER_MON_1    
									,T.PER_MON_2  = S.PER_MON_2    
									,T.PER_MON_3  = S.PER_MON_3    
									,T.MUL_MON_3  = S.MUL_MON_3    
									,T.PER_MON_4  = S.PER_MON_4    
									,T.MUL_MON_4  = S.MUL_MON_4    
									,T.PER_MON_5  = S.PER_MON_5    
									,T.MUL_MON_5  = S.MUL_MON_5    
									,T.PER_MON_6  = S.PER_MON_6    
									,T.MUL_MON_6  = S.MUL_MON_6    
									,T.PER_MON_7  = S.PER_MON_7    
									,T.MUL_MON_7  = S.MUL_MON_7    
									,T.PER_MON_8  = S.PER_MON_8    
									,T.MUL_MON_8  = S.MUL_MON_8    
									,T.PER_MON_9  = S.PER_MON_9    
									,T.MUL_MON_9  = S.MUL_MON_9    
									,T.PER_MON_10 = S.PER_MON_10   
									,T.MUL_MON_10 = S.MUL_MON_10   
									,T.PER_MON_11 = S.PER_MON_11   
									,T.MUL_MON_11 = S.MUL_MON_11   
									,T.CHKDATE	  = SYSDATE
									,T.CHKID	  = #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT 
						(
						      T.ENTER_CD
							, T.SDATE     
							, T.F_MON     
							, T.T_MON     
							, T.EDATE     
							, T.PER_MON_1 
							, T.PER_MON_2 
							, T.PER_MON_3 
							, T.MUL_MON_3 
							, T.PER_MON_4 
							, T.MUL_MON_4 
							, T.PER_MON_5 
							, T.MUL_MON_5 
							, T.PER_MON_6 
							, T.MUL_MON_6 
							, T.PER_MON_7 
							, T.MUL_MON_7 
							, T.PER_MON_8 
							, T.MUL_MON_8 
							, T.PER_MON_9 
							, T.MUL_MON_9 
							, T.PER_MON_10
							, T.MUL_MON_10
							, T.PER_MON_11
							, T.MUL_MON_11
							, T.CHKDATE
							, T.CHKID
						) 
						VALUES 
						(
							  #{ssnEnterCd}
                            , S.SDATE     
                            , S.F_MON     
							, S.T_MON     
							, S.EDATE     
							, S.PER_MON_1 
							, S.PER_MON_2 
							, S.PER_MON_3 
							, S.MUL_MON_3 
							, S.PER_MON_4 
							, S.MUL_MON_4 
							, S.PER_MON_5 
							, S.MUL_MON_5 
							, S.PER_MON_6 
							, S.MUL_MON_6 
							, S.PER_MON_7 
							, S.MUL_MON_7 
							, S.PER_MON_8 
							, S.MUL_MON_8 
							, S.PER_MON_9 
							, S.MUL_MON_9 
							, S.PER_MON_10
							, S.MUL_MON_10
							, S.PER_MON_11
							, S.MUL_MON_11
							, SYSDATE
							, #{ssnSabun}
						)
		</update>
		
<!-- 		삭제 -->
		<delete parameterType="map" id="deleteSimAssStd">


					DELETE FROM TCPN013 
					WHERE (ENTER_CD, SDATE, F_MON)  IN 	(  (NULL, NULL, NULL)  
<foreach item="rm" collection="deleteRows" >
						,
										<if test='ssnEnterCd != null and !ssnEnterCd.equals("")'>
										  <if test='rm.sdate != null and !rm.sdate.equals("")'>
										      <if test='rm.fMon != null and !rm.fMon.equals("")'>
											    (#{ssnEnterCd} , #{rm.sdate} , #{rm.fMon})
											  </if>
										  </if>
										</if>
</foreach>
										)
		</delete>
		
	</mapper>
