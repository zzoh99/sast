<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="cpn.basisConfig.contractCre">
		<!-- 조회 -->
		<select parameterType="map" resultType="cMap" id="getContractCreList">


					SELECT	0 AS DETAIL
					,		A.CONT_TYPE
					,		F_COM_GET_ORG_NM2(A.ENTER_CD, A.SABUN, A.EDATE) AS ORG_NM
					, 		A.SABUN
					,		F_COM_GET_NAMES(A.ENTER_CD,A.SABUN) AS NAME
					, 		F_COM_GET_NAMES(A.ENTER_CD,A.SABUN,'ALIAS') AS ALIAS
					, 		F_COM_GET_JIKGUB_NM (A.ENTER_CD, A.SABUN, TO_CHAR (SYSDATE, 'YYYYMMDD')) AS JIKGUB_NM
					,		F_COM_GET_JIKWEE_NM (A.ENTER_CD, A.SABUN, TO_CHAR (SYSDATE, 'YYYYMMDD')) AS JIKWEE_NM
					,		A.SDATE
					,       A.EDATE
					,       A.AGREE_YN
					, 		TO_CHAR(A.AGREE_DATE,'YYYY-MM-DD HH24:MI:SS') AS AGREE_DATE
					,       A.BASE_YEAR_MON
					,       A.FACTORY_YEAR_MON
					,       A.FOOD_YEAR_MON
					,       A.BONUS_YEAR_MON
					,       A.BASE_MON
					,       A.FACTORY_MON
					,       A.FOOD_MON
					,       A.BONUS_MON
					,		A.PAY_TYPE
					,		Z.PATH||Z.FILE_NM AS RD_MRD
					FROM	TCPN412 A
					, 		THRM100 B
					, 		TCPN410 Z
				   WHERE 	A.ENTER_CD 	= #{ssnEnterCd}
					 AND 	A.ENTER_CD 	= B.ENTER_CD
					 AND 	A.SABUN 	= B.SABUN
				     AND 	A.ENTER_CD  = Z.ENTER_CD (+)
					 AND 	A.CONT_TYPE = Z.CONT_TYPE (+)
					 AND 	A.SDATE BETWEEN Z.SDATE (+) AND NVL(Z.EDATE(+) , '99991231')
			<if test='searchDate != null and !searchDate.equals("")'>
				AND REPLACE( #{searchDate} , '-', '') BETWEEN A.SDATE AND A.EDATE
			</if>
			<if test='searchSabun != null and !searchSabun.equals("")'>
		         AND A.SABUN = REPLACE( #{searchSabun} , '-', '')
			</if>
				 ORDER BY F_COM_JIKJE_SORT(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE,'YYYYMMDD'))
		</select>
		
		<!-- 저장 -->
		<update parameterType="map" id="saveContractCre">


						MERGE INTO TCPN412	T
						USING	
						(
									SELECT	ENTER_CD
										,	SABUN
										,	SDATE
										,	EDATE
										,	BASE_YEAR_MON
										,   FACTORY_YEAR_MON
										,   FOOD_YEAR_MON
										,   BONUS_YEAR_MON
										,   BASE_MON
										,   FACTORY_MON
										,   FOOD_MON
										,   BONUS_MON
										,	AGREE_YN
										,   AGREE_DATE
										,	CHKDATE
										,	CHKID
										,	CONT_TYPE
										,	PAY_TYPE
							FROM	(
									SELECT	NULL		AS	ENTER_CD
										,	NULL		AS	SABUN
										,	NULL		AS	SDATE
										,	NULL		AS	EDATE
										,	NULL		AS	BASE_YEAR_MON
										,	NULL		AS	FACTORY_YEAR_MON
										,	NULL		AS	FOOD_YEAR_MON
										,	NULL		AS	BONUS_YEAR_MON
										,	NULL		AS	BASE_MON
										,	NULL		AS	FACTORY_MON
										,	NULL		AS	FOOD_MON
										,	NULL		AS	BONUS_MON
										,	NULL		AS	AGREE_YN
										,	NULL		AS	AGREE_DATE
										,	NULL		AS	CHKDATE
										,	NULL		AS	CHKID
										,	NULL		AS	CONT_TYPE
										,	NULL		AS	PAY_TYPE
									FROM	DUAL
			<bind name="icnt" value="1" />
			<foreach item="rm" collection="mergeRows" >
								UNION ALL
									SELECT	TRIM(#{ssnEnterCd})				AS	ENTER_CD
										,	TRIM(#{rm.sabun})				AS	SABUN
										,	TRIM(#{rm.sdate})				AS	SDATE
										,	TRIM(#{rm.edate})				AS	EDATE
										,	TRIM(#{rm.baseYearMon})			AS	BASE_YEAR_MON
										,	TRIM(#{rm.factoryYearMon})		AS	FACTORY_YEAR_MON
										,	TRIM(#{rm.foodYearMon})			AS	FOOD_YEAR_MON
										,	TRIM(#{rm.bonusYearMon})		AS	BONUS_YEAR_MON
										,	TRIM(#{rm.baseMon})				AS	BASE_MON
										,	TRIM(#{rm.factoryMon})			AS	FACTORY_MON
										,	TRIM(#{rm.foodMon})				AS	FOOD_MON
										,	TRIM(#{rm.bonusMon})			AS	BONUS_MON
										,	TRIM(#{rm.agreeYn})				AS	AGREE_YN
										<choose>
											<when test='rm.agreeYn != null and rm.agreeYn.equals("Y") and rm.sStatus != null and rm.sStatus.equals("I")'>
											, 	SYSDATE							AS  AGREE_DATE
											</when>
											<otherwise>
											, 	NULL							AS  AGREE_DATE
											</otherwise>
										</choose>
										,	SYSDATE							AS	CHKDATE
										,	#{ssnSabun}						AS	CHKID
										,	'A2'							AS	CONT_TYPE
										,	TRIM(#{rm.payType})				AS	PAY_TYPE
									FROM	DUAL
			</foreach>
									)	WHERE	ENTER_CD IS NOT NULL
										AND	SABUN IS NOT NULL
										AND	SDATE IS NOT NULL
						) S
					ON	(
								T.ENTER_CD			=		S.ENTER_CD
							AND	T.SABUN				=		S.SABUN
							AND	T.SDATE				=		S.SDATE
						)
					WHEN MATCHED THEN 
					UPDATE SET	
							T.EDATE				=	S.EDATE
						,	T.BASE_YEAR_MON		=	S.BASE_YEAR_MON
						,	T.FACTORY_YEAR_MON	=	S.FACTORY_YEAR_MON
						,	T.FOOD_YEAR_MON		=	S.FOOD_YEAR_MON
						,	T.BONUS_YEAR_MON	=	S.BONUS_YEAR_MON
						,	T.BASE_MON			=	S.BASE_MON
						,	T.FACTORY_MON		=	S.FACTORY_MON
						,	T.FOOD_MON			=	S.FOOD_MON
						,	T.BONUS_MON			=	S.BONUS_MON
						,	T.CHKDATE			=	S.CHKDATE
						,	T.CHKID				=	S.CHKID
						,	T.CONT_TYPE			=	S.CONT_TYPE
					WHEN NOT MATCHED THEN
					INSERT
					( 
							T.ENTER_CD
						,	T.SABUN
						,	T.SDATE
						,	T.EDATE
						,	T.BASE_YEAR_MON
						,	T.FACTORY_YEAR_MON
						,	T.FOOD_YEAR_MON
						,	T.BONUS_YEAR_MON
						,	T.BASE_MON
						,	T.FACTORY_MON
						,	T.FOOD_MON
						,	T.BONUS_MON
						,	T.AGREE_YN
						,   T.AGREE_DATE
						,	T.PAY_TYPE
						,	T.CHKDATE
						,	T.CHKID
						,	T.CONT_TYPE
					)
					VALUES
					(
							S.ENTER_CD
						,	S.SABUN
						,	S.SDATE
						,	S.EDATE
						,	S.BASE_YEAR_MON
						,	S.FACTORY_YEAR_MON
						,	S.FOOD_YEAR_MON
						,	S.BONUS_YEAR_MON
						,	S.BASE_MON
						,	S.FACTORY_MON
						,	S.FOOD_MON
						,	S.BONUS_MON
						,	S.AGREE_YN
						,	S.AGREE_DATE
						,	S.PAY_TYPE
						,	S.CHKDATE
						,	S.CHKID
						,	S.CONT_TYPE
					)
		</update>
<!-- 		삭제 -->
		<delete parameterType="map" id="deleteContractCre">


					DELETE	FROM TCPN412
					WHERE	(ENTER_CD, SABUN, SDATE) IN ((NULL, NULL, NULL)


			<foreach item="rm" collection="deleteRows" >
						,
						<if test='ssnEnterCd != null and !ssnEnterCd.equals("")'>
						<if test='rm.sabun != null and !rm.sabun.equals("")'>
						<if test='rm.sdate != null and !rm.sdate.equals("")'>
						( TRIM( #{ssnEnterCd} ) , TRIM( #{rm.sabun} ) , TRIM( #{rm.sdate} ) )
						</if>
						</if>
						</if>
			</foreach>
										)
		</delete>
		
		<update id="callP_CPN_CONTRACT_CREATE" parameterType="map" statementType="CALLABLE">
			<![CDATA[
					CALL P_CPN_CONTRACT_CREATE(
						#{sqlCode,mode=OUT,jdbcType=VARCHAR},
						#{sqlErrm,mode=OUT,jdbcType=VARCHAR},
						#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
						REPLACE( #{searchDate,mode=IN,jdbcType=VARCHAR}, '-', ''),
						#{searchSabun,mode=IN,jdbcType=VARCHAR},
						#{ssnSabun,mode=IN,jdbcType=VARCHAR})
			]]>
		</update>
</mapper>