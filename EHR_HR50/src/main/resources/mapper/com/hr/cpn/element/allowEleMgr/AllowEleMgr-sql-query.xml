<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="cpn.element.allowEleMgr">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getAllowEleMgrList">

					SELECT  '0' AS DETAIL
					      , A.ELEMENT_TYPE
					      , A.ELEMENT_CD
					      , A.SDATE
					      , A.EDATE
					      , A.ELEMENT_NM
					      , A.ELEMENT_ENG
					      , A.REPORT_NM
					      , A.PRIORITY
					      , A.UPDOWN_TYPE
					      , A.UPDOWN_UNIT
					      , A.CURRENCY_CD
					      , A.ELEMENT_LINK_TYPE
					      , A.RESULT_ELEMENT_CD
					      , B.ELEMENT_NM AS RESULT_ELEMENT_NM
					      , A.SYS_YN
					      , A.GRP_SORT
					      ,A.ATTRIBUTE_2
							,A.ATTRIBUTE_3
							,A.ATTRIBUTE_4
							,A.ATTRIBUTE_5
							,A.ATTRIBUTE_6
							,A.ATTRIBUTE_7
							,A.ATTRIBUTE_8
							,( SELECT ADJ_ELEMENT_NM FROM TCPN803 WHERE ENTER_CD = A.ENTER_CD AND ADJ_ELEMENT_CD = A.ATTRIBUTE_8 AND INCOME_DATA_YN = 'Y' AND WORK_YY = TO_CHAR( SYSDATE, 'YYYY' ) ) AS ATTRIBUTE_8_NM
							,A.ATTRIBUTE_9
							,A.ATTRIBUTE_10
							,A.ATTRIBUTE_11
							, A.LANGUAGE_CD
							, F_COM_GET_LANGUAGE_MAPPING (#{ssnEnterCd}, 'tcpn011',  A.LANGUAGE_CD,#{ssnLocaleCd}) AS LANGUAGE_NM
							, A.LANGUAGE_CD2
						    , F_COM_GET_LANGUAGE_MAPPING (#{ssnEnterCd}, 'tcpn011',  A.LANGUAGE_CD2,#{ssnLocaleCd}) AS LANGUAGE_NM2
							
							,NVL((SELECT DECODE(Y.ELEMENT_CD,NULL,'N','Y')
                              FROM TCPN071 X, TCPN072 Y
                              WHERE X.ENTER_CD = Y.ENTER_CD
                                AND X.ELEMENT_SET_CD = Y.ELEMENT_SET_CD
                                AND X.ENTER_CD = A.ENTER_CD
                                AND X.ELEMENT_SET_CD = '01'
                                AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN Y.SDATE AND NVL(Y.EDATE,'99991231')
                                AND Y.ELEMENT_CD = A.ELEMENT_CD),'N') AS GUBUN1
                                
                            ,NVL((SELECT DECODE(Y.ELEMENT_CD,NULL,'N','Y')
                              FROM TCPN071 X, TCPN072 Y
                              WHERE X.ENTER_CD = Y.ENTER_CD
                                AND X.ELEMENT_SET_CD = Y.ELEMENT_SET_CD
                                AND X.ENTER_CD = A.ENTER_CD
                                AND X.ELEMENT_SET_CD = '02'
                                AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN Y.SDATE AND NVL(Y.EDATE,'99991231')
                                AND Y.ELEMENT_CD = A.ELEMENT_CD),'N') AS GUBUN2
                            ,NVL((SELECT DECODE(Y.ELEMENT_CD,NULL,'N','Y')
                              FROM TCPN071 X, TCPN072 Y
                              WHERE X.ENTER_CD = Y.ENTER_CD
                                AND X.ELEMENT_SET_CD = Y.ELEMENT_SET_CD
                                AND X.ENTER_CD = A.ENTER_CD
                                AND X.ELEMENT_SET_CD = '38'
                                AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN Y.SDATE AND NVL(Y.EDATE,'99991231')
                                AND Y.ELEMENT_CD = A.ELEMENT_CD),'N') AS GUBUN3
                            ,NVL((SELECT DECODE(Y.ELEMENT_CD,NULL,'N','Y')
                              FROM TCPN071 X, TCPN072 Y
                              WHERE X.ENTER_CD = Y.ENTER_CD
                                AND X.ELEMENT_SET_CD = Y.ELEMENT_SET_CD
                                AND X.ENTER_CD = A.ENTER_CD
                                AND X.ELEMENT_SET_CD = '31'
                                AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN Y.SDATE AND NVL(Y.EDATE,'99991231')
                                AND Y.ELEMENT_CD = A.ELEMENT_CD),'N') AS GUBUN4
                            ,NVL((SELECT DECODE(Y.ELEMENT_CD,NULL,'N','Y')
                              FROM TCPN071 X, TCPN072 Y
                              WHERE X.ENTER_CD = Y.ENTER_CD
                                AND X.ELEMENT_SET_CD = Y.ELEMENT_SET_CD
                                AND X.ENTER_CD = A.ENTER_CD
                                AND X.ELEMENT_SET_CD = '32'
                                AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN Y.SDATE AND NVL(Y.EDATE,'99991231')
                                AND Y.ELEMENT_CD = A.ELEMENT_CD),'N') AS GUBUN5
                            ,NVL((SELECT DECODE(Y.ELEMENT_CD,NULL,'N','Y')
                              FROM TCPN071 X, TCPN072 Y
                              WHERE X.ENTER_CD = Y.ENTER_CD
                                AND X.ELEMENT_SET_CD = Y.ELEMENT_SET_CD
                                AND X.ENTER_CD = A.ENTER_CD
                                AND X.ELEMENT_SET_CD = '39'
                                AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN Y.SDATE AND NVL(Y.EDATE,'99991231')
                                AND Y.ELEMENT_CD = A.ELEMENT_CD),'N') AS GUBUN6
					FROM  TCPN011  A,  TCPN011  B
					WHERE A.ENTER_CD      = #{ssnEnterCd}
					  AND A.ELEMENT_TYPE  = 'A'
					  <if test='searchElementType != null and !searchElementType.equals("")'>
    					  AND A.ELEMENT_NM    LIKE '%'|| TRIM(#{searchElementType}) ||'%'
					  </if>
					  AND A.ENTER_CD = B.ENTER_CD(+)
					  AND A.RESULT_ELEMENT_CD = B.ELEMENT_CD(+)
					  AND A.SDATE = B.SDATE(+)
					ORDER BY A.PRIORITY, A.GRP_SORT, A.ELEMENT_CD


		</select>

<!-- 		저장 -->
		<update parameterType="map" id="saveAllowEleMgr">

					MERGE INTO TCPN011 T
					USING	(
							SELECT	  A.ELEMENT_CD
									, A.SDATE
									, A.EDATE
									, A.ELEMENT_TYPE
									, A.ELEMENT_NM
									, A.ELEMENT_ENG
									, A.REPORT_NM
									, A.PRIORITY
									, A.UPDOWN_TYPE
									, A.UPDOWN_UNIT
									, A.CURRENCY_CD
									, A.ELEMENT_LINK_TYPE
									, A.RESULT_ELEMENT_CD
									, A.GRP_SORT
									,A.ATTRIBUTE_2
									,A.ATTRIBUTE_3
									,A.ATTRIBUTE_4
									,A.ATTRIBUTE_5
									,A.ATTRIBUTE_6
									,A.ATTRIBUTE_7
									,A.ATTRIBUTE_8
									,A.ATTRIBUTE_9
									,A.ATTRIBUTE_10
									,A.ATTRIBUTE_11
									,A.LANGUAGE_CD
									,A.LANGUAGE_CD2
							FROM	(
									SELECT	  NULL		AS ELEMENT_CD
											, NULL		AS SDATE
											, NULL		AS EDATE
											, NULL		AS ELEMENT_TYPE
											, NULL		AS ELEMENT_NM
											, NULL		AS ELEMENT_ENG
											, NULL		AS REPORT_NM
                                            , NULL      AS PRIORITY
                                            , NULL      AS UPDOWN_TYPE
                                            , NULL      AS UPDOWN_UNIT
                                            , NULL      AS CURRENCY_CD
                                            , NULL      AS ELEMENT_LINK_TYPE
                                            , NULL      AS RESULT_ELEMENT_CD
                                            , NULL      AS GRP_SORT
                                            ,NULL AS ATTRIBUTE_2
											,NULL AS ATTRIBUTE_3
											,NULL AS ATTRIBUTE_4
											,NULL AS ATTRIBUTE_5
											,NULL AS ATTRIBUTE_6
											,NULL AS ATTRIBUTE_7
											,NULL AS ATTRIBUTE_8
											,NULL AS ATTRIBUTE_9
											,NULL AS ATTRIBUTE_10
											,NULL AS ATTRIBUTE_11
											,NULL AS LANGUAGE_CD
											,NULL AS LANGUAGE_CD2
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT   TRIM(#{rm.elementCd})         AS ELEMENT_CD
											,TRIM(#{rm.sdate})             AS SDATE
											,TRIM(#{rm.edate})             AS EDATE
											,TRIM(#{rm.elementType})       AS ELEMENT_TYPE
											,TRIM(#{rm.elementNm})         AS ELEMENT_NM
											,TRIM(#{rm.elementEng})        AS ELEMENT_ENG
											,TRIM(#{rm.reportNm})          AS REPORT_NM
											,TRIM(#{rm.priority})          AS PRIORITY
											,TRIM(#{rm.updownType})        AS UPDOWN_TYPE
											,TRIM(#{rm.updownUnit})        AS UPDOWN_UNIT
											,TRIM(#{rm.currencyCd})        AS CURRENCY_CD
											,TRIM(#{rm.elementLinkType})   AS ELEMENT_LINK_TYPE
											,TRIM(#{rm.resultElementCd})   AS RESULT_ELEMENT_CD
											,TRIM(#{rm.grpSort})           AS GRP_SORT
											,TRIM(#{rm.attribute2})   AS ATTRIBUTE_2
											,TRIM(#{rm.attribute3})   AS ATTRIBUTE_3
											,TRIM(#{rm.attribute4})   AS ATTRIBUTE_4
											,TRIM(#{rm.attribute5})   AS ATTRIBUTE_5
											,TRIM(#{rm.attribute6})   AS ATTRIBUTE_6
											,TRIM(#{rm.attribute7})   AS ATTRIBUTE_7
											,TRIM(#{rm.attribute8})   AS ATTRIBUTE_8
											,TRIM(#{rm.attribute9})   AS ATTRIBUTE_9
											,TRIM(#{rm.attribute10})  AS ATTRIBUTE_10
											,TRIM(#{rm.attribute11})  AS ATTRIBUTE_11
											,TRIM(#{rm.languageCd})  AS LANGUAGE_CD
											,TRIM(#{rm.languageCd2})  AS LANGUAGE_CD2
											FROM   DUAL
</foreach>
									) A WHERE A.ELEMENT_NM IS NOT NULL
							) S
					ON ( T.ENTER_CD   = #{ssnEnterCd}
					AND  T.ELEMENT_CD = S.ELEMENT_CD
					AND  T.SDATE      = S.SDATE
					)
					WHEN MATCHED THEN
						UPDATE SET	  T.EDATE               = S.EDATE
									, T.ELEMENT_TYPE        = S.ELEMENT_TYPE
									, T.ELEMENT_NM          = S.ELEMENT_NM
									, T.ELEMENT_ENG         = S.ELEMENT_ENG
									, T.REPORT_NM           = S.REPORT_NM
                                    , T.PRIORITY            = S.PRIORITY
                                    , T.UPDOWN_TYPE         = S.UPDOWN_TYPE
                                    , T.UPDOWN_UNIT         = S.UPDOWN_UNIT
                                    , T.CURRENCY_CD         = S.CURRENCY_CD
                                    , T.ELEMENT_LINK_TYPE   = S.ELEMENT_LINK_TYPE
                                    , T.RESULT_ELEMENT_CD   = S.RESULT_ELEMENT_CD
                                    , T.GRP_SORT            = S.GRP_SORT
                                    ,T.ATTRIBUTE_2     =    S.ATTRIBUTE_2
									,T.ATTRIBUTE_3     =    S.ATTRIBUTE_3
									,T.ATTRIBUTE_4     =    S.ATTRIBUTE_4
									,T.ATTRIBUTE_5     =    S.ATTRIBUTE_5
									,T.ATTRIBUTE_6     =    S.ATTRIBUTE_6
									,T.ATTRIBUTE_7     =    S.ATTRIBUTE_7
									,T.ATTRIBUTE_8     =    S.ATTRIBUTE_8
									,T.ATTRIBUTE_9     =    S.ATTRIBUTE_9
									,T.ATTRIBUTE_10    =    S.ATTRIBUTE_10
									,T.ATTRIBUTE_11    =    S.ATTRIBUTE_11
									,T.LANGUAGE_CD     =    S.LANGUAGE_CD
									,T.LANGUAGE_CD2    =    S.LANGUAGE_CD2
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD     -- key
							, T.ELEMENT_CD   -- key
							, T.SDATE        -- key
							, T.EDATE
							, T.ELEMENT_TYPE
							, T.ELEMENT_NM
							, T.ELEMENT_ENG
							, T.REPORT_NM
							, T.PRIORITY
							, T.UPDOWN_TYPE
							, T.UPDOWN_UNIT
							, T.CURRENCY_CD
							, T.ELEMENT_LINK_TYPE
							, T.RESULT_ELEMENT_CD
							, T.GRP_SORT
							,T.ATTRIBUTE_2
							,T.ATTRIBUTE_3
							,T.ATTRIBUTE_4
							,T.ATTRIBUTE_5
							,T.ATTRIBUTE_6
							,T.ATTRIBUTE_7
							,T.ATTRIBUTE_8
							,T.ATTRIBUTE_9
							,T.ATTRIBUTE_10
							,T.ATTRIBUTE_11
							,T.LANGUAGE_CD
							,T.LANGUAGE_CD2
                            , T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  #{ssnEnterCd}     -- key
                            , S.ELEMENT_CD   -- key
                            , S.SDATE       -- key
                            , S.EDATE
                            , S.ELEMENT_TYPE
                            , S.ELEMENT_NM
                            , S.ELEMENT_ENG
                            , S.REPORT_NM
                            , S.PRIORITY
                            , S.UPDOWN_TYPE
                            , S.UPDOWN_UNIT
                            , S.CURRENCY_CD
                            , S.ELEMENT_LINK_TYPE
                            , S.RESULT_ELEMENT_CD
                            , S.GRP_SORT
                            ,S.ATTRIBUTE_2
							,S.ATTRIBUTE_3
							,S.ATTRIBUTE_4
							,S.ATTRIBUTE_5
							,S.ATTRIBUTE_6
							,S.ATTRIBUTE_7
							,S.ATTRIBUTE_8
							,S.ATTRIBUTE_9
							,S.ATTRIBUTE_10
							,S.ATTRIBUTE_11
							,S.LANGUAGE_CD
							,S.LANGUAGE_CD2
							, SYSDATE
							, #{ssnSabun}
						)



		</update>
<!-- 		삭제 -->
		<delete parameterType="map" id="deleteAllowEleMgr">


					DELETE FROM TCPN011
					WHERE 	(ENTER_CD, ELEMENT_CD, SDATE) IN 	(  (NULL, NULL, NULL)
<foreach item="rm" collection="deleteRows" >
						,
										<if test='ssnEnterCd != null and !ssnEnterCd.equals("") and rm.elementCd != null and !rm.elementCd.equals("") and rm.sdate != null and !rm.sdate.equals("")'>

											    	(#{ssnEnterCd}, TRIM( #{rm.elementCd} ), TRIM( #{rm.sdate} ) )
		                                    </if>
</foreach>
										)



		</delete>
	</mapper>
