<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cpn.personalPay.SalaryPeakMgr">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getSalaryPeakMgrList">
			
				<![CDATA[
						SELECT  /*+ RULE */
						                F_COM_GET_ORG_NM(C.ENTER_CD,C.ORG_CD, A.S_YM) AS ORG_NM
						                , C.ORG_CD
						                , B.NAME
						                , A.SABUN
						                , C.STATUS_NM
	                                    , C.MANAGE_NM
	                                    , C.JIKGUB_NM
						                , F_COM_GET_GRCODE_NAME(C.ENTER_CD, 'H10010', C.STATUS_CD) AS STATUS_NM
						                ,'19'||SUBSTR(F_COM_DECRYPT(B.RES_NO, 'A'), 1, 4) AS BIRTH_YM
						                ,A.YEAR
				                        ,A.RATE
				                        ,A.S_YM
				                        ,A.E_YM
				                        ,A.BIGO
						          FROM  TCPN126 A ]]>
	<if test='ssnSearchType eq "O"'>
	INNER JOIN ${query} AUTH
	   ON AUTH.ENTER_CD = A.ENTER_CD
	  AND AUTH.SABUN = A.SABUN 
	</if><![CDATA[
						               ,THRM100 B  
						               ,(
						                  SELECT     SUB1.*     
						                     FROM     THRM151 SUB1,    
						                        (SELECT MAX(SDATE) AS SDATE, ENTER_CD, SABUN    
						                           FROM THRM151     
						                         WHERE ENTER_CD = #{ssnEnterCd}
						                           AND (
						                                   SDATE LIKE REPLACE(#{searchDate},'-','')||'%'
						                                       OR EDATE LIKE REPLACE(#{searchDate},'-','')||'%'
						                                       OR (REPLACE(#{searchDate},'-','')||'01') BETWEEN SDATE AND NVL(EDATE,'99991231')
						                               )
						                         GROUP BY ENTER_CD, SABUN) SUB2    
						                    WHERE     SUB1.ENTER_CD    = SUB2.ENTER_CD    
						                      AND SUB1.SABUN = SUB2.SABUN    
						                     AND SUB1.SDATE = SUB2.SDATE  
						                ) C    
						         WHERE    B.ENTER_CD = A.ENTER_CD
						           AND    B.SABUN = A.SABUN
						           AND    B.ENTER_CD = C.ENTER_CD
						           AND    B.SABUN = C.SABUN
						           AND    A.ENTER_CD = #{ssnEnterCd}     ]]>  
						           
						           <if test="searchSabunName != null and searchSabunName neq ''">
						         		AND    (A.SABUN = #{searchSabunName} OR B.NAME LIKE '%' || #{searchSabunName} || '%')
						           </if>
						           <if test="searchStatusCdHidden != null and searchStatusCdHidden neq ''">
						           		AND    C.STATUS_CD IN
		<foreach collection="searchStatusCdHidden" item="item" index="index" open="(" close=")" separator=",">
				#{item}
		</foreach>
						           </if>
						           <if test="searchManageCdHidden != null and searchManageCdHidden neq ''">
						           		AND    C.MANAGE_CD IN
		<foreach collection="searchManageCdHidden" item="item" index="index" open="(" close=")" separator=",">
				#{item}
		</foreach>
						           </if>
						           <if test="searchOrgNm != null and searchOrgNm neq ''">
									 	AND F_COM_GET_ORG_NM2(A.ENTER_CD, A.SABUN, TO_CHAR(SYS_YM,'YYYYMMDD')) LIKE '%'|| TRIM( #{searchOrgNm} ) ||'%'
								   </if>
								   <if test="searchDate != null and searchDate neq ''">
								  	 AND A.S_YM = (SELECT MAX(S_YM) 
								  	 				FROM TCPN126 
								  	 				WHERE ENTER_CD = A.ENTER_CD 
								  	 				AND SABUN = A.SABUN
	                                            	AND REPLACE(#{searchDate}, '-', '') BETWEEN S_YM AND NVL(E_YM, '999912' ) )
								   </if>
								   <if test="searchYear != null and searchYear neq ''">
								  	 AND A.YEAR = #{searchYear}
								   </if>
								   <if test="searchBigo != null and searchBigo neq ''">
								  	 AND A.BIGO LIKE '%' ||  #{searchBigo} || '%'
								   </if>
								ORDER BY '19'||SUBSTR(F_COM_DECRYPT(B.RES_NO, 'A'), 1, 4), B.NAME ASC, A.YEAR ASC
		</select>
		
<!-- 		저장 -->	
		<update parameterType="map" id="saveSalaryPeakMgr">
					MERGE INTO TCPN126 T
					USING	(
							SELECT A.SABUN
								 , A.YEAR 
								 , A.RATE 
								 , A.S_YM 
								 , A.E_YM 
								 , A.BIGO 
							  FROM (
									SELECT NULL	AS SABUN
										 , NULL	AS YEAR
										 , NULL	AS RATE
										 , NULL	AS S_YM
										 , NULL	AS E_YM
										 , NULL	AS BIGO
									  FROM DUAL
<foreach item="rm" collection="mergeRows">
									UNION ALL
									SELECT TRIM(#{rm.sabun})	AS SABUN
										 , TRIM(#{rm.year})		AS YEAR
										 , TRIM(#{rm.rate})		AS RATE
										 , TRIM(#{rm.sYm})		AS S_YM
										 , TRIM(#{rm.eYm})		AS E_YM
										 , TRIM(#{rm.bigo})		AS BIGO
									  FROM DUAL
</foreach>
									) A
							WHERE A.SABUN		IS NOT NULL
							  AND A.YEAR		IS NOT NULL
							  AND A.S_YM		IS NOT NULL
							) S
					ON	(	T.ENTER_CD		= #{ssnEnterCd}
						AND	T.SABUN			= S.SABUN
						AND	T.YEAR			= S.YEAR
						AND	T.S_YM			= S.S_YM
						)
					WHEN MATCHED THEN
						UPDATE SET T.E_YM				= S.E_YM
								 , T.RATE				= S.RATE
								 , T.BIGO				= S.BIGO
								 , T.CHKDATE			= SYSDATE
								 , T.CHKID				= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							T.ENTER_CD
						  , T.SABUN
						  , T.YEAR
						  , T.RATE
						  , T.S_YM
						  , T.E_YM
						  , T.BIGO
						  , T.CHKDATE
						  , T.CHKID
						)
						VALUES
						(
							#{ssnEnterCd}
						  , S.SABUN
						  , S.YEAR
						  , S.RATE
						  , S.S_YM
						  , S.E_YM
						  , S.BIGO
						  , SYSDATE
						  , #{ssnSabun}
						)
		</update>
		
<!-- 		삭제 -->
		<delete parameterType="map" id="deleteSalaryPeakMgr">
					DELETE FROM TCPN126 
					WHERE 	(ENTER_CD, SABUN, YEAR, S_YM) IN 	(  (NULL, NULL, NULL, NULL)
<foreach item="rm" collection="deleteRows">
						,
										<if test="ssnEnterCd != null and ssnEnterCd neq ''">
											<if test="rm.sabun != null and rm.sabun neq ''">
												<if test="rm.year != null and rm.year neq '' and rm.sYm != null and rm.sYm neq ''">
														(#{ssnEnterCd}, TRIM( #{rm.sabun} ) ,TRIM( #{rm.year} ) ,TRIM( #{rm.sYm} ) )
													
												</if>
											</if>
										</if>
</foreach>
										)
		</delete>

</mapper>
