<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cpn.yjungsan.befComMgr">
	<!-- 종전근무지 비과세 항목코드 조회  -->
    <select parameterType="map" resultType="cMap" id="getNoTaxCodeList">
			<![CDATA[
		SELECT ADJ_ELEMENT_CD AS CODE, ADJ_ELEMENT_NM AS CODE_NM
			 , MAX(LEN) OVER() AS MAX_LEN
		FROM (
				 SELECT ADJ_ELEMENT_CD, ADJ_ELEMENT_NM, LENGTH(ADJ_ELEMENT_CD||' ('||ADJ_ELEMENT_NM||')') AS LEN
				 FROM TCPN803
				 WHERE ENTER_CD       	= #{ssnEnterCd}
				   AND WORK_YY			= #{srchWorkYy}
				   AND INCOME_DATA_YN   = 'Y'
				   AND ADJ_PROCESS_CD 	= 'C010'
				   AND ADJ_ELEMENT_CD NOT IN ('C010_110', 'C010_111')
				 ORDER BY SEQ
			 )
		]]>
	</select>

	<!-- 종전근무지관리 조회 -->
    <select parameterType="map" resultType="cMap" id="getBefComMgr">
		<![CDATA[
		SELECT 0 AS SELECT_IMG
			 , WORK_YY
			 , ADJUST_TYPE
			 , SABUN
			 , SEQ
			 , ENTER_NO
			 , ENTER_NM
			 , WORK_S_YMD
			 , WORK_E_YMD
			 , PAY_MON
			 , BONUS_MON
			 , ETC_BONUS_MON
			 , INCOME_TAX_MON
			 , INHBT_TAX_MON
			 , RURAL_TAX_MON
			 , PEN_MON
			 , HEL_MON
			 , EMP_MON
			 , NOTAX_ABROAD_MON
			 , NOTAX_WORK_MON
			 , NOTAX_RESEARCH_MON
			 , NOTAX_BABY_MON
			 , NOTAX_TRAIN_MON /* 2019.12.09.수련보조수당 비과세 */
			 , NOTAX_ETC_MON   /* 2019.12.09.기타 비과세 */
			 , NOTAX_FORN_MON
			 , NOTAX_REPORTER_MON
			 , NOTAX_FOOD_MON
			 , STOCK_BUY_MON
			 , STOCK_UNION_MON
			 , ETC_MON1
			 , ETC_MON2
			 , ETC_MON3
			 , ETC_MON4
			 , REDUCE_S_YMD
			 , REDUCE_E_YMD
			 , IMWON_RET_OVER_MON
			 , NAPSE_YN
			 , TO_CHAR(CHKDATE, 'yyyymmddHH24miss') AS CHKDATE
			 , FIN_TOT_TAX_MON
		FROM TCPN817
		WHERE ENTER_CD		= #{ssnEnterCd}
		  AND WORK_YY  	= #{srchYear}
		  AND ADJUST_TYPE LIKE '%'|| #{srchAdjustType} ||'%'
		  AND ADJUST_TYPE IN (SELECT CODE
							  FROM TSYS005
							  WHERE ENTER_CD = #{ssnEnterCd}
								AND GRCODE_CD = 'C00303'
								AND USE_YN = 'Y')
		  AND SABUN       = #{srchSabun}
		]]>
	</select>

	<!-- 종전근무지관리 입력 -->
	<update parameterType="map" id="saveBefComMgr">
		MERGE INTO TCPN817 T
			USING (
				<foreach item="rm" collection="mergeRows" separator=" UNION ALL " index="idx">
					SELECT
					#{ssnEnterCd} AS ENTER_CD,
					#{rm.workYy} AS WORK_YY,
					#{rm.adjustType} AS ADJUST_TYPE,
					#{rm.sabun} AS SABUN,
					CASE WHEN TRIM(#{rm.seq}) IS NULL OR TRIM(#{rm.seq}) = '0' THEN
					(SELECT (NVL(MAX(SEQ),0) + (#{idx} + 1))
					FROM TCPN817
					WHERE ENTER_CD = #{ssnEnterCd}
					AND SABUN = TRIM(#{rm.sabun})
					AND WORK_YY = TRIM(#{rm.workYy})
					AND ADJUST_TYPE = TRIM(#{rm.adjustType})
					)
					ELSE TO_NUMBER(#{rm.seq}) END SEQ,
					#{rm.enterNo} AS ENTER_NO,
					#{rm.enterNm} AS ENTER_NM,
					#{rm.payMon} AS PAY_MON,
					#{rm.bonusMon} AS BONUS_MON,
					#{rm.etcBonusMon} AS ETC_BONUS_MON,
					#{rm.incomeTaxMon} AS INCOME_TAX_MON,
					#{rm.inhbtTaxMon} AS INHBT_TAX_MON,
					#{rm.ruralTaxMon} AS RURAL_TAX_MON,
					#{rm.penMon} AS PEN_MON,
					#{rm.helMon} AS HEL_MON,
					#{rm.empMon} AS EMP_MON,
					#{rm.notaxAbroadMon} AS NOTAX_ABROAD_MON,
					#{rm.notaxWorkMon} AS NOTAX_WORK_MON,
					#{rm.notaxTrainMon} AS NOTAX_TRAIN_MON,
					#{rm.notaxEtcMon} AS NOTAX_ETC_MON,
					#{rm.notaxResearchMon} AS NOTAX_RESEARCH_MON,
					#{rm.notaxBabyMon} AS NOTAX_BABY_MON,
					#{rm.notaxFornMon} AS NOTAX_FORN_MON,
					#{rm.notaxReporterMon} AS NOTAX_REPORTER_MON,
					#{rm.notaxFoodMon} AS NOTAX_FOOD_MON,
					#{rm.workSYmd} AS WORK_S_YMD,
					#{rm.workEYmd} AS WORK_E_YMD,
					#{rm.stockBuyMon} AS STOCK_BUY_MON,
					#{rm.stockUnionMon} AS STOCK_UNION_MON,
					#{rm.etcMon1} AS ETC_MON1,
					#{rm.etcMon2} AS ETC_MON2,
					#{rm.etcMon3} AS ETC_MON3,
					#{rm.etcMon4} AS ETC_MON4,
					#{rm.reduceSYmd} AS REDUCE_S_YMD,
					#{rm.reduceEYmd} AS REDUCE_E_YMD,
					#{rm.imwonRetOverMon} AS IMWON_RET_OVER_MON,
					#{rm.napseYn} AS NAPSE_YN,
					#{rm.finTotTaxMon} AS FIN_TOT_TAX_MON
					FROM DUAL
				</foreach>
			) S
			ON (
						T.ENTER_CD = S.ENTER_CD
					AND T.WORK_YY = S.WORK_YY
					AND T.ADJUST_TYPE = S.ADJUST_TYPE
					AND T.SABUN = S.SABUN
					AND T.SEQ = S.SEQ
				)
			WHEN MATCHED THEN
				UPDATE SET
					T.ENTER_NO = S.ENTER_NO,
					T.ENTER_NM = S.ENTER_NM,
					T.PAY_MON = S.PAY_MON,
					T.BONUS_MON = S.BONUS_MON,
					T.ETC_BONUS_MON = S.ETC_BONUS_MON,
					T.INCOME_TAX_MON = S.INCOME_TAX_MON,
					T.INHBT_TAX_MON = S.INHBT_TAX_MON,
					T.RURAL_TAX_MON = S.RURAL_TAX_MON,
					T.PEN_MON = S.PEN_MON,
					T.HEL_MON = S.HEL_MON,
					T.EMP_MON = S.EMP_MON,
					T.NOTAX_ABROAD_MON = S.NOTAX_ABROAD_MON,
					T.NOTAX_WORK_MON = S.NOTAX_WORK_MON,
					T.NOTAX_TRAIN_MON = S.NOTAX_TRAIN_MON,
					T.NOTAX_ETC_MON = S.NOTAX_ETC_MON,
					T.NOTAX_RESEARCH_MON = S.NOTAX_RESEARCH_MON,
					T.NOTAX_BABY_MON = S.NOTAX_BABY_MON,
					T.NOTAX_FORN_MON = S.NOTAX_FORN_MON,
					T.NOTAX_REPORTER_MON = S.NOTAX_REPORTER_MON,
					T.NOTAX_FOOD_MON = S.NOTAX_FOOD_MON,
					T.WORK_S_YMD = S.WORK_S_YMD,
					T.WORK_E_YMD = S.WORK_E_YMD,
					T.STOCK_BUY_MON = S.STOCK_BUY_MON,
					T.STOCK_UNION_MON = S.STOCK_UNION_MON,
					T.ETC_MON1 = S.ETC_MON1,
					T.ETC_MON2 = S.ETC_MON2,
					T.ETC_MON3 = S.ETC_MON3,
					T.ETC_MON4 = S.ETC_MON4,
					T.REDUCE_S_YMD = S.REDUCE_S_YMD,
					T.REDUCE_E_YMD = S.REDUCE_E_YMD,
					T.IMWON_RET_OVER_MON = S.IMWON_RET_OVER_MON,
					T.NAPSE_YN = S.NAPSE_YN,
					T.FIN_TOT_TAX_MON = S.FIN_TOT_TAX_MON,
					T.CHKDATE = SYSDATE,
					T.CHKID = #{ssnSabun}
			WHEN NOT MATCHED THEN
				INSERT (
						ENTER_CD, WORK_YY, ADJUST_TYPE, SABUN, SEQ, ENTER_NO, ENTER_NM, PAY_MON, BONUS_MON, ETC_BONUS_MON,
						INCOME_TAX_MON, INHBT_TAX_MON, RURAL_TAX_MON, PEN_MON, HEL_MON, EMP_MON, NOTAX_ABROAD_MON, NOTAX_WORK_MON,
						NOTAX_TRAIN_MON, NOTAX_ETC_MON, NOTAX_RESEARCH_MON, NOTAX_BABY_MON, NOTAX_FORN_MON, NOTAX_REPORTER_MON,
						NOTAX_FOOD_MON, WORK_S_YMD, WORK_E_YMD, STOCK_BUY_MON, STOCK_UNION_MON, ETC_MON1, ETC_MON2, ETC_MON3, ETC_MON4,
						REDUCE_S_YMD, REDUCE_E_YMD, IMWON_RET_OVER_MON, NAPSE_YN, FIN_TOT_TAX_MON, CHKDATE, CHKID
					)
					VALUES (
							   S.ENTER_CD, S.WORK_YY, S.ADJUST_TYPE, S.SABUN, S.SEQ, S.ENTER_NO, S.ENTER_NM, S.PAY_MON, S.BONUS_MON,
							   S.ETC_BONUS_MON, S.INCOME_TAX_MON, S.INHBT_TAX_MON, S.RURAL_TAX_MON, S.PEN_MON, S.HEL_MON, S.EMP_MON,
							   S.NOTAX_ABROAD_MON, S.NOTAX_WORK_MON, S.NOTAX_TRAIN_MON, S.NOTAX_ETC_MON, S.NOTAX_RESEARCH_MON,
							   S.NOTAX_BABY_MON, S.NOTAX_FORN_MON, S.NOTAX_REPORTER_MON, S.NOTAX_FOOD_MON, S.WORK_S_YMD, S.WORK_E_YMD,
							   S.STOCK_BUY_MON, S.STOCK_UNION_MON, S.ETC_MON1, S.ETC_MON2, S.ETC_MON3, S.ETC_MON4, S.REDUCE_S_YMD,
							   S.REDUCE_E_YMD, S.IMWON_RET_OVER_MON, S.NAPSE_YN, S.FIN_TOT_TAX_MON, SYSDATE, #{ssnSabun}
						   )
	</update>

	<!-- 종전근무지관리 삭제 -->
    <delete parameterType="map" id="deleteBefComMgr1">
		DELETE
		FROM TCPN817
		WHERE ENTER_CD = #{ssnEnterCd}
		  AND SABUN || '#' || WORK_YY || '#' || ADJUST_TYPE || '#' || SEQ IN ( NULL
			<foreach item="rm" collection="deleteRows" >
				, TRIM( #{rm.sabun} ) || '#' || TRIM( #{rm.workYy} ) || '#' ||
				  TRIM( #{rm.adjustType} ) || '#' || TRIM( #{rm.seq} )
			</foreach>
		)
	</delete>

	<!-- 종전근무지 비과세 삭제 -->
    <delete parameterType="map" id="deleteBefComMgr2">
		DELETE
		FROM TCPN818
		WHERE ENTER_CD			= #{ssnEnterCd}
		AND SABUN || '#' || WORK_YY || '#' || ADJUST_TYPE || '#' || SEQ IN ( NULL
			<foreach item="rm" collection="deleteRows" >
				, TRIM( #{rm.sabun} ) || '#' || TRIM( #{rm.workYy} ) || '#' ||
				TRIM( #{rm.adjustType} ) || '#' || TRIM( #{rm.seq} )
			</foreach>
		)
    </delete>

	<!-- 종전근무지 비과세 조회 -->
	<select parameterType="map" resultType="cMap" id="getBefComMgrNoTax">
		<![CDATA[
		SELECT A.WORK_YY,
			   A.ADJUST_TYPE,
			   (SELECT ENTER_NM FROM TCPN817 WHERE ENTER_CD = A.ENTER_CD AND WORK_YY = A.WORK_YY AND ADJUST_TYPE = A.ADJUST_TYPE AND SABUN = A.SABUN AND SEQ = A.SEQ) AS ENTER_NM,
			   A.SABUN,
			   A.SEQ,
			   A.ADJ_ELEMENT_CD,
			   A.MON,
			   A.NOTAX_MON,
			   A.TAX_MON
		FROM TCPN818 A
		WHERE A.ENTER_CD       = #{ssnEnterCd}
		  AND A.WORK_YY  	   = #{srchWorkYy}
		  AND A.ADJUST_TYPE    = #{srchAdjustType}
		  AND A.SABUN          = #{srchSabun}
		  AND A.SEQ            = #{srchSeq}
		]]>
	</select>

	<!-- 종전근무지 비과세 중복 조회 -->
	<select parameterType="map" resultType="cMap" id="getBefComMgrNoTaxCnt">
		<![CDATA[
		SELECT COUNT(1) AS CNT
		FROM TCPN818 A
		WHERE ENTER_CD       = #{ssnEnterCd}
		  AND WORK_YY  	  	 = #{workYy}
		  AND ADJUST_TYPE    = #{adjustType}
		  AND SABUN          = #{sabun}
		  AND SEQ            = #{seq}
		  AND ADJ_ELEMENT_CD = #{adjElementCd}
		]]>
	</select>

	<!-- 종전근무지 비과세 입력 -->
	<update parameterType="map" id="saveBefComMgrNoTax">
		MERGE INTO TCPN818 T
			USING (
				<foreach item="rm" collection="mergeRows" separator=" UNION ALL " >
				SELECT
					#{ssnEnterCd} AS ENTER_CD,
					#{rm.workYy} AS WORK_YY,
					#{rm.adjustType} AS ADJUST_TYPE,
					#{rm.sabun} AS SABUN,
					#{rm.seq} AS SEQ,
					#{rm.adjElementCd} AS ADJ_ELEMENT_CD,
					#{rm.mon} AS MON,
					#{rm.notaxMon} AS NOTAX_MON,
					#{rm.taxMon} AS TAX_MON
				FROM DUAL
				</foreach>
				) S
			ON (
						T.ENTER_CD = S.ENTER_CD
					AND T.WORK_YY = S.WORK_YY
					AND T.ADJUST_TYPE = S.ADJUST_TYPE
					AND T.SABUN = S.SABUN
					AND T.SEQ = S.SEQ
					AND T.ADJ_ELEMENT_CD = S.ADJ_ELEMENT_CD
				)
			WHEN MATCHED THEN
				UPDATE SET
					T.MON = S.MON,
					T.NOTAX_MON = S.NOTAX_MON,
					T.TAX_MON = S.TAX_MON,
					T.CHKDATE = SYSDATE,
					T.CHKID = #{ssnSabun}
			WHEN NOT MATCHED THEN
				INSERT (
					ENTER_CD,
					WORK_YY,
					ADJUST_TYPE,
					SABUN,
					SEQ,
					ADJ_ELEMENT_CD,
					MON,
					NOTAX_MON,
					TAX_MON,
					CHKDATE,
					CHKID
				)
				VALUES (
					S.ENTER_CD,
					S.WORK_YY,
					S.ADJUST_TYPE,
					S.SABUN, S.SEQ,
					S.ADJ_ELEMENT_CD,
					S.MON,
					S.NOTAX_MON,
					S.TAX_MON,
					SYSDATE,
					#{ssnSabun}
				)
</update>


	<!-- 종전근무지 비과세 삭제 -->
	<delete parameterType="map" id="deleteBefComMgrNoTax">
		DELETE FROM TCPN818
		WHERE ENTER_CD			= #{ssnEnterCd}
		AND SABUN || '#' || WORK_YY || '#' || ADJUST_TYPE || '#' ||
		    SEQ || '#' || ADJ_ELEMENT_CD IN ( NULL
		<foreach item="rm" collection="deleteRows" >
			, TRIM( #{rm.sabun} ) || '#' || TRIM( #{rm.workYy} ) || '#' ||
			TRIM( #{rm.adjustType} ) || '#' || TRIM( #{rm.seq} ) || '#' || TRIM( #{rm.adjElementCd} )
		</foreach>
		)
    </delete>

	<!-- 중소기업 취업자감면 입력 값 Sum -->
	<select parameterType="map" resultType="cMap" id="getBefComMgrSum">
		<![CDATA[
		SELECT NVL(SUM(B010_30),0) AS B010_30, NVL(SUM(B010_31),0) AS B010_31, NVL(SUM(B010_32),0) AS B010_32, NVL(SUM(B010_33),0) AS B010_33,
			   NVL(SUM(B010_40),0) AS B010_40, NVL(SUM(B010_42),0) AS B010_42, NVL(SUM(B010_43),0) AS B010_43
		FROM (
				 SELECT ADJ_ELEMENT_CD,
						(CASE WHEN ADJ_ELEMENT_CD = 'C010_110' THEN SUM(NOTAX_MON) ELSE 0 END) AS B010_30,
						(CASE WHEN ADJ_ELEMENT_CD = 'C010_111' THEN SUM(NOTAX_MON) ELSE 0 END) AS B010_31,
						(CASE WHEN ADJ_ELEMENT_CD = 'C010_112' THEN SUM(NOTAX_MON) ELSE 0 END) AS B010_32,
						(CASE WHEN ADJ_ELEMENT_CD = 'C010_113' THEN SUM(NOTAX_MON) ELSE 0 END) AS B010_33,
						(CASE WHEN ADJ_ELEMENT_CD = 'C010_140' THEN SUM(NOTAX_MON) ELSE 0 END) AS B010_40,
						(CASE WHEN ADJ_ELEMENT_CD = 'C010_142' THEN SUM(NOTAX_MON) ELSE 0 END) AS B010_42,
						(CASE WHEN ADJ_ELEMENT_CD = 'C010_143' THEN SUM(NOTAX_MON) ELSE 0 END) AS B010_43
				 FROM (
						  SELECT ENTER_CD,WORK_YY,ADJUST_TYPE,SABUN,ADJ_ELEMENT_CD,NOTAX_MON
						  FROM TCPN815
						  WHERE ENTER_CD = #{ssnEnterCd} AND WORK_YY = #{workYy} AND ADJUST_TYPE = #{adjustType} AND SABUN = #{sabun} AND ADJ_ELEMENT_CD IN ('C010_110','C010_111','C010_112','C010_113','C010_140','C010_142','C010_143')
						  UNION ALL
						  SELECT ENTER_CD,WORK_YY,ADJUST_TYPE,SABUN,ADJ_ELEMENT_CD,NOTAX_MON
						  FROM TCPN818
						  WHERE ENTER_CD = #{ssnEnterCd} AND WORK_YY = #{workYy} AND ADJUST_TYPE = #{adjustType} AND SABUN = #{sabun} AND ADJ_ELEMENT_CD IN ('C010_110','C010_111','C010_112','C010_113','C010_140','C010_142','C010_143')
					  ) GROUP BY ADJ_ELEMENT_CD
			 )
		]]>
	</select>

	<!-- 중소기업 취업자감면 입력 값 Sum 적용 -->
	<update parameterType="map" id="updateBefComMgrSum">
		<![CDATA[
		MERGE INTO TCPN843 T
			USING	(
				SELECT #{inputMon} AS INPUT_MON
				FROM	dual
			) S
			ON ( T.ENTER_CD   = #{ssnEnterCd}
				AND  T.WORK_YY = #{workYy}
				AND  T.ADJUST_TYPE =  #{adjustType}
				AND  T.SABUN = #{sabun}
				AND  T.ADJ_ELEMENT_CD = #{adjElementCd}
				)
			WHEN MATCHED THEN
				UPDATE SET	  T.INPUT_MON               = S.INPUT_MON
					, T.CHKDATE	= SYSDATE
					, T.CHKID	= #{ssnSabun}
			WHEN NOT MATCHED THEN
				INSERT
					(
					 T.ENTER_CD
						, T.WORK_YY
						, T.ADJUST_TYPE
						, T.SABUN
						, T.ADJ_ELEMENT_CD
						, T.INPUT_MON
						, T.CHKDATE
						, T.CHKID
						)
					VALUES
						(
						  #{ssnEnterCd}
						, #{workYy}
						, #{adjustType}
						, #{sabun}
						, #{adjElementCd}
						, S.INPUT_MON
						, SYSDATE
						, #{ssnSabun}
						)
		]]>
    </update>
</mapper>