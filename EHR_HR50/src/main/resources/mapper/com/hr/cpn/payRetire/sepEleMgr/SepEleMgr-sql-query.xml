<?xml version="1.0" encoding="UTF-8"?>
<!--
 * 퇴직금항목관리
 * @author JM
-->
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="cpn.payRetire.sepEleMgr">
		<select parameterType="map" resultType="cMap" id="getSepEleMgrList">

				<![CDATA[
					SELECT ELEMENT_CD
						 , ELEMENT_TYPE
						 , ELEMENT_TYPE_NM
						 , ELEMENT_NM
						 , REPORT_NM
						 , PRIORITY
						 , ELEMENT_ENG
						 , ELEMENT_LINK_TYPE
						 , ELEMENT_LINK_TYPE_NM
						 , UDF_CD
						 , UDF_NM
						 , AF_UDF_CD
						 , AF_UDF_NM
						 , UPDOWN_TYPE
						 , UPDOWN_TYPE_NM
						 , UPDOWN_UNIT
						 , UPDOWN_UNIT_NM
						 , ATTRIBUTE_1
						 , ATTRIBUTE_2
						 , ATTRIBUTE_3
						 , ATTRIBUTE_4
						 , ATTRIBUTE_5
						 , ATTRIBUTE_6
						 , ATTRIBUTE_7
						 , ATTRIBUTE_8
						 , ATTRIBUTE_9
						 , ATTRIBUTE_10
						 , RESULT_TABLE_NM
						 , RESULT_COLUMN_NM
						 , RESULT_YN
						 , USE_YN
						 , REPORT_YN
						 , SYS_YN
						 , EXCEPT_YN
						 , EX_PAY_CD_YN
						 , EX_PAY_CD_YN AS EX_PAY_CD_YN_IMG
					  FROM (
							SELECT A.ELEMENT_CD
								 , A.ELEMENT_TYPE
								 , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'C00755', A.ELEMENT_TYPE, #{ssnLocaleCd}) AS ELEMENT_TYPE_NM
								 , A.ELEMENT_NM
								 , A.REPORT_NM
								 , A.PRIORITY
								 , A.ELEMENT_ENG
								 , A.ELEMENT_LINK_TYPE
								 , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'C00770', A.ELEMENT_LINK_TYPE, #{ssnLocaleCd}) AS ELEMENT_LINK_TYPE_NM
								 , A.UDF_CD
								 , (SELECT TRIM(B.DESCRIPTION) FROM TSYS801 B WHERE B.ENTER_CD = A.ENTER_CD AND B.UDF_CD = A.UDF_CD) AS UDF_NM
								 , A.AF_UDF_CD
								 , (SELECT TRIM(B.DESCRIPTION) FROM TSYS801 B WHERE B.ENTER_CD = A.ENTER_CD AND B.UDF_CD = A.AF_UDF_CD) AS AF_UDF_NM
								 , A.UPDOWN_TYPE
								 , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'C00005', A.UPDOWN_TYPE, #{ssnLocaleCd}) AS UPDOWN_TYPE_NM
								 , A.UPDOWN_UNIT
								 , F_COM_GET_GRCODE_NAME(A.ENTER_CD,'C00006', A.UPDOWN_UNIT, #{ssnLocaleCd}) AS UPDOWN_UNIT_NM
								 , A.ATTRIBUTE_1
								 , A.ATTRIBUTE_2
								 , A.ATTRIBUTE_3
								 , A.ATTRIBUTE_4
								 , A.ATTRIBUTE_5
								 , A.ATTRIBUTE_6
								 , A.ATTRIBUTE_7
								 , A.ATTRIBUTE_8
								 , A.ATTRIBUTE_9
								 , A.ATTRIBUTE_10
								 , A.RESULT_TABLE_NM
								 , A.RESULT_COLUMN_NM
								 , DECODE(TRIM(A.RESULT_YN),'Y','1','')	AS RESULT_YN
								 , DECODE(TRIM(A.USE_YN),'Y','1','')	AS USE_YN
								 , DECODE(TRIM(A.REPORT_YN),'Y','1','')	AS REPORT_YN
								 , A.SYS_YN
								 , DECODE(TRIM(A.EXCEPT_YN),'Y','1','')	AS EXCEPT_YN
								 , NVL((SELECT DISTINCT '1'
										  FROM TCPN743 B
										 WHERE B.ENTER_CD = A.ENTER_CD
										   AND B.ELEMENT_CD = A.ELEMENT_CD),'0') AS EX_PAY_CD_YN
							  FROM TCPN741 A
							 WHERE A.ENTER_CD	= #{ssnEnterCd}
							           ]]>
							<if test='useYn != null and !useYn.equals("")'>
							   AND A.USE_YN		= #{useYn}
							</if>
							<if test='resultYn != null and !resultYn.equals("")'>
							   AND A.RESULT_YN	= #{resultYn}
							</if>
							<if test='reportYn != null and !reportYn.equals("")'>
							   AND A.REPORT_YN	= #{reportYn}
							</if>
							<if test='elementNm != null and !elementNm.equals("")'>
								AND UPPER(A.ELEMENT_NM) LIKE '%' || UPPER(TRIM(#{elementNm})) || '%'
							</if>
							)
					ORDER BY PRIORITY, ELEMENT_CD



		</select>
		<select parameterType="map" resultType="cMap" id="getSepEleMgrExPayCdList">

				<![CDATA[
					SELECT ELEMENT_CD
						 , PAY_CD
					  FROM TCPN743
					 WHERE ENTER_CD		= #{ssnEnterCd}
					   AND ELEMENT_CD	= #{elementCd}
					ORDER BY PAY_CD
				]]>


		</select>
		<update parameterType="map" id="saveSepEleMgr">


					MERGE INTO TCPN741 T
					USING	(
							SELECT A.ELEMENT_CD
								 , A.ELEMENT_TYPE
								 , A.ELEMENT_NM
								 , A.REPORT_NM
								 , A.PRIORITY
								 , A.ELEMENT_ENG
								 , A.ELEMENT_LINK_TYPE
								 , A.UDF_CD
								 , A.AF_UDF_CD
								 , A.UPDOWN_TYPE
								 , A.UPDOWN_UNIT
								 , A.ATTRIBUTE_1
								 , A.ATTRIBUTE_2
								 , A.ATTRIBUTE_3
								 , A.ATTRIBUTE_4
								 , A.ATTRIBUTE_5
								 , A.ATTRIBUTE_6
								 , A.ATTRIBUTE_7
								 , A.ATTRIBUTE_8
								 , A.ATTRIBUTE_9
								 , A.ATTRIBUTE_10
								 , A.RESULT_TABLE_NM
								 , A.RESULT_COLUMN_NM
								 , A.RESULT_YN
								 , A.USE_YN
								 , A.REPORT_YN
								 , A.SYS_YN
								 , A.EXCEPT_YN
							  FROM (
									SELECT NULL	AS ELEMENT_CD
										 , NULL	AS ELEMENT_TYPE
										 , NULL	AS ELEMENT_NM
										 , NULL	AS REPORT_NM
										 , NULL	AS PRIORITY
										 , NULL	AS ELEMENT_ENG
										 , NULL	AS ELEMENT_LINK_TYPE
										 , NULL	AS UDF_CD
										 , NULL	AS AF_UDF_CD
										 , NULL	AS UPDOWN_TYPE
										 , NULL	AS UPDOWN_UNIT
										 , NULL	AS ATTRIBUTE_1
										 , NULL	AS ATTRIBUTE_2
										 , NULL	AS ATTRIBUTE_3
										 , NULL	AS ATTRIBUTE_4
										 , NULL	AS ATTRIBUTE_5
										 , NULL	AS ATTRIBUTE_6
										 , NULL	AS ATTRIBUTE_7
										 , NULL	AS ATTRIBUTE_8
										 , NULL	AS ATTRIBUTE_9
										 , NULL	AS ATTRIBUTE_10
										 , NULL	AS RESULT_TABLE_NM
										 , NULL	AS RESULT_COLUMN_NM
										 , NULL	AS RESULT_YN
										 , NULL	AS USE_YN
										 , NULL	AS REPORT_YN
										 , NULL	AS SYS_YN
										 , NULL	AS EXCEPT_YN
									  FROM DUAL
<foreach item="rm" collection="mergeRows" >
									UNION ALL
									SELECT TRIM(#{rm.elementCd})						AS ELEMENT_CD
										 , TRIM(#{rm.elementType})						AS ELEMENT_TYPE
										 , TRIM(#{rm.elementNm})						AS ELEMENT_NM
										 , TRIM(#{rm.reportNm})							AS REPORT_NM
										 , TO_NUMBER(TRIM(#{rm.priority}))				AS PRIORITY
										 , TRIM(#{rm.elementEng})						AS ELEMENT_ENG
										 , TRIM(#{rm.elementLinkType})					AS ELEMENT_LINK_TYPE
										 , TRIM(#{rm.udfCd})							AS UDF_CD
										 , TRIM(#{rm.afUdfCd})							AS AF_UDF_CD
										 , TRIM(#{rm.updownType})						AS UPDOWN_TYPE
										 , TRIM(#{rm.updownUnit})						AS UPDOWN_UNIT
										 , TRIM(#{rm.attribute1})						AS ATTRIBUTE_1
										 , TRIM(#{rm.attribute2})						AS ATTRIBUTE_2
										 , TRIM(#{rm.attribute3})						AS ATTRIBUTE_3
										 , TRIM(#{rm.attribute4})						AS ATTRIBUTE_4
										 , TRIM(#{rm.attribute5})						AS ATTRIBUTE_5
										 , TRIM(#{rm.attribute6})						AS ATTRIBUTE_6
										 , TRIM(#{rm.attribute7})						AS ATTRIBUTE_7
										 , TRIM(#{rm.attribute8})						AS ATTRIBUTE_8
										 , TRIM(#{rm.attribute9})						AS ATTRIBUTE_9
										 , TRIM(#{rm.attribute10})						AS ATTRIBUTE_10
										 , TRIM(#{rm.resultTableNm})					AS RESULT_TABLE_NM
										 , TRIM(#{rm.resultColumnNm})					AS RESULT_COLUMN_NM
										 , DECODE(TRIM(#{rm.resultYn}),'1','Y','N')		AS RESULT_YN
										 , DECODE(TRIM(#{rm.useYn}),'1','Y','N')		AS USE_YN
										 , DECODE(TRIM(#{rm.reportYn}),'1','Y','N')		AS REPORT_YN
										 , TRIM(#{rm.sysYn})							AS SYS_YN
										 , DECODE(TRIM(#{rm.exceptYn}),'1','Y','N')		AS EXCEPT_YN
									  FROM DUAL
</foreach>
									) A
							WHERE A.ELEMENT_CD	IS NOT NULL
							) S
					ON	(	T.ENTER_CD		= #{ssnEnterCd}
						AND	T.ELEMENT_CD	= S.ELEMENT_CD
						)
					WHEN MATCHED THEN
						UPDATE SET T.ELEMENT_TYPE		= S.ELEMENT_TYPE
								 , T.ELEMENT_NM			= S.ELEMENT_NM
								 , T.REPORT_NM			= S.REPORT_NM
								 , T.PRIORITY			= S.PRIORITY
								 , T.ELEMENT_ENG		= S.ELEMENT_ENG
								 , T.ELEMENT_LINK_TYPE	= S.ELEMENT_LINK_TYPE
								 , T.UDF_CD				= S.UDF_CD
								 , T.AF_UDF_CD			= S.AF_UDF_CD
								 , T.UPDOWN_TYPE		= S.UPDOWN_TYPE
								 , T.UPDOWN_UNIT		= S.UPDOWN_UNIT
								 , T.ATTRIBUTE_1		= S.ATTRIBUTE_1
								 , T.ATTRIBUTE_2		= S.ATTRIBUTE_2
								 , T.ATTRIBUTE_3		= S.ATTRIBUTE_3
								 , T.ATTRIBUTE_4		= S.ATTRIBUTE_4
								 , T.ATTRIBUTE_5		= S.ATTRIBUTE_5
								 , T.ATTRIBUTE_6		= S.ATTRIBUTE_6
								 , T.ATTRIBUTE_7		= S.ATTRIBUTE_7
								 , T.ATTRIBUTE_8		= S.ATTRIBUTE_8
								 , T.ATTRIBUTE_9		= S.ATTRIBUTE_9
								 , T.ATTRIBUTE_10		= S.ATTRIBUTE_10
								 , T.RESULT_TABLE_NM	= S.RESULT_TABLE_NM
								 , T.RESULT_COLUMN_NM	= S.RESULT_COLUMN_NM
								 , T.RESULT_YN			= S.RESULT_YN
								 , T.USE_YN				= S.USE_YN
								 , T.REPORT_YN			= S.REPORT_YN
								 , T.SYS_YN				= S.SYS_YN
								 , T.EXCEPT_YN			= S.EXCEPT_YN
								 , T.CHKDATE			= SYSDATE
								 , T.CHKID				= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							T.ENTER_CD
						  , T.ELEMENT_CD
						  , T.ELEMENT_TYPE
						  , T.ELEMENT_NM
						  , T.REPORT_NM
						  , T.PRIORITY
						  , T.ELEMENT_ENG
						  , T.ELEMENT_LINK_TYPE
						  , T.UDF_CD
						  , T.AF_UDF_CD
						  , T.UPDOWN_TYPE
						  , T.UPDOWN_UNIT
						  , T.ATTRIBUTE_1
						  , T.ATTRIBUTE_2
						  , T.ATTRIBUTE_3
						  , T.ATTRIBUTE_4
						  , T.ATTRIBUTE_5
						  , T.ATTRIBUTE_6
						  , T.ATTRIBUTE_7
						  , T.ATTRIBUTE_8
						  , T.ATTRIBUTE_9
						  , T.ATTRIBUTE_10
						  , T.RESULT_TABLE_NM
						  , T.RESULT_COLUMN_NM
						  , T.RESULT_YN
						  , T.USE_YN
						  , T.REPORT_YN
						  , T.SYS_YN
						  , T.EXCEPT_YN
						  , T.CHKDATE
						  , T.CHKID
						)
						VALUES
						(
							#{ssnEnterCd}
						  , S.ELEMENT_CD
						  , S.ELEMENT_TYPE
						  , S.ELEMENT_NM
						  , S.REPORT_NM
						  , S.PRIORITY
						  , S.ELEMENT_ENG
						  , S.ELEMENT_LINK_TYPE
						  , S.UDF_CD
						  , S.AF_UDF_CD
						  , S.UPDOWN_TYPE
						  , S.UPDOWN_UNIT
						  , S.ATTRIBUTE_1
						  , S.ATTRIBUTE_2
						  , S.ATTRIBUTE_3
						  , S.ATTRIBUTE_4
						  , S.ATTRIBUTE_5
						  , S.ATTRIBUTE_6
						  , S.ATTRIBUTE_7
						  , S.ATTRIBUTE_8
						  , S.ATTRIBUTE_9
						  , S.ATTRIBUTE_10
						  , S.RESULT_TABLE_NM
						  , S.RESULT_COLUMN_NM
						  , S.RESULT_YN
						  , S.USE_YN
						  , S.REPORT_YN
						  , S.SYS_YN
						  , S.EXCEPT_YN
						  , SYSDATE
						  , #{ssnSabun}
						)



		</update>
		<update parameterType="map" id="saveSepEleMgrExPayCd">


					MERGE INTO TCPN743 T
					USING	(
							SELECT A.ELEMENT_CD
								 , A.PAY_CD
							  FROM (
									SELECT NULL	AS ELEMENT_CD
										 , NULL	AS PAY_CD
									  FROM DUAL
<foreach item="rm" collection="mergeRows" >
									UNION ALL
									SELECT TRIM(#{rm.elementCd})	AS ELEMENT_CD
										 , TRIM(#{rm.payCd})		AS PAY_CD
									  FROM DUAL
</foreach>
									) A
							WHERE A.ELEMENT_CD	IS NOT NULL
							) S
					ON	(	T.ENTER_CD			= #{ssnEnterCd}
						AND	T.ELEMENT_CD		= S.ELEMENT_CD
						AND	T.PAY_CD			= S.PAY_CD
						)
					WHEN MATCHED THEN
						UPDATE SET T.CHKDATE	= SYSDATE
								 , T.CHKID		= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							T.ENTER_CD
						  , T.ELEMENT_CD
						  , T.PAY_CD
						  , T.CHKDATE
						  , T.CHKID
						)
						VALUES
						(
							#{ssnEnterCd}
						  , S.ELEMENT_CD
						  , S.PAY_CD
						  , SYSDATE
						  , #{ssnSabun}
						)



		</update>
		<delete parameterType="map" id="deleteSepEleMgr">


					DELETE FROM TCPN741
					 WHERE ENTER_CD||'_'||ELEMENT_CD IN ( NULL
<foreach item="rm" collection="deleteRows" >
						,
							<if test='ssnEnterCd != null and !ssnEnterCd.equals("") and rm.elementCd != null and !rm.elementCd.equals("")'>
								TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.elementCd})
							</if>
</foreach>
							)



		</delete>
		<delete parameterType="map" id="deleteSepEleMgrExPayCd">


					DELETE FROM TCPN743
					 WHERE ENTER_CD||'_'||ELEMENT_CD||'_'||PAY_CD IN ( NULL
<foreach item="rm" collection="deleteRows" >
						,
							<if test='ssnEnterCd != null and !ssnEnterCd.equals("") and rm.elementCd != null and !rm.elementCd.equals("") and rm.payCd != null and !rm.payCd.equals("")'>
								TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.elementCd})||'_'||TRIM(#{rm.payCd})
							</if>
 </foreach>

							)



		</delete>
		<delete parameterType="map" id="deleteAllSepEleMgrExPayCd">


					DELETE FROM TCPN743
					 WHERE ENTER_CD||'_'||ELEMENT_CD IN ( NULL
<foreach item="rm" collection="deleteRows" >
						,
							<if test='ssnEnterCd != null and !ssnEnterCd.equals("") and rm.elementCd != null and !rm.elementCd.equals("")'>
								TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.elementCd})
							</if>
</foreach>
							)



		</delete>
	</mapper>
