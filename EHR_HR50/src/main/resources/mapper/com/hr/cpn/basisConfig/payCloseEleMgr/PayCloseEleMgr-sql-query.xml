<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="cpn.basisConfig.payCloseEleMgr">
<!-- 		조회 -->
		<select parameterType="map" resultType="cMap" id="getPayCloseEleMgrList">
				<![CDATA[
					SELECT    
					     A.PAY_CD 
					   , A.CLOSE_CD 
					   , A.BENEFIT_BIZ_CD 
					   , A.SEARCH_SEQ
					   , B.SEARCH_TYPE
					   , B.SEARCH_DESC
					   , A.COM_CREATE_USE_YN
					   , A.FLEX_YN
					   , A.ETC_PAY_YN
					   , A.DEPT_PART_PAY_YN
					FROM TCPN980 A, THRI201 B      /* TCPN980,THRI201  */ 
					WHERE A.ENTER_CD = B.ENTER_CD(+)
					  AND A.SEARCH_SEQ = B.SEARCH_SEQ(+)
					  AND A.ENTER_CD = #{ssnEnterCd}
					ORDER BY PAY_CD, A.CLOSE_CD
				]]>
		</select>
		
<!-- 		저장 -->	
		<update parameterType="map" id="savePayCloseEleMgr">

					MERGE INTO TCPN980 T
                    USING   (
                            SELECT    PAY_CD
                                    , CLOSE_CD
                                    , BENEFIT_BIZ_CD
                                    , SEARCH_SEQ
									, COM_CREATE_USE_YN
									, FLEX_YN
									, ETC_PAY_YN
									, DEPT_PART_PAY_YN
                            FROM    (
                                    SELECT    NULL AS PAY_CD      
                                            , NULL AS CLOSE_CD      
                                            , NULL AS BENEFIT_BIZ_CD      
                                            , NULL AS SEARCH_SEQ        
											, NULL AS COM_CREATE_USE_YN
											, NULL AS FLEX_YN
											, NULL AS ETC_PAY_YN
											, NULL AS DEPT_PART_PAY_YN        
                                    FROM    DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
                            UNION ALL
                                    SELECT    TRIM(#{rm.payCd})     AS PAY_CD
                                            , TRIM(#{rm.closeCd})     AS CLOSE_CD
                                            , TRIM(#{rm.benefitBizCd})     AS BENEFIT_BIZ_CD
                                            , TRIM(#{rm.searchSeq})        AS SEARCH_SEQ
											, TRIM(#{rm.comCreateUseYn})   AS COM_CREATE_USE_YN
											, TRIM(#{rm.flexYn})   AS FLEX_YN
											, TRIM(#{rm.etcPayYn})   AS ETC_PAY_YN
											, TRIM(#{rm.deptPartPayYn})   AS DEPT_PART_PAY_YN
                                        FROM   DUAL
</foreach>
                                    ) A WHERE A.PAY_CD IS NOT NULL
                            ) S
                    ON (    T.ENTER_CD  = #{ssnEnterCd}
                        AND T.PAY_CD    = S.PAY_CD
                        AND T.CLOSE_CD  = S.CLOSE_CD
                       )
                    WHEN MATCHED THEN
                        UPDATE SET    T.BENEFIT_BIZ_CD      = S.BENEFIT_BIZ_CD 
									, T.SEARCH_SEQ          = S.SEARCH_SEQ        
									, T.COM_CREATE_USE_YN   = S.COM_CREATE_USE_YN
									, T.FLEX_YN             = S.FLEX_YN
									, T.ETC_PAY_YN             = S.ETC_PAY_YN
									, T.DEPT_PART_PAY_YN             = S.DEPT_PART_PAY_YN
									, T.CHKDATE        = SYSDATE    
									, T.CHKID          = #{ssnSabun}
                    WHEN NOT MATCHED THEN
                        INSERT 
                        (
							  T.ENTER_CD
							, T.PAY_CD
							, T.CLOSE_CD
							, T.BENEFIT_BIZ_CD
							, T.SEARCH_SEQ
							, T.COM_CREATE_USE_YN
							, T.FLEX_YN
							, T.ETC_PAY_YN
							, T.DEPT_PART_PAY_YN
							, T.CHKDATE
							, T.CHKID
                        ) 
                        VALUES 
                        (
                              #{ssnEnterCd}
                            , S.PAY_CD
                            , S.CLOSE_CD
                            , S.BENEFIT_BIZ_CD
                            , S.SEARCH_SEQ
                            , S.COM_CREATE_USE_YN
                            , S.FLEX_YN
                            , S.ETC_PAY_YN
                            , S.DEPT_PART_PAY_YN
							, SYSDATE
                            , #{ssnSabun}
                        )
		</update>
		
<!-- 		삭제 -->
		<delete parameterType="map" id="deletePayCloseEleMgr">
					DELETE FROM TCPN980 
                    WHERE   (ENTER_CD, PAY_CD, CLOSE_CD) IN   (  (NULL, NULL, NULL) 
<foreach item="rm" collection="deleteRows" >
                        ,
                                        <if test='ssnEnterCd != null and !ssnEnterCd.equals("")'>
                                           <if test='rm.payCd != null and !rm.payCd.equals("")'>
                                            <if test='rm.closeCd != null and !rm.closeCd.equals("")'>
                                                (#{ssnEnterCd}, TRIM(#{rm.payCd}), TRIM(#{rm.closeCd}))
											</if>
										   </if>
										</if>
</foreach>
                                        )

		</delete>
		
<!-- 		생성 -->	
		<insert parameterType="map" id="insertPayCloseEleMgr">


						INSERT INTO MainMnMgrTable
						(
							  COL1
							, COL2
							, COL3
							, COL4
							, COL5
							, COL6
							, CHKDATE
							, CHKID
						) 
						SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, S.COL5
								, S.COL6
								, sysdate
								, #{ssnSabun}
						FROM (
								SELECT    NULL 	AS COL1
										, NULL 	AS COL2
										, NULL 	AS COL3
										, NULL 	AS COL4
										, NULL 	AS COL5
										, NULL 	AS COL6
								FROM   DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="insertRows" >
					UNION ALL
								SELECT	  TO_CHAR( (SELECT (NVL(MAX(TO_NUMBER( COL1 )),0) + ${icnt}) FROM ZTST002) )	AS COL1
										<bind name="icnt" value="icnt + 1" />
										, TRIM(#{rm.col2})	AS COL2
										, TRIM(#{rm.col3})	AS COL3
										, TRIM(#{rm.col4})	AS COL4
										, TRIM(#{rm.col5})	AS COL5
										, TRIM(#{rm.col6})	AS COL6
								FROM   DUAL
</foreach>
							) S
						WHERE S.COL1 IS NOT NULL


		</insert>
		
<!-- 		수정 -->
		<update parameterType="map" id="updatePayCloseEleMgr">

					UPDATE ZTST002 T SET 
					(	  COL1
						, COL2
						, COL3
						, COL4
						, CHKDATE
						, CHKID 
						) 
					=
					(	SELECT	  S.COL1
								, S.COL2
								, S.COL3
								, S.COL4
								, S.COL5
								, S.COL6
								, SYSDATE
								, #{ssnSabun}
						FROM (
							SELECT	  NULL 	AS COL1
									, NULL 	AS COL2
									, NULL 	AS COL3
									, NULL 	AS COL4
									, NULL 	AS COL5
									, NULL 	AS COL6
									FROM   DUAL
<foreach item="rm" collection="updateRows" >
					UNION ALL
								SELECT   
										  TRIM(#{rm.col1})	AS COL1
										, TRIM(#{rm.col2})	AS COL2
										, TRIM(#{rm.col3})	AS COL3
										, TRIM(#{rm.col4})	AS COL4
										, TRIM(#{rm.col5})	AS COL5
										, TRIM(#{rm.col6})	AS COL6
								FROM   DUAL
</foreach>
							) S
						WHERE S.COL1 IS NOT NULL
					) 
					WHERE EXISTS (	
									SELECT S.COL1
									FROM (
											SELECT	S.COL1 
											FROM ( 
												SELECT	NULL 				AS COL1	FROM	DUAL
			<foreach item="rm" collection="updateRows" > UNION ALL		SELECT	TRIM(#{rm.col1})	AS COL1	FROM	DUAL  </foreach>
												) S
											WHERE S.COL1 IS NOT NULL 
										)S
									WHERE T.COL1 = S.COL1
								)


		</update>
	</mapper>
