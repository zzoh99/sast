<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="cpn.payRetire.annualIncomeTable">

        <select parameterType="map" resultType="cMap" id="getAnnualIncomeCodeList">

				<![CDATA[
					SELECT
							T1.CODE
						,	T1.CODE_NM
					  FROM
					       (SELECT A.ADJ_ELEMENT_CD AS CODE, B.ADJ_ELEMENT_NM AS CODE_NM
					          FROM TCPN815 A, TCPN803 B
					         WHERE A.ENTER_CD = #{ssnEnterCd}
					           AND B.ENTER_CD = A.ENTER_CD
					           AND A.WORK_YY = #{srchYear}
					           AND B.WORK_YY = A.WORK_YY
					           AND B.ADJ_ELEMENT_CD = A.ADJ_ELEMENT_CD
					         GROUP BY A.ADJ_ELEMENT_CD, B.ADJ_ELEMENT_NM) T1
					  ORDER BY T1.CODE
				]]>


		</select>
		
		<select parameterType="map" resultType="cMap" id="getAnnualIncomeTableHeaderList">

				<![CDATA[
					SELECT
							T1.CODE
						,	LOWER(SUBSTR(REPLACE((T1.CODE),'_'),1,1))||LOWER(SUBSTR(REPLACE(INITCAP(T1.CODE),'_'),2,0))||SUBSTR(REPLACE(INITCAP(T1.CODE),'_'),2)	AS CAMEL_CODE
						,	T1.CODE_NM
					  FROM
					       (SELECT A.ADJ_ELEMENT_CD, A.ADJ_ELEMENT_CD||'_TAX' AS CODE, '기타-'||B.ADJ_ELEMENT_NM||'_과세' AS CODE_NM, '1' AS SEQ
					          FROM TCPN815 A, TCPN803 B
					         WHERE A.ENTER_CD = #{ssnEnterCd}
					           AND B.ENTER_CD = A.ENTER_CD
					           AND A.WORK_YY = #{srchYear}
					           AND B.WORK_YY = A.WORK_YY
					           AND B.ADJ_ELEMENT_CD = A.ADJ_ELEMENT_CD
					         GROUP BY A.ADJ_ELEMENT_CD, B.ADJ_ELEMENT_NM
					        UNION ALL
					        SELECT A.ADJ_ELEMENT_CD, A.ADJ_ELEMENT_CD||'_NOTAX' AS CODE, '기타-'||B.ADJ_ELEMENT_NM||'_비과세' AS CODE_NM, '2' AS SEQ
					          FROM TCPN815 A, TCPN803 B
					         WHERE A.ENTER_CD = #{ssnEnterCd}
					           AND B.ENTER_CD = A.ENTER_CD
					           AND A.WORK_YY = #{srchYear}
					           AND B.WORK_YY = A.WORK_YY
					           AND B.ADJ_ELEMENT_CD = A.ADJ_ELEMENT_CD
					         GROUP BY A.ADJ_ELEMENT_CD, B.ADJ_ELEMENT_NM) T1
					  ORDER BY T1.ADJ_ELEMENT_CD, T1.SEQ
				]]>


		</select>


		<select parameterType="map" resultType="cMap" id="getAnnualIncomeTableList">

				
					SELECT A.WORK_YY,
					<if test='sumYn != null and !sumYn.equals("Y")'>
					       A.YM,  -- 합계가 아닐 경우 포함,합계일 경우 빠짐
					</if>
					<![CDATA[
					       A.ADJUST_TYPE, A.SABUN, B.NAME, CRYPTIT.DECRYPT(B.RES_NO, B.ENTER_CD) AS RES_NO, C.ORG_NM,
					       SUM(DECODE(A.PAY_MON,NULL,'','0','',A.PAY_MON)) AS PAY_MON ,
					       SUM(DECODE(A.BONUS_MON,NULL,'','0','',A.BONUS_MON)) AS BONUS_MON ,
					       SUM(DECODE(A.ETC_BONUS_MON,NULL,'','0','',A.ETC_BONUS_MON)) AS ETC_BONUS_MON ,
					       SUM(DECODE(A.FRGN_TAX_PLUS_MON,NULL,'','0','',A.FRGN_TAX_PLUS_MON)) AS FRGN_TAX_PLUS_MON ,
					       SUM(DECODE(A.INCOME_TAX_MON,NULL,'','0','',A.INCOME_TAX_MON)) AS INCOME_TAX_MON ,
					       SUM(DECODE(A.INHBT_TAX_MON,NULL,'','0','',A.INHBT_TAX_MON)) AS INHBT_TAX_MON ,
					       SUM(DECODE(A.RURAL_TAX_MON,NULL,'','0','',A.RURAL_TAX_MON)) AS RURAL_TAX_MON ,
					       SUM(DECODE(A.EXMPT_TAX_MON,NULL,'','0','',A.EXMPT_TAX_MON)) AS EXMPT_TAX_MON ,
					       SUM(DECODE(A.FRGN_MON,NULL,'','0','',A.FRGN_MON)) AS FRGN_MON ,
					       SUM(DECODE(A.FRGN_NTAX_MON,NULL,'','0','',A.FRGN_NTAX_MON)) AS FRGN_NTAX_MON ,
					       SUM(DECODE(A.PEN_MON,NULL,'','0','',A.PEN_MON)) AS PEN_MON ,
					       SUM(DECODE(A.HEL_MON,NULL,'','0','',A.HEL_MON)) AS HEL_MON ,
					       SUM(DECODE(A.EMP_MON,NULL,'','0','',A.EMP_MON)) AS EMP_MON ,
					       SUM(DECODE(A.LABOR_MON,NULL,'','0','',A.LABOR_MON)) AS LABOR_MON ,
					       SUM(DECODE(A.NOTAX_ABROAD_MON,NULL,'','0','',A.NOTAX_ABROAD_MON)) AS NOTAX_ABROAD_MON ,
					       SUM(DECODE(A.NOTAX_WORK_MON,NULL,'','0','',A.NOTAX_WORK_MON)) AS NOTAX_WORK_MON ,
					       SUM(DECODE(A.NOTAX_FOOD_MON,NULL,'','0','',A.NOTAX_FOOD_MON)) AS NOTAX_FOOD_MON ,
					       SUM(DECODE(A.NOTAX_CAR_MON,NULL,'','0','',A.NOTAX_CAR_MON)) AS NOTAX_CAR_MON ,
					       SUM(DECODE(A.NOTAX_ETC_MON,NULL,'','0','',A.NOTAX_ETC_MON)) AS NOTAX_ETC_MON ,
					       SUM(DECODE(A.NOTAX_FORN_MON,NULL,'','0','',A.NOTAX_FORN_MON)) AS NOTAX_FORN_MON ,
					       SUM(DECODE(A.NOTAX_BABY_MON,NULL,'','0','',A.NOTAX_BABY_MON)) AS NOTAX_BABY_MON ,
					       SUM(DECODE(A.NOTAX_NIGHTDUTY_MON,NULL,'','0','',A.NOTAX_NIGHTDUTY_MON)) AS NOTAX_NIGHTDUTY_MON ,
					       SUM(DECODE(A.NOTAX_REPORTER_MON,NULL,'','0','',A.NOTAX_REPORTER_MON)) AS NOTAX_REPORTER_MON ,
					       SUM(DECODE(A.ETC_MON1,NULL,'','0','',A.ETC_MON1)) AS ETC_MON1 ,
					       SUM(DECODE(A.ETC_MON2,NULL,'','0','',A.ETC_MON2)) AS ETC_MON2 ,
					       SUM(DECODE(A.ETC_MON3,NULL,'','0','',A.ETC_MON3)) AS ETC_MON3 ,
					       SUM(DECODE(A.ETC_MON4,NULL,'','0','',A.ETC_MON4)) AS ETC_MON4 ,
					       SUM(DECODE(A.STOCK_BUY_MON,NULL,'','0','',A.STOCK_BUY_MON)) AS STOCK_BUY_MON ,
					       SUM(DECODE(A.STOCK_UNION_MON,NULL,'','0','',A.STOCK_UNION_MON)) AS STOCK_UNION_MON ,
					       SUM(DECODE(A.NOTAX_RESEARCH_MON,NULL,'','0','',A.NOTAX_RESEARCH_MON)) AS NOTAX_RESEARCH_MON,
					       SUM(NVL(A.PAY_MON,0) + NVL(A.BONUS_MON,0) + NVL(A.ETC_BONUS_MON,0) + NVL(A.STOCK_BUY_MON,0) + NVL(A.STOCK_UNION_MON,0)) AS TOT_MON,
					       SUM(NVL(A.NOTAX_WORK_MON,0) + NVL(A.NOTAX_ABROAD_MON,0) + NVL(A.NOTAX_FOOD_MON,0) + NVL(A.NOTAX_CAR_MON,0) + NVL(A.NOTAX_FORN_MON,0) + NVL(A.NOTAX_RESEARCH_MON,0) + NVL(A.NOTAX_BABY_MON,0) + NVL(A.NOTAX_ETC_MON,0)) AS NOTAX_TOT_MON,
					       SUM(DECODE(A.IMWON_RET_OVER_MON,NULL,'','0','',A.IMWON_RET_OVER_MON)) AS IMWON_RET_OVER_MON
					       ]]>
					       ${querySelect}
					  FROM TCPN813 A,  THRM100 B,  TCPN811 C
					 WHERE A.ENTER_CD = B.ENTER_CD
					   AND A.SABUN = B.SABUN
					   AND A.ENTER_CD = C.ENTER_CD
					   AND A.SABUN = C.SABUN
					   AND A.WORK_YY = C.WORK_YY
					   AND A.ADJUST_TYPE = C.ADJUST_TYPE
					   AND A.ENTER_CD    = #{ssnEnterCd}
					   AND A.WORK_YY       = #{srchYear}
					   AND A.ADJUST_TYPE = #{srchAdjustType}
					   <if test='srchSbNm != null and !srchSbNm.equals("")'>
					   AND ( A.SABUN    LIKE '%' || TRIM(#{srchSbNm}) || '%' OR B.NAME LIKE '%' || TRIM(#{srchSbNm}) || '%')
					   </if>
					<choose>
					<when test='sumYn != null and sumYn.equals("Y")'>
					 GROUP BY A.WORK_YY, A.ADJUST_TYPE, A.SABUN, B.NAME, C.ORG_NM, B.ENTER_CD, B.RES_NO
 					 ORDER BY A.SABUN
					</when>
					<otherwise>
					 GROUP BY A.YM, A.WORK_YY, A.ADJUST_TYPE, A.SABUN, B.NAME, C.ORG_NM, B.ENTER_CD, B.RES_NO
					 ORDER BY A.SABUN, A.YM
					</otherwise>
 					</choose>
		</select>
	</mapper>
