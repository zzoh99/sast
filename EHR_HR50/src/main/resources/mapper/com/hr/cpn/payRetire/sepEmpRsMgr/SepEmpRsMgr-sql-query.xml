<?xml version="1.0" encoding="UTF-8"?>
<!--
 * 퇴직금기본내역
 * @author JM
-->
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="cpn.payRetire.sepEmpRsMgr">
		<select parameterType="map" resultType="cMap" id="getSepEmpRsMgrListLeft">

				<![CDATA[
					SELECT X1.PAYMENT_YMD, X1.PAY_NM, X1.SABUN, X1.NAME, X1.GEMP_YMD, X1.EMP_YMD, X1.RET_YMD,
					       X1.WORK_YY, X1.CALC_BT_YN, X1.PAY_ACTION_CD, X1.CLOSE_YN,
					       CASE WHEN X1.CLOSE_YN = 'Y' THEN '마감' ELSE '' END AS CLOSE_MSG
					  FROM
					       (SELECT T1.ENTER_CD, T2.PAYMENT_YMD, T2.PAY_NM, T1.SABUN, T1.NAME, T1.GEMP_YMD, T1.EMP_YMD, T1.RET_YMD,
					               TO_NUMBER(NVL(SUBSTR(F_CPN_CAL_YMD(T1.GEMP_YMD, T1.RET_YMD),1,2),0)) AS WORK_YY, T2.PAY_CD,
					               CASE WHEN T2.PAY_ACTION_CD IS NOT NULL AND T2.SABUN IS NOT NULL THEN 'Y' ELSE 'N' END AS CALC_BT_YN, T2.PAY_ACTION_CD,
					               T2.SEP_EYMD, T2.CLOSE_YN
					          FROM THRM100 T1,
					               (SELECT A.ENTER_CD, B.SABUN, A.PAY_ACTION_CD, A.PAYMENT_YMD,
					                       (SELECT PAY_NM FROM TCPN051 WHERE ENTER_CD = A.ENTER_CD AND PAY_CD = A.PAY_CD) AS PAY_NM,
					                       A.PAY_CD,
					                       B.RET_YMD,
					                       B.SEP_EYMD,
					                       B.CLOSE_YN
					                  FROM TCPN201 A,
					                       TCPN771 B
					                 WHERE A.ENTER_CD = #{ssnEnterCd}
					                   AND B.ENTER_CD = A.ENTER_CD
					                   AND B.PAY_ACTION_CD = A.PAY_ACTION_CD
					                   AND A.PAYMENT_YMD BETWEEN REPLACE(#{searchSDate},'-','') AND REPLACE(#{searchEDate},'-','')
					                   AND A.PAY_CD = #{searchPayCd}) T2
					         WHERE T1.ENTER_CD = #{ssnEnterCd}
					           AND T1.ENTER_CD = T2.ENTER_CD
					           AND T1.SABUN = T2.SABUN) X1,
					       THRM151 X2
					 WHERE X2.ENTER_CD = X1.ENTER_CD
					   AND X2.SABUN = X1.SABUN
					   AND X1.SEP_EYMD BETWEEN X2.SDATE AND NVL(X2.EDATE,'99991231')
					           	]]>
   					<if test='searchNm != null and !searchNm.equals("")'>
					AND		(
									X1.SABUN	=	#{searchNm}
								OR	X1.NAME		LIKE	'%'||TRIM(#{searchNm})||'%'
							)
					</if>
					<if test='searchOrgCd != null and !searchOrgCd.equals("")'>
					AND		X2.ORG_CD		=	#{searchOrgCd}
					</if>
					<if test='searchJikweeCd != null and !searchJikweeCd.equals("")'>
					AND		X2.JIKWEE_CD	=	#{searchJikweeCd}
					</if>
					<if test='searchPayType != null and !searchPayType.equals("")'>
					AND		X2.PAY_TYPE		=	#{searchPayType}
					</if>
 			ORDER BY X1.PAYMENT_YMD DESC, X1.SEP_EYMD DESC, X1.GEMP_YMD DESC



		</select>

		<select parameterType="map" resultType="cMap" id="getSepEmpRsMgrBasicMap">

				<![CDATA[
					SELECT A.PAY_ACTION_CD
						 , A.SABUN
						 , A.PAY_CD
						 , A.PAY_YM
						 , CASE WHEN LENGTH(A.PAYMENT_YMD) = 8 THEN SUBSTR(A.PAYMENT_YMD,1,4)||'-'||SUBSTR(A.PAYMENT_YMD,5,2)||'-'||SUBSTR(A.PAYMENT_YMD,7,2) ELSE A.PAYMENT_YMD END PAYMENT_YMD
						 , A.BUSINESS_PLACE_CD
						 , A.BUSINESS_PLACE_NM
						 , A.NAME
						 , A.RES_NO
						 , CASE WHEN LENGTH(A.SEP_SYMD) = 8 THEN SUBSTR(A.SEP_SYMD,1,4)||'-'||SUBSTR(A.SEP_SYMD,5,2)||'-'||SUBSTR(A.SEP_SYMD,7,2) ELSE A.SEP_SYMD END SEP_SYMD
						 , CASE WHEN LENGTH(A.SEP_EYMD) = 8 THEN SUBSTR(A.SEP_EYMD,1,4)||'-'||SUBSTR(A.SEP_EYMD,5,2)||'-'||SUBSTR(A.SEP_EYMD,7,2) ELSE A.SEP_EYMD END SEP_EYMD
						 , CASE WHEN LENGTH(A.EMP_YMD) = 8 THEN SUBSTR(A.EMP_YMD,1,4)||'-'||SUBSTR(A.EMP_YMD,5,2)||'-'||SUBSTR(A.EMP_YMD,7,2) ELSE A.EMP_YMD END EMP_YMD
						 , A.GEMP_YMD
						 , CASE WHEN LENGTH(A.RET_YMD) = 8 THEN SUBSTR(A.RET_YMD,1,4)||'-'||SUBSTR(A.RET_YMD,5,2)||'-'||SUBSTR(A.RET_YMD,7,2) ELSE A.RET_YMD END RET_YMD
						 , CASE WHEN LENGTH(A.RMID_YMD) = 8 THEN SUBSTR(A.RMID_YMD,1,4)||'-'||SUBSTR(A.RMID_YMD,5,2)||'-'||SUBSTR(A.RMID_YMD,7,2) ELSE A.RMID_YMD END RMID_YMD
						 , A.NEW_YMD
						 , A.ADJ_YMD
						 , A.BANK_CD
						 , A.BANK_NM
						 , CRYPTIT.decrypt(A.ACCOUNT_NO,A.ENTER_CD) AS ACCOUNT_NO
						 , A.R_SYMD
						 , A.R_EYMD
						 , A.RESIDENCY_TYPE
						 , A.CITIZEN_TYPE
						 , A.RESIDENCE_CD
						 , A.RESIDENCE_NM
						 , A.WKP_YEAR
						 , A.WKP_MONTH
						 , A.WKP_DAY
						 , A.WKP_M_CNT
						 , A.WKP_Y_CNT
						 , A.WKP_D_CNT
						 , A.H_WKP_M_CNT
						 , A.H_WKP_Y_CNT
						 , A.TWKP_Y_CNT
						 , A.TWKP_M_CNT
						 , A.TWKP_D_CNT
						 , A.SEP_PAY_RATE
						 , A.MTH_AVG_MON
						 , A.BON_AVG_MON
						 , A.AVG_MON
						 , A.EARNING_MON
						 , A.RET_PENSION_MON
						 , A.RET_INS_MON
						 , A.RET_INS_RATE
						 , A.HSEP_MON
						 , A.SEP_ADD_MON1
						 , A.SEP_ADD_MON2
						 , A.RET_NP_MON
						 , A.RET_ADD_MON
						 , TRIM(TO_CHAR(NVL(A.TOT_EARNING_MON,0),'999,999,999,999,990')) AS TOT_EARNING_MON
						 , TRIM(TO_CHAR(NVL(A.H_TOT_EARNING_MON,0),'999,999,999,999,990')) AS H_TOT_EARNING_MON
						 , TRIM(TO_CHAR(NVL(A.TOT_EARNING_MON,0)+NVL(A.H_TOT_EARNING_MON,0),'999,999,999,999,990')) AS SUM_TOT_EARNING_MON
						 , A.SPC_DED_MON
						 , TRIM(TO_CHAR(NVL(A.INCOME_DED_MON,0),'999,999,999,999,990')) AS INCOME_DED_MON
						 , TRIM(TO_CHAR(NVL(A.H_INCOME_DED_MON,0),'999,999,999,999,990')) AS H_INCOME_DED_MON
						 , TRIM(TO_CHAR(NVL(A.INCOME_DED_MON,0)+NVL(A.H_INCOME_DED_MON,0),'999,999,999,999,990')) AS TOT_INCOME_DED_MON
						 , A.INCOME_DED_DEF
						 , TRIM(TO_CHAR(NVL(A.TAX_BASE_MON,0),'999,999,999,999,990')) AS TAX_BASE_MON
						 , TRIM(TO_CHAR(NVL(A.H_TAX_BASE_MON,0),'999,999,999,999,990')) AS H_TAX_BASE_MON
						 , TRIM(TO_CHAR(NVL(A.TAX_BASE_MON,0)+NVL(A.H_TAX_BASE_MON,0),'999,999,999,999,990')) AS TOT_TAX_BASE_MON
						 , TRIM(TO_CHAR(NVL(A.YTAX_BASE_MON,0),'999,999,999,999,990')) AS YTAX_BASE_MON
						 , TRIM(TO_CHAR(NVL(A.H_YTAX_BASE_MON,0),'999,999,999,999,990')) AS H_YTAX_BASE_MON
						 , TRIM(TO_CHAR(NVL(A.YTAX_BASE_MON,0)+NVL(A.H_YTAX_BASE_MON,0),'999,999,999,999,990')) AS TOT_YTAX_BASE_MON
						 , TRIM(TO_CHAR(NVL(A.YTAX_BASE_RATE,0),'999,999,999,999,990')) AS YTAX_BASE_RATE
						 , TRIM(TO_CHAR(NVL(A.H_YTAX_BASE_RATE,0),'999,999,999,999,990')) AS H_YTAX_BASE_RATE
						 , TRIM(TO_CHAR(NVL(A.YCAL_TAX_MON,0),'999,999,999,999,990')) AS YCAL_TAX_MON
						 , TRIM(TO_CHAR(NVL(A.H_YCAL_TAX_MON,0),'999,999,999,999,990')) AS H_YCAL_TAX_MON
						 , TRIM(TO_CHAR(NVL(A.YCAL_TAX_MON,0)+NVL(A.H_YCAL_TAX_MON,0),'999,999,999,999,990')) AS TOT_YCAL_TAX_MON
						 , TRIM(TO_CHAR(NVL(A.CAL_TAX_MON,0),'999,999,999,999,990')) AS CAL_TAX_MON
						 , TRIM(TO_CHAR(NVL(A.H_CAL_TAX_MON,0),'999,999,999,999,990')) AS H_CAL_TAX_MON
						 , TRIM(TO_CHAR(NVL(A.CAL_TAX_MON,0)+NVL(A.H_CAL_TAX_MON,0),'999,999,999,999,990')) AS TOT_CAL_TAX_MON
						 , TRIM(TO_CHAR(NVL(A.INCTAX_DED_MON,0),'999,999,999,999,990')) AS INCTAX_DED_MON
						 , TRIM(TO_CHAR(NVL(A.H_INCTAX_DED_MON,0),'999,999,999,999,990')) AS H_INCTAX_DED_MON
						 , TRIM(TO_CHAR(NVL(A.INCTAX_DED_MON,0)+NVL(A.H_INCTAX_DED_MON,0),'999,999,999,999,990')) AS TOT_INCTAX_DED_MON
						 , A.R_ITAX_MON
						 , A.R_RTAX_MON
						 , A.R_STAX_MON
						 , A.H_R_ITAX_MON
						 , TRIM(TO_CHAR(NVL(A.R_ITAX_MON,0)+NVL(A.H_R_ITAX_MON,0),'999,999,999,999,990')) AS TOT_R_ITAX_MON
						 , A.H_R_RTAX_MON
						 , TRIM(TO_CHAR(NVL(A.R_RTAX_MON,0)+NVL(A.H_R_RTAX_MON,0),'999,999,999,999,990')) AS TOT_R_RTAX_MON
						 , A.H_R_STAX_MON
						 , TRIM(TO_CHAR(NVL(A.R_STAX_MON,0)+NVL(A.H_R_STAX_MON,0),'999,999,999,999,990')) AS TOT_R_STAX_MON
						 , TRIM(TO_CHAR(NVL(A.B_ITAX_MON,0),'999,999,999,999,990')) AS B_ITAX_MON
						 , TRIM(TO_CHAR(NVL(A.B_RTAX_MON,0),'999,999,999,999,990')) AS B_RTAX_MON
						 , TRIM(TO_CHAR(NVL(A.B_STAX_MON,0),'999,999,999,999,990')) AS B_STAX_MON
						 , TRIM(TO_CHAR(NVL(A.T_ITAX_MON,0),'999,999,999,999,990')) AS T_ITAX_MON
						 , TRIM(TO_CHAR(NVL(A.T_RTAX_MON,0),'999,999,999,999,990')) AS T_RTAX_MON
						 , TRIM(TO_CHAR(NVL(A.T_STAX_MON,0),'999,999,999,999,990')) AS T_STAX_MON
						 , A.RET_MTH_MON
						 , A.RET_BON_MON
						 , A.ETC_BON_MON
						 , A.ALR_MON
						 , TRIM(TO_CHAR(NVL(A.SUM_EARNING_MON,0),'999,999,999,999,990')) AS SUM_EARNING_MON
						 , A.INCOME_MON
						 , A.ITAX_MON
						 , A.RTAX_MON
						 , A.STAX_MON
						 , A.JH_FUND
						 , A.ADJ_EI_MON
						 , A.ADJ_HI_MON
						 , A.ATTATCH_MON
						 , A.ETC_DED_MON
						 , A.TAX_MON
						 , TRIM(TO_CHAR(NVL(A.TOT_DED_MON,0),'999,999,999,999,990')) AS TOT_DED_MON
						 , TRIM(TO_CHAR(NVL(A.PAYMENT_MON,0),'999,999,999,999,990')) AS PAYMENT_MON
						 , A.D_AVG_MON
						 , B.BANK_CD		AS IRP_BANK_CD
						 , B.BANK_NM		AS IRP_BANK_NM
						 , B.IRP_ACCOUNT_NO
						 , B.IRP_NAME
						 , C.DEFER_YMD
						 , C.BANK_ENTER_NO
						 , (CASE WHEN SUBSTR(A.PAY_CD,1,2) = 'S1' THEN '1'
								ELSE '2'
						   END) AS PAY_GUBUN
						 , D.WKP_EX_M_CNT
						 , D.WKP_ADD_M_CNT
						 ,(CASE WHEN SUBSTR(A.PAY_CD,1,2) = 'S2' THEN '3'
								WHEN IMWON_YN = 'Y' THEN '4'
								ELSE
									(SELECT CASE WHEN RESIGN_REASON_CD = 'AB' THEN '1'
												WHEN RESIGN_REASON_CD IN ('AC','EC') THEN '2'
												ELSE '5'
										   END
									FROM THRM191
									WHERE ENTER_CD = A.ENTER_CD
									  AND SABUN = A.SABUN
									  AND ORD_YMD = A.RET_YMD)
						   END) AS RET_GUBUN
						 ,(SELECT (CASE WHEN COUNT(SABUN) > 0 THEN '2'
										ELSE '1'
								  END)
						   FROM TCPN708
						   WHERE ENTER_CD = A.ENTER_CD
							 AND SABUN = A.SABUN
							 AND A.PAYMENT_YMD BETWEEN SDATE AND NVL(EDATE,'99991231')) AS RET_CORP
					  FROM TCPN771 A
						 , TCPN185 B
						 , TCPN777 C
						 , TCPN768 D
					 WHERE A.ENTER_CD		= #{ssnEnterCd}
					   AND A.SABUN			= #{sabun}
					   AND A.PAY_ACTION_CD	= #{payActionCd}
					   AND A.ENTER_CD		= B.ENTER_CD(+)
					   AND A.SABUN			= B.SABUN(+)
					   AND A.SABUN			= B.SABUN(+)
					   AND A.ENTER_CD = C.ENTER_CD(+)
					   AND A.PAY_ACTION_CD = C.PAY_ACTION_CD(+)
					   AND A.ENTER_CD = D.ENTER_CD(+)
					   AND A.PAY_ACTION_CD = D.PAY_ACTION_CD(+)
					   AND A.SABUN = D.SABUN(+)
					   AND ROWNUM			= 1
				]]>


		</select>
		<select parameterType="map" resultType="cMap" id="getSepEmpRsMgrAverageIncomePayTitleList">

				<![CDATA[
					SELECT A.ELEMENT_NM
						 , 'E'||A.ELEMENT_CD AS ELEMENT_CD
						 , B.ELEMENT_SET_CD
					 FROM (	SELECT SUB1.*
							  FROM TCPN011 SUB1
								 , (SELECT MAX(SDATE) AS SDATE, ELEMENT_CD
									  FROM TCPN011
									 WHERE ENTER_CD	= #{ssnEnterCd}
									   AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SDATE AND NVL(EDATE, '99991231')
									GROUP BY ELEMENT_CD ) SUB2
							 WHERE SUB1.ENTER_CD	= #{ssnEnterCd}
							   AND SUB1.ELEMENT_CD	= SUB2.ELEMENT_CD
							   AND SUB1.SDATE = SUB2.SDATE
							   AND SUB1.ELEMENT_CD IN (SELECT DISTINCT Y.ELEMENT_CD
														 FROM TCPN071 X
															, TCPN072 Y
														WHERE X.ENTER_CD = Y.ENTER_CD
														  AND X.ELEMENT_SET_CD = Y.ELEMENT_SET_CD
														  AND X.ENTER_CD = SUB1.ENTER_CD
														  -- AND X.PAY_CD IN (SELECT PAY_CD FROM TCPN051 WHERE ENTER_CD=X.ENTER_CD AND RUN_TYPE IN ('00001','R0001'))
														)
						 ) A
						 , TCPN071 B
						 , (SELECT SUB1.*
							  FROM TCPN072 SUB1
								, (SELECT MAX(SDATE) AS SDATE,ENTER_CD,ELEMENT_CD,ELEMENT_SET_CD
									 FROM TCPN072
									WHERE ENTER_CD		= #{ssnEnterCd}
									  AND ELEMENT_SET_CD= '02'
									  AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SDATE AND NVL(EDATE, '99991231')
								  GROUP BY ENTER_CD, ELEMENT_CD, ELEMENT_SET_CD) SUB2
						 WHERE SUB1.ENTER_CD		= #{ssnEnterCd}
						   AND SUB1.ENTER_CD		= SUB2.ENTER_CD
						   AND SUB1.ELEMENT_SET_CD	= SUB2.ELEMENT_SET_CD
						   AND SUB1.ELEMENT_CD		= SUB2.ELEMENT_CD
						   AND SUB1.SDATE			= SUB2.SDATE ) C
					 WHERE A.ENTER_CD		= #{ssnEnterCd}
					   AND A.ENTER_CD		= C.ENTER_CD
					   AND A.ELEMENT_CD		= C.ELEMENT_CD
					   AND B.ENTER_CD		= C.ENTER_CD
					   AND B.ELEMENT_SET_CD	= C.ELEMENT_SET_CD
					ORDER BY A.PRIORITY
				]]>


		</select>
		<select parameterType="map" resultType="cMap" id="getSepEmpRsMgrAverageIncomePayList">


					SELECT A.SABUN
						 , A.PAY_ACTION_CD
						 , A.CAL_FYMD
						 , A.CAL_TYMD
						 , A.WORK_DAY
						 , A.MON
					<foreach item="tCnt" collection="titles" >
						 , MAX(DECODE(B.ELEMENT_CD, TRIM(SUBSTR(#{tCnt.elementCd},2)), B.MON, 0)) AS "${tCnt.elementCd}"
					</foreach>
					 FROM TCPN757 A
						, (
							SELECT ENTER_CD
								 , PAY_ACTION_CD
								 , SABUN
								 , CAL_FYMD
								 , ELEMENT_CD
								 , MON
							  FROM TCPN758
							 WHERE ENTER_CD			= #{ssnEnterCd}
							   AND SABUN			= #{sabun}
							   AND PAY_ACTION_CD	= #{payActionCd}
							   AND ELEMENT_CD		IN (NULL
							<foreach item="tCnt" collection="titles" >
														,TRIM(SUBSTR(#{tCnt.elementCd},2))
							</foreach>
														)
							) B
			<![CDATA[
					 WHERE A.ENTER_CD		= #{ssnEnterCd}
					   AND A.SABUN			= #{sabun}
					   AND A.PAY_ACTION_CD	= #{payActionCd}
					   AND NVL(A.MON,0)		> 0
					   AND A.ENTER_CD		= B.ENTER_CD(+)
					   AND A.PAY_ACTION_CD	= B.PAY_ACTION_CD(+)
					   AND A.SABUN			= B.SABUN(+)
					   AND A.CAL_FYMD		= B.CAL_FYMD(+)
					GROUP BY A.SABUN, A.PAY_ACTION_CD, A.CAL_FYMD, A.CAL_TYMD, A.WORK_DAY, A.MON
					ORDER BY A.CAL_TYMD DESC
					]]>



		</select>
		<select parameterType="map" resultType="cMap" id="getSepEmpRsMgrAverageIncomeBonusList">

				<![CDATA[
					SELECT A.SEQ
						 , A.PAY_ACTION_CD
						 , A.SABUN
						 , A.SUB_PAY_ACTION_CD
						 , B.PAY_ACTION_NM AS SUB_PAY_ACTION_NM
						 , A.PAY_CD
						 , A.PAYMENT_YMD
						 , A.MON
					  FROM TCPN759 A
						 , TCPN201 B
					 WHERE A.ENTER_CD			= #{ssnEnterCd}
					   AND A.SABUN				= #{sabun}
					   AND A.PAY_ACTION_CD		= #{payActionCd}
					   AND A.ENTER_CD			= B.ENTER_CD(+)
					   AND A.SUB_PAY_ACTION_CD	= B.PAY_ACTION_CD(+)
					 ORDER BY A.PAYMENT_YMD DESC
				]]>


		</select>
		<select parameterType="map" resultType="cMap" id="getSepEmpRsMgrAverageIncomeAnnualList">

				<![CDATA[
					SELECT A.PAY_ACTION_CD
						 , A.SABUN
						 , A.SEQ
						 , A.SUB_PAY_ACTION_CD
						 , B.PAY_ACTION_NM AS SUB_PAY_ACTION_NM
						 , A.PAY_CD
						 , A.ELEMENT_CD
						 , A.PAYMENT_YMD AS INCOME_ANNUAL_PAYMENT_YMD
						 , A.MON
						 , A.ALR_Y_CNT
					  FROM TCPN760 A
						 , TCPN201 B
					 WHERE A.ENTER_CD			= #{ssnEnterCd}
					   AND A.SABUN				= #{sabun}
					   AND A.PAY_ACTION_CD		= #{payActionCd}
					   AND A.ENTER_CD			= B.ENTER_CD(+)
					   AND A.SUB_PAY_ACTION_CD	= B.PAY_ACTION_CD(+)
					 ORDER BY A.PAYMENT_YMD DESC
				]]>


		</select>
		<select parameterType="map" resultType="cMap" id="getSepEmpRsMgrSeverancePayMap">

				<![CDATA[
					SELECT MAX((SELECT WKP_Y_CNT
                          FROM TCPN771
                          WHERE ENTER_CD = B.ENTER_CD
                            AND PAY_ACTION_CD = B.PAY_ACTION_CD
                            AND SABUN = B.SABUN)) AS A001_070_MON
					    , MAX((SELECT WKP_M_CNT
                          FROM TCPN771
                          WHERE ENTER_CD = B.ENTER_CD
                            AND PAY_ACTION_CD = B.PAY_ACTION_CD
                            AND SABUN = B.SABUN)) AS A001_090_MON
					    , MAX((SELECT WKP_D_CNT
                          FROM TCPN771
                          WHERE ENTER_CD = B.ENTER_CD
                            AND PAY_ACTION_CD = B.PAY_ACTION_CD
                            AND SABUN = B.SABUN)) AS A001_110_MON
                         , MAX((SELECT TWKP_D_CNT
                          FROM TCPN771
                          WHERE ENTER_CD = B.ENTER_CD
                            AND PAY_ACTION_CD = B.PAY_ACTION_CD
                            AND SABUN = B.SABUN)) AS A001_110_MON_1
                         , TRIM(TO_CHAR(SUM(CASE WHEN A.ELEMENT_CD = 'B001_090' THEN B.RESULT_MON ELSE 0 END),'999,999,999,999')) B001_090_MON
						 , TRIM(TO_CHAR(SUM(CASE WHEN A.ELEMENT_CD = 'B001_150' THEN B.RESULT_MON ELSE 0 END),'999,999,999,999')) B001_150_MON
						 , TRIM(TO_CHAR(SUM(CASE WHEN A.ELEMENT_CD = 'B001_210' THEN B.RESULT_MON ELSE 0 END),'999,999,999,999')) B001_210_MON
						 , TRIM(TO_CHAR(SUM(CASE WHEN A.ELEMENT_CD = 'B001_270' THEN B.RESULT_MON ELSE 0 END),'999,999,999,999.99')) B001_270_MON
                         , TRIM(TO_CHAR(SUM(CASE WHEN A.ELEMENT_CD = 'C001_010' THEN B.RESULT_MON ELSE 0 END),'999,999,999,999')) C001_010_MON
					 FROM TCPN741 A
						 , TCPN205 B
					 WHERE A.ENTER_CD		= #{ssnEnterCd}
					   AND A.USE_YN			= 'Y'
					   AND A.RESULT_YN		= 'Y'
					   AND A.REPORT_YN		= 'Y'
					   AND A.ELEMENT_CD		IN ('A001_070','A001_090','A001_110','A001_130','B001_210','B001_090','B001_150','C001_010','B001_170','B001_230','B001_270')
					   AND A.ENTER_CD		= B.ENTER_CD(+)
					   AND A.ELEMENT_CD		= B.ELEMENT_CD(+)
					   AND B.PAY_ACTION_CD(+) = #{payActionCd}
					   AND B.SABUN(+)		=  #{sabun}
				]]>


		</select>
		<select parameterType="map" resultType="cMap" id="getSepEmpRsMgrSeverancePayCalcList">

				<![CDATA[
					SELECT Y.ELEMENT_NM
						 , (CASE WHEN Y.ELEMENT_CD <> 'A001_130' THEN TRIM(TO_CHAR(Y.RESULT_MON,'999,999,999,999')) ELSE TRIM(TO_CHAR(Y.RESULT_MON)) END ) AS RESULT_MON
						 , Z.ELEMENT_NM AS ELEMENT_NM2
						 , (CASE WHEN Z.ELEMENT_CD <> 'B001_270' THEN TRIM(TO_CHAR(Z.RESULT_MON,'999,999,999,999,999')) ELSE TRIM(TO_CHAR(Z.RESULT_MON,'999,999,999,999,999.99')) END ) AS RESULT_MON2
					  FROM (SELECT ROWNUM AS RK
							  FROM TCPN741 A
							 WHERE A.ENTER_CD		= #{ssnEnterCd}
							   AND A.USE_YN			= 'Y'
							   AND A.RESULT_YN		= 'Y'
							   AND A.REPORT_YN		= 'Y'
							   AND A.ELEMENT_TYPE	= 'A001'
							UNION
							SELECT ROWNUM AS RK
							  FROM TCPN741 A
							 WHERE A.ENTER_CD		= #{ssnEnterCd}
							   AND A.USE_YN			= 'Y'
							   AND A.RESULT_YN		= 'Y'
							   AND A.REPORT_YN		= 'Y'
							   AND A.ELEMENT_TYPE IN ('B001','C001')
							) X
						 , (SELECT ROW_NUMBER() OVER (ORDER BY A.PRIORITY, A.ELEMENT_CD) AS RK
								 , A.ELEMENT_CD
								 , A.ELEMENT_NM
								 , B.RESULT_MON
							  FROM TCPN741 A
								 , TCPN205 B
							 WHERE A.ENTER_CD		= #{ssnEnterCd}
							   AND A.USE_YN			= 'Y'
							   AND A.RESULT_YN		= 'Y'
							   AND A.REPORT_YN		= 'Y'
							   AND A.ELEMENT_TYPE	= 'A001'
							   AND A.ENTER_CD		= B.ENTER_CD(+)
							   AND A.ELEMENT_CD		= B.ELEMENT_CD(+)
							   AND B.PAY_ACTION_CD(+) = #{payActionCd}
							   AND B.SABUN(+)		= #{sabun}
							) Y
						 , (SELECT ROW_NUMBER() OVER (ORDER BY A.PRIORITY, A.ELEMENT_CD) AS RK
								 , A.ELEMENT_CD
								 , A.ELEMENT_NM
								 , B.RESULT_MON
							  FROM TCPN741 A
								 , TCPN205 B
							 WHERE A.ENTER_CD		= #{ssnEnterCd}
							   AND A.USE_YN			= 'Y'
							   AND A.RESULT_YN		= 'Y'
							   AND A.REPORT_YN		= 'Y'
							   AND A.ELEMENT_TYPE IN ('B001','C001')
							   AND A.ENTER_CD		= B.ENTER_CD(+)
							   AND A.ELEMENT_CD		= B.ELEMENT_CD(+)
							   AND B.PAY_ACTION_CD(+) = #{payActionCd}
							   AND B.SABUN(+)		= #{sabun}
							) Z
					 WHERE X.RK = Y.RK(+)
					   AND X.RK = Z.RK(+)
				]]>


		</select>
		<select parameterType="map" resultType="cMap" id="getSepEmpRsMgrRetireCalcPayList">

				<![CDATA[
					SELECT A.ELEMENT_NM
						 , B.RESULT_MON
					  FROM TCPN741 A
						 , TCPN205 B
					 WHERE A.ENTER_CD			= #{ssnEnterCd}
					   AND A.USE_YN				= 'Y'
					   AND A.RESULT_YN			= 'Y'
					   AND A.REPORT_YN			= 'Y'
					   AND A.ELEMENT_TYPE IN ('C001','F001')
					   AND A.ENTER_CD			= B.ENTER_CD(+)
					   AND A.ELEMENT_CD			= B.ELEMENT_CD(+)
					   AND B.PAY_ACTION_CD(+)	= #{payActionCd}
					   AND B.SABUN(+)			= #{sabun}
					ORDER BY A.PRIORITY
				]]>


		</select>
		<select parameterType="map" resultType="cMap" id="getSepEmpRsMgrRetireCalcDeductionList">

				<![CDATA[
					SELECT ELEMENT_NM
						 , RESULT_MON
						 , ELEMENT_NM2
						 , RESULT_MON2
					  FROM (SELECT RANK() OVER(ORDER BY PRIORITY, ELEMENT_CD) AS RK
								 , ELEMENT_NM
								 , RESULT_MON
								 , LEAD(ELEMENT_NM) OVER(ORDER BY PRIORITY, ELEMENT_CD) AS ELEMENT_NM2
								 , LEAD(RESULT_MON) OVER(ORDER BY PRIORITY, ELEMENT_CD) AS RESULT_MON2
							  FROM (SELECT A.ELEMENT_CD
										 , A.ELEMENT_NM
										 , (CASE WHEN A.ELEMENT_CD = 'G001_030' THEN
                                                      NVL((SELECT Y.BLC_MON
                                                        FROM TCPN773 Y
                                                       WHERE Y.ENTER_CD = #{ssnEnterCd}
                                                         AND Y.PAY_ACTION_CD =  #{payActionCd}
                                                         AND Y.SABUN   =  #{sabun}
                                                         AND Y.RET_ETC_ELE_CD = '01' ),B.RESULT_MON)
                                                ELSE B.RESULT_MON
                                           END) AS RESULT_MON
										 , A.PRIORITY
									  FROM TCPN741 A
										  ,TCPN205 B
									 WHERE A.ENTER_CD			= #{ssnEnterCd}
									   AND A.USE_YN				= 'Y'
									   AND A.RESULT_YN			= 'Y'
									   AND A.REPORT_YN			= 'Y'
									   AND A.ELEMENT_TYPE IN ('D001','E001','G001')
									   AND A.ENTER_CD			= B.ENTER_CD(+)
									   AND A.ELEMENT_CD			= B.ELEMENT_CD(+)
									   AND B.PAY_ACTION_CD(+)	= #{payActionCd}
									   AND B.SABUN(+)			= #{sabun}
					   )
					 ) WHERE MOD(RK,2) = 1
				]]>


		</select>
		<select parameterType="map" resultType="cMap" id="getSepEmpRsMgrBeforeWorkMap">

				<![CDATA[
					SELECT A.SABUN
						 , A.B_WORK_CD
						 , A.REGINO
						 , A.REGINM
						 , TO_CHAR(TO_DATE(A.EMP_YMD,'YYYYMMDD'),'YYYY-MM-DD') AS EMP_YMD
						 , TO_CHAR(TO_DATE(A.RET_YMD,'YYYYMMDD'),'YYYY-MM-DD') AS RET_YMD
						 , A.WKP_CNT
						 , A.WKP_M_CNT
						 , A.WKP_D_CNT
						 , A.OVER_WKP_M
						 , TRIM(TO_CHAR(A.SEP_MON,'999,999,999,999,990')) AS SEP_MON
						 , TRIM(TO_CHAR(A.HSEP_MON,'999,999,999,999,990')) AS HSEP_MON
						 , TRIM(TO_CHAR(A.SEP_ADD_MON1,'999,999,999,999,990')) AS SEP_ADD_MON1
						 , TRIM(TO_CHAR(A.SEP_ADD_MON2,'999,999,999,999,990')) AS SEP_ADD_MON2
						 , TRIM(TO_CHAR(A.ITAX_MON,'999,999,999,999,990')) AS ITAX_MON
						 , TRIM(TO_CHAR(A.RTAX_MON,'999,999,999,999,990')) AS RTAX_MON
						 , A.EXP_WKP_M
						 , B.PAY_ACTION_NM
					  FROM TCPN727 A
						 , TCPN201 B
					 WHERE A.ENTER_CD			= B.ENTER_CD
					   AND A.AF_PAY_ACTION_CD	= B.PAY_ACTION_CD
					   AND A.ENTER_CD			= #{ssnEnterCd}
					   AND A.SABUN				= #{sabun}
					   AND B.PAY_ACTION_CD		= #{payActionCd}
				]]>


		</select>
		<update parameterType="map" id="saveSepEmpRsMgrIrpInfo">

				<![CDATA[
					INSERT INTO TCPN185
					(
						ENTER_CD
					  , SABUN
					  , BANK_CD
					  , IRP_ACCOUNT_NO
					  , BANK_NM
					  , IRP_NAME
					  , CHKDATE
					  , CHKID
					)
					VALUES
					(
						#{ssnEnterCd}
					  , TRIM(#{sabun})
					  , TRIM(#{irpBankCd})
					  , TRIM(#{irpAccountNo})
					  , TRIM(#{irpBankNm})
					  , TRIM(#{irpName})
					  , SYSDATE
					  , #{ssnSabun}
					)
				]]>


		</update>
		<update parameterType="map" id="saveSepEmpRsMgrAverageIncomePay">


					MERGE INTO TCPN757 T
					USING	(
							SELECT A.PAY_ACTION_CD
								 , A.SABUN
								 , A.CAL_FYMD
								 , A.CAL_TYMD
								 , A.WORK_DAY
								 , A.MON
							  FROM (
									SELECT NULL	AS PAY_ACTION_CD
										 , NULL	AS SABUN
										 , NULL	AS CAL_FYMD
										 , NULL	AS CAL_TYMD
										 , NULL	AS WORK_DAY
										 , NULL	AS MON
									  FROM DUAL
<foreach item="rm" collection="mergeRows" >
									UNION ALL
									SELECT TRIM(#{rm.payActionCd})			AS PAY_ACTION_CD
										 , TRIM(#{rm.sabun})				AS SABUN
										 , TRIM(#{rm.calFymd})				AS CAL_FYMD
										 , TRIM(#{rm.calTymd})				AS CAL_TYMD
										 , TO_NUMBER(TRIM(#{rm.workDay}))	AS WORK_DAY
										 , TO_NUMBER(TRIM(#{rm.mon}))		AS MON
									  FROM DUAL
</foreach>
									) A
							WHERE A.PAY_ACTION_CD	IS NOT NULL
							  AND A.SABUN			IS NOT NULL
							  AND A.CAL_FYMD		IS NOT NULL
							) S
					ON	(	T.ENTER_CD			= #{ssnEnterCd}
						AND	T.PAY_ACTION_CD		= S.PAY_ACTION_CD
						AND	T.SABUN				= S.SABUN
						AND	T.CAL_FYMD			= S.CAL_FYMD
						)
					WHEN MATCHED THEN
						UPDATE SET T.CAL_TYMD			= S.CAL_TYMD
								 , T.WORK_DAY			= S.WORK_DAY
								 , T.MON				= S.MON
								 , T.CHKDATE			= SYSDATE
								 , T.CHKID				= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							T.ENTER_CD
						  , T.PAY_ACTION_CD
						  , T.SABUN
						  , T.CAL_FYMD
						  , T.CAL_TYMD
						  , T.WORK_DAY
						  , T.MON
						  , T.CHKDATE
						  , T.CHKID
						)
						VALUES
						(
							#{ssnEnterCd}
						  , S.PAY_ACTION_CD
						  , S.SABUN
						  , S.CAL_FYMD
						  , S.CAL_TYMD
						  , S.WORK_DAY
						  , S.MON
						  , SYSDATE
						  , #{ssnSabun}
						)



		</update>
		<update parameterType="map" id="saveSepEmpRsMgrAverageIncomePayDtl">


					MERGE INTO TCPN758 T
					USING	(
							SELECT A.PAY_ACTION_CD
								 , A.SABUN
								 , A.CAL_FYMD
								 , A.ELEMENT_CD
								 , A.MON
							  FROM (
									SELECT NULL	AS PAY_ACTION_CD
										 , NULL	AS SABUN
										 , NULL	AS CAL_FYMD
										 , NULL	AS ELEMENT_CD
										 , NULL	AS MON
									  FROM DUAL
<foreach item="rm" collection="elementInfo" >
									UNION ALL
									SELECT TRIM(#{rm.payActionCd})		AS PAY_ACTION_CD
										 , TRIM(#{rm.sabun})			AS SABUN
										 , TRIM(#{rm.calFymd})			AS CAL_FYMD
										 , SUBSTR(TRIM(#{rm.elementCd}),2)		AS ELEMENT_CD
										 , TO_NUMBER(TRIM(#{rm.mon}))	AS MON
									  FROM DUAL
</foreach>
									) A
							WHERE A.PAY_ACTION_CD	IS NOT NULL
							  AND A.SABUN			IS NOT NULL
							  AND A.CAL_FYMD		IS NOT NULL
							  AND A.ELEMENT_CD		IS NOT NULL
							) S
					ON	(	T.ENTER_CD			= #{ssnEnterCd}
						AND	T.PAY_ACTION_CD		= S.PAY_ACTION_CD
						AND	T.SABUN				= S.SABUN
						AND	T.CAL_FYMD			= S.CAL_FYMD
						AND	T.ELEMENT_CD		= S.ELEMENT_CD
						)
					WHEN MATCHED THEN
						UPDATE SET T.MON		= S.MON
								 , T.CHKDATE	= SYSDATE
								 , T.CHKID		= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							T.ENTER_CD
						  , T.PAY_ACTION_CD
						  , T.SABUN
						  , T.CAL_FYMD
						  , T.ELEMENT_CD
						  , T.MON
						  , T.CHKDATE
						  , T.CHKID
						)
						VALUES
						(
							#{ssnEnterCd}
						  , S.PAY_ACTION_CD
						  , S.SABUN
						  , S.CAL_FYMD
						  , S.ELEMENT_CD
						  , S.MON
						  , SYSDATE
						  , #{ssnSabun}
						)



		</update>
		<update parameterType="map" id="saveSepEmpRsMgrAverageIncomeBonus">


					MERGE INTO TCPN759 T
					USING	(
							SELECT A.PAY_ACTION_CD
								 , A.SEQ
								 , A.SABUN
								 , A.SUB_PAY_ACTION_CD
								 , A.PAY_CD
								 , A.PAYMENT_YMD
								 , A.MON
								 , A.ALR_Y_CNT
								 , A.ALR_M_CNT
							  FROM (
									SELECT NULL	AS PAY_ACTION_CD
										 , NULL	AS SEQ
										 , NULL	AS SABUN
										 , NULL	AS SUB_PAY_ACTION_CD
										 , NULL	AS PAY_CD
										 , NULL	AS PAYMENT_YMD
										 , NULL	AS MON
										 , NULL	AS ALR_Y_CNT
										 , NULL	AS ALR_M_CNT
									  FROM DUAL
<bind name="cnt" value="1" />
<foreach item="rm" collection="mergeRows" >
									UNION ALL
									SELECT TRIM(#{rm.payActionCd})			AS PAY_ACTION_CD
										 , CASE WHEN TRIM(#{rm.seq}) IS NULL OR TRIM(#{rm.seq}) = '0' THEN
													(SELECT (NVL(MAX(SEQ),0) + #{cnt}) FROM TCPN759 WHERE ENTER_CD = #{ssnEnterCd} AND PAY_ACTION_CD = TRIM(#{rm.payActionCd}))
												ELSE TO_NUMBER(#{rm.seq}) END SEQ
										 , TRIM(#{rm.sabun})				AS SABUN
										 , TRIM(#{rm.subPayActionCd})		AS SUB_PAY_ACTION_CD
										 , TRIM(#{rm.payCd})				AS PAY_CD
										 , TRIM(#{rm.paymentYmd})			AS PAYMENT_YMD
										 , TO_NUMBER(TRIM(#{rm.mon}))		AS MON
										 , TO_NUMBER(TRIM(#{rm.alrYCnt}))	AS ALR_Y_CNT
										 , TO_NUMBER(TRIM(#{rm.alrMCnt}))	AS ALR_M_CNT
									  FROM DUAL
<bind name="cnt" value="cnt+1" />
</foreach>
									) A
							WHERE A.PAY_ACTION_CD	IS NOT NULL
							  AND A.SEQ				IS NOT NULL
							  AND A.SABUN			IS NOT NULL
							) S
					ON	(	T.ENTER_CD			= #{ssnEnterCd}
						AND	T.PAY_ACTION_CD		= S.PAY_ACTION_CD
						AND	T.SEQ				= S.SEQ
						AND	T.SABUN				= S.SABUN
						)
					WHEN MATCHED THEN
						UPDATE SET T.SUB_PAY_ACTION_CD	= S.SUB_PAY_ACTION_CD
								 , T.PAY_CD				= S.PAY_CD
								 , T.PAYMENT_YMD		= S.PAYMENT_YMD
								 , T.MON				= S.MON
								 , T.ALR_Y_CNT			= S.ALR_Y_CNT
								 , T.ALR_M_CNT			= S.ALR_M_CNT
								 , T.CHKDATE			= SYSDATE
								 , T.CHKID				= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							T.ENTER_CD
						  , T.PAY_ACTION_CD
						  , T.SEQ
						  , T.SABUN
						  , T.SUB_PAY_ACTION_CD
						  , T.PAY_CD
						  , T.PAYMENT_YMD
						  , T.MON
						  , T.ALR_Y_CNT
						  , T.ALR_M_CNT
						  , T.CHKDATE
						  , T.CHKID
						)
						VALUES
						(
							#{ssnEnterCd}
						  , S.PAY_ACTION_CD
						  , S.SEQ
						  , S.SABUN
						  , S.SUB_PAY_ACTION_CD
						  , S.PAY_CD
						  , S.PAYMENT_YMD
						  , S.MON
						  , S.ALR_Y_CNT
						  , S.ALR_M_CNT
						  , SYSDATE
						  , #{ssnSabun}
						)



		</update>
		<update parameterType="map" id="saveSepEmpRsMgrAverageIncomeAnnual">


					MERGE INTO TCPN760 T
					USING	(
							SELECT A.PAY_ACTION_CD
								 , A.SABUN
								 , A.SEQ
								 , A.SUB_PAY_ACTION_CD
								 , A.PAY_CD
								 , A.ELEMENT_CD
								 , A.PAYMENT_YMD
								 , A.MON
								 , A.ALR_Y_CNT
							  FROM (
									SELECT NULL	AS PAY_ACTION_CD
										 , NULL	AS SABUN
										 , NULL	AS SEQ
										 , NULL	AS SUB_PAY_ACTION_CD
										 , NULL	AS PAY_CD
										 , NULL	AS ELEMENT_CD
										 , NULL	AS PAYMENT_YMD
										 , NULL	AS MON
										 , NULL	AS ALR_Y_CNT
									  FROM DUAL
<bind name="cnt" value="1" />
<foreach item="rm" collection="mergeRows" >
									UNION ALL
									SELECT TRIM(#{rm.payActionCd})				AS PAY_ACTION_CD
										 , TRIM(#{rm.sabun})					AS SABUN
										 , CASE WHEN TRIM(#{rm.seq}) IS NULL OR TRIM(#{rm.seq}) = '0' THEN
													(SELECT (NVL(MAX(SEQ),0) + #{cnt}) FROM TCPN760 WHERE ENTER_CD = #{ssnEnterCd} AND PAY_ACTION_CD = TRIM(#{rm.payActionCd}) AND SABUN = TRIM(#{rm.sabun}))
												ELSE TO_NUMBER(#{rm.seq}) END SEQ
										 , TRIM(#{rm.subPayActionCd})			AS SUB_PAY_ACTION_CD
										 , TRIM(#{rm.payCd})					AS PAY_CD
										 , TRIM(#{rm.elementCd})				AS ELEMENT_CD
										 , TRIM(#{rm.incomeAnnualPaymentYmd})	AS PAYMENT_YMD
										 , TO_NUMBER(TRIM(#{rm.mon}))			AS MON
										 , TO_NUMBER(TRIM(#{rm.alrYCnt}))		AS ALR_Y_CNT
									  FROM DUAL
<bind name="cnt" value="cnt+1" />
</foreach>
									) A
							WHERE A.PAY_ACTION_CD	IS NOT NULL
							  AND A.SABUN			IS NOT NULL
							  AND A.SEQ				IS NOT NULL
							) S
					ON	(	T.ENTER_CD			= #{ssnEnterCd}
						AND	T.PAY_ACTION_CD		= S.PAY_ACTION_CD
						AND	T.SABUN				= S.SABUN
						AND	T.SEQ				= S.SEQ
						)
					WHEN MATCHED THEN
						UPDATE SET T.SUB_PAY_ACTION_CD	= S.SUB_PAY_ACTION_CD
								 , T.PAY_CD				= S.PAY_CD
								 , T.ELEMENT_CD			= S.ELEMENT_CD
								 , T.PAYMENT_YMD		= S.PAYMENT_YMD
								 , T.MON				= S.MON
								 , T.ALR_Y_CNT			= S.ALR_Y_CNT
								 , T.CHKDATE			= SYSDATE
								 , T.CHKID				= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							T.ENTER_CD
						  , T.PAY_ACTION_CD
						  , T.SABUN
						  , T.SEQ
						  , T.SUB_PAY_ACTION_CD
						  , T.PAY_CD
						  , T.ELEMENT_CD
						  , T.PAYMENT_YMD
						  , T.MON
						  , T.ALR_Y_CNT
						  , T.CHKDATE
						  , T.CHKID
						)
						VALUES
						(
							#{ssnEnterCd}
						  , S.PAY_ACTION_CD
						  , S.SABUN
						  , S.SEQ
						  , S.SUB_PAY_ACTION_CD
						  , S.PAY_CD
						  , S.ELEMENT_CD
						  , S.PAYMENT_YMD
						  , S.MON
						  , S.ALR_Y_CNT
						  , SYSDATE
						  , #{ssnSabun}
						)



		</update>
		<update parameterType="map" statementType="CALLABLE" id="SepEmpRsMgrP_CPN_SEP_PAY_MAIN">

				<![CDATA[
					CALL P_CPN_SEP_PAY_MAIN(
						#{sqlcode,mode=OUT,jdbcType=VARCHAR},
						#{sqlerrm,mode=OUT,jdbcType=VARCHAR},
						#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
						#{payActionCd,mode=IN,jdbcType=VARCHAR},
						#{businessPlaceCd,mode=IN,jdbcType=VARCHAR},
						#{sabun,mode=IN,jdbcType=VARCHAR},
					    '3',
						#{ssnSabun,mode=IN,jdbcType=VARCHAR})
				]]>



		</update>
		<delete parameterType="map" id="deleteSepEmpRsMgrIrpInfo">

				<![CDATA[
					DELETE FROM TCPN185
					 WHERE ENTER_CD	= #{ssnEnterCd}
					   AND SABUN	= TRIM(#{sabun})
				]]>


		</delete>
		<delete parameterType="map" id="deleteSepEmpRsMgrAverageIncomePay">


					DELETE FROM TCPN757
					 WHERE ENTER_CD||'_'||PAY_ACTION_CD||'_'||SABUN||'_'||CAL_FYMD IN ( NULL
<foreach item="rm" collection="deleteRows" >
						,
							<if test='ssnEnterCd != null and !ssnEnterCd.equals("") and rm.payActionCd != null and !rm.payActionCd.equals("") and rm.sabun != null and !rm.sabun.equals("") and rm.calFymd != null and !rm.calFymd.equals("")'>
								TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.payActionCd})||'_'||TRIM(#{rm.sabun})||'_'||TRIM(#{rm.calFymd})
							</if>
</foreach>
							)



		</delete>
		<delete parameterType="map" id="deleteSepEmpRsMgrAverageIncomePayDtl">


					DELETE FROM TCPN758
					 WHERE ENTER_CD||'_'||PAY_ACTION_CD||'_'||SABUN||'_'||CAL_FYMD IN ( NULL
<foreach item="rm" collection="deleteRows" >
						,
							<if test='ssnEnterCd != null and !ssnEnterCd.equals("") and rm.payActionCd != null and !rm.payActionCd.equals("") and rm.sabun != null and !rm.sabun.equals("") and rm.calFymd != null and !rm.calFymd.equals("")'>
								TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.payActionCd})||'_'||TRIM(#{rm.sabun})||'_'||TRIM(#{rm.calFymd})
							</if>
</foreach>
							)



		</delete>
		<delete parameterType="map" id="deleteSepEmpRsMgrAverageIncomeBonus">


					DELETE FROM TCPN759
					 WHERE ENTER_CD||'_'||PAY_ACTION_CD||'_'||TO_CHAR(SEQ)||'_'||SABUN IN ( NULL
<foreach item="rm" collection="deleteRows" >
						,
							<if test='ssnEnterCd != null and !ssnEnterCd.equals("") and rm.payActionCd != null and !rm.payActionCd.equals("") and rm.seq != null and !rm.seq.equals("") and rm.sabun != null and !rm.sabun.equals("")'>
								TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.payActionCd})||'_'||TRIM(#{rm.seq})||'_'||TRIM(#{rm.sabun})
							</if>
</foreach>
							)



		</delete>
		<delete parameterType="map" id="deleteSepEmpRsMgrAverageIncomeAnnual">

					DELETE FROM TCPN760
					 WHERE ENTER_CD||'_'||PAY_ACTION_CD||'_'||SABUN||'_'||TO_CHAR(SEQ) IN ( NULL
<foreach item="rm" collection="deleteRows" >
						,
							<if test='ssnEnterCd != null and !ssnEnterCd.equals("") and rm.payActionCd != null and !rm.payActionCd.equals("") and rm.sabun != null and !rm.sabun.equals("") and rm.seq != null and !rm.seq.equals("")'>
								TRIM(#{ssnEnterCd})||'_'||TRIM(#{rm.payActionCd})||'_'||TRIM(#{rm.sabun})||'_'||TRIM(#{rm.seq})
							</if>
</foreach>
							)



		</delete>
	</mapper>
