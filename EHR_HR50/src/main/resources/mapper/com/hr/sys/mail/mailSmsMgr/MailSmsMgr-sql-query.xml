<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="sys.mail.mailSmsMgr">
	
<!-- 메일및SMS전송(평가) - 발송ID 설정 다건 조회  -->
		<select parameterType="map" resultType="cMap" id="getMailSmsMgrList1">

				<![CDATA[
					SELECT ENTER_CD
						 , SEND_SEQ
						 , BIZ_CD
						 , NOTE_ITEM1
						 , NOTE_ITEM2
						 , NOTE_ITEM3
						 , NOTE_ITEM4
						 , NOTE_ITEM5
						 , SEND_TYPE
						 , SEND_NAME
						 , SEND_MAIL
						 , SEND_HP
						 , TITLE
						 , REPLACE(CONTENTS,#{hrDomain},#{recDomain}) as CONTENTS
						 , SEND_YN						 
						 , '0' AS DETAIL
						 , CASE WHEN REGEXP_REPLACE(A.CONTENTS, '<[^>]*>|\&([^;])*;', '') IS NULL OR LENGTH(REGEXP_REPLACE(A.CONTENTS, '<[^>]*>|\&([^;])*;', '')) < 1 THEN
						             'N' 
						        ELSE 'Y' END DETAIL_YN
						 , (SELECT COUNT(1) FROM THRI108 Z WHERE Z.ENTER_CD = #{ssnEnterCd} AND Z.REF_SEQ = A.SEND_SEQ) USER_CNT_1
						 , (SELECT COUNT(1) FROM THRI108 Z WHERE Z.ENTER_CD = #{ssnEnterCd} AND Z.REF_SEQ = A.SEND_SEQ
						       AND ( REGEXP_REPLACE(Z.CONTENTS, '<[^>]*>|\&([^;])*;', '') IS NULL OR LENGTH(REGEXP_REPLACE(Z.CONTENTS, '<[^>]*>|\&([^;])*;', '')) < 1 ) ) USER_CNT_2
					  FROM THRI961 A
					 WHERE A.ENTER_CD     = #{ssnEnterCd}
					   AND A.BIZ_CD       = #{searchBizCd} ]]>
					<if test='searchNoteItem1 != null and !searchNoteItem1.equals("")'>
					   AND A.NOTE_ITEM1   = #{searchNoteItem1}
					</if>
					<if test='searchNoteItem2 != null and !searchNoteItem2.equals("")'>
					   AND A.NOTE_ITEM2   = #{searchNoteItem2}
					</if>
					<if test='searchNoteItem3 != null and !searchNoteItem3.equals("")'>
					   AND A.NOTE_ITEM3   = #{searchNoteItem3}
					</if>
					<if test='searchNoteItem4 != null and !searchNoteItem4.equals("")'>
					   AND A.NOTE_ITEM4   = #{searchNoteItem4}
					</if>
					<if test='searchNoteItem5 != null and !searchNoteItem5.equals("")'>
					   AND A.NOTE_ITEM5   = #{searchNoteItem5}
					</if>
					<if test='searchName != null and !searchName.equals("")'>
					   AND A.SEND_NAME LIKE '%' || #{searchName} || '%'
					</if>
					ORDER BY A.SEND_SEQ



		</select>
		
<!-- 메일및SMS전송(평가) - 발송ID 설정 저장 -->	
		<update parameterType="map" id="saveMailSmsMgr1">

					MERGE INTO THRI961 T
					USING	(
						SELECT ENTER_CD
							 , SEND_SEQ
							 , BIZ_CD
							 , NOTE_ITEM1
							 , NOTE_ITEM2
							 , NOTE_ITEM3
							 , NOTE_ITEM4
							 , NOTE_ITEM5
							 , SEND_TYPE
							 , SEND_NAME
							 , SEND_MAIL
							 , SEND_HP
							 , TITLE
							 , SEND_YN
							FROM	(
									SELECT	NULL AS ENTER_CD
										  , NULL AS SEND_SEQ
										  , NULL AS BIZ_CD
										  , NULL AS NOTE_ITEM1
										  , NULL AS NOTE_ITEM2
										  , NULL AS NOTE_ITEM3
										  , NULL AS NOTE_ITEM4
										  , NULL AS NOTE_ITEM5
										  , NULL AS SEND_TYPE
										  , NULL AS SEND_NAME
										  , NULL AS SEND_MAIL
										  , NULL AS SEND_HP
										  , NULL AS TITLE
										  , NULL AS SEND_YN
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT	#{ssnEnterCd}				AS ENTER_CD
									<choose><when test='rm.sendSeq and !rm.sendSeq.equals("")'>
										  , TRIM(#{rm.sendSeq})		AS SEND_SEQ
									</when><otherwise>
										  , TO_CHAR( (SELECT (NVL(MAX(SEND_SEQ),0) + ${icnt}) FROM THRI961 WHERE ENTER_CD = #{ssnEnterCd} ) )	AS  SEND_SEQ
										<bind name="icnt" value="icnt + 1" />
									</otherwise>
									</choose>
										  , TRIM(#{searchBizCd})			AS BIZ_CD
										  , TRIM(#{rm.noteItem1})		AS NOTE_ITEM1
										  , TRIM(#{rm.noteItem2})		AS NOTE_ITEM2
										  , TRIM(#{rm.noteItem3})		AS NOTE_ITEM3
										  , TRIM(#{rm.noteItem4})		AS NOTE_ITEM4
										  , TRIM(#{rm.noteItem5})		AS NOTE_ITEM5
										  , TRIM(#{rm.sendType})		AS SEND_TYPE
										  , TRIM(#{rm.sendName})		AS SEND_NAME
										  , TRIM(#{rm.sendMail})		AS SEND_MAIL
										  , TRIM(#{rm.sendHp})			AS SEND_HP
										  , TRIM(#{rm.title})			AS TITLE
										  , TRIM(#{rm.sendYn})			AS SEND_YN
										FROM	DUAL
</foreach>
								) WHERE ENTER_CD IS NOT NULL
							) S
					ON (	T.ENTER_CD      	= S.ENTER_CD      
						AND T.SEND_SEQ       	= S.SEND_SEQ       
					)
                    WHEN MATCHED THEN
						UPDATE SET	 
							  T.BIZ_CD        	= S.BIZ_CD        
							, T.NOTE_ITEM1    	= S.NOTE_ITEM1    
							, T.NOTE_ITEM2    	= S.NOTE_ITEM2     
							, T.NOTE_ITEM3    	= S.NOTE_ITEM3    
							, T.NOTE_ITEM4    	= S.NOTE_ITEM4    
							, T.NOTE_ITEM5    	= S.NOTE_ITEM5    
							, T.SEND_TYPE     	= S.SEND_TYPE     
							, T.SEND_NAME     	= S.SEND_NAME     
							, T.SEND_MAIL     	= S.SEND_MAIL     
							, T.SEND_HP       	= S.SEND_HP        
							, T.TITLE         	= S.TITLE         
							, T.SEND_YN		  	= S.SEND_YN		   					
							, T.CHKDATE			= SYSDATE
							, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT 
						(
							  T.ENTER_CD
							, T.SEND_SEQ
							, T.BIZ_CD
							, T.NOTE_ITEM1
							, T.NOTE_ITEM2
							, T.NOTE_ITEM3
							, T.NOTE_ITEM4
							, T.NOTE_ITEM5
							, T.SEND_TYPE
							, T.SEND_NAME
							, T.SEND_MAIL
							, T.SEND_HP
							, T.TITLE
							, T.SEND_YN							
							, T.CHKDATE
							, T.CHKID
						) 
						VALUES 
						(
							  S.ENTER_CD
							, S.SEND_SEQ
							, S.BIZ_CD
							, S.NOTE_ITEM1
							, S.NOTE_ITEM2
							, S.NOTE_ITEM3
							, S.NOTE_ITEM4
							, S.NOTE_ITEM5
							, S.SEND_TYPE
							, S.SEND_NAME
							, S.SEND_MAIL
							, S.SEND_HP
							, S.TITLE
							, NVL(S.SEND_YN, 'N')				
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

<!-- 메일및SMS전송(평가) - 발송ID 설정 삭제 -->
		<delete parameterType="map" id="deleteMailSmsMgr1">

					DELETE FROM THRI961
					WHERE 	(ENTER_CD, SEND_SEQ) IN 	(  (NULL, NULL)
<foreach item="rm" collection="deleteRows" >
						, (#{ssnEnterCd}, TRIM( #{rm.sendSeq} ) )
</foreach>
										)
		</delete>
		
<!-- 메일및SMS전송(평가) - 발송ID 설정 삭제 -->
		<delete parameterType="map" id="deleteMailSmsMgr11">


					DELETE FROM THRI108
					WHERE 	(ENTER_CD, REF_SEQ) IN 	(  (NULL, NULL)
<foreach item="rm" collection="deleteRows" >
						, (#{ssnEnterCd}, TRIM( #{rm.sendSeq} ) )
</foreach>
										)
		</delete>
		
<!-- 메일및SMS전송(평가) - 발송ID - 대상자생성 프로시저 -->
		<update parameterType="map" id="prcMailSmsMgrPap1" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_MAIL_TARGET_CRE(
				#{sqlCode,mode=OUT,jdbcType=VARCHAR},
				#{sqlErrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{searchSendSeq,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

<!-- 메일및SMS전송(평가) - 발송ID - 발송내용 일괄생성 프로시저 -->
		<update parameterType="map" id="prcMailSmsMgrPap2" statementType="CALLABLE">
		<![CDATA[
			{CALL P_PAPN_MAIL_CONTENT_CRE(
				#{sqlCode,mode=OUT,jdbcType=VARCHAR},
				#{sqlErrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{searchSendSeq,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

<!-- 메일및SMS전송(채용) - 발송ID - 대상자생성 프로시저 -->
		<update parameterType="map" id="prcMailSmsMgrStf1" statementType="CALLABLE">
		<![CDATA[
			{CALL P_STF_MAIL_TARGET_CRE(
				#{sqlCode,mode=OUT,jdbcType=VARCHAR},
				#{sqlErrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{searchSendSeq,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

<!-- 메일및SMS전송(채용) - 발송ID - 발송내용 일괄생성 프로시저 -->
		<update parameterType="map" id="prcMailSmsMgrStf2" statementType="CALLABLE">
		<![CDATA[
			{CALL P_STF_MAIL_CONTENT_CRE(
				#{sqlCode,mode=OUT,jdbcType=VARCHAR},
				#{sqlErrm,mode=OUT,jdbcType=VARCHAR},
				#{ssnEnterCd,mode=IN,jdbcType=VARCHAR},
				#{searchSendSeq,mode=IN,jdbcType=VARCHAR},
				#{ssnSabun,mode=IN,jdbcType=VARCHAR})}
		]]>
		</update>

<!-- 메일및SMS전송(평가) - 발송ID - 발송 set  -->
		<update parameterType="map" id="updateMailSmsMgrSendFlag1">

				<![CDATA[
				UPDATE THRI961 A
				   SET SEND_YN    = 'Y'				
				 WHERE A.ENTER_CD = #{ssnEnterCd}
				   AND A.SEND_SEQ = TRIM( #{searchSendSeq} )
				]]>


		</update>
		<update parameterType="map" id="updateMailSmsMgrSendFlag2">

				<![CDATA[
				UPDATE THRI108 A
				   SET SEND_STATUS_CD = 'N'
				 WHERE A.ENTER_CD    = #{ssnEnterCd}
				   AND A.REF_SEQ     = TRIM( #{searchSendSeq} )
				   AND A.SEND_STATUS_CD != 'Y'
				]]>


		</update>


<!-- 메일및SMS전송(평가) - 발송ID별 상세내용 팝업  -->
		<select parameterType="map" resultType="cMap" id="getMailSmsMgrPopupMap1">

				<![CDATA[
					SELECT ENTER_CD
						 , SEND_SEQ
						 , BIZ_CD
						 , NOTE_ITEM1
						 , NOTE_ITEM2
						 , NOTE_ITEM3
						 , NOTE_ITEM4
						 , NOTE_ITEM5
						 , SEND_TYPE
						 , SEND_NAME
						 , SEND_MAIL
						 , SEND_HP
						 , TITLE
						 , REPLACE(CONTENTS,#{recDomain},#{hrDomain}) AS CONTENTS
						 , SEND_YN						 
						 , '0' AS DETAIL
						 , CASE WHEN REGEXP_REPLACE(A.CONTENTS, '<[^>]*>|\&([^;])*;', '') IS NULL OR LENGTH(REGEXP_REPLACE(A.CONTENTS, '<[^>]*>|\&([^;])*;', '')) < 1 THEN
									 'Y' ELSE 'N' END DETAIL_YN
						 , CASE WHEN (SELECT COUNT(1) FROM THRI108 Z WHERE Z.ENTER_CD = A.ENTER_CD AND Z.REF_SEQ = A.SEND_SEQ
						                 AND (REGEXP_REPLACE(Z.CONTENTS, '<[^>]*>|\&([^;])*;', '') IS NULL OR LENGTH(REGEXP_REPLACE(Z.CONTENTS, '<[^>]*>|\&([^;])*;', '')) < 1) ) > 0 THEN 'N' 
						        ELSE 'Y' END CONTENTS_FLAG
						 , CASE WHEN (SELECT COUNT(1) FROM THRI108 Z WHERE Z.ENTER_CD = A.ENTER_CD AND Z.REF_SEQ = A.SEND_SEQ ) > 0 THEN 'Y' 
						        ELSE 'N' END RECE_USER_FLAG
					  FROM THRI961 A
					 WHERE A.ENTER_CD     = #{ssnEnterCd}
					   AND A.SEND_SEQ     = TRIM( #{searchSendSeq} )
				]]>


		</select>


<!-- 메일및SMS전송(채용) - 발송ID별 상세내용 팝업 저장 -->
		<update parameterType="map" id="updateMailSmsMgrPopup1">

				<![CDATA[
   					UPDATE THRI961
   					   SET 
						   CONTENTS			= #{content}
   						 , CHKDATE      	= SYSDATE
						 , CHKID        	= #{ssnSabun}
					 WHERE ENTER_CD         = #{ssnEnterCd}
					   AND SEND_SEQ         = #{sendSeq}
				]]>
		</update>
				

<!-- 메일및SMS전송(평가) - 대상자 다건 조회  -->
		<select parameterType="map" resultType="cMap" id="getMailSmsMgrList2">

				<![CDATA[
					SELECT ENTER_CD
						 , SEQ
						 , MAIL_TYPE
						 , SEND_TYPE
						 , BIZ_DETAIL_NM
						 , RECEIVE_SABUN
						 , RECEIVE_NAME
						 , RECEIVE_MAIL
						 , RECEIVE_HP
						 , CC_MAIL
						 , SEND_SABUN
						 , SEND_NAME
						 , SEND_MAIL
						 , SEND_HP
						 , TO_CHAR(SEND_DATE, 'YYYYMMDDHH24MISS') SEND_DATE
						 , SEND_STATUS_CD
						 , RECEIVE_YN
						 , RECEIVE_DATE
						 , TITLE
						 , ACTION_DATE
						 , REF_SEQ
						 , '0' AS DETAIL
    	                 , CASE WHEN REGEXP_REPLACE(A.CONTENTS, '<[^>]*>|\&([^;])*;', '') IS NULL OR LENGTH(REGEXP_REPLACE(A.CONTENTS, '<[^>]*>|\&([^;])*;', '')) < 1 THEN 'N'
    	                        ELSE 'Y' END DETAIL_YN
    	                 , REGEXP_REPLACE(A.CONTENTS, '<[^>]*>|\&([^;])*;', '') AS CONTENTS
					  FROM THRI108 A
					 WHERE A.ENTER_CD     = #{ssnEnterCd}
					   AND A.REF_SEQ      = TRIM( #{searchRefSeq} )
					 ORDER BY A.SEQ 
				]]>


		</select>

<!-- 메일및SMS전송(평가) - 대상자 저장 -->	
		<update parameterType="map" id="saveMailSmsMgr2">


					MERGE INTO THRI108 T
					USING	(
						SELECT ENTER_CD
							 , SEQ
							 , MAIL_TYPE
							 , SEND_TYPE
							 , BIZ_DETAIL_NM
							 , RECEIVE_SABUN
							 , RECEIVE_NAME
							 , RECEIVE_MAIL
							 , RECEIVE_HP
							 , CC_MAIL
							 , SEND_SABUN
							 , SEND_NAME
							 , SEND_MAIL
							 , SEND_HP
							 , TITLE
							 , REF_SEQ
							FROM	(
									SELECT	NULL AS ENTER_CD
										  , NULL AS SEQ
										  , NULL AS MAIL_TYPE
										  , NULL AS SEND_TYPE
										  , NULL AS BIZ_DETAIL_NM
										  , NULL AS RECEIVE_SABUN
										  , NULL AS RECEIVE_NAME
										  , NULL AS RECEIVE_MAIL
										  , NULL AS RECEIVE_HP
										  , NULL AS CC_MAIL
										  , NULL AS SEND_SABUN
										  , NULL AS SEND_NAME
										  , NULL AS SEND_MAIL
										  , NULL AS SEND_HP
										  , NULL AS TITLE
										  , NULL AS REF_SEQ
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT	#{ssnEnterCd}				AS ENTER_CD
									<choose><when test='rm.seq != null and !rm.seq.equals("")'>
										  , TRIM(#{rm.seq})			AS SEQ
									</when><otherwise>
										  , F_COM_GET_SEQ('MAIL')
									</otherwise>
									</choose>
										  , TRIM(#{rm.mailType})		AS MAIL_TYPE
										  , TRIM(#{rm.sendType})		AS SEND_TYPE
										  , TRIM(#{rm.bizDetailNm})		AS BIZ_DETAIL_NM
										  , TRIM(#{rm.receiveSabun})	AS RECEIVE_SABUN
										  , TRIM(#{rm.receiveName})		AS RECEIVE_NAME
										  , TRIM(#{rm.receiveMail})		AS RECEIVE_MAIL
										  , TRIM(#{rm.receiveHp})		AS RECEIVE_HP
										  , TRIM(#{rm.ccMail})			AS CC_MAIL
										  , TRIM(#{rm.sendSabun})		AS SEND_SABUN
										  , TRIM(#{rm.sendName})		AS SEND_NAME
										  , TRIM(#{rm.sendMail})		AS SEND_MAIL
										  , TRIM(#{rm.sendHp})			AS SEND_HP
										  , TRIM(#{rm.title})			AS TITLE
										  , TRIM(#{rm.refSeq})			AS REF_SEQ
										FROM	DUAL
</foreach>
								) WHERE ENTER_CD IS NOT NULL
							) S
					ON (	T.ENTER_CD      = S.ENTER_CD      
						AND T.SEQ       	= S.SEQ       
					)
					WHEN MATCHED THEN
						UPDATE SET	 
									  T.MAIL_TYPE     	= S.MAIL_TYPE      
									, T.SEND_TYPE     	= S.SEND_TYPE     
									, T.BIZ_DETAIL_NM 	= S.BIZ_DETAIL_NM 
									, T.RECEIVE_SABUN 	= S.RECEIVE_SABUN 
									, T.RECEIVE_NAME  	= S.RECEIVE_NAME  
									, T.RECEIVE_MAIL  	= S.RECEIVE_MAIL   
									, T.RECEIVE_HP    	= S.RECEIVE_HP     
									, T.CC_MAIL       	= S.CC_MAIL        
									, T.SEND_SABUN    	= S.SEND_SABUN    
									, T.SEND_NAME     	= S.SEND_NAME     
									, T.SEND_MAIL     	= S.SEND_MAIL      
									, T.SEND_HP       	= S.SEND_HP       
									, T.TITLE         	= S.TITLE          
									, T.REF_SEQ       	= S.REF_SEQ        
									, T.CHKDATE			= SYSDATE
									, T.CHKID			= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT 
						(
							  T.ENTER_CD
							, T.SEQ
							, T.MAIL_TYPE
							, T.SEND_TYPE
							, T.BIZ_DETAIL_NM
							, T.RECEIVE_SABUN
							, T.RECEIVE_NAME
							, T.RECEIVE_MAIL
							, T.RECEIVE_HP
							, T.CC_MAIL
							, T.SEND_SABUN
							, T.SEND_NAME
							, T.SEND_MAIL
							, T.SEND_HP
							, T.SEND_STATUS_CD
							, T.TITLE
							, T.REF_SEQ
							, T.CHKDATE
							, T.CHKID
						) 
						VALUES 
						(
							  S.ENTER_CD
							, S.SEQ
							, S.MAIL_TYPE
							, S.SEND_TYPE
							, S.BIZ_DETAIL_NM
							, S.RECEIVE_SABUN
							, S.RECEIVE_NAME
							, S.RECEIVE_MAIL
							, S.RECEIVE_HP
							, S.CC_MAIL
							, S.SEND_SABUN
							, S.SEND_NAME
							, S.SEND_MAIL
							, S.SEND_HP
							, 'T'
							, S.TITLE
							, S.REF_SEQ
							, SYSDATE
							, #{ssnSabun}
						)
		</update>

<!-- 메일및SMS전송(평가) - 대상자 삭제 -->
		<delete parameterType="map" id="deleteMailSmsMgr2">


					DELETE FROM THRI108
					WHERE 	(ENTER_CD, SEQ) IN 	(  (NULL, NULL)
<foreach item="rm" collection="deleteRows" >
						, (#{ssnEnterCd}, TRIM( #{rm.seq} ) )
</foreach>
										)
		</delete>


<!-- 메일및SMS전송(평가) - 대상자 - 상세내용 팝업  -->
		<select parameterType="map" resultType="cMap" id="getMailSmsMgrPopupMap2">

				<![CDATA[
					SELECT ENTER_CD
						 , SEQ			AS SEND_SEQ
						 , MAIL_TYPE
						 , SEND_TYPE
						 , BIZ_DETAIL_NM
						 , TITLE
						 , REPLACE(CONTENTS,#{recDomain},#{hrDomain}) AS CONTENTS
						 , REF_SEQ						 
					  FROM THRI108 A
					 WHERE A.ENTER_CD     = #{ssnEnterCd}
					   AND A.SEQ          = TRIM( #{searchSendSeq} )
				]]>


		</select>


<!-- 메일및SMS전송(채용) - 대상자별 상세내용 팝업 저장 -->
		<update parameterType="map" id="updateMailSmsMgrPopup2">

				<![CDATA[
   					UPDATE THRI108
   					   SET 
						   CONTENTS			= #{content}
   						 , CHKDATE      	= SYSDATE
						 , CHKID        	= #{ssnSabun}
					 WHERE ENTER_CD         = #{ssnEnterCd}
					   AND SEQ              = #{sendSeq}
				]]>

		</update>
		
		

</mapper>