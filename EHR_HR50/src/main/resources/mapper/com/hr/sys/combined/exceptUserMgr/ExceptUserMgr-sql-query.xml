<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="sys.combined.exceptUserMgr">
<!-- 		예외사용자관리 조회 -->
		<select parameterType="map" resultType="cMap" id="getExceptUserMgrList">

					 SELECT '0' AS DETAIL
					 		, A.ENTER_CD
					 		, A.SABUN
							, A.NAME
							, A.ENAME1
							, A.LOCATION_CD
							, A.ORG_CD
							, F_COM_GET_ORG_NM(A.ENTER_CD, A.ORG_CD, TO_CHAR(SYSDATE, 'YYYYMMDD'), #{ssnLocaleCd}) AS ORG_NM
							, CRYPTIT.DECRYPT(A.RES_NO, A.ENTER_CD) AS RES_NO
							, A.MAIL_ID
							, A.JIKWEE_CD
							, A.JIKCHAK_CD
							, A.BIR_YMD
							, A.LUN_TYPE
							, A.MANAGE_CD
							, A.EMP_YMD
							, A.FPROM_YMD
							, A.RET_YMD
							, A.PWARE_YN
							, A.PWARE_ID_YN
							, A.OUTLOOK_YN
							, A.OFFICE_TEL
							, A.HOME_TEL
							, A.FAX_NO
							, A.HAND_PHONE
							, A.ZIP
							, A.ADDR1
							, A.ADDR2
							, A.AGBN_YN
							, A.BGBN_YN
							, A.CGBN_YN
							, A.DGBN_YN
							, A.T_LOCATION_CD
							, A.T_JIKWEE_CD
							, A.T_JIKCHAK_CD
					   FROM THRM941 A
					 <choose><when test='searchEnterCd != null and !searchEnterCd.equals("")'>
					 	WHERE A.ENTER_CD = #{searchEnterCd}
					</when>
						 <otherwise>
				 	 	WHERE A.ENTER_CD IS NOT NULL
					 </otherwise>
					 </choose>
 					 <if test='searchSbNm != null and !searchSbNm.equals("")'>
 					      AND ( A.NAME LIKE '%'|| #{searchSbNm} ||'%' OR A.SABUN LIKE '%'|| #{searchSbNm} ||'%' )
					 </if>
					   AND A.EMP_YMD BETWEEN NVL(REPLACE(#{searchFromEmpYmd},'-',''),'00000000') AND NVL(REPLACE(#{searchToEmpYmd},'-',''), '99991231')
					 <if test='searchExptGbn != null and searchExptGbn.equals("A")'>
					   AND A.AGBN_YN = 'Y'
					 </if>
					 <if test='searchExptGbn != null and searchExptGbn.equals("B")'>
					   AND A.BGBN_YN = 'Y'
					 </if>
					<if test='searchExptGbn != null and searchExptGbn.equals("C")'>
					   AND A.CGBN_YN = 'C'
					 </if>
					<if test='searchExptGbn != null and searchExptGbn.equals("D")'>
					   AND A.DGBN_YN = 'Y'
					</if>
					   ORDER BY A.EMP_YMD, A.ENTER_CD


		</select>

<!-- 		예외사용자관리 저장 -->
		<update parameterType="map" id="saveExceptUserMgr">

					MERGE INTO THRM941 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.SABUN
									, A.NAME
									, A.ENAME1
									, A.LOCATION_CD
									, A.ORG_CD
									, A.RES_NO
									, A.MAIL_ID
									, A.JIKWEE_CD
									, A.JIKCHAK_CD
									, A.BIR_YMD
									, A.LUN_TYPE
									, A.MANAGE_CD
									, A.EMP_YMD
									, A.FPROM_YMD
									, A.RET_YMD
									, A.PWARE_YN
									, A.PWARE_ID_YN
									, A.OUTLOOK_YN
									, A.OFFICE_TEL
									, A.HOME_TEL
									, A.FAX_NO
									, A.HAND_PHONE
									, A.ZIP
									, A.ADDR1
									, A.ADDR2
									, A.AGBN_YN
									, A.BGBN_YN
									, A.CGBN_YN
									, A.DGBN_YN
									, A.T_LOCATION_CD
									, A.T_JIKWEE_CD
									, A.T_JIKCHAK_CD
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS SABUN
											, NULL		AS NAME
											, NULL		AS ENAME1
											, NULL		AS LOCATION_CD
											, NULL		AS ORG_CD
											, NULL		AS RES_NO
											, NULL      AS MAIL_ID
											, NULL		AS JIKWEE_CD
											, NULL		AS JIKCHAK_CD
											, NULL		AS BIR_YMD
											, NULL		AS LUN_TYPE
											, NULL		AS MANAGE_CD
											, NULL		AS EMP_YMD
											, NULL		AS FPROM_YMD
											, NULL		AS RET_YMD
											, NULL		AS PWARE_YN
											, NULL		AS PWARE_ID_YN
											, NULL		AS OUTLOOK_YN
											, NULL		AS OFFICE_TEL
											, NULL		AS HOME_TEL
											, NULL		AS FAX_NO
											, NULL		AS HAND_PHONE
											, NULL		AS ZIP
											, NULL		AS ADDR1
											, NULL		AS ADDR2
											, NULL		AS AGBN_YN
											, NULL		AS BGBN_YN
											, NULL		AS CGBN_YN
											, NULL		AS DGBN_YN
											, NULL		AS T_LOCATION_CD
											, NULL		AS T_JIKWEE_CD
											, NULL		AS T_JIKCHAK_CD
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											  TRIM( #{rm.enterCd} )		AS ENTER_CD
											, TRIM( #{rm.sabun} )		AS SABUN
											, TRIM( #{rm.name} )		AS NAME
											, TRIM( #{rm.ename1} )		AS ENAME1
											, TRIM( #{rm.locationCd} )	AS LOCATION_CD
											, TRIM( #{rm.orgCd} )		AS ORG_CD
											, TRIM( #{rm.resNo} )		AS RES_NO
											, TRIM( #{rm.mailId} )		AS MAIL_ID
											, TRIM( #{rm.jikweeCd} )	AS JIKWEE_CD
											, TRIM( #{rm.jikchakCd} )	AS JIKCHAK_CD
											, TRIM( #{rm.birYmd} )		AS BIR_YMD
											, TRIM( #{rm.lunType} )		AS LUN_TYPE
											, TRIM( #{rm.manageCd} )	AS MANAGE_CD
											, TRIM( #{rm.empYmd} )		AS EMP_YMD
											, TRIM( #{rm.fpromYmd} )	AS FPROM_YMD
											, TRIM( #{rm.retYmd} )		AS RET_YMD
											, TRIM( #{rm.pwareYn} )		AS PWARE_YN
											, TRIM( #{rm.pwareIdYn} )	AS PWARE_ID_YN
											, TRIM( #{rm.outlookYn} )	AS OUTLOOK_YN
											, TRIM( #{rm.officeTel} )	AS OFFICE_TEL
											, TRIM( #{rm.homeTel} )		AS HOME_TEL
											, TRIM( #{rm.faxNo} )		AS FAX_NO
											, TRIM( #{rm.handPhone} )	AS HAND_PHONE
											, TRIM( #{rm.zip} )			AS ZIP
											, TRIM( #{rm.addr1} )		AS ADDR1
											, TRIM( #{rm.addr2} )		AS ADDR2
											, TRIM( #{rm.agbnYn} )		AS AGBN_YN
											, TRIM( #{rm.bgbnYn} )		AS BGBN_YN
											, TRIM( #{rm.cgbnYn} )		AS CGBN_YN
											, TRIM( #{rm.dgbnYn} )		AS DGBN_YN
											, TRIM( #{rm.tLocationCd} )		AS T_LOCATION_CD
											, TRIM( #{rm.tJikweeCd} )		AS T_JIKWEE_CD
											, TRIM( #{rm.tJikchakCd} )		AS T_JIKCHAK_CD
											FROM   DUAL
</foreach>
									) A WHERE A.SABUN IS NOT NULL
							) S
					ON ( T.ENTER_CD = S.ENTER_CD AND T.SABUN = UPPER(S.SABUN) )
					WHEN MATCHED THEN
						UPDATE SET	  T.NAME       	= S.NAME
									, T.ENAME1     	= S.ENAME1
									, T.LOCATION_CD	= S.LOCATION_CD
									, T.ORG_CD     	= S.ORG_CD
									, T.RES_NO     	= CRYPTIT.ENCRYPT(UPPER(S.RES_NO),S.ENTER_CD)
									, T.MAIL_ID    	= S.MAIL_ID
									, T.JIKWEE_CD  	= S.JIKWEE_CD
									, T.JIKCHAK_CD 	= S.JIKCHAK_CD
									, T.BIR_YMD    	= S.BIR_YMD
									, T.LUN_TYPE   	= S.LUN_TYPE
									, T.MANAGE_CD  	= S.MANAGE_CD
									, T.EMP_YMD    	= S.EMP_YMD
									, T.FPROM_YMD  	= S.FPROM_YMD
									, T.RET_YMD    	= S.RET_YMD
									, T.PWARE_YN   	= S.PWARE_YN
									, T.PWARE_ID_YN	= S.PWARE_ID_YN
									, T.OUTLOOK_YN 	= S.OUTLOOK_YN
									, T.OFFICE_TEL 	= S.OFFICE_TEL
									, T.HOME_TEL   	= S.HOME_TEL
									, T.FAX_NO     	= S.FAX_NO
									, T.HAND_PHONE 	= S.HAND_PHONE
									, T.ZIP        	= S.ZIP
									, T.ADDR1      	= S.ADDR1
									, T.ADDR2      	= S.ADDR2
									, T.AGBN_YN     = S.AGBN_YN
									, T.BGBN_YN     = S.BGBN_YN
									, T.CGBN_YN     = S.CGBN_YN
									, T.DGBN_YN     = S.DGBN_YN
									, T.T_LOCATION_CD     = S.T_LOCATION_CD
									, T.T_JIKWEE_CD       = S.T_JIKWEE_CD
									, T.T_JIKCHAK_CD      = S.T_JIKCHAK_CD
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
						      T.ENTER_CD
							, T.SABUN
							, T.NAME
							, T.ENAME1
							, T.LOCATION_CD
							, T.ORG_CD
							, T.RES_NO
							, T.MAIL_ID
							, T.JIKWEE_CD
							, T.JIKCHAK_CD
							, T.BIR_YMD
							, T.LUN_TYPE
							, T.MANAGE_CD
							, T.EMP_YMD
							, T.FPROM_YMD
							, T.RET_YMD
							, T.PWARE_YN
							, T.PWARE_ID_YN
							, T.OUTLOOK_YN
							, T.OFFICE_TEL
							, T.HOME_TEL
							, T.FAX_NO
							, T.HAND_PHONE
							, T.ZIP
							, T.ADDR1
							, T.ADDR2
							, T.AGBN_YN
							, T.BGBN_YN
							, T.CGBN_YN
							, T.DGBN_YN
							, T.T_LOCATION_CD
							, T.T_JIKWEE_CD
							, T.T_JIKCHAK_CD
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.SABUN
							, S.NAME
							, S.ENAME1
							, S.LOCATION_CD
							, S.ORG_CD
							, CRYPTIT.ENCRYPT(S.RES_NO,S.ENTER_CD)
							, S.MAIL_ID
							, S.JIKWEE_CD
							, S.JIKCHAK_CD
							, S.BIR_YMD
							, S.LUN_TYPE
							, S.MANAGE_CD
							, S.EMP_YMD
							, S.FPROM_YMD
							, S.RET_YMD
							, S.PWARE_YN
							, S.PWARE_ID_YN
							, S.OUTLOOK_YN
							, S.OFFICE_TEL
							, S.HOME_TEL
							, S.FAX_NO
							, S.HAND_PHONE
							, S.ZIP
							, S.ADDR1
							, S.ADDR2
							, S.AGBN_YN
							, S.BGBN_YN
							, S.CGBN_YN
							, S.DGBN_YN
							, S.T_LOCATION_CD
							, S.T_JIKWEE_CD
							, S.T_JIKCHAK_CD
							, SYSDATE
							, #{ssnSabun}
						)


		</update>
<!-- 		예외사용자관리 삭제 -->
		<delete parameterType="map" id="deleteExceptUserMgr">

					DELETE FROM THRM941
					WHERE ENTER_CD||'_'||SABUN IN (  NULL
<foreach item="rm" collection="deleteRows" >
						,
										<if test='rm.enterCd != null and !rm.enterCd.equals("")'>
										<if test='rm.sabun != null and !rm.sabun.equals("")'>
											TRIM(#{rm.enterCd})||'_'||TRIM(#{rm.sabun})
										</if>
										</if>
</foreach>
										)



		</delete>


</mapper>