<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

	<mapper namespace="sys.security.authGrpUserMgr">
<!-- 		권한그룹사용자관리 조회 -->
		<select parameterType="map" resultType="cMap" id="getAuthGrpUserMgrSheet1List">

				<![CDATA[
					SELECT GRP_CD, NVL( F_COM_GET_LANGUAGE_MAPPING (#{ssnEnterCd}, 'tsys307', LANGUAGE_CD, #{ssnLocaleCd}), GRP_NM) AS GRP_NM, COMMON_YN, DATA_RW_TYPE, ENTER_ALL_YN, SEARCH_TYPE, SEQ
					 FROM TSYS307
					WHERE ENTER_CD = TRIM(#{ssnEnterCd})
					ORDER BY SEQ
				]]>


		</select>

		<select parameterType="map" resultType="cMap" id="getAuthGrpUserMgrSheet2List">

				<![CDATA[
					SELECT A.SABUN
					     , F_COM_GET_NAMES(A.ENTER_CD,A.SABUN) AS NAME
					     , F_COM_GET_NAMES(A.ENTER_CD,A.SABUN,'ALIAS') AS ALIAS
					     , F_COM_GET_JIKWEE_NM (A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE,'YYYYMMDD')) AS JIKWEE_NM
             		   	 , F_COM_GET_JIKGUB_NM (A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE,'YYYYMMDD')) AS JIKGUB_NM
					     , A.GRP_CD
					     , A.DATA_RW_TYPE
					     , A.SEARCH_TYPE
					     , F_COM_GET_ORG_NM2(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE,'YYYYMMDD'), #{ssnLocaleCd}) ORG_NM
					     , CASE WHEN B.NAME = F_ORG_GET_CHIEF_NAME('WIS', C.ORG_CD,TO_CHAR(SYSDATE,'YYYYMMDD'), #{ssnLocaleCd}) THEN 0 ELSE 1 END HEAD_YN
					     , 0 AS AUTH_GROUP
					     , NVL(A.AUTO_YN,'N') AS AUTO_YN
					FROM TSYS313 A
				   INNER JOIN THRM100 B
				      ON A.ENTER_CD = B.ENTER_CD
					 AND A.SABUN = B.SABUN
				   INNER JOIN THRM151 C
				      ON B.ENTER_CD = C.ENTER_CD
					 AND B.SABUN = C.SABUN
					 AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN C.SDATE AND NVL(C.EDATE, '99991231')
				   WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
					 AND A.GRP_CD = TRIM(#{searchGrpCd})
					         ]]>
				<if test='searchName != null and !searchName.equals("")'>
					 AND (F_COM_GET_NAMES(A.ENTER_CD, A.SABUN) LIKE '%'||TRIM( #{searchName} )||'%'
					   OR A.SABUN LIKE '%'||TRIM( #{searchName} )||'%'
					   OR F_COM_GET_NAMES(A.ENTER_CD, A.SABUN, 'ALIAS') LIKE '%'||TRIM( #{searchName} )||'%')
				</if>
					ORDER BY F_COM_JIKJE_SORT(A.ENTER_CD, A.SABUN, TO_CHAR(SYSDATE, 'YYYYMMDD'))



		</select>

<!-- 		권한그룹사용자관리 저장 -->
		<update parameterType="map" id="saveAuthGrpUserMgr">

					MERGE INTO TSYS313 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.GRP_CD
									, A.SABUN
									, A.DATA_RW_TYPE
									, A.SEARCH_TYPE
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS GRP_CD
											, NULL		AS SABUN
											, NULL		AS DATA_RW_TYPE
											, NULL		AS SEARCH_TYPE
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											  #{ssnEnterCd}			AS ENTER_CD
											, TRIM( #{rm.grpCd} )	AS GRP_CD
											, TRIM( #{rm.sabun} )	AS SABUN
											, TRIM( #{rm.dataRwType} )	AS DATA_RW_TYPE
											, TRIM( #{rm.searchType} )	AS SEARCH_TYPE
											FROM   DUAL
</foreach>
									) A WHERE A.GRP_CD IS NOT NULL AND A.SABUN IS NOT NULL
							) S
					ON ( T.ENTER_CD = S.ENTER_CD AND T.GRP_CD = S.GRP_CD AND T.SABUN = S.SABUN )
					WHEN MATCHED THEN
						UPDATE SET	  T.DATA_RW_TYPE	= S.DATA_RW_TYPE
									, T.SEARCH_TYPE	= S.SEARCH_TYPE
									, T.CHKDATE	= SYSDATE
									, T.CHKID	= #{ssnSabun}
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.GRP_CD
							, T.SABUN
							, T.DATA_RW_TYPE
							, T.SEARCH_TYPE
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.GRP_CD
							, S.SABUN
							, S.DATA_RW_TYPE
							, S.SEARCH_TYPE
							, SYSDATE
							, #{ssnSabun}
						)



		</update>

		<!-- 권한그룹사용자관리 삭제 -->
		<delete parameterType="map" id="deleteAuthGrpUserMgr_TSYS313">

					DELETE	FROM TSYS313
					WHERE 	(ENTER_CD, GRP_CD, SABUN) IN ( (NULL,NULL,NULL)
					<foreach item="rm" collection="deleteRows" >
						,
						<if test='rm.sabun != null and !rm.sabun.equals("")'>
							( TRIM(#{ssnEnterCd}), TRIM(#{rm.grpCd}), TRIM(#{rm.sabun}) )
						</if>
					</foreach>
														 )



		</delete>
		<delete parameterType="map" id="deleteAuthGrpUserMgr_TSYS319">

					DELETE	FROM TSYS319
					WHERE 	(ENTER_CD, GRP_CD, SABUN) IN ( (NULL,NULL,NULL)
					<foreach item="rm" collection="deleteRows" >
						,
						<if test='rm.sabun != null and !rm.sabun.equals("")'>
							( TRIM(#{ssnEnterCd}), TRIM(#{rm.grpCd}), TRIM(#{rm.sabun}) )
						</if>
					</foreach>
														 )



		</delete>

<!-- 		권한범위설정 팝업 조회 -->
		<select parameterType="map" resultType="cMap" id="getAuthGrpUserMgrScopePopupSheet1List">

				<![CDATA[
					SELECT A.SABUN, C.AUTH_SCOPE_CD, C.AUTH_SCOPE_NM, C.SCOPE_TYPE, C.PRG_URL, C.SQL_SYNTAX, C.TABLE_NM
					  FROM TSYS313 A
					 INNER JOIN TSYS317 B
					    ON A.ENTER_CD = B.ENTER_CD
					   AND A.GRP_CD = B.GRP_CD
					 INNER JOIN TSYS315 C
					    ON B.ENTER_CD = C.ENTER_CD
					   AND B.AUTH_SCOPE_CD = C.AUTH_SCOPE_CD
					 WHERE A.ENTER_CD = TRIM(#{ssnEnterCd})
					   AND A.SABUN = TRIM(#{searchSabun})
					   AND A.GRP_CD = TRIM(#{searchGrpCd})
					 GROUP BY A.SABUN, C.AUTH_SCOPE_CD, C.AUTH_SCOPE_NM, C.SCOPE_TYPE, C.PRG_URL, C.SQL_SYNTAX, C.TABLE_NM
					 ORDER BY C.AUTH_SCOPE_NM
				]]>


		</select>

		<select parameterType="map" resultType="cMap" id="getAuthGrpUserMgrScopePopupSheet2Query">

				<![CDATA[
					SELECT F_COM_GET_SQL_AUTH_SCOPE(#{ssnEnterCd}, #{authScopeCd}) as query
    				  FROM DUAL
				]]>


		</select>

		<select parameterType="map" resultType="cMap" id="getAuthGrpUserMgrScopePopupSheet2List">

				<![CDATA[
					SELECT B.SCOPE_VALUE, B.SCOPE_VALUE_NM
						 , DECODE((SELECT ENTER_CD
						 			 FROM TSYS319
						 			WHERE ENTER_CD = #{ssnEnterCd}
						 			  AND AUTH_SCOPE_CD = #{authScopeCd}
						 			  AND SABUN = #{searchSabun}
						 			  AND GRP_CD = #{searchGrpCd}
						 			  AND SCOPE_VALUE = B.SCOPE_VALUE), '', '0', '1') AS CHK
					  FROM ${query} B
					ORDER BY B.SEQ
				]]>


		</select>


		<select parameterType="map" resultType="cMap" id="getTmpQueryMgr">

				<![CDATA[
					 SELECT F_COM_GET_SQL_AUTH_SCOPE(${ssnEnterCd}, #{authScopeCd}) AS query FROM DUAL
				]]>


		</select>

<!-- 		권한범위 설정 팝업 생성 -->
		<update parameterType="map" id="insertAuthGrpUserMgrScopePopup">

					MERGE INTO TSYS319 T
					USING	(
							SELECT	  A.ENTER_CD
									, A.GRP_CD
									, A.SABUN
									, A.AUTH_SCOPE_CD
									, A.SCOPE_VALUE
							FROM	(
									SELECT	  NULL		AS ENTER_CD
											, NULL		AS GRP_CD
											, NULL		AS SABUN
											, NULL		AS AUTH_SCOPE_CD
											, NULL		AS SCOPE_VALUE
									FROM	DUAL
<bind name="icnt" value="1" />
<foreach item="rm" collection="mergeRows" >
							UNION ALL
									SELECT
											  #{ssnEnterCd}			AS ENTER_CD
											, TRIM( #{searchGrpCd} )	AS GRP_CD
											, TRIM( #{searchSabun} )	AS SABUN
											, TRIM( #{authScopeCd} )	AS AUTH_SCOPE_CD
											, TRIM( #{rm.scopeValue} )	AS SCOPE_VALUE
											FROM   DUAL
</foreach>
									) A WHERE A.GRP_CD IS NOT NULL
										  AND A.SABUN IS NOT NULL
										  AND A.AUTH_SCOPE_CD IS NOT NULL
										  AND A.SCOPE_VALUE IS NOT NULL
							) S
					ON ( T.ENTER_CD = S.ENTER_CD
					 AND T.GRP_CD = S.GRP_CD
					 AND T.SABUN = S.SABUN
					 AND T.AUTH_SCOPE_CD = S.AUTH_SCOPE_CD
					 AND T.SCOPE_VALUE = S.SCOPE_VALUE)
					WHEN NOT MATCHED THEN
						INSERT
						(
							  T.ENTER_CD
							, T.GRP_CD
							, T.SABUN
							, T.AUTH_SCOPE_CD
							, T.SCOPE_VALUE
							, T.CHKDATE
							, T.CHKID
						)
						VALUES
						(
							  S.ENTER_CD
							, S.GRP_CD
							, S.SABUN
							, S.AUTH_SCOPE_CD
							, S.SCOPE_VALUE
							, SYSDATE
							, #{ssnSabun}
						)



		</update>

<!-- 		권한범위 설정 팝업 삭제 -->
		<delete parameterType="map" id="deleteAuthGrpUserMgrScopePopup">

				<![CDATA[
						DELETE FROM TSYS319
						 WHERE ENTER_CD = TRIM(#{ssnEnterCd})
						   AND SABUN = TRIM(#{searchSabun})
						   AND GRP_CD = TRIM(#{searchGrpCd})
						   AND AUTH_SCOPE_CD = TRIM(#{authScopeCd})
				]]>


		</delete>

<!-- 		권한범위설정(조직) 팝업 조회 -->
		<select parameterType="map" resultType="cMap" id="getAuthGrpUserMgrScopeOrgPopupList">

				<![CDATA[
					    SELECT 	LEVEL AS "_level",
					    		PRIOR_ORG_CD AS SCOPE_VALUE_TOP,
					    		ORG_CD AS SCOPE_VALUE,
					    		F_COM_GET_ORG_NM(ENTER_CD, ORG_CD, TO_CHAR(SYSDATE, 'YYYYMMDD'), #{ssnLocaleCd}) AS SCOPE_VALUE_NM,
					    	   	DECODE((SELECT COUNT(*) FROM TSYS319 WHERE ENTER_CD = A.ENTER_CD AND SCOPE_VALUE = A.ORG_CD AND AUTH_SCOPE_CD = TRIM(#{authScopeCd}) AND SABUN = TRIM(#{searchSabun})  AND GRP_CD = TRIM(#{searchGrpCd})), 0, 0, 1) AS CHK
					    FROM (
					             SELECT T.ENTER_CD, T.PRIOR_ORG_CD, T.ORG_CD, T.SDATE, T.SEQ, T.ORG_LEVEL
					               FROM TORG105 T
					              WHERE T.ENTER_CD = TRIM(#{ssnEnterCd})
					                AND T.SDATE =
					                    ( SELECT MAX(SDATE)
					                        FROM TORG103
					                       WHERE ENTER_CD = T.ENTER_CD )
					         ) A
					    START WITH A.PRIOR_ORG_CD = '0'
					    CONNECT BY PRIOR A.ENTER_CD = A.ENTER_CD
						AND PRIOR A.SDATE = A.SDATE
						AND PRIOR A.ORG_CD = A.PRIOR_ORG_CD
						ORDER SIBLINGS BY A.PRIOR_ORG_CD, A.SEQ, A.ORG_LEVEL
				]]>


		</select>

		<select parameterType="map" resultType="cMap" id="getAuthGrpUserMgrPopList4">

				<![CDATA[
				SELECT LVL AS "_level", ORG_CHART_NM, SDATE, PRIOR_ORG_CD, ORG_CD, ORG_NM, DIRECT_YN, SEQ,
					ORG_CHIEF_SABUN, ORG_CHIEF_NAME, '0' AS EMP_CNT1, '0' AS EMP_CNT2
				FROM (SELECT LEVEL AS LVL, A.ORG_CHART_NM, A.SDATE, A.PRIOR_ORG_CD, A.ORG_CD,
						   F_COM_GET_ORG_NM(A.ENTER_CD, A.ORG_CD, REPLACE(#{searchBaseDate}, '-', '')) AS ORG_NM,
						   A.DIRECT_YN, A.SEQ,
				       F_ORG_GET_CHIEF_SABUN(A.ENTER_CD, A.ORG_CD, REPLACE(#{searchBaseDate}, '-', '')) AS ORG_CHIEF_SABUN,
				       F_ORG_GET_CHIEF_NAME(A.ENTER_CD, A.ORG_CD, REPLACE(#{searchBaseDate}, '-', '')) AS ORG_CHIEF_NAME
				  FROM TORG105 A,
				  (
				    SELECT *
				    FROM TORG103
				    WHERE ENTER_CD = #{ssnEnterCd}
				          AND REPLACE(#{searchSDate}, '-', '') BETWEEN SDATE AND NVL(EDATE, '99991231')
				    ) B
				 WHERE A.ENTER_CD = #{ssnEnterCd}
				   AND A.SDATE = REPLACE(#{searchSDate}, '-', '')
				--조직체계도------------------------------------------------------
				   AND A.ENTER_CD = B.ENTER_CD
				   AND A.SDATE = B.SDATE
				------------------------------------------------------------------
				--부서--------------------------
				 START WITH A.PRIOR_ORG_CD = '0'
				 CONNECT BY PRIOR A.ENTER_CD = A.ENTER_CD
					AND PRIOR A.SDATE = A.SDATE
					AND PRIOR A.ORG_CD = A.PRIOR_ORG_CD
				 ORDER SIBLINGS BY A.PRIOR_ORG_CD, A.SEQ )
				]]>


		</select>

		<select parameterType="map" resultType="cMap" id="getAuthGrpUserMgrPopList5">

				<![CDATA[
					SELECT A.NAME AS SCOPE_VALUE_NM, A.SABUN AS SCOPE_VALUE
					      ,B.JIKWEE_NM
					      ,B.JIKCHAK_NM
					      ,B.JIKGUB_NM
					      ,F_COM_GET_ORG_NM2(A.ENTER_CD,A.SABUN, REPLACE(#{searchBaseDate}, '-', '')) AS ORG_NM
					      , B.MANAGE_NM,
					      CASE WHEN A.NAME = F_ORG_GET_CHIEF_NAME(B.ENTER_CD,B.ORG_CD,TO_CHAR(SYSDATE,'YYYYMMDD')) THEN 0 ELSE 1 END HEAD_YN,
					        DECODE((SELECT COUNT(*) FROM TSYS319 WHERE ENTER_CD = A.ENTER_CD AND SCOPE_VALUE = A.SABUN AND AUTH_SCOPE_CD = TRIM(#{authScopeCd}) AND SABUN = TRIM(#{searchSabun})  AND GRP_CD = TRIM(#{searchGrpCd})), 0, 0, 1) AS CHK
					  FROM  THRM100 A,(SELECT *
					                 FROM     THRM151
					                WHERE     ENTER_CD = #{ssnEnterCd}
					                AND REPLACE(#{searchBaseDate}, '-', '') BETWEEN SDATE AND NVL(EDATE, '99991231'))  B,
					         TSYS005 C
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND B.ORG_CD = TRIM(#{searchOrgCd})
					   AND A.ENTER_CD = B.ENTER_CD
					   AND A.SABUN =B.SABUN
					   AND B.STATUS_CD NOT IN ('RA','RAA')
					   AND B.ENTER_CD = C.ENTER_CD(+)
					   AND B.MANAGE_CD = C.CODE(+)
					   AND C.GRCODE_CD(+)='H10030' AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN C.S_YMD AND C.E_YMD
					   ORDER BY B.JIKCHAK_CD, F_COM_GET_GRCODE_SEQ(B.ENTER_CD, 'H20010',B.JIKGUB_CD), C.SEQ
				]]>


		</select>

		<select parameterType="map" resultType="cMap" id="getAuthGrpUserMgrPopList6">

				<![CDATA[
					SELECT A.NAME AS SCOPE_VALUE_NM, A.SABUN AS SCOPE_VALUE, B.JIKWEE_NM, B.JIKCHAK_NM, B.JIKGUB_NM, F_COM_GET_ORG_NM2(A.ENTER_CD,A.SABUN, REPLACE(#{searchBaseDate}, '-', '')) AS ORG_NM, B.MANAGE_NM, --A.PART_NM,
					  DECODE((SELECT COUNT(*) FROM TSYS319 WHERE ENTER_CD = A.ENTER_CD AND SCOPE_VALUE = A.SABUN AND AUTH_SCOPE_CD = TRIM(#{authScopeCd}) AND SABUN = TRIM(#{searchSabun})  AND GRP_CD = TRIM(#{searchGrpCd})), 0, 0, 1) AS CHK
					  FROM  THRM100 A,(SELECT *
					                 FROM   THRM151
					                WHERE   ENTER_CD = #{ssnEnterCd}
					                AND REPLACE(#{searchBaseDate}, '-','') BETWEEN SDATE AND NVL(EDATE, '99991231'))  B,
							 TSYS005 C
					 WHERE A.ENTER_CD = #{ssnEnterCd}
					   AND B.ORG_CD IN (SELECT TRIM(#{searchOrgCd})
										  FROM DUAL
										 UNION
										SELECT ORG_CD
										  FROM TORG105
										 WHERE ENTER_CD = #{ssnEnterCd}
										   AND ORG_CHART_NM = #{searchOrgChartNm}
										   AND SDATE = REPLACE(#{searchSDate}, '-', '')
										 START WITH PRIOR_ORG_CD = TRIM(#{searchOrgCd})
										 CONNECT BY PRIOR ENTER_CD = ENTER_CD
											 AND PRIOR ORG_CHART_NM = ORG_CHART_NM
											 AND PRIOR SDATE = SDATE
											 AND PRIOR ORG_CD = PRIOR_ORG_CD )
					   AND A.ENTER_CD = B.ENTER_CD
					   AND A.SABUN =B.SABUN
					   AND B.STATUS_CD NOT IN ('RA','RAA')
					   AND B.ENTER_CD = C.ENTER_CD(+)
					   AND B.MANAGE_CD = C.CODE(+)
					   AND C.GRCODE_CD(+)='H10030'
					   --AND NVL(C.NOTE1,'N') = 'Y'
					   ORDER BY B.JIKCHAK_CD, F_COM_GET_GRCODE_SEQ(B.ENTER_CD, 'H20010',B.JIKGUB_CD), C.SEQ
					   --AND B.JIKWEE_CD = C.CODE(+)
					   --AND C.GRCODE_CD(+)='H20030'
					   --ORDER BY C.SEQ
				]]>


		</select>


		<!-- 대상자 선택 팝업 조회 -->
		<select parameterType="map" resultType="cMap" id="getAuthGrpUserMgrTargetPopupList">

				<![CDATA[
					  SELECT Y.PRIOR_ORG_PATH_NM2 AS ORG_PATH, X.ORG_CD, Y.ORG_NM, X.SABUN, X.NAME, 
					       X.JIKWEE_CD, X.JIKWEE_NM, X.JIKCHAK_CD, X.JIKCHAK_NM, X.JIKGUB_CD, X.JIKGUB_NM, X.JIKJONG_CD, X.JIKJONG_NM
					       , X.JIKCHAK_GUBUN_CD
					       , F_COM_GET_GRCODE_NAME(X.ENTER_CD, 'HHI04', X.JIKCHAK_GUBUN_CD) AS JIKCHAK_GUBUN_NM
					  FROM (   
					        SELECT A.ENTER_CD, B.SABUN, B.NAME, A.ORG_CD,
					               A.JIKWEE_CD, A.JIKWEE_NM, 
					               A.JIKCHAK_CD, A.JIKCHAK_NM, 
					               A.JIKGUB_CD, A.JIKGUB_NM,
					               A.JIKJONG_CD, A.JIKJONG_NM
					               , F_COM_GET_GRCODE_NOTE_VAL(A.ENTER_CD, 'H20020', A.JIKCHAK_CD, 1) AS JIKCHAK_GUBUN_CD
					          FROM THRM151 A, THRM100 B
					         WHERE A.ENTER_CD = B.ENTER_CD
					           AND A.SABUN = B.SABUN
					           AND A.ENTER_CD = #{ssnEnterCd}
					           AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN A.SDATE AND NVL(A.EDATE,'99991231')
					           AND A.STATUS_CD NOT LIKE 'R%' ]]>
					         <if test='searchSabun != null and !searchSabun.equals("")'>
				               AND (B.SABUN = #{searchSabun} OR B.NAME LIKE '%' || #{searchSabun} || '%')
							 </if>
					         <if test='searchJikgubCd != null and !searchJikgubCd.equals("")'>
				               AND A.JIKGUB_CD = #{searchJikgubCd}
							 </if>
				             <if test='searchGradeCd != null and !searchGradeCd.equals("")'>
				               AND A.GRADE_CD = #{searchGradeCd}
				             </if>
				             <if test='searchJikweeCd != null and !searchJikweeCd.equals("")'>
				               AND A.JIKWEE_CD = #{searchJikweeCd}
							 </if>
				             <if test='searchJikchakCd != null and !searchJikchakCd.equals("")'>
				               AND A.JIKCHAK_CD = #{searchJikchakCd}
							 </if>
				             <if test='searchJikjongCd != null and !searchJikjongCd.equals("")'>
				               AND A.JIKJONG_CD = #{searchJikjongCd}
							 </if>
				             
					       ) X,
					       (
					        /*조직도-조직정보 인라인 뷰*/
                           SELECT T1.ORG_CD, T1.PRIOR_ORG_CD, T1.SEQ,
                                  T2.ORG_NM, T2.ORG_PATH_NM1, T2.PRIOR_ORG_PATH_NM1, T2.ORG_PATH_NM2, T2.PRIOR_ORG_PATH_NM2
                             FROM (
                                    SELECT A.ENTER_CD, A.ORG_CD, A.PRIOR_ORG_CD,
                                           ROWNUM AS SEQ,
                                           LEVEL AS LVL
                                      FROM TORG105 A
                                    START WITH (A.ENTER_CD, A.SDATE)
                                               =
                                               (
                                                SELECT ENTER_CD, MAX(SDATE) AS SDATE
                                                  FROM TORG103
                                                 WHERE ENTER_CD = #{ssnEnterCd}
                                                   AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SDATE AND NVL(EDATE,'99991231')
                                                GROUP BY ENTER_CD
                                               )
                                          <choose>
					                     <when test='searchOrgCd != null and !searchOrgCd.equals("")'>
							               AND #{searchOrgCd} = A.ORG_CD
										 </when>
							             <otherwise>
							               AND A.PRIOR_ORG_CD = '0'
										 </otherwise>
										  </choose>
                                    CONNECT BY PRIOR A.ENTER_CD = A.ENTER_CD
                                           AND PRIOR A.SDATE = A.SDATE
                                           AND PRIOR A.ORG_CD = A.PRIOR_ORG_CD
					                     <if test='searchOrgCd != null and !searchOrgCd.equals("")'>
					                       AND PRIOR 'Y' = #{searchPriorYn}
										 </if>
                                    ORDER SIBLINGS BY A.PRIOR_ORG_CD, A.SEQ
                                  ) T1,
                                  (
                                    SELECT A.ORG_CD, B.ORG_NM,
                                           CASE WHEN LEVEL = 1 THEN B.ORG_NM  
                                                ELSE SUBSTR(SYS_CONNECT_BY_PATH(B.ORG_NM,' / '),4) END AS ORG_PATH_NM1, 
                                           CASE WHEN LEVEL = 1 THEN B.ORG_NM  
                                                ELSE SUBSTR(SYS_CONNECT_BY_PATH(B.ORG_NM,' / '),4, INSTR(SYS_CONNECT_BY_PATH(B.ORG_NM,' / '),' / ', -1)-4) END AS PRIOR_ORG_PATH_NM1, 
                                           CASE WHEN LEVEL = 1 THEN NULL  
                                                ELSE SUBSTR(SYS_CONNECT_BY_PATH(B.ORG_NM,' / '),INSTR(SYS_CONNECT_BY_PATH(B.ORG_NM,' / '),' / ', 2)+3) END AS ORG_PATH_NM2, 
                                           CASE WHEN LEVEL = 1 THEN NULL  
                                                ELSE SUBSTR(SYS_CONNECT_BY_PATH(B.ORG_NM,' / '),
                                                            INSTR(SYS_CONNECT_BY_PATH(B.ORG_NM,' / '),' / ', 2)+3, 
                                                            INSTR(SUBSTR(SYS_CONNECT_BY_PATH(B.ORG_NM,' / '),INSTR(SYS_CONNECT_BY_PATH(B.ORG_NM,' / '),' / ', 2)+3),' / ', -1)-1
                                                           ) END AS PRIOR_ORG_PATH_NM2,
                                           ROWNUM AS SEQ,
                                           LEVEL AS LVL
                                      FROM TORG105 A, TORG101 B
                                     WHERE A.ENTER_CD = B.ENTER_CD
                                       AND A.ORG_CD = B.ORG_CD
                                       AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN B.SDATE AND NVL(B.EDATE,'99991231')
                                    START WITH (A.ENTER_CD, A.SDATE)
                                               =
                                               (
                                                SELECT ENTER_CD, MAX(SDATE) AS SDATE
                                                  FROM TORG103
                                                 WHERE ENTER_CD = #{ssnEnterCd}
                                                   AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SDATE AND NVL(EDATE,'99991231')
                                                GROUP BY ENTER_CD
                                               )		         
                                           AND A.PRIOR_ORG_CD = '0'
                                    CONNECT BY PRIOR A.ENTER_CD = A.ENTER_CD
                                           AND PRIOR A.SDATE = A.SDATE
                                           AND PRIOR A.ORG_CD = A.PRIOR_ORG_CD  
                                  ) T2
                            WHERE T1.ORG_CD = T2.ORG_CD(+)
					       ) Y
					 WHERE X.ORG_CD = Y.ORG_CD
					<if test='searchJikchakGubunCd != null and !searchJikchakGubunCd.equals("")'>
						AND X.JIKCHAK_GUBUN_CD = TRIM(#{searchJikchakGubunCd})
					</if>


		</select>

</mapper>