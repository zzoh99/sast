<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="sys.requirement.reqDefinitionPopMgr">

		<select parameterType="map" resultType="cMap" id="getReqDefinitionPopMgrEnterCdList">

				<![CDATA[
	 	       SELECT ENTER_CD AS CODE
	 	            , ENTER_NM AS CODE_NM
	 	       FROM TORG900 ]]>
			<if test='searchEnterCd != null and !searchEnterCd.equals("")'>
		       WHERE ENTER_CD = #{searchEnterCd}
			</if>
	 	       ORDER BY SEQ ASC


		</select>
		
		<select parameterType="map" resultType="cMap" id="getReqDefinitionPopMgrList">

				<![CDATA[
				SELECT	A.ENTER_CD			/*	회사구분코드(TORG900)		*/
					,	A.MAIN_MENU_CD		/*	메인메뉴코드(TSYS303)		*/	
					,	A.PRIOR_MENU_CD		/*	상위메뉴코드				*/	
					,	F_SYS_PRIOR_MENU_NM( A.ENTER_CD, A.MAIN_MENU_CD, A.PRIOR_MENU_CD, A.GRP_CD)	AS	PRIOR_MENU_NM
					,	A.MENU_CD			/*	메뉴코드				*/	
					,	A.MENU_SEQ			/*	메뉴SEQ				*/	
					,	A.GRP_CD			/*	그룹코드(TSYS307)		*/	
					,	A.SEQ_NO			/*	일련번호				*/	
					,	A.MENU_NM			/*	메뉴명					*/	
					,	A.PRG_CD			/*	프로그램ID				*/	
					,	A.REG_NAME			/*	등록자					*/	
					,	A.REG_YMD			/*	등록일					*/	
					,	A.REG_NOTE			/*	등록내용				*/	
					,	A.REG_SEC_CD		/*	등록구분(S99991)		*/
					,	F_COM_GET_GRCODE_NAME(A.ENTER_CD ,'S99991', A.REG_SEC_CD) AS REG_SEC_NM		/*	등록구분(S99991)		*/
					,	A.PRO_NAME			/*	처리자					*/
					,	A.PRO_YMD			/*	처리일					*/	
					,	A.PRO_NOTE			/*	처리내용				*/	
					,	A.PRO_SEC_CD		/*	처리상태(S99992)		*/
				    ,	F_COM_GET_GRCODE_NAME(A.ENTER_CD ,'S99992', A.PRO_SEC_CD) AS PRO_SEC_NM
					,	TO_CHAR( A.CHKDATE, 'YYYY-MM-DD hh:mi:ss' ) AS CHKDATE	/*	최종수정시간			*/
					,	A.CHKID				/*	최종수정자				*/
				    ,	A.FILE_SEQ
				 	,	CASE WHEN A.FILE_SEQ IS NULL THEN '<a class=basic>첨부</a>'
							 ELSE '<a class=basic>다운로드</a>' END AS BTN_FILE
					, REPLACE(REPLACE(ISU_BLOCK_ENCRYPT('{
							"url": "'||B.PRG_CD||'"
							,"dataPrgType":"'||B.DATA_PRG_TYPE||'"
							,"dataRwType":"'||B.DATA_RW_TYPE||'"
							,"cnt":"'||B.CNT||'"
							,"mainMenuCd":"'||B.MAIN_MENU_CD||'"
							,"priorMenuCd":"'||B.PRIOR_MENU_CD||'"
							,"type":"'||B.TYPE||'"
							,"menuCd":"'||B.MENU_CD||'"
							,"menuSeq":"'||B.MENU_SEQ||'"
							,"grpCd":"'||B.GRP_CD||'"
							,"prgCd":"'||B.PRG_CD||'"
							,"searchUseYn":"'||B.SEARCH_USE_YN||'"
							}', #{ssnEncodedKey}) ,CHR(13),''),CHR(10),'') AS SURL /*	sUrl			*/
				FROM	TSYS799	A, TSYS311 B
				WHERE	A.ENTER_CD = B.ENTER_CD
				AND		A.MAIN_MENU_CD = B.MAIN_MENU_CD
				AND		A.PRIOR_MENU_CD = B.PRIOR_MENU_CD
				AND		A.MENU_CD = B.MENU_CD
				AND		A.MENU_SEQ = B.MENU_SEQ
				AND		A.GRP_CD = B.GRP_CD ]]>
<if test='searchEnterCd != null and !searchEnterCd.equals("")'>
				AND		A.ENTER_CD		=	#{searchEnterCd}
</if>
<if test='searchMainMenuCd != null and !searchMainMenuCd.equals("")'>
				AND		A.MAIN_MENU_CD		=	#{searchMainMenuCd}
</if>
<if test='searchRegSecCd != null and !searchRegSecCd.equals("")'>
				AND		A.REG_SEC_CD		=	#{searchRegSecCd}
</if>
<if test='searchGrpCd != null and !searchGrpCd.equals("")'>
				AND		A.GRP_CD			=	#{searchGrpCd}
</if>
<if test='searchRegName != null and !searchRegName.equals("")'>
				AND		(A.REG_NAME		LIKE	'%' || #{searchRegName} || '%'
				          OR A.REG_SABUN LIKE	'%' || #{searchRegName} || '%')
</if>
<if test='searchMenuNm != null and !searchMenuNm.equals("")'>
				AND		A.MENU_NM		LIKE	'%' || #{searchMenuNm} || '%'
</if>
<if test='searchProName != null and !searchProName.equals("")'>
				AND		A.PRO_NAME		LIKE	'%' || #{searchProName} || '%'
</if>
<if test='multiProSecCd != null and !multiProSecCd.equals("")'>
				AND		NVL(A.PRO_SEC_CD,'empty')	IN
		<foreach collection="multiProSecCd" item="item" index="index" open="(" close=")" separator=",">
				#{item}
		</foreach>
</if>
				ORDER	BY
						A.GRP_CD	
					,	A.MAIN_MENU_CD
					,	A.PRIOR_MENU_CD
					,	A.MENU_CD
					,	A.SEQ_NO



		</select>

		<update parameterType="map" id="saveReqDefinitionPopMgr">


						MERGE INTO TSYS799	T
						USING	
						(
									SELECT	ENTER_CD
										,	TRIM(#{ssnSabun})					AS	CHKID
										,	SYSDATE							AS	CHKDATE
										,	MAIN_MENU_CD
										,	PRIOR_MENU_CD
										,	MENU_CD
										,	MENU_SEQ
										,	GRP_CD
										,	SEQ_NO
										,	MENU_NM
										,	PRG_CD
										,	REG_NAME
										,	REG_YMD
										,	REG_NOTE
										,	REG_SEC_CD
										,	PRO_NAME
										,	PRO_YMD
										,	PRO_NOTE
										,	PRO_SEC_CD
										,	FILE_SEQ
							FROM	(
									SELECT	NULL		AS	ENTER_CD
										,	NULL		AS	MAIN_MENU_CD
										,	NULL		AS	PRIOR_MENU_CD
										,	NULL		AS	MENU_CD
										,	NULL		AS	MENU_SEQ
										,	NULL		AS	GRP_CD
										,	NULL		AS	SEQ_NO
										,	NULL		AS	MENU_NM
										,	NULL		AS	PRG_CD
										,	NULL		AS	REG_NAME
										,	NULL		AS	REG_YMD
										,	NULL		AS	REG_NOTE
										,	NULL		AS	REG_SEC_CD
										,	NULL		AS	PRO_NAME
										,	NULL		AS	PRO_YMD
										,	NULL		AS	PRO_NOTE
										,	NULL		AS	PRO_SEC_CD
										,	NULL		AS	FILE_SEQ
									FROM	DUAL
<foreach item="rm" collection="mergeRows" index="index">
								UNION ALL
									SELECT	TRIM(#{rm.enterCd})				AS	ENTER_CD
										,	TRIM(#{rm.mainMenuCd})			AS	MAIN_MENU_CD
										,	TRIM(#{rm.priorMenuCd})			AS	PRIOR_MENU_CD
										,	TRIM(#{rm.menuCd})				AS	MENU_CD
										,	TRIM(#{rm.menuSeq})				AS	MENU_SEQ
										,	TRIM(#{rm.grpCd})				AS	GRP_CD
											<choose><when test='rm.seqNo != null and !rm.seqNo.equals("")'>
										,	TRIM(#{rm.seqNo})				AS	SEQ_NO
											</when><otherwise>
										,	TO_CHAR( (SELECT (NVL(MAX(TO_NUMBER(SEQ_NO)),0) + (${index} + 1)) FROM TSYS799) )	AS SEQ_NO
											</otherwise>
											</choose>
										,	TRIM(#{rm.menuNm})				AS	MENU_NM
										,	TRIM(#{rm.prgCd})				AS	PRG_CD
										,	TRIM(#{rm.regName})				AS	REG_NAME
										,	TRIM(#{rm.regYmd})				AS	REG_YMD
										,	TRIM(#{rm.regNote})				AS	REG_NOTE
										,	TRIM(#{rm.regSecCd})			AS	REG_SEC_CD
										,	TRIM(#{rm.proName})				AS	PRO_NAME
										,	TRIM(#{rm.proYmd})				AS	PRO_YMD
										,	TRIM(#{rm.proNote})				AS	PRO_NOTE
										,	TRIM(#{rm.proSecCd})			AS	PRO_SEC_CD
										,	TRIM(#{rm.fileSeq})				AS	FILE_SEQ
									FROM	DUAL
</foreach>
									)	WHERE	ENTER_CD	IS NOT NULL	
										AND	MAIN_MENU_CD IS NOT NULL
										AND	PRIOR_MENU_CD IS NOT NULL
										AND	MENU_CD IS NOT NULL
										AND	MENU_SEQ IS NOT NULL
										AND	GRP_CD IS NOT NULL
										AND	SEQ_NO IS NOT NULL
						) S
					ON	(
								T.ENTER_CD				=		S.ENTER_CD
							AND	T.MAIN_MENU_CD			=		S.MAIN_MENU_CD
							AND	T.PRIOR_MENU_CD			=		S.PRIOR_MENU_CD
							AND	T.MENU_CD				=		S.MENU_CD
							AND	T.MENU_SEQ				=		S.MENU_SEQ
							AND	T.GRP_CD				=		S.GRP_CD
							AND	T.SEQ_NO				=		S.SEQ_NO
						)
					WHEN MATCHED THEN 
					UPDATE SET	
							T.MENU_NM			=	S.MENU_NM
						,	T.PRG_CD			=	S.PRG_CD
						,	T.REG_NAME			=	S.REG_NAME
						,	T.REG_YMD			=	S.REG_YMD
						,	T.REG_NOTE			=	S.REG_NOTE
						,	T.REG_SEC_CD		=	S.REG_SEC_CD
						,	T.PRO_NAME			=	S.PRO_NAME
						,	T.PRO_YMD			=	S.PRO_YMD
						,	T.PRO_NOTE			=	S.PRO_NOTE
						,	T.PRO_SEC_CD		=	S.PRO_SEC_CD
						,	T.FILE_SEQ			=	S.FILE_SEQ
						,	T.CHKDATE			=	S.CHKDATE
						,	T.CHKID				=	S.CHKID
					WHEN NOT MATCHED THEN
					INSERT
					( 
							T.ENTER_CD
						,	T.MAIN_MENU_CD
						,	T.PRIOR_MENU_CD
						,	T.MENU_CD
						,	T.MENU_SEQ
						,	T.GRP_CD
						,	T.SEQ_NO
						,	T.MENU_NM
						,	T.PRG_CD
						,	T.REG_NAME
						,	T.REG_YMD
						,	T.REG_NOTE
						,	T.REG_SEC_CD
						,	T.PRO_NAME
						,	T.PRO_YMD
						,	T.PRO_NOTE
						,	T.PRO_SEC_CD
						,	T.FILE_SEQ
						,	T.CHKDATE
						,	T.CHKID
					)
					VALUES
					(
							S.ENTER_CD
						,	S.MAIN_MENU_CD
						,	S.PRIOR_MENU_CD
						,	S.MENU_CD
						,	S.MENU_SEQ
						,	S.GRP_CD
						,	S.SEQ_NO
						,	S.MENU_NM
						,	S.PRG_CD
						,	S.REG_NAME
						,	S.REG_YMD
						,	S.REG_NOTE
						,	S.REG_SEC_CD
						,	S.PRO_NAME
						,	S.PRO_YMD
						,	S.PRO_NOTE
						,	S.PRO_SEC_CD
						,	S.FILE_SEQ
						,	S.CHKDATE
						,	S.CHKID
					)
		</update>

		<delete parameterType="map" id="deleteReqDefinitionPopMgr">


					DELETE	FROM TSYS799
					WHERE	(ENTER_CD, MAIN_MENU_CD, PRIOR_MENU_CD, MENU_CD, MENU_SEQ, GRP_CD, SEQ_NO) IN ((NULL, NULL, NULL, NULL, NULL, NULL, NULL)
<foreach item="rm" collection="deleteRows" >
						,
										<if test='rm.enterCd != null and !rm.enterCd.equals("")'>
										<if test='rm.mainMenuCd != null and !rm.mainMenuCd.equals("")'>
										<if test='rm.priorMenuCd != null and !rm.priorMenuCd.equals("")'>
										<if test='rm.menuCd != null and !rm.menuCd.equals("")'>
										<if test='rm.menuSeq != null and !rm.menuSeq.equals("")'>
										<if test='rm.grpCd != null and !rm.grpCd.equals("")'>
										<if test='rm.seqNo != null and !rm.seqNo.equals("")'>
												( TRIM( #{rm.enterCd} ) , TRIM( #{rm.mainMenuCd} ) , TRIM( #{rm.priorMenuCd} ) , TRIM( #{rm.menuCd} ) , TRIM( #{rm.menuSeq} ) , TRIM( #{rm.grpCd} ) , TRIM( #{rm.seqNo} ) )
										</if>
										</if>
										</if>
										</if>
										</if>
										</if>
										</if>
</foreach>

										)
		</delete>

</mapper>