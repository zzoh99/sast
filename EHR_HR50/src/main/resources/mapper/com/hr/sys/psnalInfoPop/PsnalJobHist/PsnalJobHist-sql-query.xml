<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="sys.psnalInfoPop.psnalJobHist">

		<!-- 인사기본(직무이력) 조회 -->
		<select parameterType="map" resultType="cMap" id="getPsnalJobHistList">


					SELECT A.ENTER_CD
					     , A.SABUN
					     , A.JOB_CD
					     , A.TASK_CD
					     , A.SDATE
					     , A.EDATE
					     , A.TITLE_YN
					     , A.MEMO
					     , A.JOB_M_TYPE
					     , A.JOB_D_TYPE
					  FROM THRM190 A 
					 WHERE A.ENTER_CD = NVL(#{searchUserEnterCd}, #{ssnEnterCd})
				     <if test='searchSdate != null and !searchSdate.equals("")'>
				       AND A.SDATE BETWEEN REPLACE(TRIM(#{searchSdate}),'-','') AND REPLACE(TRIM(NVL(#{searchEdate},'99991231')),'-','')
				     </if>
				     <if test='hdnSabun != null and !hdnSabun.equals("")'>
				       AND A.SABUN = #{hdnSabun}
				     </if>
				     ORDER BY A.SDATE DESC



		</select>
		
		<!-- 인사기본(직무이력) 저장 -->
		<update parameterType="map" id="savePsnalJobHist">


					 MERGE INTO THRM190 T 
					 USING 
			            ( 	
				        <bind name="icnt" value="1" />
				        <foreach item="rm" collection="mergeRows" separator=" UNION ALL " >
			               SELECT TRIM(#{ssnEnterCd}) AS ENTER_CD
					            , TRIM(#{ssnSabun}) AS SABUN
					            , TRIM(#{rm.jobCd}) AS JOB_CD
					            , TRIM(#{rm.taskCd}) AS TASK_CD
					            , TRIM(#{rm.sdate}) AS SDATE
					            , TRIM(#{rm.edate}) AS EDATE
					            , TRIM(#{rm.titleYn}) AS TITLE_YN
					            , TRIM(#{rm.memo}) AS MEMO
					            , TRIM(#{rm.jobMType}) AS JOB_M_TYPE
					            , TRIM(#{rm.jobDType}) AS JOB_D_TYPE
					        FROM DUAL
						</foreach>
					) S 
					ON ( 
					          T.ENTER_CD = S.ENTER_CD 
					     AND  T.SABUN = S.SABUN 
					     AND  T.JOB_CD = S.JOB_CD 
					     AND  T.TASK_CD = S.TASK_CD 
					     AND  T.SDATE = S.SDATE 
					) 
					WHEN MATCHED THEN 
					   UPDATE SET T.CHKDATE	= sysdate 
					            , T.CHKID	    = #{ssnSabun}
					            , T.EDATE = S.EDATE 
					            , T.TITLE_YN = S.TITLE_YN 
					            , T.MEMO = S.MEMO 
					            , T.JOB_M_TYPE = S.JOB_M_TYPE 
					            , T.JOB_D_TYPE = S.JOB_D_TYPE 
					WHEN NOT MATCHED THEN 
					   INSERT 
					   ( 
					              T.ENTER_CD
					            , T.SABUN
					            , T.JOB_CD
					            , T.TASK_CD
					            , T.SDATE
					            , T.EDATE
					            , T.TITLE_YN
					            , T.MEMO
					            , T.JOB_M_TYPE
					            , T.JOB_D_TYPE
					            , T.CHKDATE
					            , T.CHKID
					   ) 
					   VALUES 
					   ( 
					              S.ENTER_CD
					            , S.SABUN
					            , S.JOB_CD
					            , S.TASK_CD
					            , S.SDATE
					            , S.EDATE
					            , S.TITLE_YN
					            , S.MEMO
					            , S.JOB_M_TYPE
					            , S.JOB_D_TYPE
					            , sysdate
					            , #{ssnSabun}
					   ) 
		</update>
		
		<!-- 인사기본(직무이력) 삭제 -->
		<delete parameterType="map" id="deletePsnalJobHist">


					DELETE FROM THRM190
					 WHERE ENTER_CD = TRIM(#{ssnEnterCd})
					   AND ( SABUN,JOB_CD,TASK_CD,SDATE ) IN ( ( NULL,NULL,NULL,NULL) 
			<foreach item="rm" collection="deleteRows" >
			    <if test="  rm.jobCd != null and !rm.jobCd.equals('') and rm.taskCd != null and !rm.taskCd.equals('') and rm.sdate != null and !rm.sdate.equals('') ">
					     , ( TRIM( #{ssnSabun} ),TRIM( #{rm.jobCd} ),TRIM( #{rm.taskCd} ),TRIM( #{rm.sdate} ) )
				</if>
			</foreach>
					       )
		</delete>


</mapper>